{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.8 (2024-08-29)\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2024 Paweł Dalek\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/vwap', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/VWAP/VWAPIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Paweł Dalek\n         *\n         *  Volume Weighted Average Price (VWAP) indicator for Highcharts Stock\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var error = U.error, isArray = U.isArray, merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Volume Weighted Average Price (VWAP) series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.vwap\n         *\n         * @augments Highcharts.Series\n         */\n        var VWAPIndicator = /** @class */ (function (_super) {\n            __extends(VWAPIndicator, _super);\n            function VWAPIndicator() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            VWAPIndicator.prototype.getValues = function (series, params) {\n                var indicator = this, chart = series.chart, xValues = series.xData, yValues = series.yData, period = params.period;\n                var isOHLC = true, volumeSeries;\n                // Checks if volume series exists\n                if (!(volumeSeries = (chart.get(params.volumeSeriesID)))) {\n                    error('Series ' +\n                        params.volumeSeriesID +\n                        ' not found! Check `volumeSeriesID`.', true, chart);\n                    return;\n                }\n                // Checks if series data fits the OHLC format\n                if (!(isArray(yValues[0]))) {\n                    isOHLC = false;\n                }\n                return indicator.calculateVWAPValues(isOHLC, xValues, yValues, volumeSeries, period);\n            };\n            /**\n             * Main algorithm used to calculate Volume Weighted Average Price (VWAP)\n             * values\n             *\n             * @private\n             *\n             * @param {boolean} isOHLC\n             * Says if data has OHLC format\n             *\n             * @param {Array<number>} xValues\n             * Array of timestamps\n             *\n             * @param {Array<number|Array<number,number,number,number>>} yValues\n             * Array of yValues, can be an array of a four arrays (OHLC) or array of\n             * values (line)\n             *\n             * @param {Array<*>} volumeSeries\n             * Volume series\n             *\n             * @param {number} period\n             * Number of points to be calculated\n             *\n             * @return {Object}\n             * Object contains computed VWAP\n             **/\n            VWAPIndicator.prototype.calculateVWAPValues = function (isOHLC, xValues, yValues, volumeSeries, period) {\n                var volumeValues = volumeSeries.yData, volumeLength = volumeSeries.xData.length, pointsLength = xValues.length, cumulativePrice = [], cumulativeVolume = [], xData = [], yData = [], VWAP = [];\n                var commonLength, typicalPrice, cPrice, cVolume, i, j;\n                if (pointsLength <= volumeLength) {\n                    commonLength = pointsLength;\n                }\n                else {\n                    commonLength = volumeLength;\n                }\n                for (i = 0, j = 0; i < commonLength; i++) {\n                    // Depending on whether series is OHLC or line type, price is\n                    // average of the high, low and close or a simple value\n                    typicalPrice = isOHLC ?\n                        ((yValues[i][1] + yValues[i][2] +\n                            yValues[i][3]) / 3) :\n                        yValues[i];\n                    typicalPrice *= volumeValues[i];\n                    cPrice = j ?\n                        (cumulativePrice[i - 1] + typicalPrice) :\n                        typicalPrice;\n                    cVolume = j ?\n                        (cumulativeVolume[i - 1] + volumeValues[i]) :\n                        volumeValues[i];\n                    cumulativePrice.push(cPrice);\n                    cumulativeVolume.push(cVolume);\n                    VWAP.push([xValues[i], (cPrice / cVolume)]);\n                    xData.push(VWAP[i][0]);\n                    yData.push(VWAP[i][1]);\n                    j++;\n                    if (j === period) {\n                        j = 0;\n                    }\n                }\n                return {\n                    values: VWAP,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Volume Weighted Average Price indicator.\n             *\n             * This series requires `linkedTo` option to be set.\n             *\n             * @sample stock/indicators/vwap\n             *         Volume Weighted Average Price indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/vwap\n             * @optionparent plotOptions.vwap\n             */\n            VWAPIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0, // Unchangeable index, do not inherit (#15362)\n                    period: 30,\n                    /**\n                     * The id of volume series which is mandatory. For example using\n                     * OHLC data, volumeSeriesID='volume' means the indicator will be\n                     * calculated using OHLC and volume values.\n                     */\n                    volumeSeriesID: 'volume'\n                }\n            });\n            return VWAPIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('vwap', VWAPIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `Volume Weighted Average Price (VWAP)` series. If the\n         * [type](#series.vwap.type) option is not specified, it is inherited from\n         * [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.vwap\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/vwap\n         * @apioption series.vwap\n         */\n        ''; // To include the above in the js output\n\n        return VWAPIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/vwap.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","SeriesRegistry","U","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","call","TypeError","String","__","constructor","create","SMAIndicator","seriesTypes","sma","error","isArray","merge","VWAPIndicator","_super","arguments","getValues","series","params","volumeSeries","chart","xValues","xData","yValues","yData","period","isOHLC","get","volumeSeriesID","indicator","calculateVWAPValues","commonLength","typicalPrice","cPrice","cVolume","i","j","volumeValues","volumeLength","length","pointsLength","cumulativePrice","cumulativeVolume","VWAP","push","values","defaultOptions","index","registerSeriesType"],"mappings":"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"}