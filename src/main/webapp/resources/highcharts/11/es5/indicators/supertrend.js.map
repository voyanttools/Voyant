{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.8 (2024-08-29)\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2024 Wojciech Chmiel\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/supertrend', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/Supertrend/SupertrendIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var _a = SeriesRegistry.seriesTypes, ATRIndicator = _a.atr, SMAIndicator = _a.sma;\n        var addEvent = U.addEvent, correctFloat = U.correctFloat, isArray = U.isArray, extend = U.extend, merge = U.merge, objectEach = U.objectEach;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils:\n        /**\n         * @private\n         */\n        function createPointObj(mainSeries, index, close) {\n            return {\n                index: index,\n                close: mainSeries.yData[index][close],\n                x: mainSeries.xData[index]\n            };\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Supertrend series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.supertrend\n         *\n         * @augments Highcharts.Series\n         */\n        var SupertrendIndicator = /** @class */ (function (_super) {\n            __extends(SupertrendIndicator, _super);\n            function SupertrendIndicator() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            SupertrendIndicator.prototype.init = function () {\n                var indicator = this;\n                _super.prototype.init.apply(indicator, arguments);\n                // Only after series are linked add some additional logic/properties.\n                var unbinder = addEvent(this.chart.constructor, 'afterLinkSeries', function () {\n                    // Protection for a case where the indicator is being updated,\n                    // for a brief moment the indicator is deleted.\n                    if (indicator.options) {\n                        var options = indicator.options, parentOptions = indicator.linkedParent.options;\n                        // Indicator cropThreshold has to be equal linked series one\n                        // reduced by period due to points comparison in drawGraph\n                        // (#9787)\n                        options.cropThreshold = (parentOptions.cropThreshold -\n                            (options.params.period - 1));\n                    }\n                    unbinder();\n                }, {\n                    order: 1\n                });\n            };\n            SupertrendIndicator.prototype.drawGraph = function () {\n                var indicator = this, indicOptions = indicator.options, \n                // Series that indicator is linked to\n                mainSeries = indicator.linkedParent, mainLinePoints = (mainSeries ? mainSeries.points : []), indicPoints = indicator.points, indicPath = indicator.graph, \n                // Points offset between lines\n                tempOffset = mainLinePoints.length - indicPoints.length, offset = tempOffset > 0 ? tempOffset : 0, \n                // @todo: fix when ichi-moku indicator is merged to master.\n                gappedExtend = {\n                    options: {\n                        gapSize: indicOptions.gapSize\n                    }\n                }, \n                // Sorted supertrend points array\n                groupedPoints = {\n                    top: [], // Rising trend line points\n                    bottom: [], // Falling trend line points\n                    intersect: [] // Change trend line points\n                }, \n                // Options for trend lines\n                supertrendLineOptions = {\n                    top: {\n                        styles: {\n                            lineWidth: indicOptions.lineWidth,\n                            lineColor: (indicOptions.fallingTrendColor ||\n                                indicOptions.color),\n                            dashStyle: indicOptions.dashStyle\n                        }\n                    },\n                    bottom: {\n                        styles: {\n                            lineWidth: indicOptions.lineWidth,\n                            lineColor: (indicOptions.risingTrendColor ||\n                                indicOptions.color),\n                            dashStyle: indicOptions.dashStyle\n                        }\n                    },\n                    intersect: indicOptions.changeTrendLine\n                }, close = 3;\n                var // Supertrend line point\n                point, \n                // Supertrend line next point (has smaller x pos than point)\n                nextPoint, \n                // Main series points\n                mainPoint, nextMainPoint, \n                // Used when supertrend and main points are shifted\n                // relative to each other\n                prevMainPoint, prevPrevMainPoint, \n                // Used when particular point color is set\n                pointColor, \n                // Temporary points that fill groupedPoints array\n                newPoint, newNextPoint, indicPointsLen = indicPoints.length;\n                // Loop which sort supertrend points\n                while (indicPointsLen--) {\n                    point = indicPoints[indicPointsLen];\n                    nextPoint = indicPoints[indicPointsLen - 1];\n                    mainPoint = mainLinePoints[indicPointsLen - 1 + offset];\n                    nextMainPoint = mainLinePoints[indicPointsLen - 2 + offset];\n                    prevMainPoint = mainLinePoints[indicPointsLen + offset];\n                    prevPrevMainPoint = mainLinePoints[indicPointsLen + offset + 1];\n                    pointColor = point.options.color;\n                    newPoint = {\n                        x: point.x,\n                        plotX: point.plotX,\n                        plotY: point.plotY,\n                        isNull: false\n                    };\n                    // When mainPoint is the last one (left plot area edge)\n                    // but supertrend has additional one\n                    if (!nextMainPoint &&\n                        mainPoint && mainSeries.yData[mainPoint.index - 1]) {\n                        nextMainPoint = createPointObj(mainSeries, mainPoint.index - 1, close);\n                    }\n                    // When prevMainPoint is the last one (right plot area edge)\n                    // but supertrend has additional one (and points are shifted)\n                    if (!prevPrevMainPoint &&\n                        prevMainPoint && mainSeries.yData[prevMainPoint.index + 1]) {\n                        prevPrevMainPoint = createPointObj(mainSeries, prevMainPoint.index + 1, close);\n                    }\n                    // When points are shifted (right or left plot area edge)\n                    if (!mainPoint &&\n                        nextMainPoint && mainSeries.yData[nextMainPoint.index + 1]) {\n                        mainPoint = createPointObj(mainSeries, nextMainPoint.index + 1, close);\n                    }\n                    else if (!mainPoint &&\n                        prevMainPoint && mainSeries.yData[prevMainPoint.index - 1]) {\n                        mainPoint = createPointObj(mainSeries, prevMainPoint.index - 1, close);\n                    }\n                    // Check if points are shifted relative to each other\n                    if (point &&\n                        mainPoint &&\n                        prevMainPoint &&\n                        nextMainPoint &&\n                        point.x !== mainPoint.x) {\n                        if (point.x === prevMainPoint.x) {\n                            nextMainPoint = mainPoint;\n                            mainPoint = prevMainPoint;\n                        }\n                        else if (point.x === nextMainPoint.x) {\n                            mainPoint = nextMainPoint;\n                            nextMainPoint = {\n                                close: mainSeries.yData[mainPoint.index - 1][close],\n                                x: mainSeries.xData[mainPoint.index - 1]\n                            };\n                        }\n                        else if (prevPrevMainPoint && point.x === prevPrevMainPoint.x) {\n                            mainPoint = prevPrevMainPoint;\n                            nextMainPoint = prevMainPoint;\n                        }\n                    }\n                    if (nextPoint && nextMainPoint && mainPoint) {\n                        newNextPoint = {\n                            x: nextPoint.x,\n                            plotX: nextPoint.plotX,\n                            plotY: nextPoint.plotY,\n                            isNull: false\n                        };\n                        if (point.y >= mainPoint.close &&\n                            nextPoint.y >= nextMainPoint.close) {\n                            point.color = (pointColor || indicOptions.fallingTrendColor ||\n                                indicOptions.color);\n                            groupedPoints.top.push(newPoint);\n                        }\n                        else if (point.y < mainPoint.close &&\n                            nextPoint.y < nextMainPoint.close) {\n                            point.color = (pointColor || indicOptions.risingTrendColor ||\n                                indicOptions.color);\n                            groupedPoints.bottom.push(newPoint);\n                        }\n                        else {\n                            groupedPoints.intersect.push(newPoint);\n                            groupedPoints.intersect.push(newNextPoint);\n                            // Additional null point to make a gap in line\n                            groupedPoints.intersect.push(merge(newNextPoint, {\n                                isNull: true\n                            }));\n                            if (point.y >= mainPoint.close &&\n                                nextPoint.y < nextMainPoint.close) {\n                                point.color = (pointColor || indicOptions.fallingTrendColor ||\n                                    indicOptions.color);\n                                nextPoint.color = (pointColor || indicOptions.risingTrendColor ||\n                                    indicOptions.color);\n                                groupedPoints.top.push(newPoint);\n                                groupedPoints.top.push(merge(newNextPoint, {\n                                    isNull: true\n                                }));\n                            }\n                            else if (point.y < mainPoint.close &&\n                                nextPoint.y >= nextMainPoint.close) {\n                                point.color = (pointColor || indicOptions.risingTrendColor ||\n                                    indicOptions.color);\n                                nextPoint.color = (pointColor || indicOptions.fallingTrendColor ||\n                                    indicOptions.color);\n                                groupedPoints.bottom.push(newPoint);\n                                groupedPoints.bottom.push(merge(newNextPoint, {\n                                    isNull: true\n                                }));\n                            }\n                        }\n                    }\n                    else if (mainPoint) {\n                        if (point.y >= mainPoint.close) {\n                            point.color = (pointColor || indicOptions.fallingTrendColor ||\n                                indicOptions.color);\n                            groupedPoints.top.push(newPoint);\n                        }\n                        else {\n                            point.color = (pointColor || indicOptions.risingTrendColor ||\n                                indicOptions.color);\n                            groupedPoints.bottom.push(newPoint);\n                        }\n                    }\n                }\n                // Generate lines:\n                objectEach(groupedPoints, function (values, lineName) {\n                    indicator.points = values;\n                    indicator.options = merge(supertrendLineOptions[lineName].styles, gappedExtend);\n                    indicator.graph = indicator['graph' + lineName + 'Line'];\n                    SMAIndicator.prototype.drawGraph.call(indicator);\n                    // Now save line\n                    indicator['graph' + lineName + 'Line'] = indicator.graph;\n                });\n                // Restore options:\n                indicator.points = indicPoints;\n                indicator.options = indicOptions;\n                indicator.graph = indicPath;\n            };\n            // Supertrend (Multiplier, Period) Formula:\n            // BASIC UPPERBAND = (HIGH + LOW) / 2 + Multiplier * ATR(Period)\n            // BASIC LOWERBAND = (HIGH + LOW) / 2 - Multiplier * ATR(Period)\n            // FINAL UPPERBAND =\n            //     IF(\n            //      Current BASICUPPERBAND  < Previous FINAL UPPERBAND AND\n            //      Previous Close > Previous FINAL UPPERBAND\n            //     ) THEN (Current BASIC UPPERBAND)\n            //     ELSE (Previous FINALUPPERBAND)\n            // FINAL LOWERBAND =\n            //     IF(\n            //      Current BASIC LOWERBAND  > Previous FINAL LOWERBAND AND\n            //      Previous Close < Previous FINAL LOWERBAND\n            //     ) THEN (Current BASIC LOWERBAND)\n            //     ELSE (Previous FINAL LOWERBAND)\n            // SUPERTREND =\n            //     IF(\n            //      Previous Supertrend == Previous FINAL UPPERBAND AND\n            //      Current Close < Current FINAL UPPERBAND\n            //     ) THAN Current FINAL UPPERBAND\n            //     ELSE IF(\n            //      Previous Supertrend == Previous FINAL LOWERBAND AND\n            //      Current Close < Current FINAL LOWERBAND\n            //     ) THAN Current FINAL UPPERBAND\n            //     ELSE IF(\n            //      Previous Supertrend == Previous FINAL UPPERBAND AND\n            //      Current Close > Current FINAL UPPERBAND\n            //     ) THAN Current FINAL LOWERBAND\n            //     ELSE IF(\n            //      Previous Supertrend == Previous FINAL LOWERBAND AND\n            //      Current Close > Current FINAL LOWERBAND\n            //     ) THAN Current FINAL LOWERBAND\n            SupertrendIndicator.prototype.getValues = function (series, params) {\n                var period = params.period, multiplier = params.multiplier, xVal = series.xData, yVal = series.yData, \n                // 0- date, 1- Supertrend indicator\n                st = [], xData = [], yData = [], close = 3, low = 2, high = 1, periodsOffset = (period === 0) ? 0 : period - 1, finalUp = [], finalDown = [];\n                var atrData = [], basicUp, basicDown, supertrend, prevFinalUp, prevFinalDown, prevST, // Previous Supertrend\n                prevY, y, i;\n                if ((xVal.length <= period) || !isArray(yVal[0]) ||\n                    yVal[0].length !== 4 || period < 0) {\n                    return;\n                }\n                atrData = ATRIndicator.prototype.getValues.call(this, series, {\n                    period: period\n                }).yData;\n                for (i = 0; i < atrData.length; i++) {\n                    y = yVal[periodsOffset + i];\n                    prevY = yVal[periodsOffset + i - 1] || [];\n                    prevFinalUp = finalUp[i - 1];\n                    prevFinalDown = finalDown[i - 1];\n                    prevST = yData[i - 1];\n                    if (i === 0) {\n                        prevFinalUp = prevFinalDown = prevST = 0;\n                    }\n                    basicUp = correctFloat((y[high] + y[low]) / 2 + multiplier * atrData[i]);\n                    basicDown = correctFloat((y[high] + y[low]) / 2 - multiplier * atrData[i]);\n                    if ((basicUp < prevFinalUp) ||\n                        (prevY[close] > prevFinalUp)) {\n                        finalUp[i] = basicUp;\n                    }\n                    else {\n                        finalUp[i] = prevFinalUp;\n                    }\n                    if ((basicDown > prevFinalDown) ||\n                        (prevY[close] < prevFinalDown)) {\n                        finalDown[i] = basicDown;\n                    }\n                    else {\n                        finalDown[i] = prevFinalDown;\n                    }\n                    if (prevST === prevFinalUp && y[close] < finalUp[i] ||\n                        prevST === prevFinalDown && y[close] < finalDown[i]) {\n                        supertrend = finalUp[i];\n                    }\n                    else if (prevST === prevFinalUp && y[close] > finalUp[i] ||\n                        prevST === prevFinalDown && y[close] > finalDown[i]) {\n                        supertrend = finalDown[i];\n                    }\n                    st.push([xVal[periodsOffset + i], supertrend]);\n                    xData.push(xVal[periodsOffset + i]);\n                    yData.push(supertrend);\n                }\n                return {\n                    values: st,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Supertrend indicator. This series requires the `linkedTo` option to be\n             * set and should be loaded after the `stock/indicators/indicators.js` and\n             * `stock/indicators/sma.js`.\n             *\n             * @sample {highstock} stock/indicators/supertrend\n             *         Supertrend indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, cropThreshold, negativeColor, colorAxis, joinBy,\n             *               keys, navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking, threshold\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/supertrend\n             * @optionparent plotOptions.supertrend\n             */\n            SupertrendIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Parameters used in calculation of Supertrend indicator series points.\n                 *\n                 * @excluding index\n                 */\n                params: {\n                    index: void 0, // Unchangeable index, do not inherit (#15362)\n                    /**\n                     * Multiplier for Supertrend Indicator.\n                     */\n                    multiplier: 3,\n                    /**\n                     * The base period for indicator Supertrend Indicator calculations.\n                     * This is the number of data points which are taken into account\n                     * for the indicator calculations.\n                     */\n                    period: 10\n                },\n                /**\n                 * Color of the Supertrend series line that is beneath the main series.\n                 *\n                 * @sample {highstock} stock/indicators/supertrend/\n                 *         Example with risingTrendColor\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                risingTrendColor: \"#06b535\" /* Palette.positiveColor */,\n                /**\n                 * Color of the Supertrend series line that is above the main series.\n                 *\n                 * @sample {highstock} stock/indicators/supertrend/\n                 *         Example with fallingTrendColor\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                fallingTrendColor: \"#f21313\" /* Palette.negativeColor */,\n                /**\n                 * The styles for the Supertrend line that intersect main series.\n                 *\n                 * @sample {highstock} stock/indicators/supertrend/\n                 *         Example with changeTrendLine\n                 */\n                changeTrendLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1,\n                        /**\n                         * Color of the line.\n                         *\n                         * @type {Highcharts.ColorString}\n                         */\n                        lineColor: \"#333333\" /* Palette.neutralColor80 */,\n                        /**\n                         * The dash or dot style of the grid lines. For possible\n                         * values, see\n                         * [this demonstration](https://jsfiddle.net/gh/get/library/pure/highcharts/highcharts/tree/master/samples/highcharts/plotoptions/series-dashstyle-all/).\n                         *\n                         * @sample {highcharts} highcharts/yaxis/gridlinedashstyle/\n                         *         Long dashes\n                         * @sample {highstock} stock/xaxis/gridlinedashstyle/\n                         *         Long dashes\n                         *\n                         * @type  {Highcharts.DashStyleValue}\n                         * @since 7.0.0\n                         */\n                        dashStyle: 'LongDash'\n                    }\n                }\n            });\n            return SupertrendIndicator;\n        }(SMAIndicator));\n        extend(SupertrendIndicator.prototype, {\n            nameBase: 'Supertrend',\n            nameComponents: ['multiplier', 'period']\n        });\n        SeriesRegistry.registerSeriesType('supertrend', SupertrendIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `Supertrend indicator` series. If the [type](#series.supertrend.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.supertrend\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, cropThreshold, data, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, negativeColor, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *            showInNavigator, stacking, threshold\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/supertrend\n         * @apioption series.supertrend\n         */\n        ''; // To include the above in the js output\n\n        return SupertrendIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/supertrend.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","SeriesRegistry","U","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","call","TypeError","String","__","constructor","create","_a","seriesTypes","ATRIndicator","atr","SMAIndicator","sma","addEvent","correctFloat","isArray","extend","merge","objectEach","createPointObj","mainSeries","index","close","yData","x","xData","SupertrendIndicator","_super","arguments","init","indicator","unbinder","chart","options","parentOptions","linkedParent","cropThreshold","params","period","order","drawGraph","point","nextPoint","mainPoint","nextMainPoint","prevMainPoint","prevPrevMainPoint","pointColor","newPoint","newNextPoint","indicOptions","mainLinePoints","points","indicPoints","indicPath","graph","tempOffset","length","offset","gappedExtend","gapSize","groupedPoints","top","bottom","intersect","supertrendLineOptions","styles","lineWidth","lineColor","fallingTrendColor","color","dashStyle","risingTrendColor","changeTrendLine","indicPointsLen","plotX","plotY","isNull","y","push","values","lineName","getValues","series","basicUp","basicDown","supertrend","prevFinalUp","prevFinalDown","prevST","prevY","i","multiplier","xVal","yVal","st","periodsOffset","finalUp","finalDown","atrData","defaultOptions","nameBase","nameComponents","registerSeriesType"],"mappings":"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"}