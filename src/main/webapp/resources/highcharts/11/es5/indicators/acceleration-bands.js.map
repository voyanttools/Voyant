{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.8 (2024-08-29)\n *\n * Indicator series type for Highcharts Stock\n *\n * (c) 2010-2024 Daniel Studencki\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/acceleration-bands', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/MultipleLinesComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /**\n         *\n         *  (c) 2010-2024 Wojciech Chmiel\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var smaProto = SeriesRegistry.seriesTypes.sma.prototype;\n        var defined = U.defined, error = U.error, merge = U.merge;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var MultipleLinesComposition;\n        (function (MultipleLinesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Additional lines DOCS names. Elements of linesApiNames array should\n             * be consistent with DOCS line names defined in your implementation.\n             * Notice that linesApiNames should have decreased amount of elements\n             * relative to pointArrayMap (without pointValKey).\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            var linesApiNames = ['bottomLine'];\n            /**\n             * Lines ids. Required to plot appropriate amount of lines.\n             * Notice that pointArrayMap should have more elements than\n             * linesApiNames, because it contains main line and additional lines ids.\n             * Also it should be consistent with amount of lines calculated in\n             * getValues method from your implementation.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            var pointArrayMap = ['top', 'bottom'];\n            /**\n             * Names of the lines, between which the area should be plotted.\n             * If the drawing of the area should\n             * be disabled for some indicators, leave this option as an empty array.\n             * Names should be the same as the names in the pointArrayMap.\n             *\n             * @private\n             * @type {Array<string>}\n             */\n            var areaLinesNames = ['top'];\n            /**\n             * Main line id.\n             *\n             * @private\n             * @type {string}\n             */\n            var pointValKey = 'top';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Composition useful for all indicators that have more than one line.\n             * Compose it with your implementation where you will provide the\n             * `getValues` method appropriate to your indicator and `pointArrayMap`,\n             * `pointValKey`, `linesApiNames` properties. Notice that `pointArrayMap`\n             * should be consistent with the amount of lines calculated in the\n             * `getValues` method.\n             *\n             * @private\n             */\n            function compose(IndicatorClass) {\n                var proto = IndicatorClass.prototype;\n                proto.linesApiNames = (proto.linesApiNames ||\n                    linesApiNames.slice());\n                proto.pointArrayMap = (proto.pointArrayMap ||\n                    pointArrayMap.slice());\n                proto.pointValKey = (proto.pointValKey ||\n                    pointValKey);\n                proto.areaLinesNames = (proto.areaLinesNames ||\n                    areaLinesNames.slice());\n                proto.drawGraph = indicatorDrawGraph;\n                proto.getGraphPath = indicatorGetGraphPath;\n                proto.toYData = indicatorToYData;\n                proto.translate = indicatorTranslate;\n                return IndicatorClass;\n            }\n            MultipleLinesComposition.compose = compose;\n            /**\n             * Generate the API name of the line\n             *\n             * @private\n             * @param propertyName name of the line\n             */\n            function getLineName(propertyName) {\n                return ('plot' +\n                    propertyName.charAt(0).toUpperCase() +\n                    propertyName.slice(1));\n            }\n            /**\n             * Create translatedLines Collection based on pointArrayMap.\n             *\n             * @private\n             * @param {string} [excludedValue]\n             *        Main line id\n             * @return {Array<string>}\n             *         Returns translated lines names without excluded value.\n             */\n            function getTranslatedLinesNames(indicator, excludedValue) {\n                var translatedLines = [];\n                (indicator.pointArrayMap || []).forEach(function (propertyName) {\n                    if (propertyName !== excludedValue) {\n                        translatedLines.push(getLineName(propertyName));\n                    }\n                });\n                return translatedLines;\n            }\n            /**\n             * Draw main and additional lines.\n             *\n             * @private\n             */\n            function indicatorDrawGraph() {\n                var indicator = this, pointValKey = indicator.pointValKey, linesApiNames = indicator.linesApiNames, areaLinesNames = indicator.areaLinesNames, mainLinePoints = indicator.points, mainLineOptions = indicator.options, mainLinePath = indicator.graph, gappedExtend = {\n                    options: {\n                        gapSize: mainLineOptions.gapSize\n                    }\n                }, \n                // Additional lines point place holders:\n                secondaryLines = [], secondaryLinesNames = getTranslatedLinesNames(indicator, pointValKey);\n                var pointsLength = mainLinePoints.length, point;\n                // Generate points for additional lines:\n                secondaryLinesNames.forEach(function (plotLine, index) {\n                    // Create additional lines point place holders\n                    secondaryLines[index] = [];\n                    while (pointsLength--) {\n                        point = mainLinePoints[pointsLength];\n                        secondaryLines[index].push({\n                            x: point.x,\n                            plotX: point.plotX,\n                            plotY: point[plotLine],\n                            isNull: !defined(point[plotLine])\n                        });\n                    }\n                    pointsLength = mainLinePoints.length;\n                });\n                // Modify options and generate area fill:\n                if (indicator.userOptions.fillColor && areaLinesNames.length) {\n                    var index = secondaryLinesNames.indexOf(getLineName(areaLinesNames[0])), secondLinePoints = secondaryLines[index], firstLinePoints = areaLinesNames.length === 1 ?\n                        mainLinePoints :\n                        secondaryLines[secondaryLinesNames.indexOf(getLineName(areaLinesNames[1]))], originalColor = indicator.color;\n                    indicator.points = firstLinePoints;\n                    indicator.nextPoints = secondLinePoints;\n                    indicator.color = indicator.userOptions.fillColor;\n                    indicator.options = merge(mainLinePoints, gappedExtend);\n                    indicator.graph = indicator.area;\n                    indicator.fillGraph = true;\n                    smaProto.drawGraph.call(indicator);\n                    indicator.area = indicator.graph;\n                    // Clean temporary properties:\n                    delete indicator.nextPoints;\n                    delete indicator.fillGraph;\n                    indicator.color = originalColor;\n                }\n                // Modify options and generate additional lines:\n                linesApiNames.forEach(function (lineName, i) {\n                    if (secondaryLines[i]) {\n                        indicator.points = secondaryLines[i];\n                        if (mainLineOptions[lineName]) {\n                            indicator.options = merge(mainLineOptions[lineName].styles, gappedExtend);\n                        }\n                        else {\n                            error('Error: \"There is no ' + lineName +\n                                ' in DOCS options declared. Check if linesApiNames' +\n                                ' are consistent with your DOCS line names.\"');\n                        }\n                        indicator.graph = indicator['graph' + lineName];\n                        smaProto.drawGraph.call(indicator);\n                        // Now save lines:\n                        indicator['graph' + lineName] = indicator.graph;\n                    }\n                    else {\n                        error('Error: \"' + lineName + ' doesn\\'t have equivalent ' +\n                            'in pointArrayMap. To many elements in linesApiNames ' +\n                            'relative to pointArrayMap.\"');\n                    }\n                });\n                // Restore options and draw a main line:\n                indicator.points = mainLinePoints;\n                indicator.options = mainLineOptions;\n                indicator.graph = mainLinePath;\n                smaProto.drawGraph.call(indicator);\n            }\n            /**\n             * Create the path based on points provided as argument.\n             * If indicator.nextPoints option is defined, create the areaFill.\n             *\n             * @private\n             * @param points Points on which the path should be created\n             */\n            function indicatorGetGraphPath(points) {\n                var areaPath, path = [], higherAreaPath = [];\n                points = points || this.points;\n                // Render Span\n                if (this.fillGraph && this.nextPoints) {\n                    areaPath = smaProto.getGraphPath.call(this, this.nextPoints);\n                    if (areaPath && areaPath.length) {\n                        areaPath[0][0] = 'L';\n                        path = smaProto.getGraphPath.call(this, points);\n                        higherAreaPath = areaPath.slice(0, path.length);\n                        // Reverse points, so that the areaFill will start from the end:\n                        for (var i = higherAreaPath.length - 1; i >= 0; i--) {\n                            path.push(higherAreaPath[i]);\n                        }\n                    }\n                }\n                else {\n                    path = smaProto.getGraphPath.apply(this, arguments);\n                }\n                return path;\n            }\n            /**\n             * @private\n             * @param {Highcharts.Point} point\n             *        Indicator point\n             * @return {Array<number>}\n             *         Returns point Y value for all lines\n             */\n            function indicatorToYData(point) {\n                var pointColl = [];\n                (this.pointArrayMap || []).forEach(function (propertyName) {\n                    pointColl.push(point[propertyName]);\n                });\n                return pointColl;\n            }\n            /**\n             * Add lines plot pixel values.\n             *\n             * @private\n             */\n            function indicatorTranslate() {\n                var _this = this;\n                var pointArrayMap = this.pointArrayMap;\n                var LinesNames = [], value;\n                LinesNames = getTranslatedLinesNames(this);\n                smaProto.translate.apply(this, arguments);\n                this.points.forEach(function (point) {\n                    pointArrayMap.forEach(function (propertyName, i) {\n                        value = point[propertyName];\n                        // If the modifier, like for example compare exists,\n                        // modified the original value by that method, #15867.\n                        if (_this.dataModify) {\n                            value = _this.dataModify.modifyValue(value);\n                        }\n                        if (value !== null) {\n                            point[LinesNames[i]] = _this.yAxis.toPixels(value, true);\n                        }\n                    });\n                });\n            }\n        })(MultipleLinesComposition || (MultipleLinesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MultipleLinesComposition;\n    });\n    _registerModule(_modules, 'Stock/Indicators/ABands/ABandsIndicator.js', [_modules['Stock/Indicators/MultipleLinesComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (MultipleLinesComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var correctFloat = U.correctFloat, extend = U.extend, merge = U.merge;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function getBaseForBand(low, high, factor) {\n            return (((correctFloat(high - low)) /\n                ((correctFloat(high + low)) / 2)) * 1000) * factor;\n        }\n        /**\n         * @private\n         */\n        function getPointUB(high, base) {\n            return high * (correctFloat(1 + 2 * base));\n        }\n        /**\n         * @private\n         */\n        function getPointLB(low, base) {\n            return low * (correctFloat(1 - 2 * base));\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ABands series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.abands\n         *\n         * @augments Highcharts.Series\n         */\n        var ABandsIndicator = /** @class */ (function (_super) {\n            __extends(ABandsIndicator, _super);\n            function ABandsIndicator() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            ABandsIndicator.prototype.getValues = function (series, params) {\n                var period = params.period, factor = params.factor, index = params.index, xVal = series.xData, yVal = series.yData, yValLen = yVal ? yVal.length : 0, \n                // Upperbands\n                UB = [], \n                // Lowerbands\n                LB = [], \n                // ABANDS array structure:\n                // 0-date, 1-top line, 2-middle line, 3-bottom line\n                ABANDS = [], low = 2, high = 1, xData = [], yData = [];\n                // Middle line, top line and bottom line\n                var ML, TL, BL, date, bandBase, pointSMA, ubSMA, lbSMA, slicedX, slicedY, i;\n                if (yValLen < period) {\n                    return;\n                }\n                for (i = 0; i <= yValLen; i++) {\n                    // Get UB and LB values of every point. This condition\n                    // is necessary, because there is a need to calculate current\n                    // UB nad LB values simultaneously with given period SMA\n                    // in one for loop.\n                    if (i < yValLen) {\n                        bandBase = getBaseForBand(yVal[i][low], yVal[i][high], factor);\n                        UB.push(getPointUB(yVal[i][high], bandBase));\n                        LB.push(getPointLB(yVal[i][low], bandBase));\n                    }\n                    if (i >= period) {\n                        slicedX = xVal.slice(i - period, i);\n                        slicedY = yVal.slice(i - period, i);\n                        ubSMA = _super.prototype.getValues.call(this, {\n                            xData: slicedX,\n                            yData: UB.slice(i - period, i)\n                        }, {\n                            period: period\n                        });\n                        lbSMA = _super.prototype.getValues.call(this, {\n                            xData: slicedX,\n                            yData: LB.slice(i - period, i)\n                        }, {\n                            period: period\n                        });\n                        pointSMA = _super.prototype.getValues.call(this, {\n                            xData: slicedX,\n                            yData: slicedY\n                        }, {\n                            period: period,\n                            index: index\n                        });\n                        date = pointSMA.xData[0];\n                        TL = ubSMA.yData[0];\n                        BL = lbSMA.yData[0];\n                        ML = pointSMA.yData[0];\n                        ABANDS.push([date, TL, ML, BL]);\n                        xData.push(date);\n                        yData.push([TL, ML, BL]);\n                    }\n                }\n                return {\n                    values: ABANDS,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Acceleration bands (ABANDS). This series requires the `linkedTo` option\n             * to be set and should be loaded after the\n             * `stock/indicators/indicators.js`.\n             *\n             * @sample {highstock} stock/indicators/acceleration-bands\n             *         Acceleration Bands\n             *\n             * @extends      plotOptions.sma\n             * @mixes        Highcharts.MultipleLinesMixin\n             * @since        7.0.0\n             * @product      highstock\n             * @excluding    allAreas, colorAxis, compare, compareBase, joinBy, keys,\n             *               navigatorOptions, pointInterval, pointIntervalUnit,\n             *               pointPlacement, pointRange, pointStart, showInNavigator,\n             *               stacking,\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/acceleration-bands\n             * @optionparent plotOptions.abands\n             */\n            ABandsIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                /**\n                 * Option for fill color between lines in Accelleration bands Indicator.\n                 *\n                 * @sample {highstock} stock/indicators/indicator-area-fill\n                 *      Background fill between lines.\n                 *\n                 * @type {Highcharts.Color}\n                 * @since 9.3.2\n                 * @apioption plotOptions.abands.fillColor\n                 *\n                 */\n                params: {\n                    period: 20,\n                    /**\n                     * The algorithms factor value used to calculate bands.\n                     *\n                     * @product highstock\n                     */\n                    factor: 0.001,\n                    index: 3\n                },\n                lineWidth: 1,\n                topLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1\n                    }\n                },\n                bottomLine: {\n                    styles: {\n                        /**\n                         * Pixel width of the line.\n                         */\n                        lineWidth: 1\n                    }\n                },\n                dataGrouping: {\n                    approximation: 'averages'\n                }\n            });\n            return ABandsIndicator;\n        }(SMAIndicator));\n        extend(ABandsIndicator.prototype, {\n            areaLinesNames: ['top', 'bottom'],\n            linesApiNames: ['topLine', 'bottomLine'],\n            nameBase: 'Acceleration Bands',\n            nameComponents: ['period', 'factor'],\n            pointArrayMap: ['top', 'middle', 'bottom'],\n            pointValKey: 'middle'\n        });\n        MultipleLinesComposition.compose(ABandsIndicator);\n        SeriesRegistry.registerSeriesType('abands', ABandsIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An Acceleration bands indicator. If the [type](#series.abands.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.abands\n         * @since     7.0.0\n         * @product   highstock\n         * @excluding allAreas, colorAxis, compare, compareBase, dataParser, dataURL,\n         *            joinBy, keys, navigatorOptions, pointInterval,\n         *            pointIntervalUnit, pointPlacement, pointRange, pointStart,\n         *            stacking, showInNavigator,\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/acceleration-bands\n         * @apioption series.abands\n         */\n        ''; // To include the above in jsdoc\n\n        return ABandsIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/acceleration-bands.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","SeriesRegistry","U","MultipleLinesComposition","smaProto","seriesTypes","sma","prototype","defined","error","merge","linesApiNames","pointArrayMap","areaLinesNames","getLineName","propertyName","charAt","toUpperCase","slice","getTranslatedLinesNames","indicator","excludedValue","translatedLines","forEach","push","indicatorDrawGraph","point","pointValKey","mainLinePoints","points","mainLineOptions","options","mainLinePath","graph","gappedExtend","gapSize","secondaryLines","secondaryLinesNames","pointsLength","length","plotLine","index","x","plotX","plotY","isNull","userOptions","fillColor","secondLinePoints","indexOf","firstLinePoints","originalColor","color","nextPoints","area","fillGraph","drawGraph","call","lineName","i","styles","indicatorGetGraphPath","areaPath","higherAreaPath","getGraphPath","arguments","indicatorToYData","pointColl","indicatorTranslate","value","_this","LinesNames","translate","dataModify","modifyValue","yAxis","toPixels","compose","IndicatorClass","proto","toYData","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","TypeError","String","__","constructor","create","SMAIndicator","correctFloat","extend","ABandsIndicator","_super","getValues","series","params","low","high","ML","TL","BL","date","bandBase","pointSMA","ubSMA","lbSMA","slicedX","slicedY","period","factor","xVal","xData","yVal","yData","yValLen","UB","LB","ABANDS","values","defaultOptions","lineWidth","topLine","bottomLine","dataGrouping","approximation","nameBase","nameComponents","registerSeriesType"],"mappings":"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"}