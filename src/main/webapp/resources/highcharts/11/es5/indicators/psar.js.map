{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.8 (2024-08-29)\n *\n * Parabolic SAR Indicator for Highcharts Stock\n *\n * (c) 2010-2024 Grzegorz Blachliński\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/indicators/psar', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Stock/Indicators/PSAR/PSARIndicator.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  Parabolic SAR indicator for Highcharts Stock\n         *\n         *  (c) 2010-2024 Grzegorz Blachliński\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var SMAIndicator = SeriesRegistry.seriesTypes.sma;\n        var merge = U.merge;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        // Utils:\n        /**\n         *\n         */\n        function toFixed(a, n) {\n            return parseFloat(a.toFixed(n));\n        }\n        /**\n         *\n         */\n        function calculateDirection(previousDirection, low, high, PSAR) {\n            if ((previousDirection === 1 && low > PSAR) ||\n                (previousDirection === -1 && high > PSAR)) {\n                return 1;\n            }\n            return -1;\n        }\n        /* *\n         * Method for calculating acceleration factor\n         * dir - direction\n         * pDir - previous Direction\n         * eP - extreme point\n         * pEP - previous extreme point\n         * inc - increment for acceleration factor\n         * maxAcc - maximum acceleration factor\n         * initAcc - initial acceleration factor\n         */\n        /**\n         *\n         */\n        function getAccelerationFactor(dir, pDir, eP, pEP, pAcc, inc, maxAcc, initAcc) {\n            if (dir === pDir) {\n                if (dir === 1 && (eP > pEP)) {\n                    return (pAcc === maxAcc) ? maxAcc : toFixed(pAcc + inc, 2);\n                }\n                if (dir === -1 && (eP < pEP)) {\n                    return (pAcc === maxAcc) ? maxAcc : toFixed(pAcc + inc, 2);\n                }\n                return pAcc;\n            }\n            return initAcc;\n        }\n        /**\n         *\n         */\n        function getExtremePoint(high, low, previousDirection, previousExtremePoint) {\n            if (previousDirection === 1) {\n                return (high > previousExtremePoint) ? high : previousExtremePoint;\n            }\n            return (low < previousExtremePoint) ? low : previousExtremePoint;\n        }\n        /**\n         *\n         */\n        function getEPMinusPSAR(EP, PSAR) {\n            return EP - PSAR;\n        }\n        /**\n         *\n         */\n        function getAccelerationFactorMultiply(accelerationFactor, EPMinusSAR) {\n            return accelerationFactor * EPMinusSAR;\n        }\n        /* *\n         * Method for calculating PSAR\n         * pdir - previous direction\n         * sDir - second previous Direction\n         * PSAR - previous PSAR\n         * pACCMultiply - previous acceleration factor multiply\n         * sLow - second previous low\n         * pLow - previous low\n         * sHigh - second previous high\n         * pHigh - previous high\n         * pEP - previous extreme point\n         */\n        /**\n         *\n         */\n        function getPSAR(pdir, sDir, PSAR, pACCMulti, sLow, pLow, pHigh, sHigh, pEP) {\n            if (pdir === sDir) {\n                if (pdir === 1) {\n                    return (PSAR + pACCMulti < Math.min(sLow, pLow)) ?\n                        PSAR + pACCMulti :\n                        Math.min(sLow, pLow);\n                }\n                return (PSAR + pACCMulti > Math.max(sHigh, pHigh)) ?\n                    PSAR + pACCMulti :\n                    Math.max(sHigh, pHigh);\n            }\n            return pEP;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Parabolic SAR series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.psar\n         *\n         * @augments Highcharts.Series\n         */\n        var PSARIndicator = /** @class */ (function (_super) {\n            __extends(PSARIndicator, _super);\n            function PSARIndicator() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                _this.nameComponents = void 0;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            PSARIndicator.prototype.getValues = function (series, params) {\n                var xVal = series.xData, yVal = series.yData, maxAccelerationFactor = params.maxAccelerationFactor, increment = params.increment, \n                // Set initial acc factor (for every new trend!)\n                initialAccelerationFactor = params.initialAccelerationFactor, decimals = params.decimals, index = params.index, PSARArr = [], xData = [], yData = [];\n                var accelerationFactor = params.initialAccelerationFactor, direction, \n                // Extreme point is the lowest low for falling and highest high\n                // for rising psar - and we are starting with falling\n                extremePoint = yVal[0][1], EPMinusPSAR, accelerationFactorMultiply, newDirection, previousDirection = 1, prevLow, prevPrevLow, prevHigh, prevPrevHigh, PSAR = yVal[0][2], newExtremePoint, high, low, ind;\n                if (index >= yVal.length) {\n                    return;\n                }\n                for (ind = 0; ind < index; ind++) {\n                    extremePoint = Math.max(yVal[ind][1], extremePoint);\n                    PSAR = Math.min(yVal[ind][2], toFixed(PSAR, decimals));\n                }\n                direction = (yVal[ind][1] > PSAR) ? 1 : -1;\n                EPMinusPSAR = getEPMinusPSAR(extremePoint, PSAR);\n                accelerationFactor = params.initialAccelerationFactor;\n                accelerationFactorMultiply = getAccelerationFactorMultiply(accelerationFactor, EPMinusPSAR);\n                PSARArr.push([xVal[index], PSAR]);\n                xData.push(xVal[index]);\n                yData.push(toFixed(PSAR, decimals));\n                for (ind = index + 1; ind < yVal.length; ind++) {\n                    prevLow = yVal[ind - 1][2];\n                    prevPrevLow = yVal[ind - 2][2];\n                    prevHigh = yVal[ind - 1][1];\n                    prevPrevHigh = yVal[ind - 2][1];\n                    high = yVal[ind][1];\n                    low = yVal[ind][2];\n                    // Null points break PSAR\n                    if (prevPrevLow !== null &&\n                        prevPrevHigh !== null &&\n                        prevLow !== null &&\n                        prevHigh !== null &&\n                        high !== null &&\n                        low !== null) {\n                        PSAR = getPSAR(direction, previousDirection, PSAR, accelerationFactorMultiply, prevPrevLow, prevLow, prevHigh, prevPrevHigh, extremePoint);\n                        newExtremePoint = getExtremePoint(high, low, direction, extremePoint);\n                        newDirection = calculateDirection(previousDirection, low, high, PSAR);\n                        accelerationFactor = getAccelerationFactor(newDirection, direction, newExtremePoint, extremePoint, accelerationFactor, increment, maxAccelerationFactor, initialAccelerationFactor);\n                        EPMinusPSAR = getEPMinusPSAR(newExtremePoint, PSAR);\n                        accelerationFactorMultiply = getAccelerationFactorMultiply(accelerationFactor, EPMinusPSAR);\n                        PSARArr.push([xVal[ind], toFixed(PSAR, decimals)]);\n                        xData.push(xVal[ind]);\n                        yData.push(toFixed(PSAR, decimals));\n                        previousDirection = direction;\n                        direction = newDirection;\n                        extremePoint = newExtremePoint;\n                    }\n                }\n                return {\n                    values: PSARArr,\n                    xData: xData,\n                    yData: yData\n                };\n            };\n            /**\n             * Parabolic SAR. This series requires `linkedTo`\n             * option to be set and should be loaded\n             * after `stock/indicators/indicators.js` file.\n             *\n             * @sample stock/indicators/psar\n             *         Parabolic SAR Indicator\n             *\n             * @extends      plotOptions.sma\n             * @since        6.0.0\n             * @product      highstock\n             * @requires     stock/indicators/indicators\n             * @requires     stock/indicators/psar\n             * @optionparent plotOptions.psar\n             */\n            PSARIndicator.defaultOptions = merge(SMAIndicator.defaultOptions, {\n                lineWidth: 0,\n                marker: {\n                    enabled: true\n                },\n                states: {\n                    hover: {\n                        lineWidthPlus: 0\n                    }\n                },\n                /**\n                 * @excluding period\n                 */\n                params: {\n                    period: void 0, // Unchangeable period, do not inherit (#15362)\n                    /**\n                     * The initial value for acceleration factor.\n                     * Acceleration factor is starting with this value\n                     * and increases by specified increment each time\n                     * the extreme point makes a new high.\n                     * AF can reach a maximum of maxAccelerationFactor,\n                     * no matter how long the uptrend extends.\n                     */\n                    initialAccelerationFactor: 0.02,\n                    /**\n                     * The Maximum value for acceleration factor.\n                     * AF can reach a maximum of maxAccelerationFactor,\n                     * no matter how long the uptrend extends.\n                     */\n                    maxAccelerationFactor: 0.2,\n                    /**\n                     * Acceleration factor increases by increment each time\n                     * the extreme point makes a new high.\n                     *\n                     * @since 6.0.0\n                     */\n                    increment: 0.02,\n                    /**\n                     * Index from which PSAR is starting calculation\n                     *\n                     * @since 6.0.0\n                     */\n                    index: 2,\n                    /**\n                     * Number of maximum decimals that are used in PSAR calculations.\n                     *\n                     * @since 6.0.0\n                     */\n                    decimals: 4\n                }\n            });\n            return PSARIndicator;\n        }(SMAIndicator));\n        SeriesRegistry.registerSeriesType('psar', PSARIndicator);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `PSAR` series. If the [type](#series.psar.type) option is not specified, it\n         * is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.psar\n         * @since     6.0.0\n         * @product   highstock\n         * @excluding dataParser, dataURL\n         * @requires  stock/indicators/indicators\n         * @requires  stock/indicators/psar\n         * @apioption series.psar\n         */\n        ''; // To include the above in the js output\n\n        return PSARIndicator;\n    });\n    _registerModule(_modules, 'masters/indicators/psar.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","SeriesRegistry","U","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","call","TypeError","String","__","constructor","create","SMAIndicator","seriesTypes","sma","merge","toFixed","a","n","parseFloat","PSARIndicator","_super","_this","arguments","nameComponents","getValues","series","params","pdir","sDir","PSAR","pACCMulti","pEP","dir","pDir","pAcc","previousDirection","previousExtremePoint","direction","EPMinusPSAR","accelerationFactorMultiply","newDirection","prevLow","prevPrevLow","prevHigh","prevPrevHigh","newExtremePoint","high","low","ind","xVal","xData","yVal","yData","maxAccelerationFactor","increment","initialAccelerationFactor","decimals","index","PSARArr","accelerationFactor","extremePoint","length","Math","max","min","EP","push","eP","values","defaultOptions","lineWidth","marker","enabled","states","hover","lineWidthPlus","period","registerSeriesType"],"mappings":"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"}