{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * (c) 2009-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/series-label', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/SeriesLabel/SeriesLabelDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Series labels are placed as close to the series as possible in a\n         * natural way, seeking to avoid other series. The goal of this\n         * feature is to make the chart more easily readable, like if a\n         * human designer placed the labels in the optimal position.\n         *\n         * The series labels currently work with series types having a\n         * `graph` or an `area`.\n         *\n         * @sample highcharts/series-label/line-chart\n         *         Line chart\n         * @sample highcharts/demo/streamgraph\n         *         Stream graph\n         * @sample highcharts/series-label/stock-chart\n         *         Stock chart\n         *\n         * @declare  Highcharts.SeriesLabelOptionsObject\n         * @since    6.0.0\n         * @product  highcharts highstock gantt\n         * @requires modules/series-label\n         * @optionparent plotOptions.series.label\n         */\n        var SeriesLabelDefaults = {\n            /**\n             * Enable the series label per series.\n             */\n            enabled: true,\n            /**\n             * Allow labels to be placed distant to the graph if necessary,\n             * and draw a connector line to the graph. Setting this option\n             * to true may decrease the performance significantly, since the\n             * algorithm with systematically search for open spaces in the\n             * whole plot area. Visually, it may also result in a more\n             * cluttered chart, though more of the series will be labeled.\n             */\n            connectorAllowed: false,\n            /**\n             * If the label is closer than this to a neighbour graph, draw a\n             * connector.\n             */\n            connectorNeighbourDistance: 24,\n            /**\n             * A format string for the label, with support for a subset of\n             * HTML. Variables are enclosed by curly brackets. Available\n             * variables are `name`, `options.xxx`, `color` and other\n             * members from the `series` object. Use this option also to set\n             * a static text for the label.\n             *\n             * @type string\n             * @since 8.1.0\n             */\n            format: void 0,\n            /**\n             * Callback function to format each of the series' labels. The\n             * `this` keyword refers to the series object. By default the\n             * `formatter` is undefined and the `series.name` is rendered.\n             *\n             * @type {Highcharts.FormatterCallbackFunction<Series>}\n             * @since 8.1.0\n             */\n            formatter: void 0,\n            /**\n             * For area-like series, allow the font size to vary so that\n             * small areas get a smaller font size. The default applies this\n             * effect to area-like series but not line-like series.\n             *\n             * @type {number|null}\n             */\n            minFontSize: null,\n            /**\n             * For area-like series, allow the font size to vary so that\n             * small areas get a smaller font size. The default applies this\n             * effect to area-like series but not line-like series.\n             *\n             * @type {number|null}\n             */\n            maxFontSize: null,\n            /**\n             * Draw the label on the area of an area series. By default it\n             * is drawn on the area. Set it to `false` to draw it next to\n             * the graph instead.\n             *\n             * @type {boolean|null}\n             */\n            onArea: null,\n            /**\n             * Styles for the series label. The color defaults to the series\n             * color, or a contrast color if `onArea`.\n             *\n             * @type {Highcharts.CSSObject}\n             */\n            style: {\n                /** @internal */\n                fontSize: '0.8em',\n                /** @internal */\n                fontWeight: 'bold'\n            },\n            /**\n             * Whether to use HTML to render the series label.\n             */\n            useHTML: false,\n            /**\n             * An array of boxes to avoid when laying out the labels. Each\n             * item has a `left`, `right`, `top` and `bottom` property.\n             *\n             * @type {Array<Highcharts.LabelIntersectBoxObject>}\n             */\n            boxesToAvoid: []\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SeriesLabelDefaults;\n    });\n    _registerModule(_modules, 'Extensions/SeriesLabel/SeriesLabelUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Counter-clockwise, part of the fast line intersection logic.\n         *\n         * @private\n         * @function ccw\n         */\n        function ccw(x1, y1, x2, y2, x3, y3) {\n            var cw = ((y3 - y1) * (x2 - x1)) - ((y2 - y1) * (x3 - x1));\n            return cw > 0 ? true : !(cw < 0);\n        }\n        /**\n         * Detect if two lines intersect.\n         *\n         * @private\n         * @function intersectLine\n         */\n        function intersectLine(x1, y1, x2, y2, x3, y3, x4, y4) {\n            return ccw(x1, y1, x3, y3, x4, y4) !== ccw(x2, y2, x3, y3, x4, y4) &&\n                ccw(x1, y1, x2, y2, x3, y3) !== ccw(x1, y1, x2, y2, x4, y4);\n        }\n        /**\n         * Detect if a box intersects with a line.\n         *\n         * @private\n         * @function boxIntersectLine\n         */\n        function boxIntersectLine(x, y, w, h, x1, y1, x2, y2) {\n            return (intersectLine(x, y, x + w, y, x1, y1, x2, y2) || // Top of label\n                intersectLine(x + w, y, x + w, y + h, x1, y1, x2, y2) || // Right\n                intersectLine(x, y + h, x + w, y + h, x1, y1, x2, y2) || // Bottom\n                intersectLine(x, y, x, y + h, x1, y1, x2, y2) // Left of label\n            );\n        }\n        /**\n         * @private\n         */\n        function intersectRect(r1, r2) {\n            return !(r2.left > r1.right ||\n                r2.right < r1.left ||\n                r2.top > r1.bottom ||\n                r2.bottom < r1.top);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var SeriesLabelUtilities = {\n            boxIntersectLine: boxIntersectLine,\n            intersectRect: intersectRect\n        };\n\n        return SeriesLabelUtilities;\n    });\n    _registerModule(_modules, 'Extensions/SeriesLabel/SeriesLabel.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Templating.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Extensions/SeriesLabel/SeriesLabelDefaults.js'], _modules['Extensions/SeriesLabel/SeriesLabelUtilities.js'], _modules['Core/Utilities.js']], function (A, T, D, H, SeriesLabelDefaults, SLU, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /*\n         * Highcharts module to place labels next to a series in a natural position.\n         *\n         * TODO:\n         * - add column support (box collision detection, boxesToAvoid logic)\n         * - add more options (connector, format, formatter)\n         *\n         * https://jsfiddle.net/highcharts/L2u9rpwr/\n         * https://jsfiddle.net/highcharts/y5A37/\n         * https://jsfiddle.net/highcharts/264Nm/\n         * https://jsfiddle.net/highcharts/y5A37/\n         */\n        var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n                if (ar || !(i in from)) {\n                    if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n                    ar[i] = from[i];\n                }\n            }\n            return to.concat(ar || Array.prototype.slice.call(from));\n        };\n        var animObject = A.animObject;\n        var format = T.format;\n        var setOptions = D.setOptions;\n        var composed = H.composed;\n        var boxIntersectLine = SLU.boxIntersectLine, intersectRect = SLU.intersectRect;\n        var addEvent = U.addEvent, extend = U.extend, fireEvent = U.fireEvent, isNumber = U.isNumber, pick = U.pick, pushUnique = U.pushUnique, syncTimeout = U.syncTimeout;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var labelDistance = 3;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Check whether a proposed label position is clear of other elements.\n         * @private\n         */\n        function checkClearPoint(series, x, y, bBox, checkDistance) {\n            var chart = series.chart, seriesLabelOptions = series.options.label || {}, onArea = pick(seriesLabelOptions.onArea, !!series.area), findDistanceToOthers = (onArea || seriesLabelOptions.connectorAllowed), leastDistance = 16, boxesToAvoid = chart.boxesToAvoid;\n            var distToOthersSquared = Number.MAX_VALUE, // Distance to other graphs\n            distToPointSquared = Number.MAX_VALUE, dist, connectorPoint, withinRange, xDist, yDist, i, j;\n            /**\n             * Get the weight in order to determine the ideal position. Larger distance\n             * to other series gives more weight. Smaller distance to the actual point\n             * (connector points only) gives more weight.\n             * @private\n             */\n            function getWeight(distToOthersSquared, distToPointSquared) {\n                return distToOthersSquared - distToPointSquared;\n            }\n            // First check for collision with existing labels\n            for (i = 0; boxesToAvoid && i < boxesToAvoid.length; i += 1) {\n                if (intersectRect(boxesToAvoid[i], {\n                    left: x,\n                    right: x + bBox.width,\n                    top: y,\n                    bottom: y + bBox.height\n                })) {\n                    return false;\n                }\n            }\n            // For each position, check if the lines around the label intersect with any\n            // of the graphs.\n            for (i = 0; i < chart.series.length; i += 1) {\n                var serie = chart.series[i], points = serie.interpolatedPoints && __spreadArray([], serie.interpolatedPoints, true);\n                if (serie.visible && points) {\n                    // Avoid the sides of the plot area\n                    var stepY = chart.plotHeight / 10;\n                    for (var chartY = chart.plotTop; chartY <= chart.plotTop + chart.plotHeight; chartY += stepY) {\n                        points.unshift({\n                            chartX: chart.plotLeft,\n                            chartY: chartY\n                        });\n                        points.push({\n                            chartX: chart.plotLeft + chart.plotWidth,\n                            chartY: chartY\n                        });\n                    }\n                    for (j = 1; j < points.length; j += 1) {\n                        if (\n                        // To avoid processing, only check intersection if the X\n                        // values are close to the box.\n                        points[j].chartX >= x - leastDistance &&\n                            points[j - 1].chartX <= x + bBox.width +\n                                leastDistance\n                        /* @todo condition above is not the same as below\n                        (\n                            points[j].chartX >=\n                            (x - leastDistance)\n                        ) && (\n                            points[j - 1].chartX <=\n                            (x + bBox.width + leastDistance)\n                        ) */\n                        ) {\n                            // If any of the box sides intersect with the line, return.\n                            if (boxIntersectLine(x, y, bBox.width, bBox.height, points[j - 1].chartX, points[j - 1].chartY, points[j].chartX, points[j].chartY)) {\n                                return false;\n                            }\n                            // But if it is too far away (a padded box doesn't\n                            // intersect), also return.\n                            if (series === serie && !withinRange && checkDistance) {\n                                withinRange = boxIntersectLine(x - leastDistance, y - leastDistance, bBox.width + 2 * leastDistance, bBox.height + 2 * leastDistance, points[j - 1].chartX, points[j - 1].chartY, points[j].chartX, points[j].chartY);\n                            }\n                        }\n                        // Find the squared distance from the center of the label. On\n                        // area series, avoid its own graph.\n                        if ((findDistanceToOthers || withinRange) &&\n                            (series !== serie || onArea)) {\n                            xDist = x + bBox.width / 2 - points[j].chartX;\n                            yDist = y + bBox.height / 2 - points[j].chartY;\n                            distToOthersSquared = Math.min(distToOthersSquared, xDist * xDist + yDist * yDist);\n                        }\n                    }\n                    // Do we need a connector?\n                    if (!onArea &&\n                        findDistanceToOthers &&\n                        series === serie &&\n                        ((checkDistance && !withinRange) ||\n                            distToOthersSquared < Math.pow(seriesLabelOptions.connectorNeighbourDistance || 1, 2))) {\n                        for (j = 1; j < points.length; j += 1) {\n                            dist = Math.min((Math.pow(x + bBox.width / 2 - points[j].chartX, 2) +\n                                Math.pow(y + bBox.height / 2 - points[j].chartY, 2)), (Math.pow(x - points[j].chartX, 2) +\n                                Math.pow(y - points[j].chartY, 2)), (Math.pow(x + bBox.width - points[j].chartX, 2) +\n                                Math.pow(y - points[j].chartY, 2)), (Math.pow(x + bBox.width - points[j].chartX, 2) +\n                                Math.pow(y + bBox.height - points[j].chartY, 2)), (Math.pow(x - points[j].chartX, 2) +\n                                Math.pow(y + bBox.height - points[j].chartY, 2)));\n                            if (dist < distToPointSquared) {\n                                distToPointSquared = dist;\n                                connectorPoint = points[j];\n                            }\n                        }\n                        withinRange = true;\n                    }\n                }\n            }\n            return !checkDistance || withinRange ? {\n                x: x,\n                y: y,\n                weight: getWeight(distToOthersSquared, connectorPoint ? distToPointSquared : 0),\n                connectorPoint: connectorPoint\n            } : false;\n        }\n        /**\n         * @private\n         */\n        function compose(ChartClass, SVGRendererClass) {\n            if (pushUnique(composed, 'SeriesLabel')) {\n                // Leave both events, we handle animation differently (#9815)\n                addEvent(ChartClass, 'load', onChartRedraw);\n                addEvent(ChartClass, 'redraw', onChartRedraw);\n                SVGRendererClass.prototype.symbols.connector = symbolConnector;\n                setOptions({ plotOptions: { series: { label: SeriesLabelDefaults } } });\n            }\n        }\n        /**\n         * The main initialize method that runs on chart level after initialization and\n         * redraw. It runs in  a timeout to prevent locking, and loops over all series,\n         * taking all series and labels into account when placing the labels.\n         *\n         * @private\n         * @function Highcharts.Chart#drawSeriesLabels\n         */\n        function drawSeriesLabels(chart) {\n            // Console.time('drawSeriesLabels');\n            chart.boxesToAvoid = [];\n            var labelSeries = chart.labelSeries || [], boxesToAvoid = chart.boxesToAvoid;\n            // Avoid data labels\n            chart.series.forEach(function (s) {\n                return (s.points || []).forEach(function (p) {\n                    return (p.dataLabels || []).forEach(function (label) {\n                        var _a = label.getBBox(), width = _a.width, height = _a.height, left = (label.translateX || 0) + (s.xAxis ? s.xAxis.pos : s.chart.plotLeft), top = (label.translateY || 0) + (s.yAxis ? s.yAxis.pos : s.chart.plotTop);\n                        boxesToAvoid.push({\n                            left: left,\n                            top: top,\n                            right: left + width,\n                            bottom: top + height\n                        });\n                    });\n                });\n            });\n            // Build the interpolated points\n            labelSeries.forEach(function (series) {\n                var seriesLabelOptions = series.options.label || {};\n                series.interpolatedPoints = getPointsOnGraph(series);\n                boxesToAvoid.push.apply(boxesToAvoid, (seriesLabelOptions.boxesToAvoid || []));\n            });\n            chart.series.forEach(function (series) {\n                var _a, _b;\n                var labelOptions = series.options.label;\n                if (!labelOptions || (!series.xAxis && !series.yAxis)) {\n                    return;\n                }\n                var colorClass = ('highcharts-color-' + pick(series.colorIndex, 'none')), isNew = !series.labelBySeries, minFontSize = labelOptions.minFontSize, maxFontSize = labelOptions.maxFontSize, inverted = chart.inverted, paneLeft = (inverted ? series.yAxis.pos : series.xAxis.pos), paneTop = (inverted ? series.xAxis.pos : series.yAxis.pos), paneWidth = chart.inverted ? series.yAxis.len : series.xAxis.len, paneHeight = chart.inverted ? series.xAxis.len : series.yAxis.len, points = series.interpolatedPoints, onArea = pick(labelOptions.onArea, !!series.area), results = [], xData = series.xData || [];\n                var bBox, x, y, clearPoint, i, best, label = series.labelBySeries, dataExtremes, areaMin, areaMax;\n                // Stay within the area data bounds (#10038)\n                if (onArea && !inverted) {\n                    dataExtremes = [\n                        series.xAxis.toPixels(xData[0]),\n                        series.xAxis.toPixels(xData[xData.length - 1])\n                    ];\n                    areaMin = Math.min.apply(Math, dataExtremes);\n                    areaMax = Math.max.apply(Math, dataExtremes);\n                }\n                /**\n                 * @private\n                 */\n                function insidePane(x, y, bBox) {\n                    var leftBound = Math.max(paneLeft, pick(areaMin, -Infinity)), rightBound = Math.min(paneLeft + paneWidth, pick(areaMax, Infinity));\n                    return (x > leftBound &&\n                        x <= rightBound - bBox.width &&\n                        y >= paneTop &&\n                        y <= paneTop + paneHeight - bBox.height);\n                }\n                /**\n                 * @private\n                 */\n                function destroyLabel() {\n                    if (label) {\n                        series.labelBySeries = label.destroy();\n                    }\n                }\n                if (series.visible && !series.boosted && points) {\n                    if (!label) {\n                        var labelText = series.name;\n                        if (typeof labelOptions.format === 'string') {\n                            labelText = format(labelOptions.format, series, chart);\n                        }\n                        else if (labelOptions.formatter) {\n                            labelText = labelOptions.formatter.call(series);\n                        }\n                        series.labelBySeries = label = chart.renderer\n                            .label(labelText, 0, 0, 'connector', 0, 0, labelOptions.useHTML)\n                            .addClass('highcharts-series-label ' +\n                            'highcharts-series-label-' + series.index + ' ' +\n                            (series.options.className || '') + ' ' +\n                            colorClass);\n                        if (!chart.renderer.styledMode) {\n                            var color = typeof series.color === 'string' ?\n                                series.color : \"#666666\" /* Palette.neutralColor60 */;\n                            label.css(extend({\n                                color: onArea ?\n                                    chart.renderer.getContrast(color) :\n                                    color\n                            }, labelOptions.style || {}));\n                            label.attr({\n                                opacity: chart.renderer.forExport ? 1 : 0,\n                                stroke: series.color,\n                                'stroke-width': 1\n                            });\n                        }\n                        // Adapt label sizes to the sum of the data\n                        if (minFontSize && maxFontSize) {\n                            label.css({\n                                fontSize: labelFontSize(series, minFontSize, maxFontSize)\n                            });\n                        }\n                        label\n                            .attr({\n                            padding: 0,\n                            zIndex: 3\n                        })\n                            .add();\n                    }\n                    bBox = label.getBBox();\n                    bBox.width = Math.round(bBox.width);\n                    // Ideal positions are centered above or below a point on right side\n                    // of chart\n                    for (i = points.length - 1; i > 0; i -= 1) {\n                        if (onArea) {\n                            // Centered\n                            x = ((_a = points[i].chartCenterX) !== null && _a !== void 0 ? _a : points[i].chartX) -\n                                bBox.width / 2;\n                            y = ((_b = points[i].chartCenterY) !== null && _b !== void 0 ? _b : points[i].chartY) -\n                                bBox.height / 2;\n                            if (insidePane(x, y, bBox)) {\n                                best = checkClearPoint(series, x, y, bBox);\n                            }\n                            if (best) {\n                                results.push(best);\n                            }\n                        }\n                        else {\n                            // Right - up\n                            x = points[i].chartX + labelDistance;\n                            y = points[i].chartY - bBox.height - labelDistance;\n                            if (insidePane(x, y, bBox)) {\n                                best = checkClearPoint(series, x, y, bBox, true);\n                            }\n                            if (best) {\n                                results.push(best);\n                            }\n                            // Right - down\n                            x = points[i].chartX + labelDistance;\n                            y = points[i].chartY + labelDistance;\n                            if (insidePane(x, y, bBox)) {\n                                best = checkClearPoint(series, x, y, bBox, true);\n                            }\n                            if (best) {\n                                results.push(best);\n                            }\n                            // Left - down\n                            x = points[i].chartX - bBox.width - labelDistance;\n                            y = points[i].chartY + labelDistance;\n                            if (insidePane(x, y, bBox)) {\n                                best = checkClearPoint(series, x, y, bBox, true);\n                            }\n                            if (best) {\n                                results.push(best);\n                            }\n                            // Left - up\n                            x = points[i].chartX - bBox.width - labelDistance;\n                            y = points[i].chartY - bBox.height - labelDistance;\n                            if (insidePane(x, y, bBox)) {\n                                best = checkClearPoint(series, x, y, bBox, true);\n                            }\n                            if (best) {\n                                results.push(best);\n                            }\n                        }\n                    }\n                    // Brute force, try all positions on the chart in a 16x16 grid\n                    if (labelOptions.connectorAllowed && !results.length && !onArea) {\n                        for (x = paneLeft + paneWidth - bBox.width; x >= paneLeft; x -= 16) {\n                            for (y = paneTop; y < paneTop + paneHeight - bBox.height; y += 16) {\n                                clearPoint = checkClearPoint(series, x, y, bBox, true);\n                                if (clearPoint) {\n                                    results.push(clearPoint);\n                                }\n                            }\n                        }\n                    }\n                    if (results.length) {\n                        results.sort(function (a, b) { return b.weight - a.weight; });\n                        best = results[0];\n                        (chart.boxesToAvoid || []).push({\n                            left: best.x,\n                            right: best.x + bBox.width,\n                            top: best.y,\n                            bottom: best.y + bBox.height\n                        });\n                        // Move it if needed\n                        var dist = Math.sqrt(Math.pow(Math.abs(best.x - (label.x || 0)), 2) +\n                            Math.pow(Math.abs(best.y - (label.y || 0)), 2));\n                        if (dist && series.labelBySeries) {\n                            // Move fast and fade in - pure animation movement is\n                            // distractive...\n                            var attr = {\n                                opacity: chart.renderer.forExport ? 1 : 0,\n                                x: best.x,\n                                y: best.y\n                            }, anim = {\n                                opacity: 1\n                            };\n                            // ... unless we're just moving a short distance\n                            if (dist <= 10) {\n                                anim = {\n                                    x: attr.x,\n                                    y: attr.y\n                                };\n                                attr = {};\n                            }\n                            // Default initial animation to a fraction of the series\n                            // animation (#9396)\n                            var animationOptions = void 0;\n                            if (isNew) {\n                                animationOptions = animObject(series.options.animation);\n                                animationOptions.duration *= 0.2;\n                            }\n                            series.labelBySeries\n                                .attr(extend(attr, {\n                                anchorX: best.connectorPoint &&\n                                    (best.connectorPoint.plotX || 0) + paneLeft,\n                                anchorY: best.connectorPoint &&\n                                    (best.connectorPoint.plotY || 0) + paneTop\n                            }))\n                                .animate(anim, animationOptions);\n                            // Record closest point to stick to for sync redraw\n                            series.options.kdNow = true;\n                            series.buildKDTree();\n                            var closest = series.searchPoint({\n                                chartX: best.x,\n                                chartY: best.y\n                            }, true);\n                            if (closest) {\n                                label.closest = [\n                                    closest,\n                                    best.x - (closest.plotX || 0),\n                                    best.y - (closest.plotY || 0)\n                                ];\n                            }\n                        }\n                    }\n                    else {\n                        destroyLabel();\n                    }\n                }\n                else {\n                    destroyLabel();\n                }\n            });\n            fireEvent(chart, 'afterDrawSeriesLabels');\n            // Console.timeEnd('drawSeriesLabels');\n        }\n        /**\n         * Points to avoid. In addition to actual data points, the label should avoid\n         * interpolated positions.\n         *\n         * @private\n         * @function Highcharts.Series#getPointsOnGraph\n         */\n        function getPointsOnGraph(series) {\n            var _a;\n            if (!series.xAxis && !series.yAxis) {\n                return;\n            }\n            var distance = 16, points = series.points, interpolated = [], graph = series.graph || series.area, node = graph && graph.element, inverted = series.chart.inverted, xAxis = series.xAxis, yAxis = series.yAxis, paneLeft = inverted ? yAxis.pos : xAxis.pos, paneTop = inverted ? xAxis.pos : yAxis.pos, paneHeight = inverted ? xAxis.len : yAxis.len, paneWidth = inverted ? yAxis.len : xAxis.len, seriesLabelOptions = series.options.label || {}, onArea = pick(seriesLabelOptions.onArea, !!series.area), translatedThreshold = yAxis.getThreshold(series.options.threshold), grid = {}, chartCenterKey = inverted ? 'chartCenterX' : 'chartCenterY';\n            var i, deltaX, deltaY, delta, len, n, j;\n            /**\n             * Push the point to the interpolated points, but only if that position in\n             * the grid has not been occupied. As a performance optimization, we divide\n             * the plot area into a grid and only add one point per series (#9815).\n             * @private\n             */\n            function pushDiscrete(point) {\n                var cellSize = 8, key = Math.round((point.plotX || 0) / cellSize) + ',' +\n                    Math.round((point.plotY || 0) / cellSize);\n                if (!grid[key]) {\n                    grid[key] = 1;\n                    interpolated.push(point);\n                }\n            }\n            // For splines, get the point at length (possible caveat: peaks are not\n            // correctly detected)\n            if (series.getPointSpline &&\n                node &&\n                node.getPointAtLength &&\n                !onArea &&\n                // Not performing well on complex series, node.getPointAtLength is too\n                // heavy (#9815)\n                points.length < (series.chart.plotSizeX || 0) / distance) {\n                // If it is animating towards a path definition, use that briefly, and\n                // reset\n                var d = graph.toD && graph.attr('d');\n                if (graph.toD) {\n                    graph.attr({ d: graph.toD });\n                }\n                len = node.getTotalLength();\n                for (i = 0; i < len; i += distance) {\n                    var domPoint = node.getPointAtLength(i), plotX = inverted ? paneWidth - domPoint.y : domPoint.x, plotY = inverted ? paneHeight - domPoint.x : domPoint.y;\n                    pushDiscrete({\n                        chartX: paneLeft + plotX,\n                        chartY: paneTop + plotY,\n                        plotX: plotX,\n                        plotY: plotY\n                    });\n                }\n                if (d) {\n                    graph.attr({ d: d });\n                }\n                // Last point\n                var point = points[points.length - 1], pos = point.pos();\n                pushDiscrete({\n                    chartX: paneLeft + ((pos === null || pos === void 0 ? void 0 : pos[0]) || 0),\n                    chartY: paneTop + ((pos === null || pos === void 0 ? void 0 : pos[1]) || 0)\n                });\n                // Interpolate\n            }\n            else {\n                len = points.length;\n                var last = void 0;\n                for (i = 0; i < len; i += 1) {\n                    var point = points[i], _b = point.pos() || [], plotX = _b[0], plotY = _b[1], plotHigh = point.plotHigh;\n                    if (isNumber(plotX) && isNumber(plotY)) {\n                        var ctlPoint = {\n                            plotX: plotX,\n                            plotY: plotY,\n                            // Absolute coordinates so we can compare different panes\n                            chartX: paneLeft + plotX,\n                            chartY: paneTop + plotY\n                        };\n                        if (onArea) {\n                            // Vertically centered inside area\n                            if (plotHigh) {\n                                ctlPoint.plotY = plotHigh;\n                                ctlPoint.chartY = paneTop + plotHigh;\n                            }\n                            if (inverted) {\n                                ctlPoint.chartCenterX = paneLeft + paneWidth - ((plotHigh ? plotHigh : point.plotY || 0) +\n                                    pick(point.yBottom, translatedThreshold)) / 2;\n                            }\n                            else {\n                                ctlPoint.chartCenterY = paneTop + ((plotHigh ? plotHigh : plotY) +\n                                    pick(point.yBottom, translatedThreshold)) / 2;\n                            }\n                        }\n                        // Add interpolated points\n                        if (last) {\n                            deltaX = Math.abs(ctlPoint.chartX - last.chartX);\n                            deltaY = Math.abs(ctlPoint.chartY - last.chartY);\n                            delta = Math.max(deltaX, deltaY);\n                            if (delta > distance) {\n                                n = Math.ceil(delta / distance);\n                                for (j = 1; j < n; j += 1) {\n                                    pushDiscrete((_a = {\n                                            chartX: last.chartX +\n                                                (ctlPoint.chartX - last.chartX) * (j / n),\n                                            chartY: last.chartY +\n                                                (ctlPoint.chartY - last.chartY) * (j / n)\n                                        },\n                                        _a[chartCenterKey] = (last[chartCenterKey] || 0) +\n                                            ((ctlPoint[chartCenterKey] || 0) -\n                                                (last[chartCenterKey] || 0)) * (j / n),\n                                        _a.plotX = (last.plotX || 0) +\n                                            (plotX - (last.plotX || 0)) * (j / n),\n                                        _a.plotY = (last.plotY || 0) +\n                                            (plotY - (last.plotY || 0)) * (j / n),\n                                        _a));\n                                }\n                            }\n                        }\n                        // Add the real point in order to find positive and negative\n                        // peaks\n                        pushDiscrete(ctlPoint);\n                        last = ctlPoint;\n                    }\n                }\n            }\n            // Get the bounding box so we can do a quick check first if the bounding\n            // boxes overlap.\n            /*\n            interpolated.bBox = node.getBBox();\n            interpolated.bBox.x += paneLeft;\n            interpolated.bBox.y += paneTop;\n            */\n            return interpolated;\n        }\n        /**\n         * Overridable function to return series-specific font sizes for the labels. By\n         * default it returns bigger font sizes for series with the greater sum of y\n         * values.\n         * @private\n         */\n        function labelFontSize(series, minFontSize, maxFontSize) {\n            return minFontSize + (((series.sum || 0) / (series.chart.labelSeriesMaxSum || 0)) *\n                (maxFontSize - minFontSize)) + 'px';\n        }\n        /**\n         * Prepare drawing series labels.\n         * @private\n         */\n        function onChartRedraw(e) {\n            if (this.renderer) {\n                var chart_1 = this;\n                var delay_1 = animObject(chart_1.renderer.globalAnimation).duration;\n                chart_1.labelSeries = [];\n                chart_1.labelSeriesMaxSum = 0;\n                if (chart_1.seriesLabelTimer) {\n                    U.clearTimeout(chart_1.seriesLabelTimer);\n                }\n                // Which series should have labels\n                chart_1.series.forEach(function (series) {\n                    var seriesLabelOptions = series.options.label || {}, label = series.labelBySeries, closest = label && label.closest;\n                    if (seriesLabelOptions.enabled &&\n                        series.visible &&\n                        (series.graph || series.area) &&\n                        !series.boosted &&\n                        chart_1.labelSeries) {\n                        chart_1.labelSeries.push(series);\n                        if (seriesLabelOptions.minFontSize &&\n                            seriesLabelOptions.maxFontSize &&\n                            series.yData) {\n                            series.sum = series.yData.reduce(function (pv, cv) { return (pv || 0) + (cv || 0); }, 0);\n                            chart_1.labelSeriesMaxSum = Math.max(chart_1.labelSeriesMaxSum || 0, series.sum || 0);\n                        }\n                        // The labels are processing heavy, wait until the animation is\n                        // done\n                        if (e.type === 'load') {\n                            delay_1 = Math.max(delay_1, animObject(series.options.animation).duration);\n                        }\n                        // Keep the position updated to the axis while redrawing\n                        if (closest) {\n                            if (typeof closest[0].plotX !== 'undefined') {\n                                label.animate({\n                                    x: closest[0].plotX + closest[1],\n                                    y: closest[0].plotY + closest[2]\n                                });\n                            }\n                            else {\n                                label.attr({ opacity: 0 });\n                            }\n                        }\n                    }\n                });\n                chart_1.seriesLabelTimer = syncTimeout(function () {\n                    if (chart_1.series && chart_1.labelSeries) { // #7931, chart destroyed\n                        drawSeriesLabels(chart_1);\n                    }\n                }, chart_1.renderer.forExport || !delay_1 ? 0 : delay_1);\n            }\n        }\n        /**\n         * General symbol definition for labels with connector.\n         * @private\n         */\n        function symbolConnector(x, y, w, h, options) {\n            var anchorX = options && options.anchorX, anchorY = options && options.anchorY;\n            var path, yOffset, lateral = w / 2;\n            if (isNumber(anchorX) && isNumber(anchorY)) {\n                path = [['M', anchorX, anchorY]];\n                // Prefer 45 deg connectors\n                yOffset = y - anchorY;\n                if (yOffset < 0) {\n                    yOffset = -h - yOffset;\n                }\n                if (yOffset < w) {\n                    lateral = anchorX < x + (w / 2) ? yOffset : w - yOffset;\n                }\n                // Anchor below label\n                if (anchorY > y + h) {\n                    path.push(['L', x + lateral, y + h]);\n                    // Anchor above label\n                }\n                else if (anchorY < y) {\n                    path.push(['L', x + lateral, y]);\n                    // Anchor left of label\n                }\n                else if (anchorX < x) {\n                    path.push(['L', x, y + h / 2]);\n                    // Anchor right of label\n                }\n                else if (anchorX > x + w) {\n                    path.push(['L', x + w, y + h / 2]);\n                }\n            }\n            return path || [];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var SeriesLabel = {\n            compose: compose\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Containing the position of a box that should be avoided by labels.\n         *\n         * @interface Highcharts.LabelIntersectBoxObject\n         */ /**\n        * @name Highcharts.LabelIntersectBoxObject#bottom\n        * @type {number}\n        */ /**\n        * @name Highcharts.LabelIntersectBoxObject#left\n        * @type {number}\n        */ /**\n        * @name Highcharts.LabelIntersectBoxObject#right\n        * @type {number}\n        */ /**\n        * @name Highcharts.LabelIntersectBoxObject#top\n        * @type {number}\n        */\n        (''); // Keeps doclets above in JS file\n\n        return SeriesLabel;\n    });\n    _registerModule(_modules, 'masters/modules/series-label.src.js', [_modules['Core/Globals.js'], _modules['Extensions/SeriesLabel/SeriesLabel.js']], function (Highcharts, SeriesLabel) {\n\n        var G = Highcharts;\n        SeriesLabel.compose(G.Chart, G.SVGRenderer);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","enabled","connectorAllowed","connectorNeighbourDistance","format","formatter","minFontSize","maxFontSize","onArea","style","fontSize","fontWeight","useHTML","boxesToAvoid","ccw","x1","y1","x2","y2","x3","y3","cw","intersectLine","x4","y4","boxIntersectLine","x","y","w","h","intersectRect","r1","r2","left","right","top","bottom","A","T","D","H","SeriesLabelDefaults","SLU","U","__spreadArray","to","from","pack","arguments","length","ar","i","l","Array","prototype","slice","call","concat","animObject","setOptions","composed","addEvent","extend","fireEvent","isNumber","pick","pushUnique","syncTimeout","checkClearPoint","series","bBox","checkDistance","dist","connectorPoint","withinRange","xDist","yDist","j","chart","seriesLabelOptions","options","label","area","findDistanceToOthers","distToOthersSquared","Number","MAX_VALUE","distToPointSquared","width","height","serie","points","interpolatedPoints","visible","stepY","plotHeight","chartY","plotTop","unshift","chartX","plotLeft","push","plotWidth","Math","min","pow","weight","onChartRedraw","e","renderer","chart_1","delay_1","globalAnimation","duration","labelSeries","labelSeriesMaxSum","seriesLabelTimer","clearTimeout","forEach","labelBySeries","closest","graph","boosted","yData","sum","reduce","pv","cv","max","type","animation","plotX","animate","plotY","attr","opacity","s","p","dataLabels","_a","getBBox","translateX","xAxis","pos","translateY","yAxis","getPointsOnGraph","delta","len","n","interpolated","node","element","inverted","paneLeft","paneTop","paneHeight","paneWidth","translatedThreshold","getThreshold","threshold","grid","chartCenterKey","getPointSpline","getPointAtLength","plotSizeX","d","toD","getTotalLength","domPoint","pushDiscrete","point","last","_b","plotHigh","ctlPoint","chartCenterX","yBottom","chartCenterY","abs","ceil","key","round","labelOptions","clearPoint","best","dataExtremes","areaMin","areaMax","colorClass","colorIndex","isNew","results","xData","toPixels","labelText","name","addClass","index","className","styledMode","color","css","getContrast","forExport","stroke","padding","zIndex","add","insidePane","sort","a","b","sqrt","anim","animationOptions","anchorX","anchorY","kdNow","buildKDTree","searchPoint","destroyLabel","leftBound","Infinity","rightBound","destroy","symbolConnector","yOffset","lateral","compose","ChartClass","SVGRendererClass","symbols","connector","plotOptions","SeriesLabel","G","Chart","SVGRenderer"],"mappings":"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"}