{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * (c) 2016-2024 Highsoft AS\n * Authors: Jon Arild Nygard\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/sunburst', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/Breadcrumbs/BreadcrumbsDefaults.js', [], function () {\n        /* *\n         *\n         *  Highcharts Breadcrumbs module\n         *\n         *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * @optionparent lang\n         */\n        var lang = {\n            /**\n             * @since   10.0.0\n             * @product highcharts\n             *\n             * @private\n             */\n            mainBreadcrumb: 'Main'\n        };\n        /**\n         * Options for breadcrumbs. Breadcrumbs general options are defined in\n         * `navigation.breadcrumbs`. Specific options for drilldown are set in\n         * `drilldown.breadcrumbs` and for tree-like series traversing, in\n         * `plotOptions[series].breadcrumbs`.\n         *\n         * @since        10.0.0\n         * @product      highcharts\n         * @optionparent navigation.breadcrumbs\n         */\n        var options = {\n            /**\n             * A collection of attributes for the buttons. The object takes SVG\n             * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n             * a collection of CSS properties for the text.\n             *\n             * The object can also be extended with states, so you can set\n             * presentational options for `hover`, `select` or `disabled` button\n             * states.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/single-button\n             *         Themed, single button\n             *\n             * @type    {Highcharts.SVGAttributes}\n             * @since   10.0.0\n             * @product highcharts\n             */\n            buttonTheme: {\n                /** @ignore */\n                fill: 'none',\n                /** @ignore */\n                height: 18,\n                /** @ignore */\n                padding: 2,\n                /** @ignore */\n                'stroke-width': 0,\n                /** @ignore */\n                zIndex: 7,\n                /** @ignore */\n                states: {\n                    select: {\n                        fill: 'none'\n                    }\n                },\n                style: {\n                    color: \"#334eff\" /* Palette.highlightColor80 */\n                }\n            },\n            /**\n             * The default padding for each button and separator in each direction.\n             *\n             * @type  {number}\n             * @since 10.0.0\n             */\n            buttonSpacing: 5,\n            /**\n             * Fires when clicking on the breadcrumbs button. Two arguments are\n             * passed to the function. First breadcrumb button as an SVG element.\n             * Second is the breadcrumbs class, containing reference to the chart,\n             * series etc.\n             *\n             * ```js\n             * click: function(button, breadcrumbs) {\n             *   console.log(button);\n             * }\n             * ```\n             *\n             * Return false to stop default buttons click action.\n             *\n             * @type      {Highcharts.BreadcrumbsClickCallbackFunction}\n             * @since     10.0.0\n             * @apioption navigation.breadcrumbs.events.click\n             */\n            /**\n             * When the breadcrumbs are floating, the plot area will not move to\n             * make space for it. By default, the chart will not make space for the\n             * buttons. This property won't work when positioned in the middle.\n             *\n             * @sample highcharts/breadcrumbs/single-button\n             *         Floating button\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            floating: false,\n            /**\n             * A format string for the breadcrumbs button. Variables are enclosed by\n             * curly brackets. Available values are passed in the declared point\n             * options.\n             *\n             * @type      {string|undefined}\n             * @since 10.0.0\n             * @default   undefined\n             * @sample {highcharts} highcharts/breadcrumbs/format Display custom\n             *          values in breadcrumb button.\n             */\n            format: void 0,\n            /**\n             * Callback function to format the breadcrumb text from scratch.\n             *\n             * @type      {Highcharts.BreadcrumbsFormatterCallbackFunction}\n             * @since     10.0.0\n             * @default   undefined\n             * @apioption navigation.breadcrumbs.formatter\n             */\n            /**\n             * What box to align the button to. Can be either `plotBox` or\n             * `spacingBox`.\n             *\n             * @type    {Highcharts.ButtonRelativeToValue}\n             * @default plotBox\n             * @since   10.0.0\n             * @product highcharts highmaps\n             */\n            relativeTo: 'plotBox',\n            /**\n             * Whether to reverse the order of buttons. This is common in Arabic\n             * and Hebrew.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/rtl\n             *         Breadcrumbs in RTL\n             *\n             * @type  {boolean}\n             * @since 10.2.0\n             */\n            rtl: false,\n            /**\n             * Positioning for the button row. The breadcrumbs buttons will be\n             * aligned properly for the default chart layout (title,  subtitle,\n             * legend, range selector) for the custom chart layout set the position\n             * properties.\n             *\n             * @sample  {highcharts} highcharts/breadcrumbs/single-button\n             *          Single, right aligned button\n             *\n             * @type    {Highcharts.BreadcrumbsAlignOptions}\n             * @since   10.0.0\n             * @product highcharts highmaps\n             */\n            position: {\n                /**\n                 * Horizontal alignment of the breadcrumbs buttons.\n                 *\n                 * @type {Highcharts.AlignValue}\n                 */\n                align: 'left',\n                /**\n                 * Vertical alignment of the breadcrumbs buttons.\n                 *\n                 * @type {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'top',\n                /**\n                 * The X offset of the breadcrumbs button group.\n                 *\n                 * @type {number}\n                 */\n                x: 0,\n                /**\n                 * The Y offset of the breadcrumbs button group. When `undefined`,\n                 * and `floating` is `false`, the `y` position is adapted so that\n                 * the breadcrumbs are rendered outside the target area.\n                 *\n                 * @type {number|undefined}\n                 */\n                y: void 0\n            },\n            /**\n             * Options object for Breadcrumbs separator.\n             *\n             * @since 10.0.0\n             */\n            separator: {\n                /**\n                 * @type    {string}\n                 * @since   10.0.0\n                 * @product highcharts\n                 */\n                text: '/',\n                /**\n                 * CSS styles for the breadcrumbs separator.\n                 *\n                 * In styled mode, the breadcrumbs separators are styled by the\n                 * `.highcharts-separator` rule with its different states.\n                 *  @type  {Highcharts.CSSObject}\n                 *  @since 10.0.0\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    fontSize: '0.8em'\n                }\n            },\n            /**\n             * Show full path or only a single button.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/single-button\n             *         Single, styled button\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            showFullPath: true,\n            /**\n             * CSS styles for all breadcrumbs.\n             *\n             * In styled mode, the breadcrumbs buttons are styled by the\n             * `.highcharts-breadcrumbs-buttons .highcharts-button` rule with its\n             * different states.\n             *\n             * @type  {Highcharts.SVGAttributes}\n             * @since 10.0.0\n             */\n            style: {},\n            /**\n             * Whether to use HTML to render the breadcrumbs items texts.\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            useHTML: false,\n            /**\n             * The z index of the breadcrumbs group.\n             *\n             * @type  {number}\n             * @since 10.0.0\n             */\n            zIndex: 7\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var BreadcrumbsDefaults = {\n            lang: lang,\n            options: options\n        };\n\n        return BreadcrumbsDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Breadcrumbs/Breadcrumbs.js', [_modules['Extensions/Breadcrumbs/BreadcrumbsDefaults.js'], _modules['Core/Templating.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (BreadcrumbsDefaults, F, H, U) {\n        /* *\n         *\n         *  Highcharts Breadcrumbs module\n         *\n         *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var format = F.format;\n        var composed = H.composed;\n        var addEvent = U.addEvent, defined = U.defined, extend = U.extend, fireEvent = U.fireEvent, isString = U.isString, merge = U.merge, objectEach = U.objectEach, pick = U.pick, pushUnique = U.pushUnique;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Shift the drillUpButton to make the space for resetZoomButton, #8095.\n         * @private\n         */\n        function onChartAfterShowResetZoom() {\n            var chart = this;\n            if (chart.breadcrumbs) {\n                var bbox = chart.resetZoomButton &&\n                    chart.resetZoomButton.getBBox(), breadcrumbsOptions = chart.breadcrumbs.options;\n                if (bbox &&\n                    breadcrumbsOptions.position.align === 'right' &&\n                    breadcrumbsOptions.relativeTo === 'plotBox') {\n                    chart.breadcrumbs.alignBreadcrumbsGroup(-bbox.width - breadcrumbsOptions.buttonSpacing);\n                }\n            }\n        }\n        /**\n         * Remove resize/afterSetExtremes at chart destroy.\n         * @private\n         */\n        function onChartDestroy() {\n            if (this.breadcrumbs) {\n                this.breadcrumbs.destroy();\n                this.breadcrumbs = void 0;\n            }\n        }\n        /**\n         * Logic for making space for the buttons above the plot area\n         * @private\n         */\n        function onChartGetMargins() {\n            var breadcrumbs = this.breadcrumbs;\n            if (breadcrumbs &&\n                !breadcrumbs.options.floating &&\n                breadcrumbs.level) {\n                var breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, breadcrumbsHeight = ((buttonTheme.height || 0) +\n                    2 * (buttonTheme.padding || 0) +\n                    breadcrumbsOptions.buttonSpacing), verticalAlign = breadcrumbsOptions.position.verticalAlign;\n                if (verticalAlign === 'bottom') {\n                    this.marginBottom = (this.marginBottom || 0) + breadcrumbsHeight;\n                    breadcrumbs.yOffset = breadcrumbsHeight;\n                }\n                else if (verticalAlign !== 'middle') {\n                    this.plotTop += breadcrumbsHeight;\n                    breadcrumbs.yOffset = -breadcrumbsHeight;\n                }\n                else {\n                    breadcrumbs.yOffset = void 0;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRedraw() {\n            this.breadcrumbs && this.breadcrumbs.redraw();\n        }\n        /**\n         * After zooming out, shift the drillUpButton to the previous position, #8095.\n         * @private\n         */\n        function onChartSelection(event) {\n            if (event.resetSelection === true &&\n                this.breadcrumbs) {\n                this.breadcrumbs.alignBreadcrumbsGroup();\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Breadcrumbs class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Breadcrumbs\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         * @param {Highcharts.Options} userOptions\n         *        User options\n         */\n        var Breadcrumbs = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function Breadcrumbs(chart, userOptions) {\n                this.elementList = {};\n                this.isDirty = true;\n                this.level = 0;\n                this.list = [];\n                var chartOptions = merge(chart.options.drilldown &&\n                    chart.options.drilldown.drillUpButton, Breadcrumbs.defaultOptions, chart.options.navigation && chart.options.navigation.breadcrumbs, userOptions);\n                this.chart = chart;\n                this.options = chartOptions || {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            Breadcrumbs.compose = function (ChartClass, highchartsDefaultOptions) {\n                if (pushUnique(composed, 'Breadcrumbs')) {\n                    addEvent(ChartClass, 'destroy', onChartDestroy);\n                    addEvent(ChartClass, 'afterShowResetZoom', onChartAfterShowResetZoom);\n                    addEvent(ChartClass, 'getMargins', onChartGetMargins);\n                    addEvent(ChartClass, 'redraw', onChartRedraw);\n                    addEvent(ChartClass, 'selection', onChartSelection);\n                    // Add language support.\n                    extend(highchartsDefaultOptions.lang, BreadcrumbsDefaults.lang);\n                }\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Update Breadcrumbs properties, like level and list.\n             *\n             * @function Highcharts.Breadcrumbs#updateProperties\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.updateProperties = function (list) {\n                this.setList(list);\n                this.setLevel();\n                this.isDirty = true;\n            };\n            /**\n             * Set breadcrumbs list.\n             * @function Highcharts.Breadcrumbs#setList\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.BreadcrumbsOptions} list\n             *        Breadcrumbs list.\n             */\n            Breadcrumbs.prototype.setList = function (list) {\n                this.list = list;\n            };\n            /**\n             * Calculate level on which chart currently is.\n             *\n             * @function Highcharts.Breadcrumbs#setLevel\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.setLevel = function () {\n                this.level = this.list.length && this.list.length - 1;\n            };\n            /**\n             * Get Breadcrumbs level\n             *\n             * @function Highcharts.Breadcrumbs#getLevel\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.getLevel = function () {\n                return this.level;\n            };\n            /**\n             * Default button text formatter.\n             *\n             * @function Highcharts.Breadcrumbs#getButtonText\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} breadcrumb\n             *        Breadcrumb.\n             * @return {string}\n             *         Formatted text.\n             */\n            Breadcrumbs.prototype.getButtonText = function (breadcrumb) {\n                var breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options, lang = chart.options.lang, textFormat = pick(breadcrumbsOptions.format, breadcrumbsOptions.showFullPath ?\n                    '{level.name}' : '← {level.name}'), defaultText = lang && pick(lang.drillUpText, lang.mainBreadcrumb);\n                var returnText = breadcrumbsOptions.formatter &&\n                    breadcrumbsOptions.formatter(breadcrumb) ||\n                    format(textFormat, { level: breadcrumb.levelOptions }, chart) || '';\n                if (((isString(returnText) &&\n                    !returnText.length) ||\n                    returnText === '← ') &&\n                    defined(defaultText)) {\n                    returnText = !breadcrumbsOptions.showFullPath ?\n                        '← ' + defaultText :\n                        defaultText;\n                }\n                return returnText;\n            };\n            /**\n             * Redraw.\n             *\n             * @function Highcharts.Breadcrumbs#redraw\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.redraw = function () {\n                if (this.isDirty) {\n                    this.render();\n                }\n                if (this.group) {\n                    this.group.align();\n                }\n                this.isDirty = false;\n            };\n            /**\n             * Create a group, then draw breadcrumbs together with the separators.\n             *\n             * @function Highcharts.Breadcrumbs#render\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.render = function () {\n                var breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options;\n                // A main group for the breadcrumbs.\n                if (!breadcrumbs.group && breadcrumbsOptions) {\n                    breadcrumbs.group = chart.renderer\n                        .g('breadcrumbs-group')\n                        .addClass('highcharts-no-tooltip highcharts-breadcrumbs')\n                        .attr({\n                        zIndex: breadcrumbsOptions.zIndex\n                    })\n                        .add();\n                }\n                // Draw breadcrumbs.\n                if (breadcrumbsOptions.showFullPath) {\n                    this.renderFullPathButtons();\n                }\n                else {\n                    this.renderSingleButton();\n                }\n                this.alignBreadcrumbsGroup();\n            };\n            /**\n             * Draw breadcrumbs together with the separators.\n             *\n             * @function Highcharts.Breadcrumbs#renderFullPathButtons\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.renderFullPathButtons = function () {\n                // Make sure that only one type of button is visible.\n                this.destroySingleButton();\n                this.resetElementListState();\n                this.updateListElements();\n                this.destroyListElements();\n            };\n            /**\n             * Render Single button - when showFullPath is not used. The button is\n             * similar to the old drillUpButton\n             *\n             * @function Highcharts.Breadcrumbs#renderSingleButton\n             * @param {Highcharts.Breadcrumbs} this Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.renderSingleButton = function () {\n                var breadcrumbs = this, chart = breadcrumbs.chart, list = breadcrumbs.list, breadcrumbsOptions = breadcrumbs.options, buttonSpacing = breadcrumbsOptions.buttonSpacing;\n                // Make sure that only one type of button is visible.\n                this.destroyListElements();\n                // Draw breadcrumbs. Initial position for calculating the breadcrumbs\n                // group.\n                var posX = breadcrumbs.group ?\n                    breadcrumbs.group.getBBox().width :\n                    buttonSpacing, posY = buttonSpacing;\n                var previousBreadcrumb = list[list.length - 2];\n                if (!chart.drillUpButton && (this.level > 0)) {\n                    chart.drillUpButton = breadcrumbs.renderButton(previousBreadcrumb, posX, posY);\n                }\n                else if (chart.drillUpButton) {\n                    if (this.level > 0) {\n                        // Update button.\n                        this.updateSingleButton();\n                    }\n                    else {\n                        this.destroySingleButton();\n                    }\n                }\n            };\n            /**\n             * Update group position based on align and it's width.\n             *\n             * @function Highcharts.Breadcrumbs#renderSingleButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.alignBreadcrumbsGroup = function (xOffset) {\n                var breadcrumbs = this;\n                if (breadcrumbs.group) {\n                    var breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, positionOptions = breadcrumbsOptions.position, alignTo = (breadcrumbsOptions.relativeTo === 'chart' ||\n                        breadcrumbsOptions.relativeTo === 'spacingBox' ?\n                        void 0 :\n                        'plotBox'), bBox = breadcrumbs.group.getBBox(), additionalSpace = 2 * (buttonTheme.padding || 0) +\n                        breadcrumbsOptions.buttonSpacing;\n                    // Store positionOptions\n                    positionOptions.width = bBox.width + additionalSpace;\n                    positionOptions.height = bBox.height + additionalSpace;\n                    var newPositions = merge(positionOptions);\n                    // Add x offset if specified.\n                    if (xOffset) {\n                        newPositions.x += xOffset;\n                    }\n                    if (breadcrumbs.options.rtl) {\n                        newPositions.x += positionOptions.width;\n                    }\n                    newPositions.y = pick(newPositions.y, this.yOffset, 0);\n                    breadcrumbs.group.align(newPositions, true, alignTo);\n                }\n            };\n            /**\n             * Render a button.\n             *\n             * @function Highcharts.Breadcrumbs#renderButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} breadcrumb\n             *        Current breadcrumb\n             * @param {Highcharts.Breadcrumbs} posX\n             *        Initial horizontal position\n             * @param {Highcharts.Breadcrumbs} posY\n             *        Initial vertical position\n             * @return {SVGElement|void}\n             *        Returns the SVG button\n             */\n            Breadcrumbs.prototype.renderButton = function (breadcrumb, posX, posY) {\n                var breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, buttonTheme = merge(breadcrumbsOptions.buttonTheme);\n                var button = chart.renderer\n                    .button(breadcrumbs.getButtonText(breadcrumb), posX, posY, function (e) {\n                    // Extract events from button object and call\n                    var buttonEvents = breadcrumbsOptions.events &&\n                        breadcrumbsOptions.events.click;\n                    var callDefaultEvent;\n                    if (buttonEvents) {\n                        callDefaultEvent = buttonEvents.call(breadcrumbs, e, breadcrumb);\n                    }\n                    // (difference in behaviour of showFullPath and drillUp)\n                    if (callDefaultEvent !== false) {\n                        // For single button we are not going to the button\n                        // level, but the one level up\n                        if (!breadcrumbsOptions.showFullPath) {\n                            e.newLevel = breadcrumbs.level - 1;\n                        }\n                        else {\n                            e.newLevel = breadcrumb.level;\n                        }\n                        fireEvent(breadcrumbs, 'up', e);\n                    }\n                }, buttonTheme)\n                    .addClass('highcharts-breadcrumbs-button')\n                    .add(breadcrumbs.group);\n                if (!chart.styledMode) {\n                    button.attr(breadcrumbsOptions.style);\n                }\n                return button;\n            };\n            /**\n             * Render a separator.\n             *\n             * @function Highcharts.Breadcrumbs#renderSeparator\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} posX\n             *        Initial horizontal position\n             * @param {Highcharts.Breadcrumbs} posY\n             *        Initial vertical position\n             * @return {Highcharts.SVGElement}\n             *        Returns the SVG button\n             */\n            Breadcrumbs.prototype.renderSeparator = function (posX, posY) {\n                var breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, separatorOptions = breadcrumbsOptions.separator;\n                var separator = chart.renderer\n                    .label(separatorOptions.text, posX, posY, void 0, void 0, void 0, false)\n                    .addClass('highcharts-breadcrumbs-separator')\n                    .add(breadcrumbs.group);\n                if (!chart.styledMode) {\n                    separator.css(separatorOptions.style);\n                }\n                return separator;\n            };\n            /**\n             * Update.\n             * @function Highcharts.Breadcrumbs#update\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.BreadcrumbsOptions} options\n             *        Breadcrumbs class.\n             * @param {boolean} redraw\n             *        Redraw flag\n             */\n            Breadcrumbs.prototype.update = function (options) {\n                merge(true, this.options, options);\n                this.destroy();\n                this.isDirty = true;\n            };\n            /**\n             * Update button text when the showFullPath set to false.\n             * @function Highcharts.Breadcrumbs#updateSingleButton\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.updateSingleButton = function () {\n                var chart = this.chart, currentBreadcrumb = this.list[this.level - 1];\n                if (chart.drillUpButton) {\n                    chart.drillUpButton.attr({\n                        text: this.getButtonText(currentBreadcrumb)\n                    });\n                }\n            };\n            /**\n             * Destroy the chosen breadcrumbs group\n             *\n             * @function Highcharts.Breadcrumbs#destroy\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.destroy = function () {\n                this.destroySingleButton();\n                // Destroy elements one by one. It's necessary because\n                // g().destroy() does not remove added HTML\n                this.destroyListElements(true);\n                // Then, destroy the group itself.\n                if (this.group) {\n                    this.group.destroy();\n                }\n                this.group = void 0;\n            };\n            /**\n             * Destroy the elements' buttons and separators.\n             *\n             * @function Highcharts.Breadcrumbs#destroyListElements\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.destroyListElements = function (force) {\n                var elementList = this.elementList;\n                objectEach(elementList, function (element, level) {\n                    if (force ||\n                        !elementList[level].updated) {\n                        element = elementList[level];\n                        element.button && element.button.destroy();\n                        element.separator && element.separator.destroy();\n                        delete element.button;\n                        delete element.separator;\n                        delete elementList[level];\n                    }\n                });\n                if (force) {\n                    this.elementList = {};\n                }\n            };\n            /**\n             * Destroy the single button if exists.\n             *\n             * @function Highcharts.Breadcrumbs#destroySingleButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.destroySingleButton = function () {\n                if (this.chart.drillUpButton) {\n                    this.chart.drillUpButton.destroy();\n                    this.chart.drillUpButton = void 0;\n                }\n            };\n            /**\n             * Reset state for all buttons in elementList.\n             *\n             * @function Highcharts.Breadcrumbs#resetElementListState\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.resetElementListState = function () {\n                objectEach(this.elementList, function (element) {\n                    element.updated = false;\n                });\n            };\n            /**\n             * Update rendered elements inside the elementList.\n             *\n             * @function Highcharts.Breadcrumbs#updateListElements\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            Breadcrumbs.prototype.updateListElements = function () {\n                var breadcrumbs = this, elementList = breadcrumbs.elementList, buttonSpacing = breadcrumbs.options.buttonSpacing, posY = buttonSpacing, list = breadcrumbs.list, rtl = breadcrumbs.options.rtl, rtlFactor = rtl ? -1 : 1, updateXPosition = function (element, spacing) {\n                    return rtlFactor * element.getBBox().width +\n                        rtlFactor * spacing;\n                }, adjustToRTL = function (element, posX, posY) {\n                    element.translate(posX - element.getBBox().width, posY);\n                };\n                // Initial position for calculating the breadcrumbs group.\n                var posX = breadcrumbs.group ?\n                    updateXPosition(breadcrumbs.group, buttonSpacing) :\n                    buttonSpacing, currentBreadcrumb, breadcrumb;\n                for (var i = 0, iEnd = list.length; i < iEnd; ++i) {\n                    var isLast = i === iEnd - 1;\n                    var button = void 0, separator = void 0;\n                    breadcrumb = list[i];\n                    if (elementList[breadcrumb.level]) {\n                        currentBreadcrumb = elementList[breadcrumb.level];\n                        button = currentBreadcrumb.button;\n                        // Render a separator if it was not created before.\n                        if (!currentBreadcrumb.separator &&\n                            !isLast) {\n                            // Add spacing for the next separator\n                            posX += rtlFactor * buttonSpacing;\n                            currentBreadcrumb.separator =\n                                breadcrumbs.renderSeparator(posX, posY);\n                            if (rtl) {\n                                adjustToRTL(currentBreadcrumb.separator, posX, posY);\n                            }\n                            posX += updateXPosition(currentBreadcrumb.separator, buttonSpacing);\n                        }\n                        else if (currentBreadcrumb.separator &&\n                            isLast) {\n                            currentBreadcrumb.separator.destroy();\n                            delete currentBreadcrumb.separator;\n                        }\n                        elementList[breadcrumb.level].updated = true;\n                    }\n                    else {\n                        // Render a button.\n                        button = breadcrumbs.renderButton(breadcrumb, posX, posY);\n                        if (rtl) {\n                            adjustToRTL(button, posX, posY);\n                        }\n                        posX += updateXPosition(button, buttonSpacing);\n                        // Render a separator.\n                        if (!isLast) {\n                            separator = breadcrumbs.renderSeparator(posX, posY);\n                            if (rtl) {\n                                adjustToRTL(separator, posX, posY);\n                            }\n                            posX += updateXPosition(separator, buttonSpacing);\n                        }\n                        elementList[breadcrumb.level] = {\n                            button: button,\n                            separator: separator,\n                            updated: true\n                        };\n                    }\n                    if (button) {\n                        button.setState(isLast ? 2 : 0);\n                    }\n                }\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            Breadcrumbs.defaultOptions = BreadcrumbsDefaults.options;\n            return Breadcrumbs;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.BreadcrumbsClickCallbackFunction\n         *\n         * @param {Highcharts.Event} event\n         * Event.\n         *\n         * @param {Highcharts.BreadcrumbOptions} options\n         * Breadcrumb options.\n         *\n         * @param {global.Event} e\n         * Event arguments.\n         */\n        /**\n         * Callback function to format the breadcrumb text from scratch.\n         *\n         * @callback Highcharts.BreadcrumbsFormatterCallbackFunction\n         *\n         * @param {Highcharts.Event} event\n         * Event.\n         *\n         * @param {Highcharts.BreadcrumbOptions} options\n         * Breadcrumb options.\n         *\n         * @return {string}\n         * Formatted text or false\n         */\n        /**\n         * Options for the one breadcrumb.\n         *\n         * @interface Highcharts.BreadcrumbOptions\n         */\n        /**\n         * Level connected to a specific breadcrumb.\n         * @name Highcharts.BreadcrumbOptions#level\n         * @type {number}\n         */\n        /**\n         * Options for series or point connected to a specific breadcrumb.\n         * @name Highcharts.BreadcrumbOptions#levelOptions\n         * @type {SeriesOptions|PointOptionsObject}\n         */\n        /**\n         * Options for aligning breadcrumbs group.\n         *\n         * @interface Highcharts.BreadcrumbsAlignOptions\n         */\n        /**\n         * Align of a Breadcrumb group.\n         * @default right\n         * @name Highcharts.BreadcrumbsAlignOptions#align\n         * @type {AlignValue}\n         */\n        /**\n         * Vertical align of a Breadcrumb group.\n         * @default top\n         * @name Highcharts.BreadcrumbsAlignOptions#verticalAlign\n         * @type {VerticalAlignValue}\n         */\n        /**\n         * X offset of a Breadcrumbs group.\n         * @name Highcharts.BreadcrumbsAlignOptions#x\n         * @type {number}\n         */\n        /**\n         * Y offset of a Breadcrumbs group.\n         * @name Highcharts.BreadcrumbsAlignOptions#y\n         * @type {number}\n         */\n        /**\n         * Options for all breadcrumbs.\n         *\n         * @interface Highcharts.BreadcrumbsOptions\n         */\n        /**\n         * Button theme.\n         * @name Highcharts.BreadcrumbsOptions#buttonTheme\n         * @type { SVGAttributes | undefined }\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Breadcrumbs;\n    });\n    _registerModule(_modules, 'Series/ColorMapComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var columnProto = SeriesRegistry.seriesTypes.column.prototype;\n        var addEvent = U.addEvent, defined = U.defined;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ColorMapComposition;\n        (function (ColorMapComposition) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            ColorMapComposition.pointMembers = {\n                dataLabelOnNull: true,\n                moveToTopOnHover: true,\n                isValid: pointIsValid\n            };\n            ColorMapComposition.seriesMembers = {\n                colorKey: 'value',\n                axisTypes: ['xAxis', 'yAxis', 'colorAxis'],\n                parallelArrays: ['x', 'y', 'value'],\n                pointArrayMap: ['value'],\n                trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],\n                colorAttribs: seriesColorAttribs,\n                pointAttribs: columnProto.pointAttribs\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                var PointClass = SeriesClass.prototype.pointClass;\n                addEvent(PointClass, 'afterSetState', onPointAfterSetState);\n                return SeriesClass;\n            }\n            ColorMapComposition.compose = compose;\n            /**\n             * Move points to the top of the z-index order when hovered.\n             * @private\n             */\n            function onPointAfterSetState(e) {\n                var point = this, series = point.series, renderer = series.chart.renderer;\n                if (point.moveToTopOnHover && point.graphic) {\n                    if (!series.stateMarkerGraphic) {\n                        // Create a `use` element and add it to the end of the group,\n                        // which would make it appear on top of the other elements. This\n                        // deals with z-index without reordering DOM elements (#13049).\n                        series.stateMarkerGraphic = new SVGElement(renderer, 'use')\n                            .css({\n                            pointerEvents: 'none'\n                        })\n                            .add(point.graphic.parentGroup);\n                    }\n                    if ((e === null || e === void 0 ? void 0 : e.state) === 'hover') {\n                        // Give the graphic DOM element the same id as the Point\n                        // instance\n                        point.graphic.attr({\n                            id: this.id\n                        });\n                        series.stateMarkerGraphic.attr({\n                            href: \"\".concat(renderer.url, \"#\").concat(this.id),\n                            visibility: 'visible'\n                        });\n                    }\n                    else {\n                        series.stateMarkerGraphic.attr({\n                            href: ''\n                        });\n                    }\n                }\n            }\n            /**\n             * Color points have a value option that determines whether or not it is\n             * a null point\n             * @private\n             */\n            function pointIsValid() {\n                return (this.value !== null &&\n                    this.value !== Infinity &&\n                    this.value !== -Infinity &&\n                    // Undefined is allowed, but NaN is not (#17279)\n                    (this.value === void 0 || !isNaN(this.value)));\n            }\n            /**\n             * Get the color attributes to apply on the graphic\n             * @private\n             * @function Highcharts.colorMapSeriesMixin.colorAttribs\n             * @param {Highcharts.Point} point\n             * @return {Highcharts.SVGAttributes}\n             *         The SVG attributes\n             */\n            function seriesColorAttribs(point) {\n                var ret = {};\n                if (defined(point.color) &&\n                    (!point.state || point.state === 'normal') // #15746\n                ) {\n                    ret[this.colorProp || 'fill'] = point.color;\n                }\n                return ret;\n            }\n        })(ColorMapComposition || (ColorMapComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColorMapComposition;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapAlgorithmGroup.js', [], function () {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var TreemapAlgorithmGroup = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function TreemapAlgorithmGroup(h, w, d, p) {\n                this.height = h;\n                this.width = w;\n                this.plot = p;\n                this.direction = d;\n                this.startDirection = d;\n                this.total = 0;\n                this.nW = 0;\n                this.lW = 0;\n                this.nH = 0;\n                this.lH = 0;\n                this.elArr = [];\n                this.lP = {\n                    total: 0,\n                    lH: 0,\n                    nH: 0,\n                    lW: 0,\n                    nW: 0,\n                    nR: 0,\n                    lR: 0,\n                    aspectRatio: function (w, h) {\n                        return Math.max((w / h), (h / w));\n                    }\n                };\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TreemapAlgorithmGroup.prototype.addElement = function (el) {\n                this.lP.total = this.elArr[this.elArr.length - 1];\n                this.total = this.total + el;\n                if (this.direction === 0) {\n                    // Calculate last point old aspect ratio\n                    this.lW = this.nW;\n                    this.lP.lH = this.lP.total / this.lW;\n                    this.lP.lR = this.lP.aspectRatio(this.lW, this.lP.lH);\n                    // Calculate last point new aspect ratio\n                    this.nW = this.total / this.height;\n                    this.lP.nH = this.lP.total / this.nW;\n                    this.lP.nR = this.lP.aspectRatio(this.nW, this.lP.nH);\n                }\n                else {\n                    // Calculate last point old aspect ratio\n                    this.lH = this.nH;\n                    this.lP.lW = this.lP.total / this.lH;\n                    this.lP.lR = this.lP.aspectRatio(this.lP.lW, this.lH);\n                    // Calculate last point new aspect ratio\n                    this.nH = this.total / this.width;\n                    this.lP.nW = this.lP.total / this.nH;\n                    this.lP.nR = this.lP.aspectRatio(this.lP.nW, this.nH);\n                }\n                this.elArr.push(el);\n            };\n            TreemapAlgorithmGroup.prototype.reset = function () {\n                this.nW = 0;\n                this.lW = 0;\n                this.elArr = [];\n                this.total = 0;\n            };\n            return TreemapAlgorithmGroup;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapAlgorithmGroup;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapNode.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var TreemapNode = /** @class */ (function () {\n            function TreemapNode() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.childrenTotal = 0;\n                this.visible = false;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TreemapNode.prototype.init = function (id, i, children, height, level, series, parent) {\n                this.id = id;\n                this.i = i;\n                this.children = children;\n                this.height = height;\n                this.level = level;\n                this.series = series;\n                this.parent = parent;\n                return this;\n            };\n            return TreemapNode;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapNode;\n    });\n    _registerModule(_modules, 'Series/DrawPointUtilities.js', [], function () {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Handles the drawing of a component.\n         * Can be used for any type of component that reserves the graphic property,\n         * and provides a shouldDraw on its context.\n         *\n         * @private\n         *\n         * @todo add type checking.\n         * @todo export this function to enable usage\n         */\n        function draw(point, params) {\n            var animatableAttribs = params.animatableAttribs, onComplete = params.onComplete, css = params.css, renderer = params.renderer;\n            var animation = (point.series && point.series.chart.hasRendered) ?\n                // Chart-level animation on updates\n                void 0 :\n                // Series-level animation on new points\n                (point.series &&\n                    point.series.options.animation);\n            var graphic = point.graphic;\n            params.attribs = __assign(__assign({}, params.attribs), { 'class': point.getClassName() }) || {};\n            if ((point.shouldDraw())) {\n                if (!graphic) {\n                    if (params.shapeType === 'text') {\n                        graphic = renderer.text();\n                    }\n                    else if (params.shapeType === 'image') {\n                        graphic = renderer.image(params.imageUrl || '')\n                            .attr(params.shapeArgs || {});\n                    }\n                    else {\n                        graphic = renderer[params.shapeType](params.shapeArgs || {});\n                    }\n                    point.graphic = graphic;\n                    graphic.add(params.group);\n                }\n                if (css) {\n                    graphic.css(css);\n                }\n                graphic\n                    .attr(params.attribs)\n                    .animate(animatableAttribs, params.isNew ? false : animation, onComplete);\n            }\n            else if (graphic) {\n                var destroy_1 = function () {\n                    point.graphic = graphic = (graphic && graphic.destroy());\n                    if (typeof onComplete === 'function') {\n                        onComplete();\n                    }\n                };\n                // Animate only runs complete callback if something was animated.\n                if (Object.keys(animatableAttribs).length) {\n                    graphic.animate(animatableAttribs, void 0, function () { return destroy_1(); });\n                }\n                else {\n                    destroy_1();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var DrawPointUtilities = {\n            draw: draw\n        };\n\n        return DrawPointUtilities;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapPoint.js', [_modules['Series/DrawPointUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (DPU, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var _a = SeriesRegistry.seriesTypes, PiePoint = _a.pie.prototype.pointClass, ScatterPoint = _a.scatter.prototype.pointClass;\n        var extend = U.extend, isNumber = U.isNumber, pick = U.pick;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var TreemapPoint = /** @class */ (function (_super) {\n            __extends(TreemapPoint, _super);\n            function TreemapPoint() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                var _this = _super !== null && _super.apply(this, arguments) || this;\n                _this.shapeType = 'rect';\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            TreemapPoint.prototype.draw = function (params) {\n                DPU.draw(this, params);\n            };\n            TreemapPoint.prototype.getClassName = function () {\n                var series = this.series, options = series.options;\n                var className = _super.prototype.getClassName.call(this);\n                // Above the current level\n                if (this.node.level <= series.nodeMap[series.rootNode].level &&\n                    this.node.children.length) {\n                    className += ' highcharts-above-level';\n                }\n                else if (!this.node.isLeaf &&\n                    !pick(options.interactByLeaf, !options.allowTraversingTree)) {\n                    className += ' highcharts-internal-node-interactive';\n                }\n                else if (!this.node.isLeaf) {\n                    className += ' highcharts-internal-node';\n                }\n                return className;\n            };\n            /**\n             * A tree point is valid if it has han id too, assume it may be a parent\n             * item.\n             *\n             * @private\n             * @function Highcharts.Point#isValid\n             */\n            TreemapPoint.prototype.isValid = function () {\n                return Boolean(this.id || isNumber(this.value));\n            };\n            TreemapPoint.prototype.setState = function (state) {\n                _super.prototype.setState.apply(this, arguments);\n                // Graphic does not exist when point is not visible.\n                if (this.graphic) {\n                    this.graphic.attr({\n                        zIndex: state === 'hover' ? 1 : 0\n                    });\n                }\n            };\n            TreemapPoint.prototype.shouldDraw = function () {\n                return isNumber(this.plotY) && this.y !== null;\n            };\n            return TreemapPoint;\n        }(ScatterPoint));\n        extend(TreemapPoint.prototype, {\n            setVisible: PiePoint.prototype.setVisible\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapPoint;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapSeriesDefaults.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var isString = U.isString;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A treemap displays hierarchical data using nested rectangles. The data\n         * can be laid out in varying ways depending on options.\n         *\n         * @sample highcharts/demo/treemap-large-dataset/\n         *         Treemap\n         *\n         * @extends      plotOptions.scatter\n         * @excluding    cluster, connectEnds, connectNulls, dataSorting, dragDrop, jitter, marker\n         * @product      highcharts\n         * @requires     modules/treemap\n         * @optionparent plotOptions.treemap\n         */\n        var TreemapSeriesDefaults = {\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children. Deprecated and replaced by\n             * [allowTraversingTree](#plotOptions.treemap.allowTraversingTree).\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-allowdrilltonode/\n             *         Enabled\n             *\n             * @deprecated\n             * @type      {boolean}\n             * @default   false\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.allowDrillToNode\n             */\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-allowtraversingtree/\n             *         Enabled\n             *\n             * @since     7.0.3\n             * @product   highcharts\n             */\n            allowTraversingTree: false,\n            animationLimit: 250,\n            /**\n             * The border radius for each treemap item.\n             */\n            borderRadius: 0,\n            /**\n             * Options for the breadcrumbs, the navigation at the top leading the\n             * way up through the traversed levels.\n             *\n             *\n             * @since 10.0.0\n             * @product   highcharts\n             * @extends   navigation.breadcrumbs\n             * @apioption plotOptions.treemap.breadcrumbs\n             */\n            /**\n             * When the series contains less points than the crop threshold, all\n             * points are drawn, event if the points fall outside the visible plot\n             * area at the current zoom. The advantage of drawing all points\n             * (including markers and columns), is that animation is performed on\n             * updates. On the other hand, when the series contains more points than\n             * the crop threshold, the series data is cropped to only contain points\n             * that fall within the plot area. The advantage of cropping away\n             * invisible points is to increase performance on large series.\n             *\n             * @type      {number}\n             * @default   300\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.cropThreshold\n             */\n            /**\n             * Fires on a request for change of root node for the tree, before the\n             * update is made. An event object is passed to the function, containing\n             * additional properties `newRootId`, `previousRootId`, `redraw` and\n             * `trigger`.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-events-setrootnode/\n             *         Alert update information on setRootNode event.\n             *\n             * @type {Function}\n             * @default undefined\n             * @since 7.0.3\n             * @product highcharts\n             * @apioption plotOptions.treemap.events.setRootNode\n             */\n            /**\n             * This option decides if the user can interact with the parent nodes\n             * or just the leaf nodes. When this option is undefined, it will be\n             * true by default. However when allowTraversingTree is true, then it\n             * will be false by default.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-false/\n             *         False\n             * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-true-and-allowtraversingtree/\n             *         InteractByLeaf and allowTraversingTree is true\n             *\n             * @type      {boolean}\n             * @since     4.1.2\n             * @product   highcharts\n             * @apioption plotOptions.treemap.interactByLeaf\n             */\n            /**\n             * The sort index of the point inside the treemap level.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-sortindex/\n             *         Sort by years\n             *\n             * @type      {number}\n             * @since     4.1.10\n             * @product   highcharts\n             * @apioption plotOptions.treemap.sortIndex\n             */\n            /**\n             * A series specific or series type specific color set to apply instead\n             * of the global [colors](#colors) when\n             * [colorByPoint](#plotOptions.treemap.colorByPoint) is true.\n             *\n             * @type      {Array<Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject>}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.colors\n             */\n            /**\n             * Whether to display this series type or specific series item in the\n             * legend.\n             */\n            showInLegend: false,\n            /**\n             * @ignore-option\n             */\n            marker: void 0,\n            /**\n             * When using automatic point colors pulled from the `options.colors`\n             * collection, this option determines whether the chart should receive\n             * one color per series or one color per point.\n             *\n             * @see [series colors](#plotOptions.treemap.colors)\n             *\n             * @since     2.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.colorByPoint\n             */\n            colorByPoint: false,\n            /**\n             * @since 4.1.0\n             */\n            dataLabels: {\n                defer: false,\n                enabled: true,\n                formatter: function () {\n                    var point = this && this.point ?\n                        this.point :\n                        {}, name = isString(point.name) ? point.name : '';\n                    return name;\n                },\n                inside: true,\n                verticalAlign: 'middle'\n            },\n            tooltip: {\n                headerFormat: '',\n                pointFormat: '<b>{point.name}</b>: {point.value}<br/>'\n            },\n            /**\n             * Whether to ignore hidden points when the layout algorithm runs.\n             * If `false`, hidden points will leave open spaces.\n             *\n             * @since 5.0.8\n             */\n            ignoreHiddenPoint: true,\n            /**\n             * This option decides which algorithm is used for setting position\n             * and dimensions of the points.\n             *\n             * @see [How to write your own algorithm](https://www.highcharts.com/docs/chart-and-series-types/treemap)\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-sliceanddice/\n             *         SliceAndDice by default\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-stripes/\n             *         Stripes\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-squarified/\n             *         Squarified\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-strip/\n             *         Strip\n             *\n             * @since      4.1.0\n             * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n             */\n            layoutAlgorithm: 'sliceAndDice',\n            /**\n             * Defines which direction the layout algorithm will start drawing.\n             *\n             * @since       4.1.0\n             * @validvalue [\"vertical\", \"horizontal\"]\n             */\n            layoutStartingDirection: 'vertical',\n            /**\n             * Enabling this option will make the treemap alternate the drawing\n             * direction between vertical and horizontal. The next levels starting\n             * direction will always be the opposite of the previous.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-alternatestartingdirection-true/\n             *         Enabled\n             *\n             * @since 4.1.0\n             */\n            alternateStartingDirection: false,\n            /**\n             * Used together with the levels and allowTraversingTree options. When\n             * set to false the first level visible to be level one, which is\n             * dynamic when traversing the tree. Otherwise the level will be the\n             * same as the tree structure.\n             *\n             * @since 4.1.0\n             */\n            levelIsConstant: true,\n            /**\n             * Options for the button appearing when traversing down in a treemap.\n             *\n             * Since v9.3.3 the `traverseUpButton` is replaced by `breadcrumbs`.\n             *\n             * @deprecated\n             */\n            traverseUpButton: {\n                /**\n                 * The position of the button.\n                 */\n                position: {\n                    /**\n                     * Vertical alignment of the button.\n                     *\n                     * @type      {Highcharts.VerticalAlignValue}\n                     * @default   top\n                     * @product   highcharts\n                     * @apioption plotOptions.treemap.traverseUpButton.position.verticalAlign\n                     */\n                    /**\n                     * Horizontal alignment of the button.\n                     *\n                     * @type {Highcharts.AlignValue}\n                     */\n                    align: 'right',\n                    /**\n                     * Horizontal offset of the button.\n                     */\n                    x: -10,\n                    /**\n                     * Vertical offset of the button.\n                     */\n                    y: 10\n                }\n            },\n            /**\n             * Set options on specific levels. Takes precedence over series options,\n             * but not point options.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n             *         Styling dataLabels and borders\n             * @sample {highcharts} highcharts/demo/treemap-with-levels/\n             *         Different layoutAlgorithm\n             *\n             * @type      {Array<*>}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels\n             */\n            /**\n             * Can set a `borderColor` on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderColor\n             */\n            /**\n             * Set the dash style of the border of all the point which lies on the\n             * level. See\n             * [plotOptions.scatter.dashStyle](#plotoptions.scatter.dashstyle)\n             * for possible options.\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderDashStyle\n             */\n            /**\n             * Can set the borderWidth on all points which lies on the same level.\n             *\n             * @type      {number}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderWidth\n             */\n            /**\n             * Can set a color on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.color\n             */\n            /**\n             * A configuration object to define how the color of a child varies from\n             * the parent's color. The variation is distributed among the children\n             * of node. For example when setting brightness, the brightness change\n             * will range from the parent's original brightness on the first child,\n             * to the amount set in the `to` setting on the last node. This allows a\n             * gradient-like color scheme that sets children out from each other\n             * while highlighting the grouping on treemaps and sectors on sunburst\n             * charts.\n             *\n             * @sample highcharts/demo/sunburst/\n             *         Sunburst with color variation\n             *\n             * @sample highcharts/series-treegraph/color-variation\n             *         Treegraph nodes with color variation\n             *\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.colorVariation\n             */\n            /**\n             * The key of a color variation. Currently supports `brightness` only.\n             *\n             * @type       {string}\n             * @since      6.0.0\n             * @product    highcharts\n             * @validvalue [\"brightness\"]\n             * @apioption  plotOptions.treemap.levels.colorVariation.key\n             */\n            /**\n             * The ending value of a color variation. The last sibling will receive\n             * this value.\n             *\n             * @type      {number}\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.colorVariation.to\n             */\n            /**\n             * Can set the options of dataLabels on each point which lies on the\n             * level.\n             * [plotOptions.treemap.dataLabels](#plotOptions.treemap.dataLabels) for\n             * possible values.\n             *\n             * @extends   plotOptions.treemap.dataLabels\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.dataLabels\n             */\n            /**\n             * Can set the layoutAlgorithm option on a specific level.\n             *\n             * @type       {string}\n             * @since      4.1.0\n             * @product    highcharts\n             * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n             * @apioption  plotOptions.treemap.levels.layoutAlgorithm\n             */\n            /**\n             * Can set the layoutStartingDirection option on a specific level.\n             *\n             * @type       {string}\n             * @since      4.1.0\n             * @product    highcharts\n             * @validvalue [\"vertical\", \"horizontal\"]\n             * @apioption  plotOptions.treemap.levels.layoutStartingDirection\n             */\n            /**\n             * Decides which level takes effect from the options set in the levels\n             * object.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n             *         Styling of both levels\n             *\n             * @type      {number}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.level\n             */\n            // Presentational options\n            /**\n             * The color of the border surrounding each tree map item.\n             *\n             * @type {Highcharts.ColorString}\n             */\n            borderColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n            /**\n             * The width of the border surrounding each tree map item.\n             */\n            borderWidth: 1,\n            colorKey: 'colorValue',\n            /**\n             * The opacity of a point in treemap. When a point has children, the\n             * visibility of the children is determined by the opacity.\n             *\n             * @since 4.2.4\n             */\n            opacity: 0.15,\n            /**\n             * A wrapper object for all the series options in specific states.\n             *\n             * @extends plotOptions.heatmap.states\n             */\n            states: {\n                /**\n                 * Options for the hovered series\n                 *\n                 * @extends   plotOptions.heatmap.states.hover\n                 * @excluding halo\n                 */\n                hover: {\n                    /**\n                     * The border color for the hovered state.\n                     */\n                    borderColor: \"#999999\" /* Palette.neutralColor40 */,\n                    /**\n                     * Brightness for the hovered point. Defaults to 0 if the\n                     * heatmap series is loaded first, otherwise 0.1.\n                     *\n                     * @type    {number}\n                     * @default undefined\n                     */\n                    brightness: SeriesRegistry.seriesTypes.heatmap ? 0 : 0.1,\n                    /**\n                     * @extends plotOptions.heatmap.states.hover.halo\n                     */\n                    halo: false,\n                    /**\n                     * The opacity of a point in treemap. When a point has children,\n                     * the visibility of the children is determined by the opacity.\n                     *\n                     * @since 4.2.4\n                     */\n                    opacity: 0.75,\n                    /**\n                     * The shadow option for hovered state.\n                     */\n                    shadow: false\n                }\n            },\n            legendSymbol: 'rectangle',\n            /**\n             * This option enables automatic traversing to the last child level upon\n             * node interaction. This feature simplifies navigation by immediately\n             * focusing on the deepest layer of the data structure without intermediate\n             * steps.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-traverse-to-leaf/\n             *         Traverse to leaf enabled\n             *\n             * @since   @next\n             *\n             * @product highcharts\n             */\n            traverseToLeaf: false\n        };\n        /**\n         * A `treemap` series. If the [type](#series.treemap.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.treemap\n         * @excluding dataParser, dataURL, stack, dataSorting\n         * @product   highcharts\n         * @requires  modules/treemap\n         * @apioption series.treemap\n         */\n        /**\n         * An array of data points for the series. For the `treemap` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `value` options. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.treemap.turboThreshold),\n         *    this option is not available.\n         *    ```js\n         *      data: [{\n         *        value: 9,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *      }, {\n         *        value: 6,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *      }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|null|*>}\n         * @extends   series.heatmap.data\n         * @excluding x, y, pointPadding\n         * @product   highcharts\n         * @apioption series.treemap.data\n         */\n        /**\n         * The value of the point, resulting in a relative area of the point\n         * in the treemap.\n         *\n         * @type      {number|null}\n         * @product   highcharts\n         * @apioption series.treemap.data.value\n         */\n        /**\n         * Serves a purpose only if a `colorAxis` object is defined in the chart\n         * options. This value will decide which color the point gets from the\n         * scale of the colorAxis.\n         *\n         * @type      {number}\n         * @since     4.1.0\n         * @product   highcharts\n         * @apioption series.treemap.data.colorValue\n         */\n        /**\n         * Only for treemap. Use this option to build a tree structure. The\n         * value should be the id of the point which is the parent. If no points\n         * has a matching id, or this option is undefined, then the parent will\n         * be set to the root.\n         *\n         * @sample {highcharts} highcharts/point/parent/\n         *         Point parent\n         * @sample {highcharts} highcharts/demo/treemap-with-levels/\n         *         Example where parent id is not matching\n         *\n         * @type      {string}\n         * @since     4.1.0\n         * @product   highcharts\n         * @apioption series.treemap.data.parent\n         */\n        ''; // Keeps doclets above detached\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var TreemapUtilities;\n        (function (TreemapUtilities) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @todo find correct name for this function.\n             * @todo Similar to reduce, this function is likely redundant\n             */\n            function recursive(item, func, context) {\n                var next = func.call(context || this, item);\n                if (next !== false) {\n                    recursive(next, func, context);\n                }\n            }\n            TreemapUtilities.recursive = recursive;\n        })(TreemapUtilities || (TreemapUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapUtilities;\n    });\n    _registerModule(_modules, 'Series/TreeUtilities.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var extend = U.extend, isArray = U.isArray, isNumber = U.isNumber, isObject = U.isObject, merge = U.merge, pick = U.pick, relativeLength = U.relativeLength;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getColor(node, options) {\n            var index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n            var getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n            /**\n             * @private\n             */\n            var variateColor = function (color) {\n                var colorVariation = level && level.colorVariation;\n                if (colorVariation &&\n                    colorVariation.key === 'brightness' &&\n                    index &&\n                    siblings) {\n                    return Color.parse(color).brighten(colorVariation.to * (index / siblings)).get();\n                }\n                return color;\n            };\n            if (node) {\n                point = points[node.i];\n                level = mapOptionsToLevel[node.level] || {};\n                getColorByPoint = point && level.colorByPoint;\n                if (getColorByPoint) {\n                    colorIndexByPoint = point.index % (colors ?\n                        colors.length :\n                        chartOptionsChart.colorCount);\n                    colorByPoint = colors && colors[colorIndexByPoint];\n                }\n                // Select either point color, level color or inherited color.\n                if (!series.chart.styledMode) {\n                    color = pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n                }\n                colorIndex = pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n            }\n            return {\n                color: color,\n                colorIndex: colorIndex\n            };\n        }\n        /**\n         * Creates a map from level number to its given options.\n         *\n         * @private\n         *\n         * @param {Object} params\n         * Object containing parameters.\n         * - `defaults` Object containing default options. The default options are\n         *   merged with the userOptions to get the final options for a specific\n         *   level.\n         * - `from` The lowest level number.\n         * - `levels` User options from series.levels.\n         * - `to` The highest level number.\n         *\n         * @return {Highcharts.Dictionary<object>|null}\n         * Returns a map from level number to its given options.\n         */\n        function getLevelOptions(params) {\n            var result = {};\n            var defaults, converted, i, from, to, levels;\n            if (isObject(params)) {\n                from = isNumber(params.from) ? params.from : 1;\n                levels = params.levels;\n                converted = {};\n                defaults = isObject(params.defaults) ? params.defaults : {};\n                if (isArray(levels)) {\n                    converted = levels.reduce(function (obj, item) {\n                        var level, levelIsConstant, options;\n                        if (isObject(item) && isNumber(item.level)) {\n                            options = merge({}, item);\n                            levelIsConstant = pick(options.levelIsConstant, defaults.levelIsConstant);\n                            // Delete redundant properties.\n                            delete options.levelIsConstant;\n                            delete options.level;\n                            // Calculate which level these options apply to.\n                            level = item.level + (levelIsConstant ? 0 : from - 1);\n                            if (isObject(obj[level])) {\n                                merge(true, obj[level], options); // #16329\n                            }\n                            else {\n                                obj[level] = options;\n                            }\n                        }\n                        return obj;\n                    }, {});\n                }\n                to = isNumber(params.to) ? params.to : 1;\n                for (i = 0; i <= to; i++) {\n                    result[i] = merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         * @todo Combine buildTree and buildNode with setTreeValues\n         * @todo Remove logic from Treemap and make it utilize this mixin.\n         */\n        function setTreeValues(tree, options) {\n            var before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n            var childrenTotal = 0;\n            tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n            tree.name = pick(point && point.name, '');\n            tree.visible = (idRoot === tree.id ||\n                options.visible === true);\n            if (typeof before === 'function') {\n                tree = before(tree, options);\n            }\n            // First give the children some values\n            tree.children.forEach(function (child, i) {\n                var newOptions = extend({}, options);\n                extend(newOptions, {\n                    index: i,\n                    siblings: tree.children.length,\n                    visible: tree.visible\n                });\n                child = setTreeValues(child, newOptions);\n                children.push(child);\n                if (child.visible) {\n                    childrenTotal += child.val;\n                }\n            });\n            // Set the values\n            var value = pick(optionsPoint.value, childrenTotal);\n            tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n            tree.children = children;\n            tree.childrenTotal = childrenTotal;\n            tree.isLeaf = tree.visible && !childrenTotal;\n            tree.val = value;\n            return tree;\n        }\n        /**\n         * Update the rootId property on the series. Also makes sure that it is\n         * accessible to exporting.\n         *\n         * @private\n         *\n         * @param {Object} series\n         * The series to operate on.\n         *\n         * @return {string}\n         * Returns the resulting rootId after update.\n         */\n        function updateRootId(series) {\n            var rootId, options;\n            if (isObject(series)) {\n                // Get the series options.\n                options = isObject(series.options) ? series.options : {};\n                // Calculate the rootId.\n                rootId = pick(series.rootNode, options.rootId, '');\n                // Set rootId on series.userOptions to pick it up in exporting.\n                if (isObject(series.userOptions)) {\n                    series.userOptions.rootId = rootId;\n                }\n                // Set rootId on series to pick it up on next update.\n                series.rootNode = rootId;\n            }\n            return rootId;\n        }\n        /**\n         * Get the node width, which relies on the plot width and the nodeDistance\n         * option.\n         *\n         * @private\n         */\n        function getNodeWidth(series, columnCount) {\n            var chart = series.chart, options = series.options, _a = options.nodeDistance, nodeDistance = _a === void 0 ? 0 : _a, _b = options.nodeWidth, nodeWidth = _b === void 0 ? 0 : _b, _c = chart.plotSizeX, plotSizeX = _c === void 0 ? 1 : _c;\n            // Node width auto means they are evenly distributed along the width of\n            // the plot area\n            if (nodeWidth === 'auto') {\n                if (typeof nodeDistance === 'string' && /%$/.test(nodeDistance)) {\n                    var fraction = parseFloat(nodeDistance) / 100, total = columnCount + fraction * (columnCount - 1);\n                    return plotSizeX / total;\n                }\n                var nDistance = Number(nodeDistance);\n                return ((plotSizeX + nDistance) /\n                    (columnCount || 1)) - nDistance;\n            }\n            return relativeLength(nodeWidth, plotSizeX);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var TreeUtilities = {\n            getColor: getColor,\n            getLevelOptions: getLevelOptions,\n            getNodeWidth: getNodeWidth,\n            setTreeValues: setTreeValues,\n            updateRootId: updateRootId\n        };\n\n        return TreeUtilities;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapSeries.js', [_modules['Extensions/Breadcrumbs/Breadcrumbs.js'], _modules['Core/Color/Color.js'], _modules['Series/ColorMapComposition.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Treemap/TreemapAlgorithmGroup.js'], _modules['Series/Treemap/TreemapNode.js'], _modules['Series/Treemap/TreemapPoint.js'], _modules['Series/Treemap/TreemapSeriesDefaults.js'], _modules['Series/Treemap/TreemapUtilities.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js']], function (Breadcrumbs, Color, ColorMapComposition, H, SeriesRegistry, TreemapAlgorithmGroup, TreemapNode, TreemapPoint, TreemapSeriesDefaults, TreemapUtilities, TU, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var color = Color.parse;\n        var composed = H.composed, noop = H.noop;\n        var _a = SeriesRegistry.seriesTypes, ColumnSeries = _a.column, ScatterSeries = _a.scatter;\n        var getColor = TU.getColor, getLevelOptions = TU.getLevelOptions, updateRootId = TU.updateRootId;\n        var addEvent = U.addEvent, correctFloat = U.correctFloat, crisp = U.crisp, defined = U.defined, error = U.error, extend = U.extend, fireEvent = U.fireEvent, isArray = U.isArray, isObject = U.isObject, isString = U.isString, merge = U.merge, pick = U.pick, pushUnique = U.pushUnique, stableSort = U.stableSort;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var axisMax = 100;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        var treemapAxisDefaultValues = false;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /** @private */\n        function onSeriesAfterBindAxes() {\n            var series = this, xAxis = series.xAxis, yAxis = series.yAxis;\n            var treeAxis;\n            if (xAxis && yAxis) {\n                if (series.is('treemap')) {\n                    treeAxis = {\n                        endOnTick: false,\n                        gridLineWidth: 0,\n                        lineWidth: 0,\n                        min: 0,\n                        minPadding: 0,\n                        max: axisMax,\n                        maxPadding: 0,\n                        startOnTick: false,\n                        title: void 0,\n                        tickPositions: []\n                    };\n                    extend(yAxis.options, treeAxis);\n                    extend(xAxis.options, treeAxis);\n                    treemapAxisDefaultValues = true;\n                }\n                else if (treemapAxisDefaultValues) {\n                    yAxis.setOptions(yAxis.userOptions);\n                    xAxis.setOptions(xAxis.userOptions);\n                    treemapAxisDefaultValues = false;\n                }\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.treemap\n         *\n         * @augments Highcharts.Series\n         */\n        var TreemapSeries = /** @class */ (function (_super) {\n            __extends(TreemapSeries, _super);\n            function TreemapSeries() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            TreemapSeries.compose = function (SeriesClass) {\n                if (pushUnique(composed, 'TreemapSeries')) {\n                    addEvent(SeriesClass, 'afterBindAxes', onSeriesAfterBindAxes);\n                }\n            };\n            /* *\n             *\n             *  Function\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            TreemapSeries.prototype.algorithmCalcPoints = function (directionChange, last, group, childrenArea) {\n                var plot = group.plot, end = group.elArr.length - 1;\n                var pX, pY, pW, pH, gW = group.lW, gH = group.lH, keep, i = 0;\n                if (last) {\n                    gW = group.nW;\n                    gH = group.nH;\n                }\n                else {\n                    keep = group.elArr[end];\n                }\n                for (var _i = 0, _a = group.elArr; _i < _a.length; _i++) {\n                    var p = _a[_i];\n                    if (last || (i < end)) {\n                        if (group.direction === 0) {\n                            pX = plot.x;\n                            pY = plot.y;\n                            pW = gW;\n                            pH = p / pW;\n                        }\n                        else {\n                            pX = plot.x;\n                            pY = plot.y;\n                            pH = gH;\n                            pW = p / pH;\n                        }\n                        childrenArea.push({\n                            x: pX,\n                            y: pY,\n                            width: pW,\n                            height: correctFloat(pH)\n                        });\n                        if (group.direction === 0) {\n                            plot.y = plot.y + pH;\n                        }\n                        else {\n                            plot.x = plot.x + pW;\n                        }\n                    }\n                    i = i + 1;\n                }\n                // Reset variables\n                group.reset();\n                if (group.direction === 0) {\n                    group.width = group.width - gW;\n                }\n                else {\n                    group.height = group.height - gH;\n                }\n                plot.y = plot.parent.y + (plot.parent.height - group.height);\n                plot.x = plot.parent.x + (plot.parent.width - group.width);\n                if (directionChange) {\n                    group.direction = 1 - group.direction;\n                }\n                // If not last, then add uncalculated element\n                if (!last) {\n                    group.addElement(keep);\n                }\n            };\n            TreemapSeries.prototype.algorithmFill = function (directionChange, parent, children) {\n                var childrenArea = [];\n                var pTot, direction = parent.direction, x = parent.x, y = parent.y, width = parent.width, height = parent.height, pX, pY, pW, pH;\n                for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n                    var child = children_1[_i];\n                    pTot =\n                        (parent.width * parent.height) * (child.val / parent.val);\n                    pX = x;\n                    pY = y;\n                    if (direction === 0) {\n                        pH = height;\n                        pW = pTot / pH;\n                        width = width - pW;\n                        x = x + pW;\n                    }\n                    else {\n                        pW = width;\n                        pH = pTot / pW;\n                        height = height - pH;\n                        y = y + pH;\n                    }\n                    childrenArea.push({\n                        x: pX,\n                        y: pY,\n                        width: pW,\n                        height: pH\n                    });\n                    if (directionChange) {\n                        direction = 1 - direction;\n                    }\n                }\n                return childrenArea;\n            };\n            TreemapSeries.prototype.algorithmLowAspectRatio = function (directionChange, parent, children) {\n                var series = this, childrenArea = [], plot = {\n                    x: parent.x,\n                    y: parent.y,\n                    parent: parent\n                }, direction = parent.direction, end = children.length - 1, group = new TreemapAlgorithmGroup(parent.height, parent.width, direction, plot);\n                var pTot, i = 0;\n                // Loop through and calculate all areas\n                for (var _i = 0, children_2 = children; _i < children_2.length; _i++) {\n                    var child = children_2[_i];\n                    pTot =\n                        (parent.width * parent.height) * (child.val / parent.val);\n                    group.addElement(pTot);\n                    if (group.lP.nR > group.lP.lR) {\n                        series.algorithmCalcPoints(directionChange, false, group, childrenArea, plot // @todo no supported\n                        );\n                    }\n                    // If last child, then calculate all remaining areas\n                    if (i === end) {\n                        series.algorithmCalcPoints(directionChange, true, group, childrenArea, plot // @todo not supported\n                        );\n                    }\n                    ++i;\n                }\n                return childrenArea;\n            };\n            /**\n             * Over the alignment method by setting z index.\n             * @private\n             */\n            TreemapSeries.prototype.alignDataLabel = function (point, dataLabel, labelOptions) {\n                var style = labelOptions.style;\n                // #8160: Prevent the label from exceeding the point's\n                // boundaries in treemaps by applying ellipsis overflow.\n                // The issue was happening when datalabel's text contained a\n                // long sequence of characters without a whitespace.\n                if (style &&\n                    !defined(style.textOverflow) &&\n                    dataLabel.text &&\n                    dataLabel.getBBox().width > (dataLabel.text.textWidth || 0)) {\n                    dataLabel.css({\n                        textOverflow: 'ellipsis',\n                        // Unit (px) is required when useHTML is true\n                        width: style.width += 'px'\n                    });\n                }\n                ColumnSeries.prototype.alignDataLabel.apply(this, arguments);\n                if (point.dataLabel) {\n                    // `point.node.zIndex` could be undefined (#6956)\n                    point.dataLabel.attr({ zIndex: (point.node.zIndex || 0) + 1 });\n                }\n            };\n            /**\n             * Recursive function which calculates the area for all children of a\n             * node.\n             *\n             * @private\n             * @function Highcharts.Series#calculateChildrenAreas\n             *\n             * @param {Object} parent\n             * The node which is parent to the children.\n             *\n             * @param {Object} area\n             * The rectangular area of the parent.\n             */\n            TreemapSeries.prototype.calculateChildrenAreas = function (parent, area) {\n                var series = this, options = series.options, mapOptionsToLevel = series.mapOptionsToLevel, level = mapOptionsToLevel[parent.level + 1], algorithm = pick((series[(level && level.layoutAlgorithm)] &&\n                    level.layoutAlgorithm), options.layoutAlgorithm), alternate = options.alternateStartingDirection, \n                // Collect all children which should be included\n                children = parent.children.filter(function (n) { return !n.ignore; });\n                var childrenValues = [];\n                if (level && level.layoutStartingDirection) {\n                    area.direction = level.layoutStartingDirection === 'vertical' ?\n                        0 :\n                        1;\n                }\n                childrenValues = series[algorithm](area, children);\n                var i = -1;\n                for (var _i = 0, children_3 = children; _i < children_3.length; _i++) {\n                    var child = children_3[_i];\n                    var values = childrenValues[++i];\n                    child.values = merge(values, {\n                        val: child.childrenTotal,\n                        direction: (alternate ? 1 - area.direction : area.direction)\n                    });\n                    child.pointValues = merge(values, {\n                        x: (values.x / series.axisRatio),\n                        // Flip y-values to avoid visual regression with csvCoord in\n                        // Axis.translate at setPointValues. #12488\n                        y: axisMax - values.y - values.height,\n                        width: (values.width / series.axisRatio)\n                    });\n                    // If node has children, then call method recursively\n                    if (child.children.length) {\n                        series.calculateChildrenAreas(child, child.values);\n                    }\n                }\n            };\n            /**\n             * Create level list.\n             * @private\n             */\n            TreemapSeries.prototype.createList = function (e) {\n                var chart = this.chart, breadcrumbs = chart.breadcrumbs, list = [];\n                if (breadcrumbs) {\n                    var currentLevelNumber = 0;\n                    list.push({\n                        level: currentLevelNumber,\n                        levelOptions: chart.series[0]\n                    });\n                    var node = e.target.nodeMap[e.newRootId];\n                    var extraNodes = [];\n                    // When the root node is set and has parent,\n                    // recreate the path from the node tree.\n                    while (node.parent || node.parent === '') {\n                        extraNodes.push(node);\n                        node = e.target.nodeMap[node.parent];\n                    }\n                    for (var _i = 0, _a = extraNodes.reverse(); _i < _a.length; _i++) {\n                        var node_1 = _a[_i];\n                        list.push({\n                            level: ++currentLevelNumber,\n                            levelOptions: node_1\n                        });\n                    }\n                    // If the list has only first element, we should clear it\n                    if (list.length <= 1) {\n                        list.length = 0;\n                    }\n                }\n                return list;\n            };\n            /**\n             * Extend drawDataLabels with logic to handle custom options related to\n             * the treemap series:\n             *\n             * - Points which is not a leaf node, has dataLabels disabled by\n             *   default.\n             *\n             * - Options set on series.levels is merged in.\n             *\n             * - Width of the dataLabel is set to match the width of the point\n             *   shape.\n             *\n             * @private\n             */\n            TreemapSeries.prototype.drawDataLabels = function () {\n                var series = this, mapOptionsToLevel = series.mapOptionsToLevel, points = series.points.filter(function (n) {\n                    return n.node.visible;\n                });\n                var options, level;\n                for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n                    var point = points_1[_i];\n                    level = mapOptionsToLevel[point.node.level];\n                    // Set options to new object to avoid problems with scope\n                    options = { style: {} };\n                    // If not a leaf, then label should be disabled as default\n                    if (!point.node.isLeaf) {\n                        options.enabled = false;\n                    }\n                    // If options for level exists, include them as well\n                    if (level && level.dataLabels) {\n                        options = merge(options, level.dataLabels);\n                        series.hasDataLabels = function () { return true; };\n                    }\n                    // Set dataLabel width to the width of the point shape.\n                    if (point.shapeArgs) {\n                        options.style.width = point.shapeArgs.width;\n                        if (point.dataLabel) {\n                            point.dataLabel.css({\n                                width: point.shapeArgs.width + 'px'\n                            });\n                        }\n                    }\n                    // Merge custom options with point options\n                    point.dlOptions = merge(options, point.options.dataLabels);\n                }\n                _super.prototype.drawDataLabels.call(this);\n            };\n            /**\n             * Override drawPoints\n             * @private\n             */\n            TreemapSeries.prototype.drawPoints = function (points) {\n                if (points === void 0) { points = this.points; }\n                var series = this, chart = series.chart, renderer = chart.renderer, styledMode = chart.styledMode, options = series.options, shadow = styledMode ? {} : options.shadow, borderRadius = options.borderRadius, withinAnimationLimit = chart.pointCount < options.animationLimit, allowTraversingTree = options.allowTraversingTree;\n                for (var _i = 0, points_2 = points; _i < points_2.length; _i++) {\n                    var point = points_2[_i];\n                    var levelDynamic = point.node.levelDynamic, animatableAttribs = {}, attribs = {}, css = {}, groupKey = 'level-group-' + point.node.level, hasGraphic = !!point.graphic, shouldAnimate = withinAnimationLimit && hasGraphic, shapeArgs = point.shapeArgs;\n                    // Don't bother with calculate styling if the point is not drawn\n                    if (point.shouldDraw()) {\n                        point.isInside = true;\n                        if (borderRadius) {\n                            attribs.r = borderRadius;\n                        }\n                        merge(true, // Extend object\n                        // Which object to extend\n                        shouldAnimate ? animatableAttribs : attribs, \n                        // Add shapeArgs to animate/attr if graphic exists\n                        hasGraphic ? shapeArgs : {}, \n                        // Add style attribs if !styleMode\n                        styledMode ?\n                            {} :\n                            series.pointAttribs(point, point.selected ? 'select' : void 0));\n                        // In styled mode apply point.color. Use CSS, otherwise the\n                        // fill used in the style sheet will take precedence over\n                        // the fill attribute.\n                        if (series.colorAttribs && styledMode) {\n                            // Heatmap is loaded\n                            extend(css, series.colorAttribs(point));\n                        }\n                        if (!series[groupKey]) {\n                            series[groupKey] = renderer.g(groupKey)\n                                .attr({\n                                // @todo Set the zIndex based upon the number of\n                                // levels, instead of using 1000\n                                zIndex: 1000 - (levelDynamic || 0)\n                            })\n                                .add(series.group);\n                            series[groupKey].survive = true;\n                        }\n                    }\n                    // Draw the point\n                    point.draw({\n                        animatableAttribs: animatableAttribs,\n                        attribs: attribs,\n                        css: css,\n                        group: series[groupKey],\n                        imageUrl: point.imageUrl,\n                        renderer: renderer,\n                        shadow: shadow,\n                        shapeArgs: shapeArgs,\n                        shapeType: point.shapeType\n                    });\n                    // If setRootNode is allowed, set a point cursor on clickables &\n                    // add drillId to point\n                    if (allowTraversingTree && point.graphic) {\n                        point.drillId = options.interactByLeaf ?\n                            series.drillToByLeaf(point) :\n                            series.drillToByGroup(point);\n                    }\n                }\n            };\n            /**\n             * Finds the drill id for a parent node. Returns false if point should\n             * not have a click event.\n             * @private\n             */\n            TreemapSeries.prototype.drillToByGroup = function (point) {\n                var drillId = false;\n                if (!point.node.isLeaf &&\n                    (point.node.level - this.nodeMap[this.rootNode].level) === 1) {\n                    drillId = point.id;\n                }\n                return drillId;\n            };\n            /**\n             * Finds the drill id for a leaf node. Returns false if point should not\n             * have a click event\n             * @private\n             */\n            TreemapSeries.prototype.drillToByLeaf = function (point) {\n                var traverseToLeaf = point.series.options.traverseToLeaf;\n                var drillId = false, nodeParent;\n                if ((point.node.parent !== this.rootNode) &&\n                    point.node.isLeaf) {\n                    if (traverseToLeaf) {\n                        drillId = point.id;\n                    }\n                    else {\n                        nodeParent = point.node;\n                        while (!drillId) {\n                            if (typeof nodeParent.parent !== 'undefined') {\n                                nodeParent = this.nodeMap[nodeParent.parent];\n                            }\n                            if (nodeParent.parent === this.rootNode) {\n                                drillId = nodeParent.id;\n                            }\n                        }\n                    }\n                }\n                return drillId;\n            };\n            /**\n             * @todo remove this function at a suitable version.\n             * @private\n             */\n            TreemapSeries.prototype.drillToNode = function (id, redraw) {\n                error(32, false, void 0, { 'treemap.drillToNode': 'use treemap.setRootNode' });\n                this.setRootNode(id, redraw);\n            };\n            TreemapSeries.prototype.drillUp = function () {\n                var series = this, node = series.nodeMap[series.rootNode];\n                if (node && isString(node.parent)) {\n                    series.setRootNode(node.parent, true, { trigger: 'traverseUpButton' });\n                }\n            };\n            TreemapSeries.prototype.getExtremes = function () {\n                // Get the extremes from the value data\n                var _a = _super.prototype.getExtremes.call(this, this.colorValueData), dataMin = _a.dataMin, dataMax = _a.dataMax;\n                this.valueMin = dataMin;\n                this.valueMax = dataMax;\n                // Get the extremes from the y data\n                return _super.prototype.getExtremes.call(this);\n            };\n            /**\n             * Creates an object map from parent id to childrens index.\n             *\n             * @private\n             * @function Highcharts.Series#getListOfParents\n             *\n             * @param {Highcharts.SeriesTreemapDataOptions} [data]\n             *        List of points set in options.\n             *\n             * @param {Array<string>} [existingIds]\n             *        List of all point ids.\n             *\n             * @return {Object}\n             *         Map from parent id to children index in data.\n             */\n            TreemapSeries.prototype.getListOfParents = function (data, existingIds) {\n                var arr = isArray(data) ? data : [], ids = isArray(existingIds) ? existingIds : [], listOfParents = arr.reduce(function (prev, curr, i) {\n                    var parent = pick(curr.parent, '');\n                    if (typeof prev[parent] === 'undefined') {\n                        prev[parent] = [];\n                    }\n                    prev[parent].push(i);\n                    return prev;\n                }, {\n                    '': [] // Root of tree\n                });\n                // If parent does not exist, hoist parent to root of tree.\n                for (var _i = 0, _a = Object.keys(listOfParents); _i < _a.length; _i++) {\n                    var parent_1 = _a[_i];\n                    var children = listOfParents[parent_1];\n                    if ((parent_1 !== '') && (ids.indexOf(parent_1) === -1)) {\n                        for (var _b = 0, children_4 = children; _b < children_4.length; _b++) {\n                            var child = children_4[_b];\n                            listOfParents[''].push(child);\n                        }\n                        delete listOfParents[parent_1];\n                    }\n                }\n                return listOfParents;\n            };\n            /**\n             * Creates a tree structured object from the series points.\n             * @private\n             */\n            TreemapSeries.prototype.getTree = function () {\n                var series = this, allIds = this.data.map(function (d) {\n                    return d.id;\n                }), parentList = series.getListOfParents(this.data, allIds);\n                series.nodeMap = {};\n                series.nodeList = [];\n                return series.buildTree('', -1, 0, parentList);\n            };\n            TreemapSeries.prototype.buildTree = function (id, index, level, list, parent) {\n                var series = this, children = [], point = series.points[index];\n                var height = 0, child;\n                // Actions\n                for (var _i = 0, _a = (list[id] || []); _i < _a.length; _i++) {\n                    var i = _a[_i];\n                    child = series.buildTree(series.points[i].id, i, level + 1, list, id);\n                    height = Math.max(child.height + 1, height);\n                    children.push(child);\n                }\n                var node = new series.NodeClass().init(id, index, children, height, level, series, parent);\n                for (var _b = 0, children_5 = children; _b < children_5.length; _b++) {\n                    var child_1 = children_5[_b];\n                    child_1.parentNode = node;\n                }\n                series.nodeMap[node.id] = node;\n                series.nodeList.push(node);\n                if (point) {\n                    point.node = node;\n                    node.point = point;\n                }\n                return node;\n            };\n            /**\n             * Define hasData function for non-cartesian series. Returns true if the\n             * series has points at all.\n             * @private\n             */\n            TreemapSeries.prototype.hasData = function () {\n                return !!this.processedXData.length; // != 0\n            };\n            TreemapSeries.prototype.init = function (chart, options) {\n                var series = this, breadcrumbsOptions = merge(options.drillUpButton, options.breadcrumbs), setOptionsEvent = addEvent(series, 'setOptions', function (event) {\n                    var options = event.userOptions;\n                    if (defined(options.allowDrillToNode) &&\n                        !defined(options.allowTraversingTree)) {\n                        options.allowTraversingTree = options.allowDrillToNode;\n                        delete options.allowDrillToNode;\n                    }\n                    if (defined(options.drillUpButton) &&\n                        !defined(options.traverseUpButton)) {\n                        options.traverseUpButton = options.drillUpButton;\n                        delete options.drillUpButton;\n                    }\n                });\n                _super.prototype.init.call(this, chart, options);\n                // Treemap's opacity is a different option from other series\n                delete series.opacity;\n                // Handle deprecated options.\n                series.eventsToUnbind.push(setOptionsEvent);\n                if (series.options.allowTraversingTree) {\n                    series.eventsToUnbind.push(addEvent(series, 'click', series.onClickDrillToNode));\n                    series.eventsToUnbind.push(addEvent(series, 'setRootNode', function (e) {\n                        var chart = series.chart;\n                        if (chart.breadcrumbs) {\n                            // Create a list using the event after drilldown.\n                            chart.breadcrumbs.updateProperties(series.createList(e));\n                        }\n                    }));\n                    series.eventsToUnbind.push(addEvent(series, 'update', \n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    function (e, redraw) {\n                        var breadcrumbs = this.chart.breadcrumbs;\n                        if (breadcrumbs && e.options.breadcrumbs) {\n                            breadcrumbs.update(e.options.breadcrumbs);\n                        }\n                    }));\n                    series.eventsToUnbind.push(addEvent(series, 'destroy', function destroyEvents(e) {\n                        var chart = this.chart;\n                        if (chart.breadcrumbs && !e.keepEventsForUpdate) {\n                            chart.breadcrumbs.destroy();\n                            chart.breadcrumbs = void 0;\n                        }\n                    }));\n                }\n                if (!chart.breadcrumbs) {\n                    chart.breadcrumbs = new Breadcrumbs(chart, breadcrumbsOptions);\n                }\n                series.eventsToUnbind.push(addEvent(chart.breadcrumbs, 'up', function (e) {\n                    var drillUpsNumber = this.level - e.newLevel;\n                    for (var i = 0; i < drillUpsNumber; i++) {\n                        series.drillUp();\n                    }\n                }));\n            };\n            /**\n             * Add drilling on the suitable points.\n             * @private\n             */\n            TreemapSeries.prototype.onClickDrillToNode = function (event) {\n                var series = this, point = event.point, drillId = point && point.drillId;\n                // If a drill id is returned, add click event and cursor.\n                if (isString(drillId)) {\n                    point.setState(''); // Remove hover\n                    series.setRootNode(drillId, true, { trigger: 'click' });\n                }\n            };\n            /**\n             * Get presentational attributes\n             * @private\n             */\n            TreemapSeries.prototype.pointAttribs = function (point, state) {\n                var series = this, mapOptionsToLevel = (isObject(series.mapOptionsToLevel) ?\n                    series.mapOptionsToLevel :\n                    {}), level = point && mapOptionsToLevel[point.node.level] || {}, options = this.options, stateOptions = state && options.states && options.states[state] || {}, className = (point && point.getClassName()) || '', \n                // Set attributes by precedence. Point trumps level trumps series.\n                // Stroke width uses pick because it can be 0.\n                attr = {\n                    'stroke': (point && point.borderColor) ||\n                        level.borderColor ||\n                        stateOptions.borderColor ||\n                        options.borderColor,\n                    'stroke-width': pick(point && point.borderWidth, level.borderWidth, stateOptions.borderWidth, options.borderWidth),\n                    'dashstyle': (point && point.borderDashStyle) ||\n                        level.borderDashStyle ||\n                        stateOptions.borderDashStyle ||\n                        options.borderDashStyle,\n                    'fill': (point && point.color) || this.color\n                };\n                var opacity;\n                // Hide levels above the current view\n                if (className.indexOf('highcharts-above-level') !== -1) {\n                    attr.fill = 'none';\n                    attr['stroke-width'] = 0;\n                    // Nodes with children that accept interaction\n                }\n                else if (className.indexOf('highcharts-internal-node-interactive') !== -1) {\n                    opacity = pick(stateOptions.opacity, options.opacity);\n                    attr.fill = color(attr.fill).setOpacity(opacity).get();\n                    attr.cursor = 'pointer';\n                    // Hide nodes that have children\n                }\n                else if (className.indexOf('highcharts-internal-node') !== -1) {\n                    attr.fill = 'none';\n                }\n                else if (state) {\n                    // Brighten and hoist the hover nodes\n                    attr.fill = color(attr.fill)\n                        .brighten(stateOptions.brightness)\n                        .get();\n                }\n                return attr;\n            };\n            /**\n             * Set the node's color recursively, from the parent down.\n             * @private\n             */\n            TreemapSeries.prototype.setColorRecursive = function (node, parentColor, colorIndex, index, siblings) {\n                var series = this, chart = series && series.chart, colors = chart && chart.options && chart.options.colors;\n                if (node) {\n                    var colorInfo = getColor(node, {\n                        colors: colors,\n                        index: index,\n                        mapOptionsToLevel: series.mapOptionsToLevel,\n                        parentColor: parentColor,\n                        parentColorIndex: colorIndex,\n                        series: series,\n                        siblings: siblings\n                    }), point = series.points[node.i];\n                    if (point) {\n                        point.color = colorInfo.color;\n                        point.colorIndex = colorInfo.colorIndex;\n                    }\n                    var i = -1;\n                    // Do it all again with the children\n                    for (var _i = 0, _a = (node.children || []); _i < _a.length; _i++) {\n                        var child = _a[_i];\n                        series.setColorRecursive(child, colorInfo.color, colorInfo.colorIndex, ++i, node.children.length);\n                    }\n                }\n            };\n            TreemapSeries.prototype.setPointValues = function () {\n                var series = this;\n                var points = series.points, xAxis = series.xAxis, yAxis = series.yAxis;\n                var styledMode = series.chart.styledMode;\n                // Get the crisp correction in classic mode. For this to work in\n                // styled mode, we would need to first add the shape (without x,\n                // y, width and height), then read the rendered stroke width\n                // using point.graphic.strokeWidth(), then modify and apply the\n                // shapeArgs. This applies also to column series, but the\n                // downside is performance and code complexity.\n                var getStrokeWidth = function (point) { return (styledMode ?\n                    0 :\n                    (series.pointAttribs(point)['stroke-width'] || 0)); };\n                for (var _i = 0, points_3 = points; _i < points_3.length; _i++) {\n                    var point = points_3[_i];\n                    var _a = point.node, values = _a.pointValues, visible = _a.visible;\n                    // Points which is ignored, have no values.\n                    if (values && visible) {\n                        var height = values.height, width = values.width, x = values.x, y = values.y;\n                        var strokeWidth = getStrokeWidth(point);\n                        var x1 = crisp(xAxis.toPixels(x, true), strokeWidth, true);\n                        var x2 = crisp(xAxis.toPixels(x + width, true), strokeWidth, true);\n                        var y1 = crisp(yAxis.toPixels(y, true), strokeWidth, true);\n                        var y2 = crisp(yAxis.toPixels(y + height, true), strokeWidth, true);\n                        // Set point values\n                        var shapeArgs = {\n                            x: Math.min(x1, x2),\n                            y: Math.min(y1, y2),\n                            width: Math.abs(x2 - x1),\n                            height: Math.abs(y2 - y1)\n                        };\n                        point.plotX = shapeArgs.x + (shapeArgs.width / 2);\n                        point.plotY = shapeArgs.y + (shapeArgs.height / 2);\n                        point.shapeArgs = shapeArgs;\n                    }\n                    else {\n                        // Reset visibility\n                        delete point.plotX;\n                        delete point.plotY;\n                    }\n                }\n            };\n            /**\n             * Sets a new root node for the series.\n             *\n             * @private\n             * @function Highcharts.Series#setRootNode\n             *\n             * @param {string} id\n             * The id of the new root node.\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or not.\n             *\n             * @param {Object} [eventArguments]\n             * Arguments to be accessed in event handler.\n             *\n             * @param {string} [eventArguments.newRootId]\n             * Id of the new root.\n             *\n             * @param {string} [eventArguments.previousRootId]\n             * Id of the previous root.\n             *\n             * @param {boolean} [eventArguments.redraw]\n             * Whether to redraw the chart after.\n             *\n             * @param {Object} [eventArguments.series]\n             * The series to update the root of.\n             *\n             * @param {string} [eventArguments.trigger]\n             * The action which triggered the event. Undefined if the setRootNode is\n             * called directly.\n             *\n             * @emits Highcharts.Series#event:setRootNode\n             */\n            TreemapSeries.prototype.setRootNode = function (id, redraw, eventArguments) {\n                var series = this, eventArgs = extend({\n                    newRootId: id,\n                    previousRootId: series.rootNode,\n                    redraw: pick(redraw, true),\n                    series: series\n                }, eventArguments);\n                /**\n                 * The default functionality of the setRootNode event.\n                 *\n                 * @private\n                 * @param {Object} args The event arguments.\n                 * @param {string} args.newRootId Id of the new root.\n                 * @param {string} args.previousRootId Id of the previous root.\n                 * @param {boolean} args.redraw Whether to redraw the chart after.\n                 * @param {Object} args.series The series to update the root of.\n                 * @param {string} [args.trigger=undefined] The action which\n                 * triggered the event. Undefined if the setRootNode is called\n                 * directly.\n                     */\n                var defaultFn = function (args) {\n                    var series = args.series;\n                    // Store previous and new root ids on the series.\n                    series.idPreviousRoot = args.previousRootId;\n                    series.rootNode = args.newRootId;\n                    // Redraw the chart\n                    series.isDirty = true; // Force redraw\n                    if (args.redraw) {\n                        series.chart.redraw();\n                    }\n                };\n                // Fire setRootNode event.\n                fireEvent(series, 'setRootNode', eventArgs, defaultFn);\n            };\n            /**\n             * Workaround for `inactive` state. Since `series.opacity` option is\n             * already reserved, don't use that state at all by disabling\n             * `inactiveOtherPoints` and not inheriting states by points.\n             * @private\n             */\n            TreemapSeries.prototype.setState = function (state) {\n                this.options.inactiveOtherPoints = true;\n                _super.prototype.setState.call(this, state, false);\n                this.options.inactiveOtherPoints = false;\n            };\n            TreemapSeries.prototype.setTreeValues = function (tree) {\n                var series = this, options = series.options, idRoot = series.rootNode, mapIdToNode = series.nodeMap, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (typeof options.levelIsConstant === 'boolean' ?\n                    options.levelIsConstant :\n                    true), children = [], point = series.points[tree.i];\n                // First give the children some values\n                var childrenTotal = 0;\n                for (var _i = 0, _a = tree.children; _i < _a.length; _i++) {\n                    var child = _a[_i];\n                    child = series.setTreeValues(child);\n                    children.push(child);\n                    if (!child.ignore) {\n                        childrenTotal += child.val;\n                    }\n                }\n                // Sort the children\n                stableSort(children, function (a, b) { return ((a.sortIndex || 0) - (b.sortIndex || 0)); });\n                // Set the values\n                var val = pick(point && point.options.value, childrenTotal);\n                if (point) {\n                    point.value = val;\n                }\n                extend(tree, {\n                    children: children,\n                    childrenTotal: childrenTotal,\n                    // Ignore this node if point is not visible\n                    ignore: !(pick(point && point.visible, true) && (val > 0)),\n                    isLeaf: tree.visible && !childrenTotal,\n                    levelDynamic: (tree.level - (levelIsConstant ? 0 : nodeRoot.level)),\n                    name: pick(point && point.name, ''),\n                    sortIndex: pick(point && point.sortIndex, -val),\n                    val: val\n                });\n                return tree;\n            };\n            TreemapSeries.prototype.sliceAndDice = function (parent, children) {\n                return this.algorithmFill(true, parent, children);\n            };\n            TreemapSeries.prototype.squarified = function (parent, children) {\n                return this.algorithmLowAspectRatio(true, parent, children);\n            };\n            TreemapSeries.prototype.strip = function (parent, children) {\n                return this.algorithmLowAspectRatio(false, parent, children);\n            };\n            TreemapSeries.prototype.stripes = function (parent, children) {\n                return this.algorithmFill(false, parent, children);\n            };\n            TreemapSeries.prototype.translate = function () {\n                var series = this, options = series.options;\n                var // NOTE: updateRootId modifies series.\n                rootId = updateRootId(series), rootNode, pointValues, seriesArea, val;\n                // Call prototype function\n                _super.prototype.translate.call(this);\n                // @todo Only if series.isDirtyData is true\n                var tree = series.tree = series.getTree();\n                rootNode = series.nodeMap[rootId];\n                if (rootId !== '' &&\n                    (!rootNode)) {\n                    series.setRootNode('', false);\n                    rootId = series.rootNode;\n                    rootNode = series.nodeMap[rootId];\n                }\n                series.mapOptionsToLevel = getLevelOptions({\n                    from: rootNode.level + 1,\n                    levels: options.levels,\n                    to: tree.height,\n                    defaults: {\n                        levelIsConstant: series.options.levelIsConstant,\n                        colorByPoint: options.colorByPoint\n                    }\n                });\n                // Parents of the root node is by default visible\n                TreemapUtilities.recursive(series.nodeMap[series.rootNode], function (node) {\n                    var p = node.parent;\n                    var next = false;\n                    node.visible = true;\n                    if (p || p === '') {\n                        next = series.nodeMap[p];\n                    }\n                    return next;\n                });\n                // Children of the root node is by default visible\n                TreemapUtilities.recursive(series.nodeMap[series.rootNode].children, function (children) {\n                    var next = false;\n                    for (var _i = 0, children_6 = children; _i < children_6.length; _i++) {\n                        var child = children_6[_i];\n                        child.visible = true;\n                        if (child.children.length) {\n                            next = (next || []).concat(child.children);\n                        }\n                    }\n                    return next;\n                });\n                series.setTreeValues(tree);\n                // Calculate plotting values.\n                series.axisRatio = (series.xAxis.len / series.yAxis.len);\n                series.nodeMap[''].pointValues = pointValues = {\n                    x: 0,\n                    y: 0,\n                    width: axisMax,\n                    height: axisMax\n                };\n                series.nodeMap[''].values = seriesArea = merge(pointValues, {\n                    width: (pointValues.width * series.axisRatio),\n                    direction: (options.layoutStartingDirection === 'vertical' ? 0 : 1),\n                    val: tree.val\n                });\n                series.calculateChildrenAreas(tree, seriesArea);\n                // Logic for point colors\n                if (!series.colorAxis &&\n                    !options.colorByPoint) {\n                    series.setColorRecursive(series.tree);\n                }\n                // Update axis extremes according to the root node.\n                if (options.allowTraversingTree) {\n                    val = rootNode.pointValues;\n                    series.xAxis.setExtremes(val.x, val.x + val.width, false);\n                    series.yAxis.setExtremes(val.y, val.y + val.height, false);\n                    series.xAxis.setScale();\n                    series.yAxis.setScale();\n                }\n                // Assign values to points.\n                series.setPointValues();\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            TreemapSeries.defaultOptions = merge(ScatterSeries.defaultOptions, TreemapSeriesDefaults);\n            return TreemapSeries;\n        }(ScatterSeries));\n        extend(TreemapSeries.prototype, {\n            buildKDTree: noop,\n            colorAttribs: ColorMapComposition.seriesMembers.colorAttribs,\n            colorKey: 'colorValue', // Point color option key\n            directTouch: true,\n            getExtremesFromAll: true,\n            getSymbol: noop,\n            optionalAxis: 'colorAxis',\n            parallelArrays: ['x', 'y', 'value', 'colorValue'],\n            pointArrayMap: ['value'],\n            pointClass: TreemapPoint,\n            NodeClass: TreemapNode,\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            utils: TreemapUtilities\n        });\n        ColorMapComposition.compose(TreemapSeries);\n        SeriesRegistry.registerSeriesType('treemap', TreemapSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapSeries;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var Point = SeriesRegistry.series.prototype.pointClass, TreemapPoint = SeriesRegistry.seriesTypes.treemap.prototype.pointClass;\n        var correctFloat = U.correctFloat, extend = U.extend, pInt = U.pInt;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var SunburstPoint = /** @class */ (function (_super) {\n            __extends(SunburstPoint, _super);\n            function SunburstPoint() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            SunburstPoint.prototype.getDataLabelPath = function (label) {\n                var _a;\n                var renderer = this.series.chart.renderer, shapeArgs = this.shapeExisting, r = shapeArgs.r + pInt(((_a = label.options) === null || _a === void 0 ? void 0 : _a.distance) || 0);\n                var start = shapeArgs.start, end = shapeArgs.end;\n                var angle = start + (end - start) / 2; // Arc middle value\n                var upperHalf = angle < 0 &&\n                    angle > -Math.PI ||\n                    angle > Math.PI, moreThanHalf;\n                // Check if point is a full circle\n                if (start === -Math.PI / 2 &&\n                    correctFloat(end) === correctFloat(Math.PI * 1.5)) {\n                    start = -Math.PI + Math.PI / 360;\n                    end = -Math.PI / 360;\n                    upperHalf = true;\n                }\n                // Check if dataLabels should be render in the upper half of the circle\n                if (end - start > Math.PI) {\n                    upperHalf = false;\n                    moreThanHalf = true;\n                    // Close to the full circle, add some padding so that the SVG\n                    // renderer treats it as separate points (#18884).\n                    if ((end - start) > 2 * Math.PI - 0.01) {\n                        start += 0.01;\n                        end -= 0.01;\n                    }\n                }\n                if (this.dataLabelPath) {\n                    this.dataLabelPath = this.dataLabelPath.destroy();\n                }\n                // All times\n                this.dataLabelPath = renderer\n                    .arc({\n                    open: true,\n                    longArc: moreThanHalf ? 1 : 0\n                })\n                    .attr({\n                    start: (upperHalf ? start : end),\n                    end: (upperHalf ? end : start),\n                    clockwise: +upperHalf,\n                    x: shapeArgs.x,\n                    y: shapeArgs.y,\n                    r: (r + shapeArgs.innerR) / 2\n                })\n                    .add(renderer.defs);\n                return this.dataLabelPath;\n            };\n            SunburstPoint.prototype.isValid = function () {\n                return true;\n            };\n            return SunburstPoint;\n        }(TreemapPoint));\n        extend(SunburstPoint.prototype, {\n            getClassName: Point.prototype.getClassName,\n            haloPath: Point.prototype.haloPath,\n            setState: Point.prototype.setState\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstPoint;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstUtilities.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var TreemapSeries = SeriesRegistry.seriesTypes.treemap;\n        var isNumber = U.isNumber, isObject = U.isObject, merge = U.merge;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         * @function calculateLevelSizes\n         *\n         * @param {Object} levelOptions\n         * Map of level to its options.\n         *\n         * @param {Highcharts.Dictionary<number>} params\n         * Object containing number parameters `innerRadius` and `outerRadius`.\n         *\n         * @return {Highcharts.SunburstSeriesLevelsOptions|undefined}\n         * Returns the modified options, or undefined.\n         */\n        function calculateLevelSizes(levelOptions, params) {\n            var p = isObject(params) ? params : {};\n            var result, totalWeight = 0, diffRadius, levels, levelsNotIncluded, remainingSize, from, to;\n            if (isObject(levelOptions)) {\n                result = merge({}, levelOptions);\n                from = isNumber(p.from) ? p.from : 0;\n                to = isNumber(p.to) ? p.to : 0;\n                levels = range(from, to);\n                levelsNotIncluded = Object.keys(result).filter(function (key) { return (levels.indexOf(+key) === -1); });\n                diffRadius = remainingSize = isNumber(p.diffRadius) ?\n                    p.diffRadius : 0;\n                // Convert percentage to pixels.\n                // Calculate the remaining size to divide between \"weight\" levels.\n                // Calculate total weight to use in conversion from weight to\n                // pixels.\n                for (var _i = 0, levels_1 = levels; _i < levels_1.length; _i++) {\n                    var level = levels_1[_i];\n                    var options = result[level], unit = options.levelSize.unit, value = options.levelSize.value;\n                    if (unit === 'weight') {\n                        totalWeight += value;\n                    }\n                    else if (unit === 'percentage') {\n                        options.levelSize = {\n                            unit: 'pixels',\n                            value: (value / 100) * diffRadius\n                        };\n                        remainingSize -= options.levelSize.value;\n                    }\n                    else if (unit === 'pixels') {\n                        remainingSize -= value;\n                    }\n                }\n                // Convert weight to pixels.\n                for (var _a = 0, levels_2 = levels; _a < levels_2.length; _a++) {\n                    var level = levels_2[_a];\n                    var options = result[level];\n                    if (options.levelSize.unit === 'weight') {\n                        var weight = options.levelSize.value;\n                        result[level].levelSize = {\n                            unit: 'pixels',\n                            value: (weight / totalWeight) * remainingSize\n                        };\n                    }\n                }\n                // Set all levels not included in interval [from,to] to have 0\n                // pixels.\n                for (var _b = 0, levelsNotIncluded_1 = levelsNotIncluded; _b < levelsNotIncluded_1.length; _b++) {\n                    var level = levelsNotIncluded_1[_b];\n                    result[level].levelSize = {\n                        value: 0,\n                        unit: 'pixels'\n                    };\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         */\n        function getLevelFromAndTo(_a) {\n            var level = _a.level, height = _a.height;\n            //  Never displays level below 1\n            var from = level > 0 ? level : 1;\n            var to = level + height;\n            return { from: from, to: to };\n        }\n        /**\n         * TODO introduce step, which should default to 1.\n         * @private\n         */\n        function range(from, to) {\n            var result = [];\n            if (isNumber(from) && isNumber(to) && from <= to) {\n                for (var i = from; i <= to; i++) {\n                    result.push(i);\n                }\n            }\n            return result;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var SunburstUtilities = {\n            calculateLevelSizes: calculateLevelSizes,\n            getLevelFromAndTo: getLevelFromAndTo,\n            range: range,\n            recursive: TreemapSeries.prototype.utils.recursive\n        };\n\n        return SunburstUtilities;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstNode.js', [_modules['Series/Treemap/TreemapNode.js']], function (TreemapNode) {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var SunburstNode = /** @class */ (function (_super) {\n            __extends(SunburstNode, _super);\n            function SunburstNode() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            return SunburstNode;\n        }(TreemapNode));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstNode;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Sunburst displays hierarchical data, where a level in the hierarchy is\n         * represented by a circle. The center represents the root node of the tree.\n         * The visualization bears a resemblance to both treemap and pie charts.\n         *\n         * @sample highcharts/demo/sunburst\n         *         Sunburst chart\n         *\n         * @extends      plotOptions.pie\n         * @excluding    allAreas, clip, colorAxis, colorKey, compare, compareBase,\n         *               dataGrouping, depth, dragDrop, endAngle, gapSize, gapUnit,\n         *               ignoreHiddenPoint, innerSize, joinBy, legendType, linecap,\n         *               minSize, navigatorOptions, pointRange\n         * @product      highcharts\n         * @requires     modules/sunburst\n         * @optionparent plotOptions.sunburst\n         *\n         * @private\n         */\n        var SunburstSeriesDefaults = {\n            /**\n             * Options for the breadcrumbs, the navigation at the top leading the\n             * way up through the traversed levels.\n             *\n             * @since 10.0.0\n             * @product   highcharts\n             * @extends   navigation.breadcrumbs\n             * @apioption plotOptions.sunburst.breadcrumbs\n             */\n            /**\n             * Set options on specific levels. Takes precedence over series options,\n             * but not point options.\n             *\n             * @sample highcharts/demo/sunburst\n             *         Sunburst chart\n             *\n             * @type      {Array<*>}\n             * @apioption plotOptions.sunburst.levels\n             */\n            /**\n             * Can set a `borderColor` on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString}\n             * @apioption plotOptions.sunburst.levels.borderColor\n             */\n            /**\n             * Can set a `borderWidth` on all points which lies on the same level.\n             *\n             * @type      {number}\n             * @apioption plotOptions.sunburst.levels.borderWidth\n             */\n            /**\n             * Can set a `borderDashStyle` on all points which lies on the same\n             * level.\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @apioption plotOptions.sunburst.levels.borderDashStyle\n             */\n            /**\n             * Can set a `color` on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption plotOptions.sunburst.levels.color\n             */\n            /**\n             * Determines whether the chart should receive one color per point based\n             * on this level.\n             *\n             * @type      {boolean}\n             * @apioption plotOptions.sunburst.levels.colorByPoint\n             */\n            /**\n             * Can set a `colorVariation` on all points which lies on the same\n             * level.\n             *\n             * @apioption plotOptions.sunburst.levels.colorVariation\n             */\n            /**\n             * The key of a color variation. Currently supports `brightness` only.\n             *\n             * @type      {string}\n             * @apioption plotOptions.sunburst.levels.colorVariation.key\n             */\n            /**\n             * The ending value of a color variation. The last sibling will receive\n             * this value.\n             *\n             * @type      {number}\n             * @apioption plotOptions.sunburst.levels.colorVariation.to\n             */\n            /**\n             * Can set `dataLabels` on all points which lies on the same level.\n             *\n             * @extends   plotOptions.sunburst.dataLabels\n             * @apioption plotOptions.sunburst.levels.dataLabels\n             */\n            /**\n             * Decides which level takes effect from the options set in the levels\n             * object.\n             *\n             * @sample highcharts/demo/sunburst\n             *         Sunburst chart\n             *\n             * @type      {number}\n             * @apioption plotOptions.sunburst.levels.level\n             */\n            /**\n             * Can set a `levelSize` on all points which lies on the same level.\n             *\n             * @type      {Object}\n             * @apioption plotOptions.sunburst.levels.levelSize\n             */\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children. Deprecated and replaced by\n             * [allowTraversingTree](#plotOptions.sunburst.allowTraversingTree).\n             *\n             * @deprecated\n             * @type      {boolean}\n             * @default   false\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.sunburst.allowDrillToNode\n             */\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     7.0.3\n             * @product   highcharts\n             * @apioption plotOptions.sunburst.allowTraversingTree\n             */\n            /**\n             * The center of the sunburst chart relative to the plot area. Can be\n             * percentages or pixel values.\n             *\n             * @sample {highcharts} highcharts/plotoptions/pie-center/\n             *         Centered at 100, 100\n             *\n             * @type    {Array<number|string>}\n             * @default [\"50%\", \"50%\"]\n             * @product highcharts\n             *\n             * @private\n             */\n            center: ['50%', '50%'],\n            /**\n             * @product highcharts\n             *\n             * @private\n             */\n            clip: false,\n            colorByPoint: false,\n            /**\n             * Disable inherited opacity from Treemap series.\n             *\n             * @ignore-option\n             *\n             * @private\n             */\n            opacity: 1,\n            /**\n             * @declare Highcharts.SeriesSunburstDataLabelsOptionsObject\n             *\n             * @private\n             */\n            dataLabels: {\n                allowOverlap: true,\n                defer: true,\n                /**\n                 * Decides how the data label will be rotated relative to the\n                 * perimeter of the sunburst. Valid values are `circular`, `auto`,\n                 * `parallel` and `perpendicular`. When `circular`, the best fit\n                 * will be computed for the point, so that the label is curved\n                 * around the center when there is room for it, otherwise\n                 * perpendicular. The legacy `auto` option works similar to\n                 * `circular`, but instead of curving the labels they are tangent to\n                 * the perimeter.\n                 *\n                 * The `rotation` option takes precedence over `rotationMode`.\n                 *\n                 * @type       {string}\n                 * @sample {highcharts}\n                 *         highcharts/plotoptions/sunburst-datalabels-rotationmode-circular/\n                 *         Circular rotation mode\n                 * @validvalue [\"auto\", \"perpendicular\", \"parallel\", \"circular\"]\n                 * @since      6.0.0\n                 */\n                rotationMode: 'circular',\n                style: {\n                    /** @internal */\n                    textOverflow: 'ellipsis'\n                }\n            },\n            /**\n             * Which point to use as a root in the visualization.\n             *\n             * @type {string}\n             *\n             * @private\n             */\n            rootId: void 0,\n            /**\n             * Used together with the levels and `allowDrillToNode` options. When\n             * set to false the first level visible when drilling is considered\n             * to be level one. Otherwise the level will be the same as the tree\n             * structure.\n             *\n             * @private\n             */\n            levelIsConstant: true,\n            /**\n             * Determines the width of the ring per level.\n             *\n             * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n             *         Sunburst with various sizes per level\n             *\n             * @since 6.0.5\n             *\n             * @private\n             */\n            levelSize: {\n                /**\n                 * The value used for calculating the width of the ring. Its' affect\n                 * is determined by `levelSize.unit`.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n                 *         Sunburst with various sizes per level\n                 */\n                value: 1,\n                /**\n                 * How to interpret `levelSize.value`.\n                 *\n                 * - `percentage` gives a width relative to result of outer radius\n                 *   minus inner radius.\n                 *\n                 * - `pixels` gives the ring a fixed width in pixels.\n                 *\n                 * - `weight` takes the remaining width after percentage and pixels,\n                 *   and distributes it across all \"weighted\" levels. The value\n                 *   relative to the sum of all weights determines the width.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n                 *         Sunburst with various sizes per level\n                 *\n                 * @validvalue [\"percentage\", \"pixels\", \"weight\"]\n                 */\n                unit: 'weight'\n            },\n            /**\n             * Options for the button appearing when traversing down in a sunburst.\n             * Since v9.3.3 the `traverseUpButton` is replaced by `breadcrumbs`.\n             *\n             * @extends   plotOptions.treemap.traverseUpButton\n             * @since     6.0.0\n             * @deprecated\n             * @apioption plotOptions.sunburst.traverseUpButton\n             *\n             */\n            /**\n             * If a point is sliced, moved out from the center, how many pixels\n             * should it be moved?.\n             *\n             * @sample highcharts/plotoptions/sunburst-sliced\n             *         Sliced sunburst\n             *\n             * @since 6.0.4\n             *\n             * @private\n             */\n            slicedOffset: 10\n        };\n        /**\n         * A `sunburst` series. If the [type](#series.sunburst.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.sunburst\n         * @excluding dataParser, dataURL, stack, dataSorting, boostThreshold,\n         *            boostBlending\n         * @product   highcharts\n         * @requires  modules/sunburst\n         * @apioption series.sunburst\n         */\n        /**\n         * @type      {Array<number|null|*>}\n         * @extends   series.treemap.data\n         * @excluding x, y\n         * @product   highcharts\n         * @apioption series.sunburst.data\n         */\n        /**\n         * @type      {Highcharts.SeriesSunburstDataLabelsOptionsObject|Array<Highcharts.SeriesSunburstDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.sunburst.data.dataLabels\n         */\n        /**\n         * The value of the point, resulting in a relative area of the point\n         * in the sunburst.\n         *\n         * @type      {number|null}\n         * @since     6.0.0\n         * @product   highcharts\n         * @apioption series.sunburst.data.value\n         */\n        /**\n         * Use this option to build a tree structure. The value should be the id of the\n         * point which is the parent. If no points has a matching id, or this option is\n         * undefined, then the parent will be set to the root.\n         *\n         * @type      {string}\n         * @since     6.0.0\n         * @product   highcharts\n         * @apioption series.sunburst.data.parent\n         */\n        /**\n          * Whether to display a slice offset from the center. When a sunburst point is\n          * sliced, its children are also offset.\n          *\n          * @sample highcharts/plotoptions/sunburst-sliced\n          *         Sliced sunburst\n          *\n          * @type      {boolean}\n          * @default   false\n          * @since     6.0.4\n          * @product   highcharts\n          * @apioption series.sunburst.data.sliced\n          */\n        ''; // Detach doclets above\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstSeriesDefaults;\n    });\n    _registerModule(_modules, 'Extensions/TextPath.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  Highcharts module with textPath functionality.\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var deg2rad = H.deg2rad;\n        var addEvent = U.addEvent, merge = U.merge, uniqueKey = U.uniqueKey, defined = U.defined, extend = U.extend;\n        /**\n         * Set a text path for a `text` or `label` element, allowing the text to\n         * flow along a path.\n         *\n         * In order to unset the path for an existing element, call `setTextPath`\n         * with `{ enabled: false }` as the second argument.\n         *\n         * Text path support is not bundled into `highcharts.js`, and requires the\n         * `modules/textpath.js` file. However, it is included in the script files of\n         * those series types that use it by default\n         *\n         * @sample highcharts/members/renderer-textpath/ Text path demonstrated\n         *\n         * @function Highcharts.SVGElement#setTextPath\n         *\n         * @param {Highcharts.SVGElement|undefined} path\n         *        Path to follow. If undefined, it allows changing options for the\n         *        existing path.\n         *\n         * @param {Highcharts.DataLabelsTextPathOptionsObject} textPathOptions\n         *        Options.\n         *\n         * @return {Highcharts.SVGElement} Returns the SVGElement for chaining.\n         */\n        function setTextPath(path, textPathOptions) {\n            var _this = this;\n            // Defaults\n            textPathOptions = merge(true, {\n                enabled: true,\n                attributes: {\n                    dy: -5,\n                    startOffset: '50%',\n                    textAnchor: 'middle'\n                }\n            }, textPathOptions);\n            var url = this.renderer.url, textWrapper = this.text || this, textPath = textWrapper.textPath, attributes = textPathOptions.attributes, enabled = textPathOptions.enabled;\n            path = path || (textPath && textPath.path);\n            // Remove previously added event\n            if (textPath) {\n                textPath.undo();\n            }\n            if (path && enabled) {\n                var undo = addEvent(textWrapper, 'afterModifyTree', function (e) {\n                    if (path && enabled) {\n                        // Set ID for the path\n                        var textPathId = path.attr('id');\n                        if (!textPathId) {\n                            path.attr('id', textPathId = uniqueKey());\n                        }\n                        // Set attributes for the <text>\n                        var textAttribs = {\n                            // `dx`/`dy` options must by set on <text> (parent), the\n                            // rest should be set on <textPath>\n                            x: 0,\n                            y: 0\n                        };\n                        if (defined(attributes.dx)) {\n                            textAttribs.dx = attributes.dx;\n                            delete attributes.dx;\n                        }\n                        if (defined(attributes.dy)) {\n                            textAttribs.dy = attributes.dy;\n                            delete attributes.dy;\n                        }\n                        textWrapper.attr(textAttribs);\n                        // Handle label properties\n                        _this.attr({ transform: '' });\n                        if (_this.box) {\n                            _this.box = _this.box.destroy();\n                        }\n                        // Wrap the nodes in a textPath\n                        var children = e.nodes.slice(0);\n                        e.nodes.length = 0;\n                        e.nodes[0] = {\n                            tagName: 'textPath',\n                            attributes: extend(attributes, {\n                                'text-anchor': attributes.textAnchor,\n                                href: \"\".concat(url, \"#\").concat(textPathId)\n                            }),\n                            children: children\n                        };\n                    }\n                });\n                // Set the reference\n                textWrapper.textPath = { path: path, undo: undo };\n            }\n            else {\n                textWrapper.attr({ dx: 0, dy: 0 });\n                delete textWrapper.textPath;\n            }\n            if (this.added) {\n                // Rebuild text after added\n                textWrapper.textCache = '';\n                this.renderer.buildText(textWrapper);\n            }\n            return this;\n        }\n        /**\n         * Attach a polygon to a bounding box if the element contains a textPath.\n         *\n         * @function Highcharts.SVGElement#setPolygon\n         *\n         * @param {any} event\n         *        An event containing a bounding box object\n         *\n         * @return {Highcharts.BBoxObject} Returns the bounding box object.\n         */\n        function setPolygon(event) {\n            var _a;\n            var bBox = event.bBox, tp = (_a = this.element) === null || _a === void 0 ? void 0 : _a.querySelector('textPath');\n            if (tp) {\n                var polygon = [], _b = this.renderer.fontMetrics(this.element), b_1 = _b.b, h = _b.h, descender_1 = h - b_1, lineCleanerRegex = new RegExp('(<tspan>|' +\n                    '<tspan(?!\\\\sclass=\"highcharts-br\")[^>]*>|' +\n                    '<\\\\/tspan>)', 'g'), lines = tp\n                    .innerHTML\n                    .replace(lineCleanerRegex, '')\n                    .split(/<tspan class=\"highcharts-br\"[^>]*>/), numOfLines = lines.length;\n                // Calculate top and bottom coordinates for\n                // either the start or the end of a single\n                // character, and append it to the polygon.\n                var appendTopAndBottom = function (charIndex, positionOfChar) {\n                    var x = positionOfChar.x, y = positionOfChar.y, rotation = (tp.getRotationOfChar(charIndex) - 90) * deg2rad, cosRot = Math.cos(rotation), sinRot = Math.sin(rotation);\n                    return [\n                        [\n                            x - descender_1 * cosRot,\n                            y - descender_1 * sinRot\n                        ],\n                        [\n                            x + b_1 * cosRot,\n                            y + b_1 * sinRot\n                        ]\n                    ];\n                };\n                for (var i = 0, lineIndex = 0; lineIndex < numOfLines; lineIndex++) {\n                    var line = lines[lineIndex], lineLen = line.length;\n                    for (var lineCharIndex = 0; lineCharIndex < lineLen; lineCharIndex += 5) {\n                        try {\n                            var srcCharIndex = (i +\n                                lineCharIndex +\n                                lineIndex), _c = appendTopAndBottom(srcCharIndex, tp.getStartPositionOfChar(srcCharIndex)), lower = _c[0], upper = _c[1];\n                            if (lineCharIndex === 0) {\n                                polygon.push(upper);\n                                polygon.push(lower);\n                            }\n                            else {\n                                if (lineIndex === 0) {\n                                    polygon.unshift(upper);\n                                }\n                                if (lineIndex === numOfLines - 1) {\n                                    polygon.push(lower);\n                                }\n                            }\n                        }\n                        catch (e) {\n                            // Safari fails on getStartPositionOfChar even if the\n                            // character is within the `textContent.length`\n                            break;\n                        }\n                    }\n                    i += lineLen - 1;\n                    try {\n                        var srcCharIndex = i + lineIndex, charPos = tp.getEndPositionOfChar(srcCharIndex), _d = appendTopAndBottom(srcCharIndex, charPos), lower = _d[0], upper = _d[1];\n                        polygon.unshift(upper);\n                        polygon.unshift(lower);\n                    }\n                    catch (e) {\n                        // Safari fails on getStartPositionOfChar even if the character\n                        // is within the `textContent.length`\n                        break;\n                    }\n                }\n                // Close it\n                if (polygon.length) {\n                    polygon.push(polygon[0].slice());\n                }\n                bBox.polygon = polygon;\n            }\n            return bBox;\n        }\n        /**\n         * Draw text along a textPath for a dataLabel.\n         *\n         * @function Highcharts.SVGElement#setTextPath\n         *\n         * @param {any} event\n         *        An event containing label options\n         *\n         * @return {void}\n         */\n        function drawTextPath(event) {\n            var _a;\n            var labelOptions = event.labelOptions, point = event.point, textPathOptions = (labelOptions[point.formatPrefix + 'TextPath'] ||\n                labelOptions.textPath);\n            if (textPathOptions && !labelOptions.useHTML) {\n                this.setTextPath(((_a = point.getDataLabelPath) === null || _a === void 0 ? void 0 : _a.call(point, this)) || point.graphic, textPathOptions);\n                if (point.dataLabelPath &&\n                    !textPathOptions.enabled) {\n                    // Clean the DOM\n                    point.dataLabelPath = (point.dataLabelPath.destroy());\n                }\n            }\n        }\n        function compose(SVGElementClass) {\n            addEvent(SVGElementClass, 'afterGetBBox', setPolygon);\n            addEvent(SVGElementClass, 'beforeAddingDataLabel', drawTextPath);\n            var svgElementProto = SVGElementClass.prototype;\n            if (!svgElementProto.setTextPath) {\n                svgElementProto.setTextPath = setTextPath;\n            }\n        }\n        var TextPath = {\n            compose: compose\n        };\n\n        return TextPath;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstSeries.js', [_modules['Series/CenteredUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Sunburst/SunburstPoint.js'], _modules['Series/Sunburst/SunburstUtilities.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js'], _modules['Series/Sunburst/SunburstNode.js'], _modules['Series/Sunburst/SunburstSeriesDefaults.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Extensions/TextPath.js']], function (CU, H, SeriesRegistry, SunburstPoint, SunburstUtilities, TU, U, SunburstNode, SunburstSeriesDefaults, SVGElement, TextPath) {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var getCenter = CU.getCenter, getStartAndEndRadians = CU.getStartAndEndRadians;\n        var noop = H.noop;\n        var _a = SeriesRegistry.seriesTypes, ColumnSeries = _a.column, TreemapSeries = _a.treemap;\n        var getColor = TU.getColor, getLevelOptions = TU.getLevelOptions, setTreeValues = TU.setTreeValues, updateRootId = TU.updateRootId;\n        var defined = U.defined, error = U.error, extend = U.extend, fireEvent = U.fireEvent, isNumber = U.isNumber, isObject = U.isObject, isString = U.isString, merge = U.merge, splat = U.splat;\n        TextPath.compose(SVGElement);\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var rad2deg = 180 / Math.PI;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /** @private */\n        function isBoolean(x) {\n            return typeof x === 'boolean';\n        }\n        /**\n         * Find a set of coordinates given a start coordinates, an angle, and a\n         * distance.\n         *\n         * @private\n         * @function getEndPoint\n         *\n         * @param {number} x\n         *        Start coordinate x\n         *\n         * @param {number} y\n         *        Start coordinate y\n         *\n         * @param {number} angle\n         *        Angle in radians\n         *\n         * @param {number} distance\n         *        Distance from start to end coordinates\n         *\n         * @return {Highcharts.SVGAttributes}\n         *         Returns the end coordinates, x and y.\n         */\n        var getEndPoint = function getEndPoint(x, y, angle, distance) {\n            return {\n                x: x + (Math.cos(angle) * distance),\n                y: y + (Math.sin(angle) * distance)\n            };\n        };\n        /** @private */\n        function getDlOptions(params) {\n            // Set options to new object to avoid problems with scope\n            var point = params.point, shape = isObject(params.shapeArgs) ? params.shapeArgs : {}, optionsPoint = (isObject(params.optionsPoint) ?\n                params.optionsPoint.dataLabels :\n                {}), \n            // The splat was used because levels dataLabels\n            // options doesn't work as an array\n            optionsLevel = splat(isObject(params.level) ?\n                params.level.dataLabels :\n                {})[0], options = merge({\n                style: {}\n            }, optionsLevel, optionsPoint);\n            var rotationRad, rotation, rotationMode = options.rotationMode;\n            if (!isNumber(options.rotation)) {\n                if (rotationMode === 'auto' || rotationMode === 'circular') {\n                    if (options.useHTML &&\n                        rotationMode === 'circular') {\n                        // Change rotationMode to 'auto' to avoid using text paths\n                        // for HTML labels, see #18953\n                        rotationMode = 'auto';\n                    }\n                    if (point.innerArcLength < 1 &&\n                        point.outerArcLength > shape.radius) {\n                        rotationRad = 0;\n                        // Trigger setTextPath function to get textOutline etc.\n                        if (point.dataLabelPath && rotationMode === 'circular') {\n                            options.textPath = {\n                                enabled: true\n                            };\n                        }\n                    }\n                    else if (point.innerArcLength > 1 &&\n                        point.outerArcLength > 1.5 * shape.radius) {\n                        if (rotationMode === 'circular') {\n                            options.textPath = {\n                                enabled: true,\n                                attributes: {\n                                    dy: 5\n                                }\n                            };\n                        }\n                        else {\n                            rotationMode = 'parallel';\n                        }\n                    }\n                    else {\n                        // Trigger the destroyTextPath function\n                        if (point.dataLabel &&\n                            point.dataLabel.textPath &&\n                            rotationMode === 'circular') {\n                            options.textPath = {\n                                enabled: false\n                            };\n                        }\n                        rotationMode = 'perpendicular';\n                    }\n                }\n                if (rotationMode !== 'auto' && rotationMode !== 'circular') {\n                    if (point.dataLabel && point.dataLabel.textPath) {\n                        options.textPath = {\n                            enabled: false\n                        };\n                    }\n                    rotationRad = (shape.end -\n                        (shape.end - shape.start) / 2);\n                }\n                if (rotationMode === 'parallel') {\n                    options.style.width = Math.min(shape.radius * 2.5, (point.outerArcLength + point.innerArcLength) / 2);\n                }\n                else {\n                    if (!defined(options.style.width) &&\n                        shape.radius) {\n                        options.style.width = point.node.level === 1 ?\n                            2 * shape.radius :\n                            shape.radius;\n                    }\n                }\n                if (rotationMode === 'perpendicular' &&\n                    // 16 is the inferred line height. We don't know the real line\n                    // yet because the label is not rendered. A better approach for this\n                    // would be to hide the label from the `alignDataLabel` function\n                    // when the actual line height is known.\n                    point.outerArcLength < 16) {\n                    options.style.width = 1;\n                }\n                // Apply padding (#8515)\n                options.style.width = Math.max(options.style.width - 2 * (options.padding || 0), 1);\n                rotation = (rotationRad * rad2deg) % 180;\n                if (rotationMode === 'parallel') {\n                    rotation -= 90;\n                }\n                // Prevent text from rotating upside down\n                if (rotation > 90) {\n                    rotation -= 180;\n                }\n                else if (rotation < -90) {\n                    rotation += 180;\n                }\n                options.rotation = rotation;\n            }\n            if (options.textPath) {\n                if (point.shapeExisting.innerR === 0 &&\n                    options.textPath.enabled) {\n                    // Enable rotation to render text\n                    options.rotation = 0;\n                    // Center dataLabel - disable textPath\n                    options.textPath.enabled = false;\n                    // Setting width and padding\n                    options.style.width = Math.max((point.shapeExisting.r * 2) -\n                        2 * (options.padding || 0), 1);\n                }\n                else if (point.dlOptions &&\n                    point.dlOptions.textPath &&\n                    !point.dlOptions.textPath.enabled &&\n                    (rotationMode === 'circular')) {\n                    // Bring dataLabel back if was a center dataLabel\n                    options.textPath.enabled = true;\n                }\n                if (options.textPath.enabled) {\n                    // Enable rotation to render text\n                    options.rotation = 0;\n                    // Setting width and padding\n                    options.style.width = Math.max((point.outerArcLength +\n                        point.innerArcLength) / 2 -\n                        2 * (options.padding || 0), 1);\n                }\n            }\n            return options;\n        }\n        /** @private */\n        function getAnimation(shape, params) {\n            var point = params.point, radians = params.radians, innerR = params.innerR, idRoot = params.idRoot, idPreviousRoot = params.idPreviousRoot, shapeExisting = params.shapeExisting, shapeRoot = params.shapeRoot, shapePreviousRoot = params.shapePreviousRoot, visible = params.visible;\n            var from = {}, to = {\n                end: shape.end,\n                start: shape.start,\n                innerR: shape.innerR,\n                r: shape.r,\n                x: shape.x,\n                y: shape.y\n            };\n            if (visible) {\n                // Animate points in\n                if (!point.graphic && shapePreviousRoot) {\n                    if (idRoot === point.id) {\n                        from = {\n                            start: radians.start,\n                            end: radians.end\n                        };\n                    }\n                    else {\n                        from = (shapePreviousRoot.end <= shape.start) ? {\n                            start: radians.end,\n                            end: radians.end\n                        } : {\n                            start: radians.start,\n                            end: radians.start\n                        };\n                    }\n                    // Animate from center and outwards.\n                    from.innerR = from.r = innerR;\n                }\n            }\n            else {\n                // Animate points out\n                if (point.graphic) {\n                    if (idPreviousRoot === point.id) {\n                        to = {\n                            innerR: innerR,\n                            r: innerR\n                        };\n                    }\n                    else if (shapeRoot) {\n                        to = (shapeRoot.end <= shapeExisting.start) ?\n                            {\n                                innerR: innerR,\n                                r: innerR,\n                                start: radians.end,\n                                end: radians.end\n                            } : {\n                            innerR: innerR,\n                            r: innerR,\n                            start: radians.start,\n                            end: radians.start\n                        };\n                    }\n                }\n            }\n            return {\n                from: from,\n                to: to\n            };\n        }\n        /** @private */\n        function getDrillId(point, idRoot, mapIdToNode) {\n            var node = point.node;\n            var drillId, nodeRoot;\n            if (!node.isLeaf) {\n                // When it is the root node, the drillId should be set to parent.\n                if (idRoot === point.id) {\n                    nodeRoot = mapIdToNode[idRoot];\n                    drillId = nodeRoot.parent;\n                }\n                else {\n                    drillId = point.id;\n                }\n            }\n            return drillId;\n        }\n        /** @private */\n        function cbSetTreeValuesBefore(node, options) {\n            var mapIdToNode = options.mapIdToNode, parent = node.parent, nodeParent = parent ? mapIdToNode[parent] : void 0, series = options.series, chart = series.chart, points = series.points, point = points[node.i], colors = series.options.colors || chart && chart.options.colors, colorInfo = getColor(node, {\n                colors: colors,\n                colorIndex: series.colorIndex,\n                index: options.index,\n                mapOptionsToLevel: options.mapOptionsToLevel,\n                parentColor: nodeParent && nodeParent.color,\n                parentColorIndex: nodeParent && nodeParent.colorIndex,\n                series: options.series,\n                siblings: options.siblings\n            });\n            node.color = colorInfo.color;\n            node.colorIndex = colorInfo.colorIndex;\n            if (point) {\n                point.color = node.color;\n                point.colorIndex = node.colorIndex;\n                // Set slicing on node, but avoid slicing the top node.\n                node.sliced = (node.id !== options.idRoot) ? point.sliced : false;\n            }\n            return node;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var SunburstSeries = /** @class */ (function (_super) {\n            __extends(SunburstSeries, _super);\n            function SunburstSeries() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            SunburstSeries.prototype.alignDataLabel = function (point, dataLabel, labelOptions) {\n                if (labelOptions.textPath && labelOptions.textPath.enabled) {\n                    return;\n                }\n                return _super.prototype.alignDataLabel.apply(this, arguments);\n            };\n            /**\n             * Animate the slices in. Similar to the animation of polar charts.\n             * @private\n             */\n            SunburstSeries.prototype.animate = function (init) {\n                var chart = this.chart, center = [\n                    chart.plotWidth / 2,\n                    chart.plotHeight / 2\n                ], plotLeft = chart.plotLeft, plotTop = chart.plotTop, group = this.group;\n                var attribs;\n                // Initialize the animation\n                if (init) {\n                    // Scale down the group and place it in the center\n                    attribs = {\n                        translateX: center[0] + plotLeft,\n                        translateY: center[1] + plotTop,\n                        scaleX: 0.001, // #1499\n                        scaleY: 0.001,\n                        rotation: 10,\n                        opacity: 0.01\n                    };\n                    group.attr(attribs);\n                    // Run the animation\n                }\n                else {\n                    attribs = {\n                        translateX: plotLeft,\n                        translateY: plotTop,\n                        scaleX: 1,\n                        scaleY: 1,\n                        rotation: 0,\n                        opacity: 1\n                    };\n                    group.animate(attribs, this.options.animation);\n                }\n            };\n            SunburstSeries.prototype.drawPoints = function () {\n                var series = this, mapOptionsToLevel = series.mapOptionsToLevel, shapeRoot = series.shapeRoot, group = series.group, hasRendered = series.hasRendered, idRoot = series.rootNode, idPreviousRoot = series.idPreviousRoot, nodeMap = series.nodeMap, nodePreviousRoot = nodeMap[idPreviousRoot], shapePreviousRoot = nodePreviousRoot && nodePreviousRoot.shapeArgs, points = series.points, radians = series.startAndEndRadians, chart = series.chart, optionsChart = chart && chart.options && chart.options.chart || {}, animation = (isBoolean(optionsChart.animation) ?\n                    optionsChart.animation :\n                    true), positions = series.center, center = {\n                    x: positions[0],\n                    y: positions[1]\n                }, innerR = positions[3] / 2, renderer = series.chart.renderer, hackDataLabelAnimation = !!(animation &&\n                    hasRendered &&\n                    idRoot !== idPreviousRoot &&\n                    series.dataLabelsGroup);\n                var animateLabels, animateLabelsCalled = false, addedHack = false;\n                if (hackDataLabelAnimation) {\n                    series.dataLabelsGroup.attr({ opacity: 0 });\n                    animateLabels = function () {\n                        var s = series;\n                        animateLabelsCalled = true;\n                        if (s.dataLabelsGroup) {\n                            s.dataLabelsGroup.animate({\n                                opacity: 1,\n                                visibility: 'inherit'\n                            });\n                        }\n                    };\n                }\n                for (var _i = 0, points_1 = points; _i < points_1.length; _i++) {\n                    var point = points_1[_i];\n                    var node = point.node, level = mapOptionsToLevel[node.level], shapeExisting = (point.shapeExisting || {}), shape = node.shapeArgs || {}, visible = !!(node.visible && node.shapeArgs);\n                    var animationInfo = void 0, onComplete = void 0;\n                    // Border radius requires the border-radius.js module. Adding it\n                    // here because the SunburstSeries is a mess and I can't find the\n                    // regular shapeArgs. Usually shapeArgs are created in the series'\n                    // `translate` function and then passed directly on to the renderer\n                    // in the `drawPoints` function.\n                    shape.borderRadius = series.options.borderRadius;\n                    if (hasRendered && animation) {\n                        animationInfo = getAnimation(shape, {\n                            center: center,\n                            point: point,\n                            radians: radians,\n                            innerR: innerR,\n                            idRoot: idRoot,\n                            idPreviousRoot: idPreviousRoot,\n                            shapeExisting: shapeExisting,\n                            shapeRoot: shapeRoot,\n                            shapePreviousRoot: shapePreviousRoot,\n                            visible: visible\n                        });\n                    }\n                    else {\n                        // When animation is disabled, attr is called from animation.\n                        animationInfo = {\n                            to: shape,\n                            from: {}\n                        };\n                    }\n                    extend(point, {\n                        shapeExisting: shape, // Store for use in animation\n                        tooltipPos: [shape.plotX, shape.plotY],\n                        drillId: getDrillId(point, idRoot, nodeMap),\n                        name: '' + (point.name || point.id || point.index),\n                        plotX: shape.plotX, // Used for data label position\n                        plotY: shape.plotY, // Used for data label position\n                        value: node.val,\n                        isInside: visible,\n                        isNull: !visible // Used for dataLabels & point.draw\n                    });\n                    point.dlOptions = getDlOptions({\n                        point: point,\n                        level: level,\n                        optionsPoint: point.options,\n                        shapeArgs: shape\n                    });\n                    if (!addedHack && visible) {\n                        addedHack = true;\n                        onComplete = animateLabels;\n                    }\n                    point.draw({\n                        animatableAttribs: animationInfo.to,\n                        attribs: extend(animationInfo.from, (!chart.styledMode && series.pointAttribs(point, (point.selected && 'select')))),\n                        onComplete: onComplete,\n                        group: group,\n                        renderer: renderer,\n                        shapeType: 'arc',\n                        shapeArgs: shape\n                    });\n                }\n                // Draw data labels after points\n                // TODO draw labels one by one to avoid additional looping\n                if (hackDataLabelAnimation && addedHack) {\n                    series.hasRendered = false;\n                    series.options.dataLabels.defer = true;\n                    ColumnSeries.prototype.drawDataLabels.call(series);\n                    series.hasRendered = true;\n                    // If animateLabels is called before labels were hidden, then call\n                    // it again.\n                    if (animateLabelsCalled) {\n                        animateLabels();\n                    }\n                }\n                else {\n                    ColumnSeries.prototype.drawDataLabels.call(series);\n                }\n                series.idPreviousRoot = idRoot;\n            };\n            /**\n             * The layout algorithm for the levels.\n             * @private\n             */\n            SunburstSeries.prototype.layoutAlgorithm = function (parent, children, options) {\n                var startAngle = parent.start;\n                var range = parent.end - startAngle, total = parent.val, x = parent.x, y = parent.y, radius = ((options &&\n                    isObject(options.levelSize) &&\n                    isNumber(options.levelSize.value)) ?\n                    options.levelSize.value :\n                    0), innerRadius = parent.r, outerRadius = innerRadius + radius, slicedOffset = options && isNumber(options.slicedOffset) ?\n                    options.slicedOffset :\n                    0;\n                return (children || []).reduce(function (arr, child) {\n                    var percentage = (1 / total) * child.val, radians = percentage * range, radiansCenter = startAngle + (radians / 2), offsetPosition = getEndPoint(x, y, radiansCenter, slicedOffset), values = {\n                        x: child.sliced ? offsetPosition.x : x,\n                        y: child.sliced ? offsetPosition.y : y,\n                        innerR: innerRadius,\n                        r: outerRadius,\n                        radius: radius,\n                        start: startAngle,\n                        end: startAngle + radians\n                    };\n                    arr.push(values);\n                    startAngle = values.end;\n                    return arr;\n                }, []);\n            };\n            SunburstSeries.prototype.setRootNode = function (id, redraw, eventArguments) {\n                var series = this;\n                if ( // If the target node is the only one at level 1, skip it. (#18658)\n                series.nodeMap[id].level === 1 &&\n                    series.nodeList\n                        .filter(function (node) { return node.level === 1; })\n                        .length === 1) {\n                    if (series.idPreviousRoot === '') {\n                        return;\n                    }\n                    id = '';\n                }\n                _super.prototype.setRootNode.call(this, id, redraw, eventArguments);\n            };\n            /**\n             * Set the shape arguments on the nodes. Recursive from root down.\n             * @private\n             */\n            SunburstSeries.prototype.setShapeArgs = function (parent, parentValues, mapOptionsToLevel) {\n                var level = parent.level + 1, options = mapOptionsToLevel[level], \n                // Collect all children which should be included\n                children = parent.children.filter(function (n) {\n                    return n.visible;\n                }), twoPi = 6.28; // Two times Pi.\n                var childrenValues = [];\n                childrenValues = this.layoutAlgorithm(parentValues, children, options);\n                var i = -1;\n                for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n                    var child = children_1[_i];\n                    var values = childrenValues[++i], angle = values.start + ((values.end - values.start) / 2), radius = values.innerR + ((values.r - values.innerR) / 2), radians = (values.end - values.start), isCircle = (values.innerR === 0 && radians > twoPi), center = (isCircle ?\n                        { x: values.x, y: values.y } :\n                        getEndPoint(values.x, values.y, angle, radius)), val = (child.val ?\n                        (child.childrenTotal > child.val ?\n                            child.childrenTotal :\n                            child.val) :\n                        child.childrenTotal);\n                    // The inner arc length is a convenience for data label filters.\n                    if (this.points[child.i]) {\n                        this.points[child.i].innerArcLength = radians * values.innerR;\n                        this.points[child.i].outerArcLength = radians * values.r;\n                    }\n                    child.shapeArgs = merge(values, {\n                        plotX: center.x,\n                        plotY: center.y\n                    });\n                    child.values = merge(values, {\n                        val: val\n                    });\n                    // If node has children, then call method recursively\n                    if (child.children.length) {\n                        this.setShapeArgs(child, child.values, mapOptionsToLevel);\n                    }\n                }\n            };\n            SunburstSeries.prototype.translate = function () {\n                var series = this, options = series.options, positions = series.center = series.getCenter(), radians = series.startAndEndRadians = getStartAndEndRadians(options.startAngle, options.endAngle), innerRadius = positions[3] / 2, outerRadius = positions[2] / 2, diffRadius = outerRadius - innerRadius, \n                // NOTE: updateRootId modifies series.\n                rootId = updateRootId(series);\n                var mapIdToNode = series.nodeMap, mapOptionsToLevel, nodeRoot = mapIdToNode && mapIdToNode[rootId], nodeIds = {};\n                series.shapeRoot = nodeRoot && nodeRoot.shapeArgs;\n                if (!series.processedXData) { // Hidden series\n                    series.processData();\n                }\n                series.generatePoints();\n                fireEvent(series, 'afterTranslate');\n                // @todo Only if series.isDirtyData is true\n                var tree = series.tree = series.getTree();\n                // Render traverseUpButton, after series.nodeMap i calculated.\n                mapIdToNode = series.nodeMap;\n                nodeRoot = mapIdToNode[rootId];\n                var idTop = isString(nodeRoot.parent) ? nodeRoot.parent : '', nodeTop = mapIdToNode[idTop], _a = SunburstUtilities.getLevelFromAndTo(nodeRoot), from = _a.from, to = _a.to;\n                mapOptionsToLevel = getLevelOptions({\n                    from: from,\n                    levels: series.options.levels,\n                    to: to,\n                    defaults: {\n                        colorByPoint: options.colorByPoint,\n                        dataLabels: options.dataLabels,\n                        levelIsConstant: options.levelIsConstant,\n                        levelSize: options.levelSize,\n                        slicedOffset: options.slicedOffset\n                    }\n                });\n                // NOTE consider doing calculateLevelSizes in a callback to\n                // getLevelOptions\n                mapOptionsToLevel = SunburstUtilities.calculateLevelSizes(mapOptionsToLevel, {\n                    diffRadius: diffRadius,\n                    from: from,\n                    to: to\n                });\n                // TODO Try to combine setTreeValues & setColorRecursive to avoid\n                //  unnecessary looping.\n                setTreeValues(tree, {\n                    before: cbSetTreeValuesBefore,\n                    idRoot: rootId,\n                    levelIsConstant: options.levelIsConstant,\n                    mapOptionsToLevel: mapOptionsToLevel,\n                    mapIdToNode: mapIdToNode,\n                    points: series.points,\n                    series: series\n                });\n                var values = mapIdToNode[''].shapeArgs = {\n                    end: radians.end,\n                    r: innerRadius,\n                    start: radians.start,\n                    val: nodeRoot.val,\n                    x: positions[0],\n                    y: positions[1]\n                };\n                this.setShapeArgs(nodeTop, values, mapOptionsToLevel);\n                // Set mapOptionsToLevel on series for use in drawPoints.\n                series.mapOptionsToLevel = mapOptionsToLevel;\n                // #10669 - verify if all nodes have unique ids\n                for (var _i = 0, _b = series.points; _i < _b.length; _i++) {\n                    var point = _b[_i];\n                    if (nodeIds[point.id]) {\n                        error(31, false, series.chart);\n                    }\n                    // Map\n                    nodeIds[point.id] = true;\n                }\n                // Reset object\n                nodeIds = {};\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            SunburstSeries.defaultOptions = merge(TreemapSeries.defaultOptions, SunburstSeriesDefaults);\n            return SunburstSeries;\n        }(TreemapSeries));\n        extend(SunburstSeries.prototype, {\n            axisTypes: [],\n            drawDataLabels: noop, // `drawDataLabels` is called in `drawPoints`\n            getCenter: getCenter,\n            isCartesian: false,\n            // Mark that the sunburst is supported by the series on point feature.\n            onPointSupported: true,\n            pointAttribs: ColumnSeries.prototype.pointAttribs,\n            pointClass: SunburstPoint,\n            NodeClass: SunburstNode,\n            utils: SunburstUtilities\n        });\n        SeriesRegistry.registerSeriesType('sunburst', SunburstSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstSeries;\n    });\n    _registerModule(_modules, 'masters/modules/sunburst.src.js', [_modules['Core/Globals.js'], _modules['Extensions/Breadcrumbs/Breadcrumbs.js']], function (Highcharts, Breadcrumbs) {\n\n        var G = Highcharts;\n        G.Breadcrumbs = G.Breadcrumbs || Breadcrumbs;\n        G.Breadcrumbs.compose(G.Chart, G.defaultOptions);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","lang","mainBreadcrumb","options","buttonTheme","fill","height","padding","zIndex","states","select","style","color","buttonSpacing","floating","format","relativeTo","rtl","position","align","verticalAlign","x","y","separator","text","fontSize","showFullPath","useHTML","BreadcrumbsDefaults","F","H","U","composed","addEvent","defined","extend","fireEvent","isString","merge","objectEach","pick","pushUnique","onChartAfterShowResetZoom","chart","breadcrumbs","bbox","resetZoomButton","getBBox","breadcrumbsOptions","alignBreadcrumbsGroup","width","onChartDestroy","destroy","onChartGetMargins","level","breadcrumbsHeight","marginBottom","yOffset","plotTop","onChartRedraw","redraw","onChartSelection","event","resetSelection","Breadcrumbs","userOptions","elementList","isDirty","list","chartOptions","drilldown","drillUpButton","defaultOptions","navigation","compose","ChartClass","highchartsDefaultOptions","prototype","updateProperties","setList","setLevel","length","getLevel","getButtonText","breadcrumb","textFormat","defaultText","drillUpText","returnText","formatter","levelOptions","render","group","renderer","g","addClass","attr","add","renderFullPathButtons","renderSingleButton","destroySingleButton","resetElementListState","updateListElements","destroyListElements","posX","previousBreadcrumb","renderButton","updateSingleButton","xOffset","positionOptions","alignTo","bBox","additionalSpace","newPositions","posY","button","e","callDefaultEvent","buttonEvents","events","click","call","newLevel","styledMode","renderSeparator","separatorOptions","label","css","update","currentBreadcrumb","force","element","updated","rtlFactor","updateXPosition","spacing","adjustToRTL","translate","i","iEnd","isLast","setState","SeriesRegistry","SVGElement","ColorMapComposition","columnProto","seriesTypes","column","onPointAfterSetState","series","point","moveToTopOnHover","graphic","stateMarkerGraphic","pointerEvents","parentGroup","state","id","href","concat","url","visibility","pointMembers","dataLabelOnNull","isValid","value","Infinity","isNaN","seriesMembers","colorKey","axisTypes","parallelArrays","pointArrayMap","trackerGroups","colorAttribs","ret","colorProp","pointAttribs","SeriesClass","pointClass","TreemapAlgorithmGroup","h","w","d","p","plot","direction","startDirection","total","nW","lW","nH","lH","elArr","lP","nR","lR","aspectRatio","Math","max","addElement","el","push","reset","TreemapNode","childrenTotal","visible","init","children","parent","__assign","Object","assign","t","s","n","arguments","draw","params","animatableAttribs","onComplete","animation","hasRendered","attribs","getClassName","shouldDraw","shapeType","image","imageUrl","shapeArgs","animate","isNew","destroy_1","keys","DPU","extendStatics","__extends","b","setPrototypeOf","__proto__","Array","TypeError","String","__","constructor","create","_a","PiePoint","pie","ScatterPoint","scatter","isNumber","TreemapPoint","_super","_this","className","node","nodeMap","rootNode","isLeaf","interactByLeaf","allowTraversingTree","Boolean","plotY","setVisible","animationLimit","borderRadius","showInLegend","marker","colorByPoint","dataLabels","defer","enabled","name","inside","tooltip","headerFormat","pointFormat","ignoreHiddenPoint","layoutAlgorithm","layoutStartingDirection","alternateStartingDirection","levelIsConstant","traverseUpButton","borderColor","borderWidth","opacity","hover","brightness","heatmap","halo","shadow","legendSymbol","traverseToLeaf","TreemapUtilities","recursive","item","func","context","next","Color","isArray","isObject","relativeLength","getColor","colorVariation","colorIndexByPoint","colorIndex","index","mapOptionsToLevel","parentColor","parentColorIndex","colors","siblings","points","chartOptionsChart","colorCount","key","parse","brighten","to","get","getLevelOptions","defaults","converted","from","levels","result","reduce","getNodeWidth","columnCount","nodeDistance","_b","nodeWidth","_c","plotSizeX","test","fraction","parseFloat","nDistance","Number","setTreeValues","tree","before","idRoot","nodeRoot","mapIdToNode","optionsPoint","levelDynamic","forEach","child","newOptions","val","updateRootId","rootId","TreemapSeriesDefaults","TU","noop","ColumnSeries","ScatterSeries","correctFloat","crisp","error","stableSort","treemapAxisDefaultValues","onSeriesAfterBindAxes","treeAxis","xAxis","yAxis","is","endOnTick","gridLineWidth","lineWidth","min","minPadding","maxPadding","startOnTick","title","tickPositions","setOptions","TreemapSeries","algorithmCalcPoints","directionChange","last","childrenArea","pX","pY","pW","pH","keep","end","gW","gH","_i","algorithmFill","pTot","children_1","algorithmLowAspectRatio","children_2","alignDataLabel","dataLabel","labelOptions","textOverflow","textWidth","calculateChildrenAreas","area","algorithm","alternate","filter","ignore","childrenValues","children_3","values","pointValues","axisRatio","axisMax","createList","currentLevelNumber","target","newRootId","extraNodes","reverse","node_1","drawDataLabels","points_1","hasDataLabels","dlOptions","drawPoints","withinAnimationLimit","pointCount","points_2","groupKey","hasGraphic","shouldAnimate","isInside","r","selected","survive","drillId","drillToByLeaf","drillToByGroup","nodeParent","drillToNode","setRootNode","drillUp","trigger","getExtremes","colorValueData","dataMin","dataMax","valueMin","valueMax","getListOfParents","data","existingIds","arr","ids","listOfParents","prev","curr","parent_1","indexOf","children_4","getTree","allIds","map","parentList","nodeList","buildTree","NodeClass","children_5","child_1","parentNode","hasData","processedXData","setOptionsEvent","allowDrillToNode","eventsToUnbind","onClickDrillToNode","keepEventsForUpdate","drillUpsNumber","stateOptions","borderDashStyle","setOpacity","cursor","setColorRecursive","colorInfo","setPointValues","points_3","strokeWidth","x1","toPixels","x2","y1","y2","abs","plotX","eventArguments","previousRootId","idPreviousRoot","inactiveOtherPoints","a","sortIndex","sliceAndDice","squarified","strip","stripes","seriesArea","children_6","len","colorAxis","setExtremes","setScale","buildKDTree","directTouch","getExtremesFromAll","getSymbol","optionalAxis","utils","registerSeriesType","Point","treemap","pInt","SunburstPoint","getDataLabelPath","moreThanHalf","shapeExisting","distance","start","angle","upperHalf","PI","dataLabelPath","arc","open","longArc","clockwise","innerR","defs","haloPath","range","calculateLevelSizes","diffRadius","levelsNotIncluded","remainingSize","totalWeight","levels_1","unit","levelSize","levels_2","weight","levelsNotIncluded_1","getLevelFromAndTo","SunburstNode","center","clip","allowOverlap","rotationMode","slicedOffset","deg2rad","uniqueKey","setTextPath","textPathOptions","attributes","dy","startOffset","textAnchor","textWrapper","textPath","undo","textPathId","textAttribs","dx","transform","box","nodes","slice","tagName","added","textCache","buildText","setPolygon","tp","querySelector","polygon","fontMetrics","b_1","descender_1","lineCleanerRegex","RegExp","lines","innerHTML","replace","split","numOfLines","appendTopAndBottom","charIndex","positionOfChar","rotation","getRotationOfChar","cosRot","cos","sinRot","sin","lineIndex","lineLen","line","lineCharIndex","srcCharIndex","getStartPositionOfChar","lower","upper","unshift","charPos","getEndPositionOfChar","_d","drawTextPath","formatPrefix","SVGElementClass","svgElementProto","CU","SunburstUtilities","SunburstSeriesDefaults","TextPath","getCenter","getStartAndEndRadians","splat","rad2deg","getEndPoint","cbSetTreeValuesBefore","sliced","SunburstSeries","plotWidth","plotHeight","plotLeft","translateX","translateY","scaleX","scaleY","animateLabels","shapeRoot","nodePreviousRoot","shapePreviousRoot","radians","startAndEndRadians","optionsChart","isBoolean","positions","hackDataLabelAnimation","dataLabelsGroup","animateLabelsCalled","addedHack","shape","animationInfo","getAnimation","tooltipPos","getDrillId","isNull","getDlOptions","rotationRad","innerArcLength","outerArcLength","radius","startAngle","innerRadius","outerRadius","percentage","offsetPosition","setShapeArgs","parentValues","isCircle","endAngle","nodeIds","processData","generatePoints","idTop","nodeTop","isCartesian","onPointSupported","G","Chart"],"mappings":"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"}