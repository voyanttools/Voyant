{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * Highcharts\n *\n * (c) 2010-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/data-tools', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Data/Modifiers/DataModifier.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - GÃ¸ran Slettemark\n         *\n         * */\n        var addEvent = U.addEvent, fireEvent = U.fireEvent, merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class to provide an interface for modifying a table.\n         *\n         */\n        var DataModifier = /** @class */ (function () {\n            function DataModifier() {\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Runs a timed execution of the modifier on the given datatable.\n             * Can be configured to run multiple times.\n             *\n             * @param {DataTable} dataTable\n             * The datatable to execute\n             *\n             * @param {DataModifier.BenchmarkOptions} options\n             * Options. Currently supports `iterations` for number of iterations.\n             *\n             * @return {Array<number>}\n             * An array of times in milliseconds\n             *\n             */\n            DataModifier.prototype.benchmark = function (dataTable, options) {\n                var results = [];\n                var modifier = this;\n                var execute = function () {\n                    modifier.modifyTable(dataTable);\n                    modifier.emit({\n                        type: 'afterBenchmarkIteration'\n                    });\n                };\n                var defaultOptions = {\n                    iterations: 1\n                };\n                var iterations = merge(defaultOptions, options).iterations;\n                modifier.on('afterBenchmarkIteration', function () {\n                    if (results.length === iterations) {\n                        modifier.emit({\n                            type: 'afterBenchmark',\n                            results: results\n                        });\n                        return;\n                    }\n                    // Run again\n                    execute();\n                });\n                var times = {\n                    startTime: 0,\n                    endTime: 0\n                };\n                // Add timers\n                modifier.on('modify', function () {\n                    times.startTime = window.performance.now();\n                });\n                modifier.on('afterModify', function () {\n                    times.endTime = window.performance.now();\n                    results.push(times.endTime - times.startTime);\n                });\n                // Initial run\n                execute();\n                return results;\n            };\n            /**\n             * Emits an event on the modifier to all registered callbacks of this event.\n             *\n             * @param {DataModifier.Event} [e]\n             * Event object containing additonal event information.\n             */\n            DataModifier.prototype.emit = function (e) {\n                fireEvent(this, e.type, e);\n            };\n            /**\n             * Returns a modified copy of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            DataModifier.prototype.modify = function (table, eventDetail) {\n                var modifier = this;\n                return new Promise(function (resolve, reject) {\n                    if (table.modified === table) {\n                        table.modified = table.clone(false, eventDetail);\n                    }\n                    try {\n                        resolve(modifier.modifyTable(table, eventDetail));\n                    }\n                    catch (e) {\n                        modifier.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table: table\n                        });\n                        reject(e);\n                    }\n                });\n            };\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            DataModifier.prototype.modifyCell = function (table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columnName, rowIndex, cellValue, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            };\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            DataModifier.prototype.modifyColumns = function (table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columns, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            };\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            DataModifier.prototype.modifyRows = function (table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            rows, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            };\n            /**\n             * Registers a callback for a specific modifier event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            DataModifier.prototype.on = function (type, callback) {\n                return addEvent(this, type, callback);\n            };\n            return DataModifier;\n        }());\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for modifier events and options.\n         */\n        (function (DataModifier) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with modifier names and their class\n             * constructor.\n             */\n            DataModifier.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a modifier class to the registry. The modifier class has to provide\n             * the `DataModifier.options` property and the `DataModifier.modifyTable`\n             * method to modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the modifier class.\n             *\n             * @param {DataModifierType} DataModifierClass\n             * Modifier class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a modifier registered with this key.\n             */\n            function registerType(key, DataModifierClass) {\n                return (!!key &&\n                    !DataModifier.types[key] &&\n                    !!(DataModifier.types[key] = DataModifierClass));\n            }\n            DataModifier.registerType = registerType;\n        })(DataModifier || (DataModifier = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataModifier;\n    });\n    _registerModule(_modules, 'Data/DataTable.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - GÃ¸ran Slettemark\n         *  - Jomar HÃ¸nsi\n         *  - Dawid Dragula\n         *\n         * */\n        var addEvent = U.addEvent, defined = U.defined, fireEvent = U.fireEvent, uniqueKey = U.uniqueKey;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        var DataTable = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataTable class.\n             *\n             * @param {Highcharts.DataTableOptions} [options]\n             * Options to initialize the new DataTable instance.\n             */\n            function DataTable(options) {\n                if (options === void 0) { options = {}; }\n                /**\n                 * Whether the ID was automatic generated or given in the constructor.\n                 *\n                 * @name Highcharts.DataTable#autoId\n                 * @type {boolean}\n                 */\n                this.autoId = !options.id;\n                this.columns = {};\n                /**\n                 * ID of the table for identification purposes.\n                 *\n                 * @name Highcharts.DataTable#id\n                 * @type {string}\n                 */\n                this.id = (options.id || uniqueKey());\n                this.modified = this;\n                this.rowCount = 0;\n                this.versionTag = uniqueKey();\n                var columns = options.columns || {}, columnNames = Object.keys(columns), thisColumns = this.columns;\n                var rowCount = 0;\n                for (var i = 0, iEnd = columnNames.length, column = void 0, columnName = void 0; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName].slice();\n                    thisColumns[columnName] = column;\n                    rowCount = Math.max(rowCount, column.length);\n                }\n                for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    thisColumns[columnNames[i]].length = rowCount;\n                }\n                this.rowCount = rowCount;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Tests whether a row contains only `null` values or is equal to\n             * DataTable.NULL. If all columns have `null` values, the function returns\n             * `true`. Otherwise, it returns `false` to indicate that the row contains\n             * at least one non-null value.\n             *\n             * @function Highcharts.DataTable.isNull\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Row to test.\n             *\n             * @return {boolean}\n             * Returns `true`, if the row contains only null, otherwise `false`.\n             *\n             * @example\n             * if (DataTable.isNull(row)) {\n             *   // handle null row\n             * }\n             */\n            DataTable.isNull = function (row) {\n                if (row === DataTable.NULL) {\n                    return true;\n                }\n                if (row instanceof Array) {\n                    if (!row.length) {\n                        return false;\n                    }\n                    for (var i = 0, iEnd = row.length; i < iEnd; ++i) {\n                        if (row[i] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    var columnNames = Object.keys(row);\n                    if (!columnNames.length) {\n                        return false;\n                    }\n                    for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (row[columnNames[i]] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns a clone of this table. The cloned table is completely independent\n             * of the original, and any changes made to the clone will not affect\n             * the original table.\n             *\n             * @function Highcharts.DataTable#clone\n             *\n             * @param {boolean} [skipColumns]\n             * Whether to clone columns or not.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Clone of this data table.\n             *\n             * @emits #cloneTable\n             * @emits #afterCloneTable\n             */\n            DataTable.prototype.clone = function (skipColumns, eventDetail) {\n                var table = this, tableOptions = {};\n                table.emit({ type: 'cloneTable', detail: eventDetail });\n                if (!skipColumns) {\n                    tableOptions.columns = table.columns;\n                }\n                if (!table.autoId) {\n                    tableOptions.id = table.id;\n                }\n                var tableClone = new DataTable(tableOptions);\n                if (!skipColumns) {\n                    tableClone.versionTag = table.versionTag;\n                    tableClone.originalRowIndexes = table.originalRowIndexes;\n                    tableClone.localRowIndexes = table.localRowIndexes;\n                }\n                table.emit({\n                    type: 'afterCloneTable',\n                    detail: eventDetail,\n                    tableClone: tableClone\n                });\n                return tableClone;\n            };\n            /**\n             * Deletes columns from the table.\n             *\n             * @function Highcharts.DataTable#deleteColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Names of columns to delete. If no array is provided, all\n             * columns will be deleted.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTableColumnCollection|undefined}\n             * Returns the deleted columns, if found.\n             *\n             * @emits #deleteColumns\n             * @emits #afterDeleteColumns\n             */\n            DataTable.prototype.deleteColumns = function (columnNames, eventDetail) {\n                var table = this, columns = table.columns, deletedColumns = {}, modifiedColumns = {}, modifier = table.modifier, rowCount = table.rowCount;\n                columnNames = (columnNames || Object.keys(columns));\n                if (columnNames.length) {\n                    table.emit({\n                        type: 'deleteColumns',\n                        columnNames: columnNames,\n                        detail: eventDetail\n                    });\n                    for (var i = 0, iEnd = columnNames.length, column = void 0, columnName = void 0; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        if (column) {\n                            deletedColumns[columnName] = column;\n                            modifiedColumns[columnName] = new Array(rowCount);\n                        }\n                        delete columns[columnName];\n                    }\n                    if (!Object.keys(columns).length) {\n                        table.rowCount = 0;\n                        this.deleteRowIndexReferences();\n                    }\n                    if (modifier) {\n                        modifier.modifyColumns(table, modifiedColumns, 0, eventDetail);\n                    }\n                    table.emit({\n                        type: 'afterDeleteColumns',\n                        columns: deletedColumns,\n                        columnNames: columnNames,\n                        detail: eventDetail\n                    });\n                    return deletedColumns;\n                }\n            };\n            /**\n             * Deletes the row index references. This is useful when the original table\n             * is deleted, and the references are no longer needed. This table is\n             * then considered an original table or a table that has the same row's\n             * order as the original table.\n             */\n            DataTable.prototype.deleteRowIndexReferences = function () {\n                delete this.originalRowIndexes;\n                delete this.localRowIndexes;\n                // Here, in case of future need, can be implemented updating of the\n                // modified tables' row indexes references.\n            };\n            /**\n             * Deletes rows in this table.\n             *\n             * @function Highcharts.DataTable#deleteRows\n             *\n             * @param {number} [rowIndex]\n             * Index to start delete of rows. If not specified, all rows will be\n             * deleted.\n             *\n             * @param {number} [rowCount=1]\n             * Number of rows to delete.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Array<Highcharts.DataTableRow>}\n             * Returns the deleted rows, if found.\n             *\n             * @emits #deleteRows\n             * @emits #afterDeleteRows\n             */\n            DataTable.prototype.deleteRows = function (rowIndex, rowCount, eventDetail) {\n                if (rowCount === void 0) { rowCount = 1; }\n                var table = this, deletedRows = [], modifiedRows = [], modifier = table.modifier;\n                table.emit({\n                    type: 'deleteRows',\n                    detail: eventDetail,\n                    rowCount: rowCount,\n                    rowIndex: (rowIndex || 0)\n                });\n                if (typeof rowIndex === 'undefined') {\n                    rowIndex = 0;\n                    rowCount = table.rowCount;\n                }\n                if (rowCount > 0 && rowIndex < table.rowCount) {\n                    var columns = table.columns, columnNames = Object.keys(columns);\n                    for (var i = 0, iEnd = columnNames.length, column = void 0, deletedCells = void 0; i < iEnd; ++i) {\n                        column = columns[columnNames[i]];\n                        deletedCells = column.splice(rowIndex, rowCount);\n                        if (!i) {\n                            table.rowCount = column.length;\n                        }\n                        for (var j = 0, jEnd = deletedCells.length; j < jEnd; ++j) {\n                            deletedRows[j] = (deletedRows[j] || []);\n                            deletedRows[j][i] = deletedCells[j];\n                        }\n                        modifiedRows.push(new Array(iEnd));\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, modifiedRows, (rowIndex || 0), eventDetail);\n                }\n                table.emit({\n                    type: 'afterDeleteRows',\n                    detail: eventDetail,\n                    rowCount: rowCount,\n                    rowIndex: (rowIndex || 0),\n                    rows: deletedRows\n                });\n                return deletedRows;\n            };\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            DataTable.prototype.emit = function (e) {\n                var table = this;\n                switch (e.type) {\n                    case 'afterDeleteColumns':\n                    case 'afterDeleteRows':\n                    case 'afterSetCell':\n                    case 'afterSetColumns':\n                    case 'afterSetRows':\n                        table.versionTag = uniqueKey();\n                        break;\n                    default:\n                }\n                fireEvent(table, e.type, e);\n            };\n            /**\n             * Fetches a single cell value.\n             *\n             * @function Highcharts.DataTable#getCell\n             *\n             * @param {string} columnName\n             * Column name of the cell to retrieve.\n             *\n             * @param {number} rowIndex\n             * Row index of the cell to retrieve.\n             *\n             * @return {Highcharts.DataTableCellType|undefined}\n             * Returns the cell value or `undefined`.\n             */\n            DataTable.prototype.getCell = function (columnName, rowIndex) {\n                var table = this;\n                var column = table.columns[columnName];\n                if (column) {\n                    return column[rowIndex];\n                }\n            };\n            /**\n             * Fetches a cell value for the given row as a boolean.\n             *\n             * @function Highcharts.DataTable#getCellAsBoolean\n             *\n             * @param {string} columnName\n             * Column name to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {boolean}\n             * Returns the cell value of the row as a boolean.\n             */\n            DataTable.prototype.getCellAsBoolean = function (columnName, rowIndex) {\n                var table = this;\n                var column = table.columns[columnName];\n                return !!(column && column[rowIndex]);\n            };\n            /**\n             * Fetches a cell value for the given row as a number.\n             *\n             * @function Highcharts.DataTable#getCellAsNumber\n             *\n             * @param {string} columnName\n             * Column name or to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to return NaN instead of `null` and `undefined`.\n             *\n             * @return {number|null}\n             * Returns the cell value of the row as a number.\n             */\n            DataTable.prototype.getCellAsNumber = function (columnName, rowIndex, useNaN) {\n                var table = this;\n                var column = table.columns[columnName];\n                var cellValue = (column && column[rowIndex]);\n                switch (typeof cellValue) {\n                    case 'boolean':\n                        return (cellValue ? 1 : 0);\n                    case 'number':\n                        return (isNaN(cellValue) && !useNaN ? null : cellValue);\n                }\n                cellValue = parseFloat(\"\".concat(cellValue !== null && cellValue !== void 0 ? cellValue : ''));\n                return (isNaN(cellValue) && !useNaN ? null : cellValue);\n            };\n            /**\n             * Fetches a cell value for the given row as a string.\n             *\n             * @function Highcharts.DataTable#getCellAsString\n             *\n             * @param {string} columnName\n             * Column name to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {string}\n             * Returns the cell value of the row as a string.\n             */\n            DataTable.prototype.getCellAsString = function (columnName, rowIndex) {\n                var table = this;\n                var column = table.columns[columnName];\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                return \"\".concat((column && column[rowIndex]));\n            };\n            /**\n             * Fetches the given column by the canonical column name.\n             * This function is a simplified wrap of {@link getColumns}.\n             *\n             * @function Highcharts.DataTable#getColumn\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return the column as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            DataTable.prototype.getColumn = function (columnName, asReference) {\n                return this.getColumns([columnName], asReference)[columnName];\n            };\n            /**\n             * Fetches the given column by the canonical column name, and\n             * validates the type of the first few cells. If the first defined cell is\n             * of type number, it assumes for performance reasons, that all cells are of\n             * type number or `null`. Otherwise it will convert all cells to number\n             * type, except `null`.\n             *\n             * @function Highcharts.DataTable#getColumnAsNumbers\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to use NaN instead of `null` and `undefined`.\n             *\n             * @return {Array<(number|null)>}\n             * A copy of the column, or an empty array if not found.\n             */\n            DataTable.prototype.getColumnAsNumbers = function (columnName, useNaN) {\n                var table = this, columns = table.columns;\n                var column = columns[columnName], columnAsNumber = [];\n                if (column) {\n                    var columnLength = column.length;\n                    if (useNaN) {\n                        for (var i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnName, i, true));\n                        }\n                    }\n                    else {\n                        for (var i = 0, cellValue = void 0; i < columnLength; ++i) {\n                            cellValue = column[i];\n                            if (typeof cellValue === 'number') {\n                                // Assume unmixed data for performance reasons\n                                return column.slice();\n                            }\n                            if (cellValue !== null &&\n                                typeof cellValue !== 'undefined') {\n                                break;\n                            }\n                        }\n                        for (var i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnName, i));\n                        }\n                    }\n                }\n                return columnAsNumber;\n            };\n            /**\n             * Fetches all column names.\n             *\n             * @function Highcharts.DataTable#getColumnNames\n             *\n             * @return {Array<string>}\n             * Returns all column names.\n             */\n            DataTable.prototype.getColumnNames = function () {\n                var table = this, columnNames = Object.keys(table.columns);\n                return columnNames;\n            };\n            /**\n             * Retrieves all or the given columns.\n             *\n             * @function Highcharts.DataTable#getColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return columns as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            DataTable.prototype.getColumns = function (columnNames, asReference) {\n                var table = this, tableColumns = table.columns, columns = {};\n                columnNames = (columnNames || Object.keys(tableColumns));\n                for (var i = 0, iEnd = columnNames.length, column = void 0, columnName = void 0; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = tableColumns[columnName];\n                    if (column) {\n                        columns[columnName] = (asReference ? column : column.slice());\n                    }\n                }\n                return columns;\n            };\n            /**\n             * Takes the original row index and returns the local row index in the\n             * modified table for which this function is called.\n             *\n             * @param {number} originalRowIndex\n             * Original row index to get the local row index for.\n             *\n             * @return {number|undefined}\n             * Returns the local row index or `undefined` if not found.\n             */\n            DataTable.prototype.getLocalRowIndex = function (originalRowIndex) {\n                var localRowIndexes = this.localRowIndexes;\n                if (localRowIndexes) {\n                    return localRowIndexes[originalRowIndex];\n                }\n                return originalRowIndex;\n            };\n            /**\n             * Retrieves the modifier for the table.\n             * @private\n             *\n             * @return {Highcharts.DataModifier|undefined}\n             * Returns the modifier or `undefined`.\n             */\n            DataTable.prototype.getModifier = function () {\n                return this.modifier;\n            };\n            /**\n             * Takes the local row index and returns the index of the corresponding row\n             * in the original table.\n             *\n             * @param {number} rowIndex\n             * Local row index to get the original row index for.\n             *\n             * @return {number|undefined}\n             * Returns the original row index or `undefined` if not found.\n             */\n            DataTable.prototype.getOriginalRowIndex = function (rowIndex) {\n                var originalRowIndexes = this.originalRowIndexes;\n                if (originalRowIndexes) {\n                    return originalRowIndexes[rowIndex];\n                }\n                return rowIndex;\n            };\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRows}.\n             *\n             * @function Highcharts.DataTable#getRow\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names in order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns the row values, or `undefined` if not found.\n             */\n            DataTable.prototype.getRow = function (rowIndex, columnNames) {\n                return this.getRows(rowIndex, 1, columnNames)[0];\n            };\n            /**\n             * Returns the number of rows in this table.\n             *\n             * @function Highcharts.DataTable#getRowCount\n             *\n             * @return {number}\n             * Number of rows in this table.\n             */\n            DataTable.prototype.getRowCount = function () {\n                // @todo Implement via property getter `.length` browsers supported\n                return this.rowCount;\n            };\n            /**\n             * Retrieves the index of the first row matching a specific cell value.\n             *\n             * @function Highcharts.DataTable#getRowIndexBy\n             *\n             * @param {string} columnName\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @param {number} [rowIndexOffset]\n             * Index offset to start searching.\n             *\n             * @return {number|undefined}\n             * Index of the first row matching the cell value.\n             */\n            DataTable.prototype.getRowIndexBy = function (columnName, cellValue, rowIndexOffset) {\n                var table = this;\n                var column = table.columns[columnName];\n                if (column) {\n                    var rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    if (rowIndex !== -1) {\n                        return rowIndex;\n                    }\n                }\n            };\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRowObjects}.\n             *\n             * @function Highcharts.DataTable#getRowObject\n             *\n             * @param {number} rowIndex\n             * Row index.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns the row values, or `undefined` if not found.\n             */\n            DataTable.prototype.getRowObject = function (rowIndex, columnNames) {\n                return this.getRowObjects(rowIndex, 1, columnNames)[0];\n            };\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRowObjects\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns retrieved rows.\n             */\n            DataTable.prototype.getRowObjects = function (rowIndex, rowCount, columnNames) {\n                if (rowIndex === void 0) { rowIndex = 0; }\n                if (rowCount === void 0) { rowCount = (this.rowCount - rowIndex); }\n                var table = this, columns = table.columns, rows = new Array(rowCount);\n                columnNames = (columnNames || Object.keys(columns));\n                for (var i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column = void 0, row = void 0; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = {};\n                    for (var _i = 0, columnNames_1 = columnNames; _i < columnNames_1.length; _i++) {\n                        var columnName = columnNames_1[_i];\n                        column = columns[columnName];\n                        row[columnName] = (column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            };\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRows\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns retrieved rows.\n             */\n            DataTable.prototype.getRows = function (rowIndex, rowCount, columnNames) {\n                if (rowIndex === void 0) { rowIndex = 0; }\n                if (rowCount === void 0) { rowCount = (this.rowCount - rowIndex); }\n                var table = this, columns = table.columns, rows = new Array(rowCount);\n                columnNames = (columnNames || Object.keys(columns));\n                for (var i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column = void 0, row = void 0; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = [];\n                    for (var _i = 0, columnNames_2 = columnNames; _i < columnNames_2.length; _i++) {\n                        var columnName = columnNames_2[_i];\n                        column = columns[columnName];\n                        row.push(column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            };\n            /**\n             * Returns the unique version tag of the current state of the table.\n             *\n             * @function Highcharts.DataTable#getVersionTag\n             *\n             * @return {string}\n             * Unique version tag.\n             */\n            DataTable.prototype.getVersionTag = function () {\n                return this.versionTag;\n            };\n            /**\n             * Checks for given column names.\n             *\n             * @function Highcharts.DataTable#hasColumns\n             *\n             * @param {Array<string>} columnNames\n             * Column names to check.\n             *\n             * @return {boolean}\n             * Returns `true` if all columns have been found, otherwise `false`.\n             */\n            DataTable.prototype.hasColumns = function (columnNames) {\n                var table = this, columns = table.columns;\n                for (var i = 0, iEnd = columnNames.length, columnName = void 0; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    if (!columns[columnName]) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n            /**\n             * Searches for a specific cell value.\n             *\n             * @function Highcharts.DataTable#hasRowWith\n             *\n             * @param {string} columnName\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @return {boolean}\n             * True, if a row has been found, otherwise false.\n             */\n            DataTable.prototype.hasRowWith = function (columnName, cellValue) {\n                var table = this;\n                var column = table.columns[columnName];\n                if (column) {\n                    return (column.indexOf(cellValue) !== -1);\n                }\n                return false;\n            };\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataTable#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataTable>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            DataTable.prototype.on = function (type, callback) {\n                return addEvent(this, type, callback);\n            };\n            /**\n             * Renames a column of cell values.\n             *\n             * @function Highcharts.DataTable#renameColumn\n             *\n             * @param {string} columnName\n             * Name of the column to be renamed.\n             *\n             * @param {string} newColumnName\n             * New name of the column. An existing column with the same name will be\n             * replaced.\n             *\n             * @return {boolean}\n             * Returns `true` if successful, `false` if the column was not found.\n             */\n            DataTable.prototype.renameColumn = function (columnName, newColumnName) {\n                var table = this, columns = table.columns;\n                if (columns[columnName]) {\n                    if (columnName !== newColumnName) {\n                        columns[newColumnName] = columns[columnName];\n                        delete columns[columnName];\n                    }\n                    return true;\n                }\n                return false;\n            };\n            /**\n             * Sets a cell value based on the row index and column.  Will\n             * insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setCell\n             *\n             * @param {string} columnName\n             * Column name to set.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index to set.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to set.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setCell\n             * @emits #afterSetCell\n             */\n            DataTable.prototype.setCell = function (columnName, rowIndex, cellValue, eventDetail) {\n                var table = this, columns = table.columns, modifier = table.modifier;\n                var column = columns[columnName];\n                if (column && column[rowIndex] === cellValue) {\n                    return;\n                }\n                table.emit({\n                    type: 'setCell',\n                    cellValue: cellValue,\n                    columnName: columnName,\n                    detail: eventDetail,\n                    rowIndex: rowIndex\n                });\n                if (!column) {\n                    column = columns[columnName] = new Array(table.rowCount);\n                }\n                if (rowIndex >= table.rowCount) {\n                    table.rowCount = (rowIndex + 1);\n                }\n                column[rowIndex] = cellValue;\n                if (modifier) {\n                    modifier.modifyCell(table, columnName, rowIndex, cellValue);\n                }\n                table.emit({\n                    type: 'afterSetCell',\n                    cellValue: cellValue,\n                    columnName: columnName,\n                    detail: eventDetail,\n                    rowIndex: rowIndex\n                });\n            };\n            /**\n             * Sets cell values for a column. Will insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setColumn\n             *\n             * @param {string} columnName\n             * Column name to set.\n             *\n             * @param {Highcharts.DataTableColumn} [column]\n             * Values to set in the column.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first row to change. (Default: 0)\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            DataTable.prototype.setColumn = function (columnName, column, rowIndex, eventDetail) {\n                var _a;\n                if (column === void 0) { column = []; }\n                if (rowIndex === void 0) { rowIndex = 0; }\n                this.setColumns((_a = {}, _a[columnName] = column, _a), rowIndex, eventDetail);\n            };\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found.\n             *\n             * @function Highcharts.DataTable#setColumns\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            DataTable.prototype.setColumns = function (columns, rowIndex, eventDetail) {\n                var table = this, tableColumns = table.columns, tableModifier = table.modifier, reset = (typeof rowIndex === 'undefined'), columnNames = Object.keys(columns);\n                table.emit({\n                    type: 'setColumns',\n                    columns: columns,\n                    columnNames: columnNames,\n                    detail: eventDetail,\n                    rowIndex: rowIndex\n                });\n                for (var i = 0, iEnd = columnNames.length, column = void 0, columnName = void 0; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    if (reset) {\n                        tableColumns[columnName] = column.slice();\n                        table.rowCount = column.length;\n                    }\n                    else {\n                        var tableColumn = (tableColumns[columnName] ?\n                            tableColumns[columnName] :\n                            tableColumns[columnName] = new Array(table.rowCount));\n                        for (var i_1 = (rowIndex || 0), iEnd_1 = column.length; i_1 < iEnd_1; ++i_1) {\n                            tableColumn[i_1] = column[i_1];\n                        }\n                        table.rowCount = Math.max(table.rowCount, tableColumn.length);\n                    }\n                }\n                var tableColumnNames = Object.keys(tableColumns);\n                for (var i = 0, iEnd = tableColumnNames.length; i < iEnd; ++i) {\n                    tableColumns[tableColumnNames[i]].length = table.rowCount;\n                }\n                if (tableModifier) {\n                    tableModifier.modifyColumns(table, columns, (rowIndex || 0));\n                }\n                table.emit({\n                    type: 'afterSetColumns',\n                    columns: columns,\n                    columnNames: columnNames,\n                    detail: eventDetail,\n                    rowIndex: rowIndex\n                });\n            };\n            /**\n             * Sets or unsets the modifier for the table.\n             *\n             * @param {Highcharts.DataModifier} [modifier]\n             * Modifier to set, or `undefined` to unset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Resolves to this table if successful, or rejects on failure.\n             *\n             * @emits #setModifier\n             * @emits #afterSetModifier\n             */\n            DataTable.prototype.setModifier = function (modifier, eventDetail) {\n                var table = this;\n                var promise;\n                table.emit({\n                    type: 'setModifier',\n                    detail: eventDetail,\n                    modifier: modifier,\n                    modified: table.modified\n                });\n                table.modified = table;\n                table.modifier = modifier;\n                if (modifier) {\n                    promise = modifier.modify(table);\n                }\n                else {\n                    promise = Promise.resolve(table);\n                }\n                return promise\n                    .then(function (table) {\n                    table.emit({\n                        type: 'afterSetModifier',\n                        detail: eventDetail,\n                        modifier: modifier,\n                        modified: table.modified\n                    });\n                    return table;\n                })['catch'](function (error) {\n                    table.emit({\n                        type: 'setModifierError',\n                        error: error,\n                        modifier: modifier,\n                        modified: table.modified\n                    });\n                    throw error;\n                });\n            };\n            /**\n             * Sets the original row indexes for the table. It is used to keep the\n             * reference to the original rows when modifying the table.\n             *\n             * @param {Array<number|undefined>} originalRowIndexes\n             * Original row indexes array.\n             *\n             * @param {boolean} omitLocalRowIndexes\n             * Whether to omit the local row indexes calculation. Defaults to `false`.\n             */\n            DataTable.prototype.setOriginalRowIndexes = function (originalRowIndexes, omitLocalRowIndexes) {\n                if (omitLocalRowIndexes === void 0) { omitLocalRowIndexes = false; }\n                this.originalRowIndexes = originalRowIndexes;\n                if (omitLocalRowIndexes) {\n                    return;\n                }\n                var modifiedIndexes = this.localRowIndexes = [];\n                for (var i = 0, iEnd = originalRowIndexes.length, originalIndex = void 0; i < iEnd; ++i) {\n                    originalIndex = originalRowIndexes[i];\n                    if (defined(originalIndex)) {\n                        modifiedIndexes[originalIndex] = i;\n                    }\n                }\n            };\n            /**\n             * Sets cell values of a row. Will insert a new row, if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             *\n             * Note: This function is just a simplified wrap of\n             * {@link Highcharts.DataTable#setRows}.\n             *\n             * @function Highcharts.DataTable#setRow\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            DataTable.prototype.setRow = function (row, rowIndex, eventDetail) {\n                this.setRows([row], rowIndex, eventDetail);\n            };\n            /**\n             * Sets cell values for multiple rows. Will insert new rows, if no index was\n             * was provided, or if the index is higher than the total number of table\n             * rows.\n             *\n             * @function Highcharts.DataTable#setRows\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Row values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to set. Leave `undefined` to add as new rows.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            DataTable.prototype.setRows = function (rows, rowIndex, eventDetail) {\n                if (rowIndex === void 0) { rowIndex = this.rowCount; }\n                var table = this, columns = table.columns, columnNames = Object.keys(columns), modifier = table.modifier, rowCount = rows.length;\n                table.emit({\n                    type: 'setRows',\n                    detail: eventDetail,\n                    rowCount: rowCount,\n                    rowIndex: rowIndex,\n                    rows: rows\n                });\n                for (var i = 0, i2 = rowIndex, row = void 0; i < rowCount; ++i, ++i2) {\n                    row = rows[i];\n                    if (row === DataTable.NULL) {\n                        for (var j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = null;\n                        }\n                    }\n                    else if (row instanceof Array) {\n                        for (var j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = row[j];\n                        }\n                    }\n                    else {\n                        var rowColumnNames = Object.keys(row);\n                        for (var j = 0, jEnd = rowColumnNames.length, rowColumnName = void 0; j < jEnd; ++j) {\n                            rowColumnName = rowColumnNames[j];\n                            if (!columns[rowColumnName]) {\n                                columns[rowColumnName] = new Array(i2 + 1);\n                            }\n                            columns[rowColumnName][i2] = row[rowColumnName];\n                        }\n                    }\n                }\n                var indexRowCount = (rowIndex + rowCount);\n                if (indexRowCount > table.rowCount) {\n                    table.rowCount = indexRowCount;\n                    for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        columns[columnNames[i]].length = indexRowCount;\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, rows, rowIndex);\n                }\n                table.emit({\n                    type: 'afterSetRows',\n                    detail: eventDetail,\n                    rowCount: rowCount,\n                    rowIndex: rowIndex,\n                    rows: rows\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Null state for a row record. In some cases, a row in a table may not\n             * contain any data or may be invalid. In these cases, a null state can be\n             * used to indicate that the row record is empty or invalid.\n             *\n             * @name Highcharts.DataTable.NULL\n             * @type {Highcharts.DataTableRowObject}\n             *\n             * @see {@link Highcharts.DataTable.isNull} for a null test.\n             *\n             * @example\n             * table.setRows([DataTable.NULL, DataTable.NULL], 10);\n             */\n            DataTable.NULL = {};\n            /**\n             * Semantic version string of the DataTable class.\n             * @internal\n             */\n            DataTable.version = '1.0.0';\n            return DataTable;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataTable;\n    });\n    _registerModule(_modules, 'Data/Connectors/DataConnector.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *\n         * */\n        var addEvent = U.addEvent, fireEvent = U.fireEvent, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class providing an interface for managing a DataConnector.\n         *\n         * @private\n         */\n        var DataConnector = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor for the connector class.\n             *\n             * @param {DataConnector.UserOptions} [options]\n             * Options to use in the connector.\n             */\n            function DataConnector(options) {\n                if (options === void 0) { options = {}; }\n                this.table = new DataTable(options.dataTable);\n                this.metadata = options.metadata || { columns: {} };\n            }\n            Object.defineProperty(DataConnector.prototype, \"polling\", {\n                /**\n                 * Poll timer ID, if active.\n                 */\n                get: function () {\n                    return !!this.polling;\n                },\n                enumerable: false,\n                configurable: true\n            });\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for adding metadata for a single column.\n             *\n             * @param {string} name\n             * The name of the column to be described.\n             *\n             * @param {DataConnector.MetaColumn} columnMeta\n             * The metadata to apply to the column.\n             */\n            DataConnector.prototype.describeColumn = function (name, columnMeta) {\n                var connector = this, columns = connector.metadata.columns;\n                columns[name] = merge(columns[name] || {}, columnMeta);\n            };\n            /**\n             * Method for applying columns meta information to the whole DataConnector.\n             *\n             * @param {Highcharts.Dictionary<DataConnector.MetaColumn>} columns\n             * Pairs of column names and MetaColumn objects.\n             */\n            DataConnector.prototype.describeColumns = function (columns) {\n                var connector = this, columnNames = Object.keys(columns);\n                var columnName;\n                while (typeof (columnName = columnNames.pop()) === 'string') {\n                    connector.describeColumn(columnName, columns[columnName]);\n                }\n            };\n            /**\n             * Emits an event on the connector to all registered callbacks of this\n             * event.\n             *\n             * @param {DataConnector.Event} [e]\n             * Event object containing additional event information.\n             */\n            DataConnector.prototype.emit = function (e) {\n                fireEvent(this, e.type, e);\n            };\n            /**\n             * Returns the order of columns.\n             *\n             * @param {boolean} [usePresentationState]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Array<string>|undefined}\n             * Order of columns.\n             */\n            DataConnector.prototype.getColumnOrder = function (\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            usePresentationState) {\n                var connector = this, columns = connector.metadata.columns, names = Object.keys(columns || {});\n                if (names.length) {\n                    return names.sort(function (a, b) { return (pick(columns[a].index, 0) - pick(columns[b].index, 0)); });\n                }\n            };\n            /**\n             * Retrieves the columns of the dataTable,\n             * applies column order from meta.\n             *\n             * @param {boolean} [usePresentationOrder]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * An object with the properties `columnNames` and `columnValues`\n             */\n            DataConnector.prototype.getSortedColumns = function (usePresentationOrder) {\n                return this.table.getColumns(this.getColumnOrder(usePresentationOrder));\n            };\n            /**\n             * The default load method, which fires the `afterLoad` event\n             *\n             * @return {Promise<DataConnector>}\n             * The loaded connector.\n             *\n             * @emits DataConnector#afterLoad\n             */\n            DataConnector.prototype.load = function () {\n                fireEvent(this, 'afterLoad', { table: this.table });\n                return Promise.resolve(this);\n            };\n            /**\n             * Registers a callback for a specific connector event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for the connector callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the connector event.\n             */\n            DataConnector.prototype.on = function (type, callback) {\n                return addEvent(this, type, callback);\n            };\n            /**\n             * The default save method, which fires the `afterSave` event.\n             *\n             * @return {Promise<DataConnector>}\n             * The saved connector.\n             *\n             * @emits DataConnector#afterSave\n             * @emits DataConnector#saveError\n             */\n            DataConnector.prototype.save = function () {\n                fireEvent(this, 'saveError', { table: this.table });\n                return Promise.reject(new Error('Not implemented'));\n            };\n            /**\n             * Sets the index and order of columns.\n             *\n             * @param {Array<string>} columnNames\n             * Order of columns.\n             */\n            DataConnector.prototype.setColumnOrder = function (columnNames) {\n                var connector = this;\n                for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    connector.describeColumn(columnNames[i], { index: i });\n                }\n            };\n            DataConnector.prototype.setModifierOptions = function (modifierOptions) {\n                var _this = this;\n                var ModifierClass = (modifierOptions &&\n                    DataModifier.types[modifierOptions.type]);\n                return this.table\n                    .setModifier(ModifierClass ?\n                    new ModifierClass(modifierOptions) :\n                    void 0)\n                    .then(function () { return _this; });\n            };\n            /**\n             * Starts polling new data after the specific time span in milliseconds.\n             *\n             * @param {number} refreshTime\n             * Refresh time in milliseconds between polls.\n             */\n            DataConnector.prototype.startPolling = function (refreshTime) {\n                if (refreshTime === void 0) { refreshTime = 1000; }\n                var connector = this;\n                window.clearTimeout(connector._polling);\n                connector._polling = window.setTimeout(function () { return connector\n                    .load()['catch'](function (error) { return connector.emit({\n                    type: 'loadError',\n                    error: error,\n                    table: connector.table\n                }); })\n                    .then(function () {\n                    if (connector._polling) {\n                        connector.startPolling(refreshTime);\n                    }\n                }); }, refreshTime);\n            };\n            /**\n             * Stops polling data.\n             */\n            DataConnector.prototype.stopPolling = function () {\n                var connector = this;\n                window.clearTimeout(connector._polling);\n                delete connector._polling;\n            };\n            /**\n             * Retrieves metadata from a single column.\n             *\n             * @param {string} name\n             * The identifier for the column that should be described\n             *\n             * @return {DataConnector.MetaColumn|undefined}\n             * Returns a MetaColumn object if found.\n             */\n            DataConnector.prototype.whatIs = function (name) {\n                return this.metadata.columns[name];\n            };\n            return DataConnector;\n        }());\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (DataConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConnector.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a connector class to the registry. The connector has to provide the\n             * `DataConnector.options` property and the `DataConnector.load` method to\n             * modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the connector class.\n             *\n             * @param {DataConnectorType} DataConnectorClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a connector registered with this key.\n             */\n            function registerType(key, DataConnectorClass) {\n                return (!!key &&\n                    !DataConnector.types[key] &&\n                    !!(DataConnector.types[key] = DataConnectorClass));\n            }\n            DataConnector.registerType = registerType;\n        })(DataConnector || (DataConnector = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/DataConverter.js', [_modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Sebastian Bochan\n         *  - GÃ¸ran Slettemark\n         *  - Torstein HÃ¸nsi\n         *  - Wojciech Chmiel\n         *\n         * */\n        var addEvent = U.addEvent, fireEvent = U.fireEvent, isNumber = U.isNumber, merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Base class providing an interface and basic methods for a DataConverter\n         *\n         * @private\n         */\n        var DataConverter = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataConverter.\n             *\n             * @param {DataConverter.UserOptions} [options]\n             * Options for the DataConverter.\n             */\n            function DataConverter(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * A collection of available date formats.\n                 */\n                this.dateFormats = {\n                    'YYYY/mm/dd': {\n                        regex: /^(\\d{4})([\\-\\.\\/])(\\d{1,2})\\2(\\d{1,2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[1], match[3] - 1, +match[4]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[3] - 1, +match[1]) :\n                                NaN);\n                        },\n                        alternative: 'mm/dd/YYYY' // Different format with the same regex\n                    },\n                    'mm/dd/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            var d = new Date();\n                            if (!match) {\n                                return NaN;\n                            }\n                            var year = +match[4];\n                            if (year > (d.getFullYear() - 2000)) {\n                                year += 1900;\n                            }\n                            else {\n                                year += 2000;\n                            }\n                            return Date.UTC(year, match[3] - 1, +match[1]);\n                        },\n                        alternative: 'mm/dd/YY' // Different format with the same regex\n                    },\n                    'mm/dd/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4] + 2000, match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    }\n                };\n                var mergedOptions = merge(DataConverter.defaultOptions, options);\n                var regExpPoint = mergedOptions.decimalPoint;\n                if (regExpPoint === '.' || regExpPoint === ',') {\n                    regExpPoint = regExpPoint === '.' ? '\\\\.' : ',';\n                    this.decimalRegExp =\n                        new RegExp('^(-?[0-9]+)' + regExpPoint + '([0-9]+)$');\n                }\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts a value to a boolean.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {boolean}\n             * Converted value as a boolean.\n             */\n            DataConverter.prototype.asBoolean = function (value) {\n                if (typeof value === 'boolean') {\n                    return value;\n                }\n                if (typeof value === 'string') {\n                    return value !== '' && value !== '0' && value !== 'false';\n                }\n                return !!this.asNumber(value);\n            };\n            /**\n             * Converts a value to a Date.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {globalThis.Date}\n             * Converted value as a Date.\n             */\n            DataConverter.prototype.asDate = function (value) {\n                var timestamp;\n                if (typeof value === 'string') {\n                    timestamp = this.parseDate(value);\n                }\n                else if (typeof value === 'number') {\n                    timestamp = value;\n                }\n                else if (value instanceof Date) {\n                    return value;\n                }\n                else {\n                    timestamp = this.parseDate(this.asString(value));\n                }\n                return new Date(timestamp);\n            };\n            /**\n             * Casts a string value to it's guessed type\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {number|string|Date}\n             * The converted value.\n             */\n            DataConverter.prototype.asGuessedType = function (value) {\n                var converter = this, typeMap = {\n                    'number': converter.asNumber,\n                    'Date': converter.asDate,\n                    'string': converter.asString\n                };\n                return typeMap[converter.guessType(value)].call(converter, value);\n            };\n            /**\n             * Converts a value to a number.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {number}\n             * Converted value as a number.\n             */\n            DataConverter.prototype.asNumber = function (value) {\n                if (typeof value === 'number') {\n                    return value;\n                }\n                if (typeof value === 'boolean') {\n                    return value ? 1 : 0;\n                }\n                if (typeof value === 'string') {\n                    var decimalRegex = this.decimalRegExp;\n                    if (value.indexOf(' ') > -1) {\n                        value = value.replace(/\\s+/g, '');\n                    }\n                    if (decimalRegex) {\n                        if (!decimalRegex.test(value)) {\n                            return NaN;\n                        }\n                        value = value.replace(decimalRegex, '$1.$2');\n                    }\n                    return parseFloat(value);\n                }\n                if (value instanceof Date) {\n                    return value.getDate();\n                }\n                if (value) {\n                    return value.getRowCount();\n                }\n                return NaN;\n            };\n            /**\n             * Converts a value to a string.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {string}\n             * Converted value as a string.\n             */\n            DataConverter.prototype.asString = function (value) {\n                return '' + value;\n            };\n            /**\n             * Tries to guess the date format\n             *  - Check if either month candidate exceeds 12\n             *  - Check if year is missing (use current year)\n             *  - Check if a shortened year format is used (e.g. 1/1/99)\n             *  - If no guess can be made, the user must be prompted\n             * data is the data to deduce a format based on\n             * @private\n             *\n             * @param {Array<string>} data\n             * Data to check the format.\n             *\n             * @param {number} limit\n             * Max data to check the format.\n             *\n             * @param {boolean} save\n             * Whether to save the date format in the converter options.\n             */\n            DataConverter.prototype.deduceDateFormat = function (data, limit, save) {\n                var parser = this, stable = [], max = [];\n                var format = 'YYYY/mm/dd', thing, guessedFormat = [], i = 0, madeDeduction = false, \n                /// candidates = {},\n                elem, j;\n                if (!limit || limit > data.length) {\n                    limit = data.length;\n                }\n                for (; i < limit; i++) {\n                    if (typeof data[i] !== 'undefined' &&\n                        data[i] && data[i].length) {\n                        thing = data[i]\n                            .trim()\n                            .replace(/[\\-\\.\\/]/g, ' ')\n                            .split(' ');\n                        guessedFormat = [\n                            '',\n                            '',\n                            ''\n                        ];\n                        for (j = 0; j < thing.length; j++) {\n                            if (j < guessedFormat.length) {\n                                elem = parseInt(thing[j], 10);\n                                if (elem) {\n                                    max[j] = (!max[j] || max[j] < elem) ? elem : max[j];\n                                    if (typeof stable[j] !== 'undefined') {\n                                        if (stable[j] !== elem) {\n                                            stable[j] = false;\n                                        }\n                                    }\n                                    else {\n                                        stable[j] = elem;\n                                    }\n                                    if (elem > 31) {\n                                        if (elem < 100) {\n                                            guessedFormat[j] = 'YY';\n                                        }\n                                        else {\n                                            guessedFormat[j] = 'YYYY';\n                                        }\n                                        /// madeDeduction = true;\n                                    }\n                                    else if (elem > 12 &&\n                                        elem <= 31) {\n                                        guessedFormat[j] = 'dd';\n                                        madeDeduction = true;\n                                    }\n                                    else if (!guessedFormat[j].length) {\n                                        guessedFormat[j] = 'mm';\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (madeDeduction) {\n                    // This handles a few edge cases with hard to guess dates\n                    for (j = 0; j < stable.length; j++) {\n                        if (stable[j] !== false) {\n                            if (max[j] > 12 &&\n                                guessedFormat[j] !== 'YY' &&\n                                guessedFormat[j] !== 'YYYY') {\n                                guessedFormat[j] = 'YY';\n                            }\n                        }\n                        else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                            guessedFormat[j] = 'dd';\n                        }\n                    }\n                    // If the middle one is dd, and the last one is dd,\n                    // the last should likely be year.\n                    if (guessedFormat.length === 3 &&\n                        guessedFormat[1] === 'dd' &&\n                        guessedFormat[2] === 'dd') {\n                        guessedFormat[2] = 'YY';\n                    }\n                    format = guessedFormat.join('/');\n                    // If the caculated format is not valid, we need to present an\n                    // error.\n                }\n                // Save the deduced format in the converter options.\n                if (save) {\n                    parser.options.dateFormat = format;\n                }\n                return format;\n            };\n            /**\n             * Emits an event on the DataConverter instance.\n             *\n             * @param {DataConverter.Event} [e]\n             * Event object containing additional event data\n             */\n            DataConverter.prototype.emit = function (e) {\n                fireEvent(this, e.type, e);\n            };\n            /**\n             * Initiates the data exporting. Should emit `exportError` on failure.\n             *\n             * @param {DataConnector} connector\n             * Connector to export from.\n             *\n             * @param {DataConverter.Options} [options]\n             * Options for the export.\n             */\n            DataConverter.prototype.export = function (\n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            connector, options\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                this.emit({\n                    type: 'exportError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            };\n            /**\n             * Getter for the data table.\n             *\n             * @return {DataTable}\n             * Table of parsed data.\n             */\n            DataConverter.prototype.getTable = function () {\n                throw new Error('Not implemented');\n            };\n            /**\n             * Guesses the potential type of a string value for parsing CSV etc.\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {'number'|'string'|'Date'}\n             * Type string, either `string`, `Date`, or `number`.\n             */\n            DataConverter.prototype.guessType = function (value) {\n                var converter = this;\n                var result = 'string';\n                if (typeof value === 'string') {\n                    var trimedValue = converter.trim(\"\".concat(value)), decimalRegExp = converter.decimalRegExp;\n                    var innerTrimedValue = converter.trim(trimedValue, true);\n                    if (decimalRegExp) {\n                        innerTrimedValue = (decimalRegExp.test(innerTrimedValue) ?\n                            innerTrimedValue.replace(decimalRegExp, '$1.$2') :\n                            '');\n                    }\n                    var floatValue = parseFloat(innerTrimedValue);\n                    if (+innerTrimedValue === floatValue) {\n                        // String is numeric\n                        value = floatValue;\n                    }\n                    else {\n                        // Determine if a date string\n                        var dateValue = converter.parseDate(value);\n                        result = isNumber(dateValue) ? 'Date' : 'string';\n                    }\n                }\n                if (typeof value === 'number') {\n                    // Greater than milliseconds in a year assumed timestamp\n                    result = value > 365 * 24 * 3600 * 1000 ? 'Date' : 'number';\n                }\n                return result;\n            };\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            DataConverter.prototype.on = function (type, callback) {\n                return addEvent(this, type, callback);\n            };\n            /**\n             * Initiates the data parsing. Should emit `parseError` on failure.\n             *\n             * @param {DataConverter.UserOptions} options\n             * Options of the DataConverter.\n             */\n            DataConverter.prototype.parse = function (\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            options) {\n                this.emit({\n                    type: 'parseError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            };\n            /**\n             * Parse a date and return it as a number.\n             *\n             * @param {string} value\n             * Value to parse.\n             *\n             * @param {string} dateFormatProp\n             * Which of the predefined date formats\n             * to use to parse date values.\n             */\n            DataConverter.prototype.parseDate = function (value, dateFormatProp) {\n                var converter = this, options = converter.options;\n                var dateFormat = dateFormatProp || options.dateFormat, result = NaN, key, format, match;\n                if (options.parseDate) {\n                    result = options.parseDate(value);\n                }\n                else {\n                    // Auto-detect the date format the first time\n                    if (!dateFormat) {\n                        for (key in converter.dateFormats) { // eslint-disable-line guard-for-in\n                            format = converter.dateFormats[key];\n                            match = value.match(format.regex);\n                            if (match) {\n                                // `converter.options.dateFormat` = dateFormat = key;\n                                dateFormat = key;\n                                // `converter.options.alternativeFormat` =\n                                // format.alternative || '';\n                                result = format.parser(match);\n                                break;\n                            }\n                        }\n                        // Next time, use the one previously found\n                    }\n                    else {\n                        format = converter.dateFormats[dateFormat];\n                        if (!format) {\n                            // The selected format is invalid\n                            format = converter.dateFormats['YYYY/mm/dd'];\n                        }\n                        match = value.match(format.regex);\n                        if (match) {\n                            result = format.parser(match);\n                        }\n                    }\n                    // Fall back to Date.parse\n                    if (!match) {\n                        match = Date.parse(value);\n                        // External tools like Date.js and MooTools extend Date object\n                        // and returns a date.\n                        if (typeof match === 'object' &&\n                            match !== null &&\n                            match.getTime) {\n                            result = (match.getTime() -\n                                match.getTimezoneOffset() *\n                                    60000);\n                            // Timestamp\n                        }\n                        else if (isNumber(match)) {\n                            result = match - (new Date(match)).getTimezoneOffset() * 60000;\n                            if ( // Reset dates without year in Chrome\n                            value.indexOf('2001') === -1 &&\n                                (new Date(result)).getFullYear() === 2001) {\n                                result = NaN;\n                            }\n                        }\n                    }\n                }\n                return result;\n            };\n            /**\n             * Trim a string from whitespaces.\n             *\n             * @param {string} str\n             * String to trim.\n             *\n             * @param {boolean} [inside=false]\n             * Remove all spaces between numbers.\n             *\n             * @return {string}\n             * Trimed string\n             */\n            DataConverter.prototype.trim = function (str, inside) {\n                if (typeof str === 'string') {\n                    str = str.replace(/^\\s+|\\s+$/g, '');\n                    // Clear white space insdie the string, like thousands separators\n                    if (inside && /^[\\d\\s]+$/.test(str)) {\n                        str = str.replace(/\\s/g, '');\n                    }\n                }\n                return str;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            DataConverter.defaultOptions = {\n                dateFormat: '',\n                alternativeFormat: '',\n                startColumn: 0,\n                endColumn: Number.MAX_VALUE,\n                startRow: 0,\n                endRow: Number.MAX_VALUE,\n                firstRowAsNames: true,\n                switchRowsAndColumns: false\n            };\n            return DataConverter;\n        }());\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for events and conversion.\n         */\n        (function (DataConverter) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts an array of columns to a table instance. Second dimension of the\n             * array are the row cells.\n             *\n             * @param {Array<DataTable.Column>} [columns]\n             * Array to convert.\n             *\n             * @param {Array<string>} [headers]\n             * Column names to use.\n             *\n             * @return {DataTable}\n             * Table instance from the arrays.\n             */\n            function getTableFromColumns(columns, headers) {\n                if (columns === void 0) { columns = []; }\n                if (headers === void 0) { headers = []; }\n                var table = new DataTable();\n                for (var i = 0, iEnd = Math.max(headers.length, columns.length); i < iEnd; ++i) {\n                    table.setColumn(headers[i] || \"\".concat(i), columns[i]);\n                }\n                return table;\n            }\n            DataConverter.getTableFromColumns = getTableFromColumns;\n        })(DataConverter || (DataConverter = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConverter;\n    });\n    _registerModule(_modules, 'Data/DataCursor.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * This class manages state cursors pointing on {@link Data.DataTable}. It\n         * creates a relation between states of the user interface and the table cells,\n         * columns, or rows.\n         *\n         * @class\n         * @name Data.DataCursor\n         */\n        var DataCursor = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function DataCursor(stateMap) {\n                if (stateMap === void 0) { stateMap = {}; }\n                this.emittingRegister = [];\n                this.listenerMap = {};\n                this.stateMap = stateMap;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * This function registers a listener for a specific state and table.\n             *\n             * @example\n             * ```TypeScript\n             * dataCursor.addListener(myTable.id, 'hover', (e: DataCursor.Event) => {\n             *     if (e.cursor.type === 'position') {\n             *         console.log(`Hover over row #${e.cursor.row}.`);\n             *     }\n             * });\n             * ```\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table to listen to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table to listen to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to register.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            DataCursor.prototype.addListener = function (tableId, state, listener) {\n                var listenerMap = this.listenerMap[tableId] = (this.listenerMap[tableId] ||\n                    {});\n                var listeners = listenerMap[state] = (listenerMap[state] ||\n                    []);\n                listeners.push(listener);\n                return this;\n            };\n            /**\n             * @private\n             */\n            DataCursor.prototype.buildEmittingTag = function (e) {\n                return (e.cursor.type === 'position' ?\n                    [\n                        e.table.id,\n                        e.cursor.column,\n                        e.cursor.row,\n                        e.cursor.state,\n                        e.cursor.type\n                    ] :\n                    [\n                        e.table.id,\n                        e.cursor.columns,\n                        e.cursor.firstRow,\n                        e.cursor.lastRow,\n                        e.cursor.state,\n                        e.cursor.type\n                    ]).join('\\0');\n            };\n            /**\n             * This function emits a state cursor related to a table. It will provide\n             * lasting state cursors of the table to listeners.\n             *\n             * @example\n             * ```ts\n             * dataCursor.emit(myTable, {\n             *     type: 'position',\n             *     column: 'city',\n             *     row: 4,\n             *     state: 'hover',\n             * });\n             * ```\n             *\n             * @param {Data.DataTable} table\n             * The related table of the cursor.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * The state cursor to emit.\n             *\n             * @param {Event} [event]\n             * Optional event information from a related source.\n             *\n             * @param {boolean} [lasting]\n             * Whether this state cursor should be kept until it is cleared with\n             * {@link DataCursor#remitCursor}.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            DataCursor.prototype.emitCursor = function (table, cursor, event, lasting) {\n                var _a;\n                var tableId = table.id, state = cursor.state, listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    var stateMap = this.stateMap[tableId] = ((_a = this.stateMap[tableId]) !== null && _a !== void 0 ? _a : {});\n                    var cursors = stateMap[cursor.state] || [];\n                    if (lasting) {\n                        if (!cursors.length) {\n                            stateMap[cursor.state] = cursors;\n                        }\n                        if (DataCursor.getIndex(cursor, cursors) === -1) {\n                            cursors.push(cursor);\n                        }\n                    }\n                    var e = {\n                        cursor: cursor,\n                        cursors: cursors,\n                        table: table\n                    };\n                    if (event) {\n                        e.event = event;\n                    }\n                    var emittingRegister = this.emittingRegister, emittingTag = this.buildEmittingTag(e);\n                    if (emittingRegister.indexOf(emittingTag) >= 0) {\n                        // Break call stack loops\n                        return this;\n                    }\n                    try {\n                        this.emittingRegister.push(emittingTag);\n                        for (var i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                            listeners[i].call(this, e);\n                        }\n                    }\n                    finally {\n                        var index = this.emittingRegister.indexOf(emittingTag);\n                        if (index >= 0) {\n                            this.emittingRegister.splice(index, 1);\n                        }\n                    }\n                }\n                return this;\n            };\n            /**\n             * Removes a lasting state cursor.\n             *\n             * @function #remitCursor\n             *\n             * @param {string} tableId\n             * ID of the related cursor table.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * Copy or reference of the cursor.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            DataCursor.prototype.remitCursor = function (tableId, cursor) {\n                var cursors = (this.stateMap[tableId] &&\n                    this.stateMap[tableId][cursor.state]);\n                if (cursors) {\n                    var index = DataCursor.getIndex(cursor, cursors);\n                    if (index >= 0) {\n                        cursors.splice(index, 1);\n                    }\n                }\n                return this;\n            };\n            /**\n             * This function removes a listener.\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table the listener is connected to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table the listener is listening to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to deregister.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            DataCursor.prototype.removeListener = function (tableId, state, listener) {\n                var listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    var index = listeners.indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                }\n                return this;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Semantic version string of the DataCursor class.\n             * @internal\n             */\n            DataCursor.version = '1.0.0';\n            return DataCursor;\n        }());\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * @class Data.DataCursor\n         */\n        (function (DataCursor) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Finds the index of an cursor in an array.\n             * @private\n             */\n            function getIndex(needle, cursors) {\n                if (needle.type === 'position') {\n                    for (var cursor = void 0, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'position' &&\n                            cursor.state === needle.state &&\n                            cursor.column === needle.column &&\n                            cursor.row === needle.row) {\n                            return i;\n                        }\n                    }\n                }\n                else {\n                    var columnNeedle = JSON.stringify(needle.columns);\n                    for (var cursor = void 0, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'range' &&\n                            cursor.state === needle.state &&\n                            cursor.firstRow === needle.firstRow &&\n                            cursor.lastRow === needle.lastRow &&\n                            JSON.stringify(cursor.columns) === columnNeedle) {\n                            return i;\n                        }\n                    }\n                }\n                return -1;\n            }\n            DataCursor.getIndex = getIndex;\n            /**\n             * Checks whether two cursor share the same properties.\n             * @private\n             */\n            function isEqual(cursorA, cursorB) {\n                if (cursorA.type === 'position' && cursorB.type === 'position') {\n                    return (cursorA.column === cursorB.column &&\n                        cursorA.row === cursorB.row &&\n                        cursorA.state === cursorB.state);\n                }\n                if (cursorA.type === 'range' && cursorB.type === 'range') {\n                    return (cursorA.firstRow === cursorB.firstRow &&\n                        cursorA.lastRow === cursorB.lastRow &&\n                        (JSON.stringify(cursorA.columns) ===\n                            JSON.stringify(cursorB.columns)));\n                }\n                return false;\n            }\n            DataCursor.isEqual = isEqual;\n            /**\n             * Checks whether a cursor is in a range.\n             * @private\n             */\n            function isInRange(needle, range) {\n                if (range.type === 'position') {\n                    range = toRange(range);\n                }\n                if (needle.type === 'position') {\n                    needle = toRange(needle, range);\n                }\n                var needleColumns = needle.columns;\n                var rangeColumns = range.columns;\n                return (needle.firstRow >= range.firstRow &&\n                    needle.lastRow <= range.lastRow &&\n                    (!needleColumns ||\n                        !rangeColumns ||\n                        needleColumns.every(function (column) { return rangeColumns.indexOf(column) >= 0; })));\n            }\n            DataCursor.isInRange = isInRange;\n            /**\n             * @private\n             */\n            function toPositions(cursor) {\n                if (cursor.type === 'position') {\n                    return [cursor];\n                }\n                var columns = (cursor.columns || []);\n                var positions = [];\n                var state = cursor.state;\n                for (var row = cursor.firstRow, rowEnd = cursor.lastRow; row < rowEnd; ++row) {\n                    if (!columns.length) {\n                        positions.push({\n                            type: 'position',\n                            row: row,\n                            state: state\n                        });\n                        continue;\n                    }\n                    for (var column = 0, columnEnd = columns.length; column < columnEnd; ++column) {\n                        positions.push({\n                            type: 'position',\n                            column: columns[column],\n                            row: row,\n                            state: state\n                        });\n                    }\n                }\n                return positions;\n            }\n            DataCursor.toPositions = toPositions;\n            /**\n             * @private\n             */\n            function toRange(cursor, defaultRange) {\n                var _a, _b, _c, _d;\n                if (cursor.type === 'range') {\n                    return cursor;\n                }\n                var range = {\n                    type: 'range',\n                    firstRow: ((_b = (_a = cursor.row) !== null && _a !== void 0 ? _a : (defaultRange && defaultRange.firstRow)) !== null && _b !== void 0 ? _b : 0),\n                    lastRow: ((_d = (_c = cursor.row) !== null && _c !== void 0 ? _c : (defaultRange && defaultRange.lastRow)) !== null && _d !== void 0 ? _d : Number.MAX_VALUE),\n                    state: cursor.state\n                };\n                if (typeof cursor.column !== 'undefined') {\n                    range.columns = [cursor.column];\n                }\n                return range;\n            }\n            DataCursor.toRange = toRange;\n        })(DataCursor || (DataCursor = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursor;\n    });\n    _registerModule(_modules, 'Data/DataPoolDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        var DataPoolDefaults = {\n            connectors: []\n        };\n        /* *\n         *\n         *  Export Defaults\n         *\n         * */\n\n        return DataPoolDefaults;\n    });\n    _registerModule(_modules, 'Data/DataPool.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/DataPoolDefaults.js'], _modules['Core/Utilities.js']], function (DataConnector, DataPoolDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Data pool to load connectors on-demand.\n         *\n         * @class\n         * @name Data.DataPool\n         *\n         * @param {Data.DataPoolOptions} options\n         * Pool options with all connectors.\n         */\n        var DataPool = /** @class */ (function () {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function DataPool(options) {\n                if (options === void 0) { options = DataPoolDefaults; }\n                options.connectors = (options.connectors || []);\n                this.connectors = {};\n                this.options = options;\n                this.waiting = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this data pool to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            DataPool.prototype.emit = function (e) {\n                U.fireEvent(this, e.type, e);\n            };\n            /**\n             * Loads the connector.\n             *\n             * @function Data.DataPool#getConnector\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            DataPool.prototype.getConnector = function (connectorId) {\n                var _this = this;\n                var connector = this.connectors[connectorId];\n                // Already loaded\n                if (connector) {\n                    return Promise.resolve(connector);\n                }\n                var waitingList = this.waiting[connectorId];\n                // Start loading\n                if (!waitingList) {\n                    waitingList = this.waiting[connectorId] = [];\n                    var connectorOptions = this.getConnectorOptions(connectorId);\n                    if (!connectorOptions) {\n                        throw new Error(\"Connector '\".concat(connectorId, \"' not found.\"));\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this\n                        .loadConnector(connectorOptions)\n                        .then(function (connector) {\n                        delete _this.waiting[connectorId];\n                        for (var i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][0](connector);\n                        }\n                    })['catch'](function (error) {\n                        delete _this.waiting[connectorId];\n                        for (var i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][1](error);\n                        }\n                    });\n                }\n                // Add request to waiting list\n                return new Promise(function (resolve, reject) {\n                    waitingList.push([resolve, reject]);\n                });\n            };\n            /**\n             * Returns the IDs of all connectors.\n             *\n             * @private\n             *\n             * @return {Array<string>}\n             * Names of all connectors.\n             */\n            DataPool.prototype.getConnectorIds = function () {\n                var connectors = this.options.connectors, connectorIds = [];\n                for (var i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    connectorIds.push(connectors[i].id);\n                }\n                return connectorIds;\n            };\n            /**\n             * Loads the options of the connector.\n             *\n             * @private\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {DataPoolConnectorOptions|undefined}\n             * Returns the options of the connector, or `undefined` if not found.\n             */\n            DataPool.prototype.getConnectorOptions = function (connectorId) {\n                var connectors = this.options.connectors;\n                for (var i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === connectorId) {\n                        return connectors[i];\n                    }\n                }\n            };\n            /**\n             * Loads the connector table.\n             *\n             * @function Data.DataPool#getConnectorTable\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataTable>}\n             * Returns the connector table.\n             */\n            DataPool.prototype.getConnectorTable = function (connectorId) {\n                return this\n                    .getConnector(connectorId)\n                    .then(function (connector) { return connector.table; });\n            };\n            /**\n             * Tests whether the connector has never been requested.\n             *\n             * @param {string} connectorId\n             * Name of the connector.\n             *\n             * @return {boolean}\n             * Returns `true`, if the connector has never been requested, otherwise\n             * `false`.\n             */\n            DataPool.prototype.isNewConnector = function (connectorId) {\n                return !this.connectors[connectorId];\n            };\n            /**\n             * Creates and loads the connector.\n             *\n             * @private\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Options of connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            DataPool.prototype.loadConnector = function (options) {\n                var _this = this;\n                return new Promise(function (resolve, reject) {\n                    _this.emit({\n                        type: 'load',\n                        options: options\n                    });\n                    var ConnectorClass = DataConnector.types[options.type];\n                    if (!ConnectorClass) {\n                        throw new Error(\"Connector type not found. (\".concat(options.type, \")\"));\n                    }\n                    var connector = new ConnectorClass(options.options);\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    connector\n                        .load()\n                        .then(function (connector) {\n                        _this.connectors[options.id] = connector;\n                        _this.emit({\n                            type: 'afterLoad',\n                            options: options\n                        });\n                        resolve(connector);\n                    })['catch'](reject);\n                });\n            };\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataPool#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataPool>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            DataPool.prototype.on = function (type, callback) {\n                return U.addEvent(this, type, callback);\n            };\n            /**\n             * Sets connector options under the specified `options.id`.\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Connector options to set.\n             */\n            DataPool.prototype.setConnectorOptions = function (options) {\n                var connectors = this.options.connectors, instances = this.connectors;\n                this.emit({\n                    type: 'setConnectorOptions',\n                    options: options\n                });\n                for (var i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === options.id) {\n                        connectors.splice(i, 1);\n                        break;\n                    }\n                }\n                if (instances[options.id]) {\n                    instances[options.id].stopPolling();\n                    delete instances[options.id];\n                }\n                connectors.push(options);\n                this.emit({\n                    type: 'afterSetConnectorOptions',\n                    options: options\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Semantic version string of the DataPool class.\n             * @internal\n             */\n            DataPool.version = '1.0.0';\n            return DataPool;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataPool;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaParser.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * @private\n         */\n        var booleanRegExp = /^(?:FALSE|TRUE)/;\n        /**\n         * `.`-separated decimal.\n         * @private\n         */\n        var decimal1RegExp = /^[+\\-]?\\d+(?:\\.\\d+)?(?:e[+\\-]\\d+)?/;\n        /**\n         * `,`-separated decimal.\n         * @private\n         */\n        var decimal2RegExp = /^[+\\-]?\\d+(?:,\\d+)?(?:e[+\\-]\\d+)?/;\n        /**\n         * - Group 1: Function name\n         * @private\n         */\n        var functionRegExp = /^([A-Z][A-Z\\d\\.]*)\\(/;\n        /**\n         * @private\n         */\n        var operatorRegExp = /^(?:[+\\-*\\/^<=>]|<=|=>)/;\n        /**\n         * - Group 1: Start column\n         * - Group 2: Start row\n         * - Group 3: End column\n         * - Group 4: End row\n         * @private\n         */\n        var rangeA1RegExp = /^(\\$?[A-Z]+)(\\$?\\d+)\\:(\\$?[A-Z]+)(\\$?\\d+)/;\n        /**\n         * - Group 1: Start row\n         * - Group 2: Start column\n         * - Group 3: End row\n         * - Group 4: End column\n         * @private\n         */\n        var rangeR1C1RegExp = /^R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])\\:R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])/;\n        /**\n         * - Group 1: Column\n         * - Group 2: Row\n         * @private\n         */\n        var referenceA1RegExp = /^(\\$?[A-Z]+)(\\$?\\d+)(?![\\:C])/;\n        /**\n         * - Group 1: Row\n         * - Group 2: Column\n         * @private\n         */\n        var referenceR1C1RegExp = /^R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])(?!\\:)/;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Extracts the inner string of the most outer parantheses.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Text string to extract from.\n         *\n         * @return {string}\n         * Extracted parantheses. If not found an exception will be thrown.\n         */\n        function extractParantheses(text) {\n            var parantheseLevel = 0;\n            for (var i = 0, iEnd = text.length, char = void 0, parantheseStart = 1; i < iEnd; ++i) {\n                char = text[i];\n                if (char === '(') {\n                    if (!parantheseLevel) {\n                        parantheseStart = i + 1;\n                    }\n                    ++parantheseLevel;\n                    continue;\n                }\n                if (char === ')') {\n                    --parantheseLevel;\n                    if (!parantheseLevel) {\n                        return text.substring(parantheseStart, i);\n                    }\n                }\n            }\n            if (parantheseLevel > 0) {\n                var error = new Error('Incomplete parantheses.');\n                error.name = 'FormulaParseError';\n                throw error;\n            }\n            return '';\n        }\n        /**\n         * Extracts the inner string value.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Text string to extract from.\n         *\n         * @return {string}\n         * Extracted string. If not found an exception will be thrown.\n         */\n        function extractString(text) {\n            var start = -1;\n            for (var i = 0, iEnd = text.length, char = void 0, escaping = false; i < iEnd; ++i) {\n                char = text[i];\n                if (char === '\\\\') {\n                    escaping = !escaping;\n                    continue;\n                }\n                if (escaping) {\n                    escaping = false;\n                    continue;\n                }\n                if (char === '\"') {\n                    if (start < 0) {\n                        start = i;\n                    }\n                    else {\n                        return text.substring(start + 1, i); // `Ã¬` is excluding\n                    }\n                }\n            }\n            var error = new Error('Incomplete string.');\n            error.name = 'FormulaParseError';\n            throw error;\n        }\n        /**\n         * Parses an argument string. Formula arrays with a single term will be\n         * simplified to the term.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Argument string to parse.\n         *\n         * @param {boolean} alternativeSeparators\n         * Whether to expect `;` as argument separator and `,` as decimal separator.\n         *\n         * @return {Formula|Function|Range|Reference|Value}\n         * The recognized term structure.\n         */\n        function parseArgument(text, alternativeSeparators) {\n            var match;\n            // Check for a R1C1:R1C1 range notation\n            match = text.match(rangeR1C1RegExp);\n            if (match) {\n                var beginColumnRelative = (match[2] === '' || match[2][0] === '[');\n                var beginRowRelative = (match[1] === '' || match[1][0] === '[');\n                var endColumnRelative = (match[4] === '' || match[4][0] === '[');\n                var endRowRelative = (match[3] === '' || match[3][0] === '[');\n                var range = {\n                    type: 'range',\n                    beginColumn: (beginColumnRelative ?\n                        parseInt(match[2].substring(1, -1) || '0', 10) :\n                        parseInt(match[2], 10) - 1),\n                    beginRow: (beginRowRelative ?\n                        parseInt(match[1].substring(1, -1) || '0', 10) :\n                        parseInt(match[1], 10) - 1),\n                    endColumn: (endColumnRelative ?\n                        parseInt(match[4].substring(1, -1) || '0', 10) :\n                        parseInt(match[4], 10) - 1),\n                    endRow: (endRowRelative ?\n                        parseInt(match[3].substring(1, -1) || '0', 10) :\n                        parseInt(match[3], 10) - 1)\n                };\n                if (beginColumnRelative) {\n                    range.beginColumnRelative = true;\n                }\n                if (beginRowRelative) {\n                    range.beginRowRelative = true;\n                }\n                if (endColumnRelative) {\n                    range.endColumnRelative = true;\n                }\n                if (endRowRelative) {\n                    range.endRowRelative = true;\n                }\n                return range;\n            }\n            // Check for a A1:A1 range notation\n            match = text.match(rangeA1RegExp);\n            if (match) {\n                var beginColumnRelative = match[1][0] !== '$';\n                var beginRowRelative = match[2][0] !== '$';\n                var endColumnRelative = match[3][0] !== '$';\n                var endRowRelative = match[4][0] !== '$';\n                var range = {\n                    type: 'range',\n                    beginColumn: parseReferenceColumn(beginColumnRelative ?\n                        match[1] :\n                        match[1].substring(1)) - 1,\n                    beginRow: parseInt(beginRowRelative ?\n                        match[2] :\n                        match[2].substring(1), 10) - 1,\n                    endColumn: parseReferenceColumn(endColumnRelative ?\n                        match[3] :\n                        match[3].substring(1)) - 1,\n                    endRow: parseInt(endRowRelative ?\n                        match[4] :\n                        match[4].substring(1), 10) - 1\n                };\n                if (beginColumnRelative) {\n                    range.beginColumnRelative = true;\n                }\n                if (beginRowRelative) {\n                    range.beginRowRelative = true;\n                }\n                if (endColumnRelative) {\n                    range.endColumnRelative = true;\n                }\n                if (endRowRelative) {\n                    range.endRowRelative = true;\n                }\n                return range;\n            }\n            // Fallback to formula processing for other pattern types\n            var formula = parseFormula(text, alternativeSeparators);\n            return (formula.length === 1 && typeof formula[0] !== 'string' ?\n                formula[0] :\n                formula);\n        }\n        /**\n         * Parse arguments string inside function parantheses.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Parantheses string of the function.\n         *\n         * @param {boolean} alternativeSeparators\n         * Whether to expect `;` as argument separator and `,` as decimal separator.\n         *\n         * @return {Highcharts.FormulaArguments}\n         * Parsed arguments array.\n         */\n        function parseArguments(text, alternativeSeparators) {\n            var args = [], argumentsSeparator = (alternativeSeparators ? ';' : ',');\n            var parantheseLevel = 0, term = '';\n            for (var i = 0, iEnd = text.length, char = void 0; i < iEnd; ++i) {\n                char = text[i];\n                // Check for separator\n                if (char === argumentsSeparator &&\n                    !parantheseLevel &&\n                    term) {\n                    args.push(parseArgument(term, alternativeSeparators));\n                    term = '';\n                    // Check for a quoted string before skip logic\n                }\n                else if (char === '\"' &&\n                    !parantheseLevel &&\n                    !term) {\n                    var string = extractString(text.substring(i));\n                    args.push(string);\n                    i += string.length + 1; // Only +1 to cover ++i in for-loop\n                    // Skip space and check paranthesis nesting\n                }\n                else if (char !== ' ') {\n                    term += char;\n                    if (char === '(') {\n                        ++parantheseLevel;\n                    }\n                    else if (char === ')') {\n                        --parantheseLevel;\n                    }\n                }\n            }\n            // Look for left-overs from last argument\n            if (!parantheseLevel && term) {\n                args.push(parseArgument(term, alternativeSeparators));\n            }\n            return args;\n        }\n        /**\n         * Converts a spreadsheet formula string into a formula array. Throws a\n         * `FormulaParserError` when the string can not be parsed.\n         *\n         * @private\n         * @function Formula.parseFormula\n         *\n         * @param {string} text\n         * Spreadsheet formula string, without the leading `=`.\n         *\n         * @param {boolean} alternativeSeparators\n         * * `false` to expect `,` between arguments and `.` in decimals.\n         * * `true` to expect `;` between arguments and `,` in decimals.\n         *\n         * @return {Formula.Formula}\n         * Formula array representing the string.\n         */\n        function parseFormula(text, alternativeSeparators) {\n            var decimalRegExp = (alternativeSeparators ?\n                decimal2RegExp :\n                decimal1RegExp), formula = [];\n            var match, next = (text[0] === '=' ? text.substring(1) : text).trim();\n            while (next) {\n                // Check for an R1C1 reference notation\n                match = next.match(referenceR1C1RegExp);\n                if (match) {\n                    var columnRelative = (match[2] === '' || match[2][0] === '[');\n                    var rowRelative = (match[1] === '' || match[1][0] === '[');\n                    var reference = {\n                        type: 'reference',\n                        column: (columnRelative ?\n                            parseInt(match[2].substring(1, -1) || '0', 10) :\n                            parseInt(match[2], 10) - 1),\n                        row: (rowRelative ?\n                            parseInt(match[1].substring(1, -1) || '0', 10) :\n                            parseInt(match[1], 10) - 1)\n                    };\n                    if (columnRelative) {\n                        reference.columnRelative = true;\n                    }\n                    if (rowRelative) {\n                        reference.rowRelative = true;\n                    }\n                    formula.push(reference);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for an A1 reference notation\n                match = next.match(referenceA1RegExp);\n                if (match) {\n                    var columnRelative = match[1][0] !== '$';\n                    var rowRelative = match[2][0] !== '$';\n                    var reference = {\n                        type: 'reference',\n                        column: parseReferenceColumn(columnRelative ?\n                            match[1] :\n                            match[1].substring(1)) - 1,\n                        row: parseInt(rowRelative ?\n                            match[2] :\n                            match[2].substring(1), 10) - 1\n                    };\n                    if (columnRelative) {\n                        reference.columnRelative = true;\n                    }\n                    if (rowRelative) {\n                        reference.rowRelative = true;\n                    }\n                    formula.push(reference);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a formula operator\n                match = next.match(operatorRegExp);\n                if (match) {\n                    formula.push(match[0]);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a boolean value\n                match = next.match(booleanRegExp);\n                if (match) {\n                    formula.push(match[0] === 'TRUE');\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a number value\n                match = next.match(decimalRegExp);\n                if (match) {\n                    formula.push(parseFloat(match[0]));\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a quoted string\n                if (next[0] === '\"') {\n                    var string = extractString(next);\n                    formula.push(string.substring(1, -1));\n                    next = next.substring(string.length + 2).trim();\n                    continue;\n                }\n                // Check for a function\n                match = next.match(functionRegExp);\n                if (match) {\n                    next = next.substring(match[1].length).trim();\n                    var parantheses = extractParantheses(next);\n                    formula.push({\n                        type: 'function',\n                        name: match[1],\n                        args: parseArguments(parantheses, alternativeSeparators)\n                    });\n                    next = next.substring(parantheses.length + 2).trim();\n                    continue;\n                }\n                // Check for a formula in parantheses\n                if (next[0] === '(') {\n                    var paranteses = extractParantheses(next);\n                    if (paranteses) {\n                        formula\n                            .push(parseFormula(paranteses, alternativeSeparators));\n                        next = next.substring(paranteses.length + 2).trim();\n                        continue;\n                    }\n                }\n                // Something is not right\n                var position = text.length - next.length, error = new Error('Unexpected character `' +\n                    text.substring(position, position + 1) +\n                    '` at position ' + (position + 1) +\n                    '. (`...' + text.substring(position - 5, position + 6) + '...`)');\n                error.name = 'FormulaParseError';\n                throw error;\n            }\n            return formula;\n        }\n        /**\n         * Converts a reference column `A` of `A1` into a number. Supports endless sizes\n         * `ZZZ...`, just limited by integer precision.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Column string to convert.\n         *\n         * @return {number}\n         * Converted column index.\n         */\n        function parseReferenceColumn(text) {\n            var column = 0;\n            for (var i = 0, iEnd = text.length, code = void 0, factor = text.length - 1; i < iEnd; ++i) {\n                code = text.charCodeAt(i);\n                if (code >= 65 && code <= 90) {\n                    column += (code - 64) * Math.pow(26, factor);\n                }\n                --factor;\n            }\n            return column;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var FormulaParser = {\n            parseFormula: parseFormula\n        };\n\n        return FormulaParser;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaTypes.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Array of all possible operators.\n         * @private\n         */\n        var operators = ['+', '-', '*', '/', '^', '=', '<', '<=', '>', '>='];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests an item for a Formula array.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a formula (or argument) array.\n         */\n        function isFormula(item) {\n            return item instanceof Array;\n        }\n        /**\n         * Tests an item for a Function structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a formula function.\n         */\n        function isFunction(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'function');\n        }\n        /**\n         * Tests an item for an Operator string.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is an operator string.\n         */\n        function isOperator(item) {\n            return (typeof item === 'string' &&\n                operators.indexOf(item) >= 0);\n        }\n        /**\n         * Tests an item for a Range structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a range.\n         */\n        function isRange(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'range');\n        }\n        /**\n         * Tests an item for a Reference structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a reference.\n         */\n        function isReference(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'reference');\n        }\n        /**\n         * Tests an item for a Value structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem|null|undefined} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a value.\n         */\n        function isValue(item) {\n            return (typeof item === 'boolean' ||\n                typeof item === 'number' ||\n                typeof item === 'string');\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var MathFormula = {\n            isFormula: isFormula,\n            isFunction: isFunction,\n            isOperator: isOperator,\n            isRange: isRange,\n            isReference: isReference,\n            isValue: isValue\n        };\n\n        return MathFormula;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaProcessor.js', [_modules['Data/Formula/FormulaTypes.js']], function (FormulaTypes) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var isFormula = FormulaTypes.isFormula, isFunction = FormulaTypes.isFunction, isOperator = FormulaTypes.isOperator, isRange = FormulaTypes.isRange, isReference = FormulaTypes.isReference, isValue = FormulaTypes.isValue;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var asLogicalStringRegExp = / */;\n        var MAX_FALSE = Number.MAX_VALUE / 1.000000000001;\n        var MAX_STRING = Number.MAX_VALUE / 1.000000000002;\n        var MAX_TRUE = Number.MAX_VALUE;\n        var operatorPriority = {\n            '^': 3,\n            '*': 2,\n            '/': 2,\n            '+': 1,\n            '-': 1,\n            '=': 0,\n            '<': 0,\n            '<=': 0,\n            '>': 0,\n            '>=': 0\n        };\n        var processorFunctions = {};\n        var processorFunctionNameRegExp = /^[A-Z][A-Z\\.]*$/;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Converts non-number types to logical numbers.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {number}\n         * Logical number value. `NaN` if not convertable.\n         */\n        function asLogicalNumber(value) {\n            switch (typeof value) {\n                case 'boolean':\n                    return value ? MAX_TRUE : MAX_FALSE;\n                case 'string':\n                    return MAX_STRING;\n                case 'number':\n                    return value;\n                default:\n                    return NaN;\n            }\n        }\n        /**\n         * Converts strings to logical strings, while other types get passed through. In\n         * logical strings the space character is the lowest value and letters are case\n         * insensitive.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Logical string value or passed through value.\n         */\n        function asLogicalString(value) {\n            if (typeof value === 'string') {\n                return value.toLowerCase().replace(asLogicalStringRegExp, '\\0');\n            }\n            return value;\n        }\n        /**\n         * Converts non-number types to a logic number.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {number}\n         * Number value. `NaN` if not convertable.\n         */\n        function asNumber(value) {\n            switch (typeof value) {\n                case 'boolean':\n                    return value ? 1 : 0;\n                case 'string':\n                    return parseFloat(value.replace(',', '.'));\n                case 'number':\n                    return value;\n                default:\n                    return NaN;\n            }\n        }\n        /**\n         * Process a basic operation of two given values.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaOperator} operator\n         * Operator between values.\n         *\n         * @param {Highcharts.FormulaValue} x\n         * First value for operation.\n         *\n         * @param {Highcharts.FormulaValue} y\n         * Second value for operation.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Operation result. `NaN` if operation is not support.\n         */\n        function basicOperation(operator, x, y) {\n            switch (operator) {\n                case '=':\n                    return asLogicalString(x) === asLogicalString(y);\n                case '<':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) < asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) < asLogicalNumber(y);\n                case '<=':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) <= asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) <= asLogicalNumber(y);\n                case '>':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) > asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) > asLogicalNumber(y);\n                case '>=':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) >= asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) >= asLogicalNumber(y);\n            }\n            x = asNumber(x);\n            y = asNumber(y);\n            var result;\n            switch (operator) {\n                case '+':\n                    result = x + y;\n                    break;\n                case '-':\n                    result = x - y;\n                    break;\n                case '*':\n                    result = x * y;\n                    break;\n                case '/':\n                    result = x / y;\n                    break;\n                case '^':\n                    result = Math.pow(x, y);\n                    break;\n                default:\n                    return NaN;\n            }\n            // Limit decimal to 9 digits\n            return (result % 1 ?\n                Math.round(result * 1000000000) / 1000000000 :\n                result);\n        }\n        /**\n         * Converts an argument to Value and in case of a range to an array of Values.\n         *\n         * @function Highcharts.Formula.getArgumentValue\n         *\n         * @param {Highcharts.FormulaRange|Highcharts.FormulaTerm} arg\n         * Formula range or term to convert.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Converted value.\n         */\n        function getArgumentValue(arg, table) {\n            // Add value\n            if (isValue(arg)) {\n                return arg;\n            }\n            // Add values of a range\n            if (isRange(arg)) {\n                return (table && getRangeValues(arg, table) || []);\n            }\n            // Add values of a function\n            if (isFunction(arg)) {\n                return processFunction(arg, table);\n            }\n            // Process functions, operations, references with formula processor\n            return processFormula((isFormula(arg) ? arg : [arg]), table);\n        }\n        /**\n         * Converts all arguments to Values and in case of ranges to arrays of Values.\n         *\n         * @function Highcharts.Formula.getArgumentsValues\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Formula arguments to convert.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Array<(Highcharts.FormulaValue|Array<Highcharts.FormulaValue>)>}\n         * Converted values.\n         */\n        function getArgumentsValues(args, table) {\n            var values = [];\n            for (var i = 0, iEnd = args.length; i < iEnd; ++i) {\n                values.push(getArgumentValue(args[i], table));\n            }\n            return values;\n        }\n        /**\n         * Extracts cell values from a table for a given range.\n         *\n         * @function Highcharts.Formula.getRangeValues\n         *\n         * @param {Highcharts.FormulaRange} range\n         * Formula range to use.\n         *\n         * @param {Highcharts.DataTable} table\n         * Table to extract from.\n         *\n         * @return {Array<Highcharts.FormulaValue>}\n         * Extracted values.\n         */\n        function getRangeValues(range, table) {\n            var columnNames = table\n                .getColumnNames()\n                .slice(range.beginColumn, range.endColumn + 1), values = [];\n            for (var i = 0, iEnd = columnNames.length, cell = void 0; i < iEnd; ++i) {\n                var cells = table.getColumn(columnNames[i], true) || [];\n                for (var j = range.beginRow, jEnd = range.endRow + 1; j < jEnd; ++j) {\n                    cell = cells[j];\n                    if (typeof cell === 'string' &&\n                        cell[0] === '=' &&\n                        table !== table.modified) {\n                        // Look in the modified table for formula result\n                        cell = table.modified.getCell(columnNames[i], j);\n                    }\n                    values.push(isValue(cell) ? cell : NaN);\n                }\n            }\n            return values;\n        }\n        /**\n         * Extracts the cell value from a table for a given reference.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaReference} reference\n         * Formula reference to use.\n         *\n         * @param {Highcharts.DataTable} table\n         * Table to extract from.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Extracted value. 'undefined' might also indicate that the cell was not found.\n         */\n        function getReferenceValue(reference, table) {\n            var columnName = table.getColumnNames()[reference.column];\n            if (columnName) {\n                var cell = table.getCell(columnName, reference.row);\n                if (typeof cell === 'string' &&\n                    cell[0] === '=' &&\n                    table !== table.modified) {\n                    // Look in the modified table for formula result\n                    var result = table.modified.getCell(columnName, reference.row);\n                    return isValue(result) ? result : NaN;\n                }\n                return isValue(cell) ? cell : NaN;\n            }\n            return NaN;\n        }\n        /**\n         * Processes a formula array on the given table. If the formula does not contain\n         * references or ranges, then no table has to be provided.\n         *\n         * @private\n         * @function Highcharts.processFormula\n         *\n         * @param {Highcharts.Formula} formula\n         * Formula array to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Result value of the process. `NaN` indicates an error.\n         */\n        function processFormula(formula, table) {\n            var x;\n            for (var i = 0, iEnd = formula.length, item = void 0, operator = void 0, result = void 0, y = void 0; i < iEnd; ++i) {\n                item = formula[i];\n                // Remember operator for operation on next item\n                if (isOperator(item)) {\n                    operator = item;\n                    continue;\n                }\n                // Next item is a value\n                if (isValue(item)) {\n                    y = item;\n                    // Next item is a formula and needs to get processed first\n                }\n                else if (isFormula(item)) {\n                    y = processFormula(formula, table);\n                    // Next item is a function call and needs to get processed first\n                }\n                else if (isFunction(item)) {\n                    result = processFunction(item, table);\n                    y = (isValue(result) ? result : NaN); // Arrays are not allowed here\n                    // Next item is a reference and needs to get resolved\n                }\n                else if (isReference(item)) {\n                    y = (table && getReferenceValue(item, table));\n                }\n                // If we have a next value, lets do the operation\n                if (typeof y !== 'undefined') {\n                    // Next value is our first value\n                    if (typeof x === 'undefined') {\n                        if (operator) {\n                            x = basicOperation(operator, 0, y);\n                        }\n                        else {\n                            x = y;\n                        }\n                        // Fail fast if no operator available\n                    }\n                    else if (!operator) {\n                        return NaN;\n                        // Regular next value\n                    }\n                    else {\n                        var operator2 = formula[i + 1];\n                        if (isOperator(operator2) &&\n                            operatorPriority[operator2] > operatorPriority[operator]) {\n                            y = basicOperation(operator2, y, processFormula(formula.slice(i + 2)));\n                            i = iEnd;\n                        }\n                        x = basicOperation(operator, x, y);\n                    }\n                    operator = void 0;\n                    y = void 0;\n                }\n            }\n            return isValue(x) ? x : NaN;\n        }\n        /**\n         * Process a function on the given table. If the arguments do not contain\n         * references or ranges, then no table has to be provided.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaFunction} formulaFunction\n         * Formula function to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @param {Highcharts.FormulaReference} [reference]\n         * Table cell reference to use for relative references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Result value (or values) of the process. `NaN` indicates an error.\n         */\n        function processFunction(formulaFunction, table, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        reference // @todo\n        ) {\n            var processor = processorFunctions[formulaFunction.name];\n            if (processor) {\n                try {\n                    return processor(formulaFunction.args, table);\n                }\n                catch (_a) {\n                    return NaN;\n                }\n            }\n            var error = new Error(\"Function \\\"\".concat(formulaFunction.name, \"\\\" not found.\"));\n            error.name = 'FormulaProcessError';\n            throw error;\n        }\n        /**\n         * Registers a function for the FormulaProcessor.\n         *\n         * @param {string} name\n         * Name of the function in spreadsheets notation with upper case.\n         *\n         * @param {Highcharts.FormulaFunction} processorFunction\n         * ProcessorFunction for the FormulaProcessor. This is an object so that it\n         * can take additional parameter for future validation routines.\n         *\n         * @return {boolean}\n         * Return true, if the ProcessorFunction has been registered.\n         */\n        function registerProcessorFunction(name, processorFunction) {\n            return (processorFunctionNameRegExp.test(name) &&\n                !processorFunctions[name] &&\n                !!(processorFunctions[name] = processorFunction));\n        }\n        /**\n         * Translates relative references and ranges in-place.\n         *\n         * @param {Highcharts.Formula} formula\n         * Formula to translate references and ranges in.\n         *\n         * @param {number} [columnDelta=0]\n         * Column delta to translate to. Negative translate back.\n         *\n         * @param {number} [rowDelta=0]\n         * Row delta to translate to. Negative numbers translate back.\n         *\n         * @return {Highcharts.Formula}\n         * Formula with translated reference and ranges. This formula is equal to the\n         * first argument.\n         */\n        function translateReferences(formula, columnDelta, rowDelta) {\n            if (columnDelta === void 0) { columnDelta = 0; }\n            if (rowDelta === void 0) { rowDelta = 0; }\n            for (var i = 0, iEnd = formula.length, item = void 0; i < iEnd; ++i) {\n                item = formula[i];\n                if (item instanceof Array) {\n                    translateReferences(item, columnDelta, rowDelta);\n                }\n                else if (isFunction(item)) {\n                    translateReferences(item.args, columnDelta, rowDelta);\n                }\n                else if (isRange(item)) {\n                    if (item.beginColumnRelative) {\n                        item.beginColumn += columnDelta;\n                    }\n                    if (item.beginRowRelative) {\n                        item.beginRow += rowDelta;\n                    }\n                    if (item.endColumnRelative) {\n                        item.endColumn += columnDelta;\n                    }\n                    if (item.endRowRelative) {\n                        item.endRow += rowDelta;\n                    }\n                }\n                else if (isReference(item)) {\n                    if (item.columnRelative) {\n                        item.column += columnDelta;\n                    }\n                    if (item.rowRelative) {\n                        item.row += rowDelta;\n                    }\n                }\n            }\n            return formula;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var FormulaProcessor = {\n            asNumber: asNumber,\n            getArgumentValue: getArgumentValue,\n            getArgumentsValues: getArgumentsValues,\n            getRangeValues: getRangeValues,\n            getReferenceValue: getReferenceValue,\n            processFormula: processFormula,\n            processorFunctions: processorFunctions,\n            registerProcessorFunction: registerProcessorFunction,\n            translateReferences: translateReferences\n        };\n\n        return FormulaProcessor;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/ABS.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `ABS(value)` implementation. Returns positive numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Array<number>}\n         * Result value of the process.\n         */\n        function ABS(args, table) {\n            var value = getArgumentValue(args[0], table);\n            switch (typeof value) {\n                case 'number':\n                    return Math.abs(value);\n                case 'object': {\n                    var values = [];\n                    for (var i = 0, iEnd = value.length, value2 = void 0; i < iEnd; ++i) {\n                        value2 = value[i];\n                        if (typeof value2 !== 'number') {\n                            return NaN;\n                        }\n                        values.push(Math.abs(value2));\n                    }\n                    return values;\n                }\n                default:\n                    return NaN;\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('ABS', ABS);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ABS;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AND.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AND(...tests)` implementation. Returns `TRUE`, if all test\n         * results are not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function AND(args, table) {\n            for (var i = 0, iEnd = args.length, value = void 0; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                if (!value ||\n                    (typeof value === 'object' &&\n                        !AND(value, table))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AND', AND);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AND;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AVERAGE.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentsValues = FormulaProcessor.getArgumentsValues;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AVERAGE(...values)` implementation. Calculates the average\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.AVERAGE\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function AVERAGE(args, table) {\n            var values = getArgumentsValues(args, table);\n            var count = 0, result = 0;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                            result += value;\n                        }\n                        break;\n                    case 'object':\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                ++count;\n                                result += value2;\n                            }\n                        }\n                        break;\n                }\n            }\n            return (count ? (result / count) : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AVERAGE', AVERAGE);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AVERAGE;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AVERAGEA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AVERAGEA(...values)` implementation. Calculates the\n         * average of the given values. Strings and FALSE are calculated as 0.\n         *\n         * @private\n         * @function Formula.processorFunctions.AVERAGEA\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function AVERAGEA(args, table) {\n            var count = 0, result = 0;\n            for (var i = 0, iEnd = args.length, value = void 0; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                switch (typeof value) {\n                    case 'boolean':\n                        ++count;\n                        result += (value ? 1 : 0);\n                        continue;\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                            result += value;\n                        }\n                        continue;\n                    case 'string':\n                        ++count;\n                        continue;\n                    default:\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            switch (typeof value2) {\n                                case 'boolean':\n                                    ++count;\n                                    result += (value2 ? 1 : 0);\n                                    continue;\n                                case 'number':\n                                    if (!isNaN(value2)) {\n                                        ++count;\n                                        result += value2;\n                                    }\n                                    continue;\n                                case 'string':\n                                    ++count;\n                                    continue;\n                            }\n                        }\n                        continue;\n                }\n            }\n            return (count ? (result / count) : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AVERAGEA', AVERAGEA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AVERAGEA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/COUNT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `COUNT(...values)` implementation. Returns the count of\n         * given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.COUNT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function COUNT(args, table) {\n            var values = FormulaProcessor.getArgumentsValues(args, table);\n            var count = 0;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                        }\n                        break;\n                    case 'object':\n                        count += COUNT(value, table);\n                        break;\n                }\n            }\n            return count;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('COUNT', COUNT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return COUNT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/COUNTA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `COUNTA(...values)` implementation. Returns the count of\n         * given values that are not empty.\n         *\n         * @private\n         * @function Formula.processorFunctions.COUNT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function COUNTA(args, table) {\n            var values = FormulaProcessor.getArgumentsValues(args, table);\n            var count = 0;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (isNaN(value)) {\n                            continue;\n                        }\n                        break;\n                    case 'object':\n                        count += COUNTA(value, table);\n                        continue;\n                    case 'string':\n                        if (!value) {\n                            continue;\n                        }\n                        break;\n                }\n                ++count;\n            }\n            return count;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('COUNTA', COUNTA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return COUNTA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/IF.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `IF(test, value1, value2)` implementation. Returns one of\n         * the values based on the test result. `value1` will be returned, if the test\n         * result is not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.IF\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Result value of the process.\n         */\n        function IF(args, table) {\n            return (getArgumentValue(args[0], table) ?\n                getArgumentValue(args[1], table) :\n                getArgumentValue(args[2], table));\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('IF', IF);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return IF;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/ISNA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `ISNA(value)` implementation. Returns TRUE if value is not\n         * a number.\n         *\n         * @private\n         * @function Formula.processorFunctions.ISNA\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function ISNA(args, table) {\n            var value = getArgumentValue(args[0], table);\n            return (typeof value !== 'number' || isNaN(value));\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('ISNA', ISNA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ISNA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MAX.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentsValues = FormulaProcessor.getArgumentsValues;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MAX(...values)` implementation. Calculates the largest\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.MAX\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MAX(args, table) {\n            var values = getArgumentsValues(args, table);\n            var result = Number.NEGATIVE_INFINITY;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (value > result) {\n                            result = value;\n                        }\n                        break;\n                    case 'object':\n                        value = MAX(value);\n                        if (value > result) {\n                            result = value;\n                        }\n                        break;\n                }\n            }\n            return isFinite(result) ? result : 0;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MAX', MAX);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MAX;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MEDIAN.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MEDIAN(...values)` implementation. Calculates the median\n         * average of the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MEDIAN\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MEDIAN(args, table) {\n            var median = [], values = FormulaProcessor.getArgumentsValues(args, table);\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            median.push(value);\n                        }\n                        break;\n                    case 'object':\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                median.push(value2);\n                            }\n                        }\n                        break;\n                }\n            }\n            var count = median.length;\n            if (!count) {\n                return NaN;\n            }\n            var half = Math.floor(count / 2); // Floor because index starts at 0\n            return (count % 2 ?\n                median[half] : // Odd\n                (median[half - 1] + median[half]) / 2 // Even\n            );\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MEDIAN', MEDIAN);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MEDIAN;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MIN.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentsValues = FormulaProcessor.getArgumentsValues;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MIN(...values)` implementation. Calculates the lowest\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.MIN\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MIN(args, table) {\n            var values = getArgumentsValues(args, table);\n            var result = Number.POSITIVE_INFINITY;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (value < result) {\n                            result = value;\n                        }\n                        break;\n                    case 'object':\n                        value = MIN(value);\n                        if (value < result) {\n                            result = value;\n                        }\n                        break;\n                }\n            }\n            return isFinite(result) ? result : 0;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MIN', MIN);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MIN;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MOD.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MOD(value1, value2)` implementation. Calculates the rest\n         * of the division with the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MOD\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MOD(args, table) {\n            var value1 = getArgumentValue(args[0], table), value2 = getArgumentValue(args[1], table);\n            if (typeof value1 === 'object') {\n                value1 = value1[0];\n            }\n            if (typeof value2 === 'object') {\n                value2 = value2[0];\n            }\n            if (typeof value1 !== 'number' ||\n                typeof value2 !== 'number' ||\n                value2 === 0) {\n                return NaN;\n            }\n            return value1 % value2;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MOD', MOD);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MOD;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MODE.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates the mode map of the given arguments.\n         *\n         * @private\n         * @function Formula.processorFunctions.MULT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function getModeMap(args, table) {\n            var modeMap = {}, values = FormulaProcessor.getArgumentsValues(args, table);\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            modeMap[value] = (modeMap[value] || 0) + 1;\n                        }\n                        break;\n                    case 'object':\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                modeMap[value2] = (modeMap[value2] || 0) + 1;\n                            }\n                        }\n                        break;\n                }\n            }\n            return modeMap;\n        }\n        /**\n         * Processor for the `MODE.MULT(...values)` implementation. Calculates the most\n         * frequent values of the give values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MULT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number|Array<number>}\n         * Result value of the process.\n         */\n        function MULT(args, table) {\n            var modeMap = getModeMap(args, table), keys = Object.keys(modeMap);\n            if (!keys.length) {\n                return NaN;\n            }\n            var modeKeys = [parseFloat(keys[0])], modeCount = modeMap[keys[0]];\n            for (var i = 1, iEnd = keys.length, key = void 0, count = void 0; i < iEnd; ++i) {\n                key = keys[i];\n                count = modeMap[key];\n                if (modeCount < count) {\n                    modeKeys = [parseFloat(key)];\n                    modeCount = count;\n                }\n                else if (modeCount === count) {\n                    modeKeys.push(parseFloat(key));\n                }\n            }\n            return modeCount > 1 ? modeKeys : NaN;\n        }\n        /**\n         * Processor for the `MODE.SNGL(...values)` implementation. Calculates the\n         * lowest most frequent value of the give values.\n         *\n         * @private\n         * @function Formula.processorFunctions['MODE.SNGL']\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function SNGL(args, table) {\n            var modeMap = getModeMap(args, table), keys = Object.keys(modeMap);\n            if (!keys.length) {\n                return NaN;\n            }\n            var modeKey = parseFloat(keys[0]), modeCount = modeMap[keys[0]];\n            for (var i = 1, iEnd = keys.length, key = void 0, keyValue = void 0, count = void 0; i < iEnd; ++i) {\n                key = keys[i];\n                count = modeMap[key];\n                if (modeCount < count) {\n                    modeKey = parseFloat(key);\n                    modeCount = count;\n                }\n                else if (modeCount === count) {\n                    keyValue = parseFloat(key);\n                    if (modeKey > keyValue) {\n                        modeKey = keyValue;\n                        modeCount = count;\n                    }\n                }\n            }\n            return modeCount > 1 ? modeKey : NaN;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MODE', SNGL);\n        FormulaProcessor.registerProcessorFunction('MODE.MULT', MULT);\n        FormulaProcessor.registerProcessorFunction('MODE.SNGL', SNGL);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var MODE = {\n            MULT: MULT,\n            SNGL: SNGL\n        };\n\n        return MODE;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/NOT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `NOT(value)` implementation. Returns the opposite test\n         * result.\n         *\n         * @private\n         * @function Formula.processorFunctions.NOT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean|number}\n         * Result value of the process.\n         */\n        function NOT(args, table) {\n            var value = getArgumentValue(args[0], table);\n            if (typeof value === 'object') {\n                value = value[0];\n            }\n            switch (typeof value) {\n                case 'boolean':\n                case 'number':\n                    return !value;\n            }\n            return NaN;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('NOT', NOT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NOT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/OR.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `OR(...tests)` implementation. Returns `TRUE`, if one test\n         * result is not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function OR(args, table) {\n            for (var i = 0, iEnd = args.length, value = void 0; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                if (typeof value === 'object') {\n                    if (OR(value, table)) {\n                        return true;\n                    }\n                }\n                else if (value) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('OR', OR);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OR;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/PRODUCT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentsValues = FormulaProcessor.getArgumentsValues;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `PRODUCT(...values)` implementation. Calculates the product\n         * of the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.PRODUCT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function PRODUCT(args, table) {\n            var values = getArgumentsValues(args, table);\n            var result = 1, calculated = false;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            calculated = true;\n                            result *= value;\n                        }\n                        break;\n                    case 'object':\n                        calculated = true;\n                        result *= PRODUCT(value, table);\n                        break;\n                }\n            }\n            return (calculated ? result : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('PRODUCT', PRODUCT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PRODUCT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/SUM.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `SUM(...values)` implementation. Calculates the sum of the\n         * given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.SUM\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function SUM(args, table) {\n            var values = FormulaProcessor.getArgumentsValues(args, table);\n            var result = 0;\n            for (var i = 0, iEnd = values.length, value = void 0; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            result += value;\n                        }\n                        break;\n                    case 'object':\n                        result += SUM(value, table);\n                        break;\n                }\n            }\n            return result;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('SUM', SUM); // ð\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SUM;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/XOR.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var getArgumentValue = FormulaProcessor.getArgumentValue;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `XOR(...tests)` implementation. Returns `TRUE`, if at least\n         * one of the given tests differs in result of other tests.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean|number}\n         * Result value of the process.\n         */\n        function XOR(args, table) {\n            for (var i = 0, iEnd = args.length, lastValue = void 0, value = void 0; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                switch (typeof value) {\n                    case 'boolean':\n                    case 'number':\n                        if (typeof lastValue === 'undefined') {\n                            lastValue = !!value;\n                        }\n                        else if (!!value !== lastValue) {\n                            return true;\n                        }\n                        break;\n                    case 'object':\n                        for (var j = 0, jEnd = value.length, value2 = void 0; j < jEnd; ++j) {\n                            value2 = value[j];\n                            switch (typeof value2) {\n                                case 'boolean':\n                                case 'number':\n                                    if (typeof lastValue === 'undefined') {\n                                        lastValue = !!value2;\n                                    }\n                                    else if (!!value2 !== lastValue) {\n                                        return true;\n                                    }\n                                    break;\n                            }\n                        }\n                        break;\n                }\n            }\n            return false;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('XOR', XOR);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return XOR;\n    });\n    _registerModule(_modules, 'Data/Formula/Formula.js', [_modules['Data/Formula/FormulaParser.js'], _modules['Data/Formula/FormulaProcessor.js'], _modules['Data/Formula/FormulaTypes.js']], function (FormulaParser, FormulaProcessor, FormulaType) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * Formula engine to make use of spreadsheet formula strings.\n         * @internal\n         */\n        var Formula = __assign(__assign(__assign({}, FormulaParser), FormulaProcessor), FormulaType);\n\n        return Formula;\n    });\n    _registerModule(_modules, 'Data/Converters/CSVConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - Christer Vasseng\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming CSV to a table.\n         *\n         * @private\n         */\n        var CSVConverter = /** @class */ (function (_super) {\n            __extends(CSVConverter, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CSV parser.\n             *\n             * @param {CSVConverter.UserOptions} [options]\n             * Options for the CSV parser.\n             */\n            function CSVConverter(options) {\n                var _this = this;\n                var mergedOptions = merge(CSVConverter.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.columns = [];\n                _this.headers = [];\n                _this.dataTypes = [];\n                _this.options = mergedOptions;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a CSV string from the datatable on the connector instance.\n             *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {CSVConverter.Options} [options]\n             * Options used for the export.\n             *\n             * @return {string}\n             * CSV string from the connector table.\n             */\n            CSVConverter.prototype.export = function (connector, options) {\n                if (options === void 0) { options = this.options; }\n                var useLocalDecimalPoint = options.useLocalDecimalPoint, lineDelimiter = options.lineDelimiter, exportNames = (this.options.firstRowAsNames !== false);\n                var decimalPoint = options.decimalPoint, itemDelimiter = options.itemDelimiter;\n                if (!decimalPoint) {\n                    decimalPoint = (itemDelimiter !== ',' && useLocalDecimalPoint ?\n                        (1.1).toLocaleString()[1] :\n                        '.');\n                }\n                if (!itemDelimiter) {\n                    itemDelimiter = (decimalPoint === ',' ? ';' : ',');\n                }\n                var columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), csvRows = [], columnsCount = columnNames.length;\n                var rowArray = [];\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    csvRows.push(columnNames.map(function (columnName) { return \"\\\"\".concat(columnName, \"\\\"\"); }).join(itemDelimiter));\n                }\n                for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    var columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    var columnMeta = connector.whatIs(columnName);\n                    var columnDataType = void 0;\n                    if (columnMeta) {\n                        columnDataType = columnMeta.dataType;\n                    }\n                    for (var rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        var cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Prefer datatype from metadata\n                        if (columnDataType === 'string') {\n                            cellValue = '\"' + cellValue + '\"';\n                        }\n                        else if (typeof cellValue === 'number') {\n                            cellValue = String(cellValue).replace('.', decimalPoint);\n                        }\n                        else if (typeof cellValue === 'string') {\n                            cellValue = \"\\\"\".concat(cellValue, \"\\\"\");\n                        }\n                        rowArray[rowIndex][columnIndex] = cellValue;\n                        // On the final column, push the row to the CSV\n                        if (columnIndex === columnsCount - 1) {\n                            // Trim repeated undefined values starting at the end\n                            // Currently, we export the first \"comma\" even if the\n                            // second value is undefined\n                            var i = columnIndex;\n                            while (rowArray[rowIndex].length > 2) {\n                                var cellVal = rowArray[rowIndex][i];\n                                if (cellVal !== void 0) {\n                                    break;\n                                }\n                                rowArray[rowIndex].pop();\n                                i--;\n                            }\n                            csvRows.push(rowArray[rowIndex].join(itemDelimiter));\n                        }\n                    }\n                }\n                return csvRows.join(lineDelimiter);\n            };\n            /**\n             * Initiates parsing of CSV\n             *\n             * @param {CSVConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             */\n            CSVConverter.prototype.parse = function (options, eventDetail) {\n                var converter = this, dataTypes = converter.dataTypes, parserOptions = merge(this.options, options), beforeParse = parserOptions.beforeParse, lineDelimiter = parserOptions.lineDelimiter, firstRowAsNames = parserOptions.firstRowAsNames, itemDelimiter = parserOptions.itemDelimiter;\n                var lines, rowIt = 0, csv = parserOptions.csv, startRow = parserOptions.startRow, endRow = parserOptions.endRow, column;\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (csv && beforeParse) {\n                    csv = beforeParse(csv);\n                }\n                if (csv) {\n                    lines = csv\n                        .replace(/\\r\\n|\\r/g, '\\n') // Windows | Mac\n                        .split(lineDelimiter || '\\n');\n                    if (!startRow || startRow < 0) {\n                        startRow = 0;\n                    }\n                    if (!endRow || endRow >= lines.length) {\n                        endRow = lines.length - 1;\n                    }\n                    if (!itemDelimiter) {\n                        converter.guessedItemDelimiter =\n                            converter.guessDelimiter(lines);\n                    }\n                    // If the first row contain names, add them to the\n                    // headers array and skip the row.\n                    if (firstRowAsNames) {\n                        var headers = lines[0].split(itemDelimiter || converter.guessedItemDelimiter || ',');\n                        // Remove \"\"s from the headers\n                        for (var i = 0; i < headers.length; i++) {\n                            headers[i] = headers[i].trim().replace(/^[\"']|[\"']$/g, '');\n                        }\n                        converter.headers = headers;\n                        startRow++;\n                    }\n                    var offset = 0;\n                    for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                        if (lines[rowIt][0] === '#') {\n                            offset++;\n                        }\n                        else {\n                            converter\n                                .parseCSVRow(lines[rowIt], rowIt - startRow - offset);\n                        }\n                    }\n                    if (dataTypes.length &&\n                        dataTypes[0].length &&\n                        dataTypes[0][1] === 'date' && // Format is a string date\n                        !converter.options.dateFormat) {\n                        converter.deduceDateFormat(converter.columns[0], null, true);\n                    }\n                    // Guess types.\n                    for (var i = 0, iEnd = converter.columns.length; i < iEnd; ++i) {\n                        column = converter.columns[i];\n                        for (var j = 0, jEnd = column.length; j < jEnd; ++j) {\n                            if (column[j] && typeof column[j] === 'string') {\n                                var cellValue = converter.asGuessedType(column[j]);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                converter.columns[i][j] = cellValue;\n                            }\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            };\n            /**\n             * Internal method that parses a single CSV row\n             */\n            CSVConverter.prototype.parseCSVRow = function (columnStr, rowNumber) {\n                var converter = this, columns = converter.columns || [], dataTypes = converter.dataTypes, _a = converter.options, startColumn = _a.startColumn, endColumn = _a.endColumn, itemDelimiter = (converter.options.itemDelimiter ||\n                    converter.guessedItemDelimiter);\n                var decimalPoint = converter.options.decimalPoint;\n                if (!decimalPoint || decimalPoint === itemDelimiter) {\n                    decimalPoint = converter.guessedDecimalPoint || '.';\n                }\n                var i = 0, c = '', token = '', actualColumn = 0, column = 0;\n                var read = function (j) {\n                    c = columnStr[j];\n                };\n                var pushType = function (type) {\n                    if (dataTypes.length < column + 1) {\n                        dataTypes.push([type]);\n                    }\n                    if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                        dataTypes[column].push(type);\n                    }\n                };\n                var push = function () {\n                    if (startColumn > actualColumn || actualColumn > endColumn) {\n                        // Skip this column, but increment the column count (#7272)\n                        ++actualColumn;\n                        token = '';\n                        return;\n                    }\n                    // Save the type of the token.\n                    if (typeof token === 'string') {\n                        if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                            token = parseFloat(token);\n                            pushType('number');\n                        }\n                        else if (!isNaN(Date.parse(token))) {\n                            token = token.replace(/\\//g, '-');\n                            pushType('date');\n                        }\n                        else {\n                            pushType('string');\n                        }\n                    }\n                    else {\n                        pushType('number');\n                    }\n                    if (columns.length < column + 1) {\n                        columns.push([]);\n                    }\n                    // Try to apply the decimal point, and check if the token then is a\n                    // number. If not, reapply the initial value\n                    if (typeof token !== 'number' &&\n                        converter.guessType(token) !== 'number' &&\n                        decimalPoint) {\n                        var initialValue = token;\n                        token = token.replace(decimalPoint, '.');\n                        if (converter.guessType(token) !== 'number') {\n                            token = initialValue;\n                        }\n                    }\n                    columns[column][rowNumber] = token;\n                    token = '';\n                    ++column;\n                    ++actualColumn;\n                };\n                if (!columnStr.trim().length) {\n                    return;\n                }\n                if (columnStr.trim()[0] === '#') {\n                    return;\n                }\n                for (; i < columnStr.length; i++) {\n                    read(i);\n                    if (c === '#') {\n                        // If there are hexvalues remaining (#13283)\n                        if (!/^#[A-F\\d]{3,3}|[A-F\\d]{6,6}/i.test(columnStr.substring(i))) {\n                            // The rest of the row is a comment\n                            push();\n                            return;\n                        }\n                    }\n                    // Quoted string\n                    if (c === '\"') {\n                        read(++i);\n                        while (i < columnStr.length) {\n                            if (c === '\"') {\n                                break;\n                            }\n                            token += c;\n                            read(++i);\n                        }\n                    }\n                    else if (c === itemDelimiter) {\n                        push();\n                        // Actual column data\n                    }\n                    else {\n                        token += c;\n                    }\n                }\n                push();\n            };\n            /**\n             * Internal method that guesses the delimiter from the first\n             * 13 lines of the CSV\n             * @param {Array<string>} lines\n             * The CSV, split into lines\n             */\n            CSVConverter.prototype.guessDelimiter = function (lines) {\n                var points = 0, commas = 0, guessed;\n                var potDelimiters = {\n                    ',': 0,\n                    ';': 0,\n                    '\\t': 0\n                }, linesCount = lines.length;\n                for (var i = 0; i < linesCount; i++) {\n                    var inStr = false, c = void 0, cn = void 0, cl = void 0, token = '';\n                    // We should be able to detect dateformats within 13 rows\n                    if (i > 13) {\n                        break;\n                    }\n                    var columnStr = lines[i];\n                    for (var j = 0; j < columnStr.length; j++) {\n                        c = columnStr[j];\n                        cn = columnStr[j + 1];\n                        cl = columnStr[j - 1];\n                        if (c === '#') {\n                            // Skip the rest of the line - it's a comment\n                            break;\n                        }\n                        if (c === '\"') {\n                            if (inStr) {\n                                if (cl !== '\"' && cn !== '\"') {\n                                    while (cn === ' ' && j < columnStr.length) {\n                                        cn = columnStr[++j];\n                                    }\n                                    // After parsing a string, the next non-blank\n                                    // should be a delimiter if the CSV is properly\n                                    // formed.\n                                    if (typeof potDelimiters[cn] !== 'undefined') {\n                                        potDelimiters[cn]++;\n                                    }\n                                    inStr = false;\n                                }\n                            }\n                            else {\n                                inStr = true;\n                            }\n                        }\n                        else if (typeof potDelimiters[c] !== 'undefined') {\n                            token = token.trim();\n                            if (!isNaN(Date.parse(token))) {\n                                potDelimiters[c]++;\n                            }\n                            else if (isNaN(Number(token)) ||\n                                !isFinite(Number(token))) {\n                                potDelimiters[c]++;\n                            }\n                            token = '';\n                        }\n                        else {\n                            token += c;\n                        }\n                        if (c === ',') {\n                            commas++;\n                        }\n                        if (c === '.') {\n                            points++;\n                        }\n                    }\n                }\n                // Count the potential delimiters.\n                // This could be improved by checking if the number of delimiters\n                // equals the number of columns - 1\n                if (potDelimiters[';'] > potDelimiters[',']) {\n                    guessed = ';';\n                }\n                else if (potDelimiters[','] > potDelimiters[';']) {\n                    guessed = ',';\n                }\n                else {\n                    // No good guess could be made..\n                    guessed = ',';\n                }\n                // Try to deduce the decimal point if it's not explicitly set.\n                // If both commas or points is > 0 there is likely an issue\n                if (points > commas) {\n                    this.guessedDecimalPoint = '.';\n                }\n                else {\n                    this.guessedDecimalPoint = ',';\n                }\n                return guessed;\n            };\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            CSVConverter.prototype.getTable = function () {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            CSVConverter.defaultOptions = __assign(__assign({}, DataConverter.defaultOptions), { lineDelimiter: '\\n' });\n            return CSVConverter;\n        }(DataConverter));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/CSVConnector.js', [_modules['Data/Converters/CSVConverter.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js']], function (CSVConverter, DataConnector, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - Christer Vasseng\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from CSV\n         *\n         * @private\n         */\n        var CSVConnector = /** @class */ (function (_super) {\n            __extends(CSVConnector, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of CSVConnector.\n             *\n             * @param {CSVConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            function CSVConnector(options) {\n                var _this = this;\n                var mergedOptions = merge(CSVConnector.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.converter = new CSVConverter(mergedOptions);\n                _this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    _this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the CSV source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVConnector#load\n             * @emits CSVConnector#afterLoad\n             */\n            CSVConnector.prototype.load = function (eventDetail) {\n                var connector = this, converter = connector.converter, table = connector.table, _a = connector.options, csv = _a.csv, csvURL = _a.csvURL, dataModifier = _a.dataModifier;\n                connector.emit({\n                    type: 'load',\n                    csv: csv,\n                    detail: eventDetail,\n                    table: table\n                });\n                return Promise\n                    .resolve(csvURL ?\n                    fetch(csvURL).then(function (response) { return response.text(); }) :\n                    csv || '')\n                    .then(function (csv) {\n                    if (csv) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ csv: csv });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector\n                        .setModifierOptions(dataModifier)\n                        .then(function () { return csv; });\n                })\n                    .then(function (csv) {\n                    connector.emit({\n                        type: 'afterLoad',\n                        csv: csv,\n                        detail: eventDetail,\n                        table: table\n                    });\n                    return connector;\n                })['catch'](function (error) {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error: error,\n                        table: table\n                    });\n                    throw error;\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            CSVConnector.defaultOptions = {\n                csv: '',\n                csvURL: '',\n                enablePolling: false,\n                dataRefreshRate: 1,\n                firstRowAsNames: true\n            };\n            return CSVConnector;\n        }(DataConnector));\n        DataConnector.registerType('CSV', CSVConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/JSONConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataConverter, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var error = U.error, isArray = U.isArray, merge = U.merge, objectEach = U.objectEach;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming JSON to a table.\n         *\n         * @private\n         */\n        var JSONConverter = /** @class */ (function (_super) {\n            __extends(JSONConverter, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the JSON parser.\n             *\n             * @param {JSONConverter.UserOptions} [options]\n             * Options for the JSON parser.\n             */\n            function JSONConverter(options) {\n                var _this = this;\n                var mergedOptions = merge(JSONConverter.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                _this.columns = [];\n                _this.headers = [];\n                _this.options = mergedOptions;\n                _this.table = new DataTable();\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates parsing of JSON structure.\n             *\n             * @param {JSONConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConverter#parse\n             * @emits JSONConverter#afterParse\n             */\n            JSONConverter.prototype.parse = function (options, eventDetail) {\n                var converter = this;\n                options = merge(converter.options, options);\n                var beforeParse = options.beforeParse, orientation = options.orientation, firstRowAsNames = options.firstRowAsNames, columnNames = options.columnNames;\n                var data = options.data;\n                if (!data) {\n                    return;\n                }\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (beforeParse) {\n                    data = beforeParse(data);\n                }\n                data = data.slice();\n                if (orientation === 'columns') {\n                    for (var i = 0, iEnd = data.length; i < iEnd; i++) {\n                        var item = data[i];\n                        if (!(item instanceof Array)) {\n                            return;\n                        }\n                        if (converter.headers instanceof Array) {\n                            if (firstRowAsNames) {\n                                converter.headers.push(\"\".concat(item.shift()));\n                            }\n                            else if (columnNames && columnNames instanceof Array) {\n                                converter.headers.push(columnNames[i]);\n                            }\n                            converter.table.setColumn(converter.headers[i] || i.toString(), item);\n                        }\n                        else {\n                            error('JSONConverter: Invalid `columnNames` option.', false);\n                        }\n                    }\n                }\n                else if (orientation === 'rows') {\n                    if (firstRowAsNames) {\n                        converter.headers = data.shift();\n                    }\n                    else if (columnNames) {\n                        converter.headers = columnNames;\n                    }\n                    var _loop_1 = function (rowIndex, iEnd) {\n                        var row = data[rowIndex];\n                        if (isArray(row)) {\n                            for (var columnIndex = 0, jEnd = row.length; columnIndex < jEnd; columnIndex++) {\n                                if (converter.columns.length < columnIndex + 1) {\n                                    converter.columns.push([]);\n                                }\n                                converter.columns[columnIndex].push(row[columnIndex]);\n                                if (converter.headers instanceof Array) {\n                                    this_1.table.setColumn(converter.headers[columnIndex] ||\n                                        columnIndex.toString(), converter.columns[columnIndex]);\n                                }\n                                else {\n                                    error('JSONConverter: Invalid `columnNames` option.', false);\n                                }\n                            }\n                        }\n                        else {\n                            var columnNames_1 = converter.headers;\n                            if (columnNames_1 && !(columnNames_1 instanceof Array)) {\n                                var newRow_1 = {};\n                                objectEach(columnNames_1, function (arrayWithPath, name) {\n                                    newRow_1[name] = arrayWithPath.reduce(function (acc, key) {\n                                        return acc[key];\n                                    }, row);\n                                });\n                                row = newRow_1;\n                            }\n                            this_1.table.setRows([row], rowIndex);\n                        }\n                    };\n                    var this_1 = this;\n                    for (var rowIndex = 0, iEnd = data.length; rowIndex < iEnd; rowIndex++) {\n                        _loop_1(rowIndex, iEnd);\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            };\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            JSONConverter.prototype.getTable = function () {\n                return this.table;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            JSONConverter.defaultOptions = __assign(__assign({}, DataConverter.defaultOptions), { data: [], orientation: 'rows' });\n            return JSONConverter;\n        }(DataConverter));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/JSONConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js'], _modules['Data/Converters/JSONConverter.js']], function (DataConnector, U, JSONConverter) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from JSON structure\n         *\n         * @private\n         */\n        var JSONConnector = /** @class */ (function (_super) {\n            __extends(JSONConnector, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of JSONConnector.\n             *\n             * @param {JSONConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            function JSONConnector(options) {\n                var _this = this;\n                var mergedOptions = merge(JSONConnector.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.converter = new JSONConverter(mergedOptions);\n                _this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    _this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the JSON source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConnector#load\n             * @emits JSONConnector#afterLoad\n             */\n            JSONConnector.prototype.load = function (eventDetail) {\n                var connector = this, converter = connector.converter, table = connector.table, _a = connector.options, data = _a.data, dataUrl = _a.dataUrl, dataModifier = _a.dataModifier;\n                connector.emit({\n                    type: 'load',\n                    data: data,\n                    detail: eventDetail,\n                    table: table\n                });\n                return Promise\n                    .resolve(dataUrl ?\n                    fetch(dataUrl).then(function (json) { return json.json(); }) :\n                    data || [])\n                    .then(function (data) {\n                    if (data) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ data: data });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector.setModifierOptions(dataModifier).then(function () { return data; });\n                })\n                    .then(function (data) {\n                    connector.emit({\n                        type: 'afterLoad',\n                        data: data,\n                        detail: eventDetail,\n                        table: table\n                    });\n                    return connector;\n                })['catch'](function (error) {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error: error,\n                        table: table\n                    });\n                    throw error;\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            JSONConnector.defaultOptions = {\n                data: [],\n                enablePolling: false,\n                dataRefreshRate: 0,\n                firstRowAsNames: true,\n                orientation: 'rows'\n            };\n            return JSONConnector;\n        }(DataConnector));\n        DataConnector.registerType('JSON', JSONConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/GoogleSheetsConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var merge = U.merge, uniqueKey = U.uniqueKey;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an Google Sheets to a table.\n         *\n         * @private\n         */\n        var GoogleSheetsConverter = /** @class */ (function (_super) {\n            __extends(GoogleSheetsConverter, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the GoogleSheetsConverter.\n             *\n             * @param {GoogleSheetsConverter.UserOptions} [options]\n             * Options for the GoogleSheetsConverter.\n             */\n            function GoogleSheetsConverter(options) {\n                var _this = this;\n                var mergedOptions = merge(GoogleSheetsConverter.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.columns = [];\n                _this.header = [];\n                _this.options = mergedOptions;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the parsing of the Google Sheet\n             *\n             * @param {GoogleSheetsConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits GoogleSheetsParser#parse\n             * @emits GoogleSheetsParser#afterParse\n             */\n            GoogleSheetsConverter.prototype.parse = function (options, eventDetail) {\n                var _a;\n                var converter = this, parseOptions = merge(converter.options, options);\n                var columns = (((_a = parseOptions.json) === null || _a === void 0 ? void 0 : _a.values) || []).map(function (column) { return column.slice(); });\n                if (columns.length === 0) {\n                    return false;\n                }\n                converter.header = [];\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n                // If beforeParse is defined, use it to modify the data\n                var beforeParse = parseOptions.beforeParse, json = parseOptions.json;\n                if (beforeParse && json) {\n                    columns = beforeParse(json.values);\n                }\n                var column;\n                converter.columns = columns;\n                for (var i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    column = columns[i];\n                    converter.header[i] = (parseOptions.firstRowAsNames ?\n                        \"\".concat(column.shift()) :\n                        uniqueKey());\n                    for (var j = 0, jEnd = column.length; j < jEnd; ++j) {\n                        if (column[j] && typeof column[j] === 'string') {\n                            var cellValue = converter.asGuessedType(column[j]);\n                            if (cellValue instanceof Date) {\n                                cellValue = cellValue.getTime();\n                            }\n                            converter.columns[i][j] = cellValue;\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n            };\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed Google Sheet\n             */\n            GoogleSheetsConverter.prototype.getTable = function () {\n                return DataConverter.getTableFromColumns(this.columns, this.header);\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            GoogleSheetsConverter.defaultOptions = __assign({}, DataConverter.defaultOptions);\n            return GoogleSheetsConverter;\n        }(DataConverter));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/GoogleSheetsConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/GoogleSheetsConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, GoogleSheetsConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *  - Jomar HÃ¸nsi\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests Google's response for error.\n         * @private\n         */\n        function isGoogleError(json) {\n            return (typeof json === 'object' && json &&\n                typeof json.error === 'object' && json.error &&\n                typeof json.error.code === 'number' &&\n                typeof json.error.message === 'string' &&\n                typeof json.error.status === 'string');\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @todo implement save, requires oauth2\n         */\n        var GoogleSheetsConnector = /** @class */ (function (_super) {\n            __extends(GoogleSheetsConnector, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of GoogleSheetsConnector\n             *\n             * @param {GoogleSheetsConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            function GoogleSheetsConnector(options) {\n                var _this = this;\n                var mergedOptions = merge(GoogleSheetsConnector.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.converter = new GoogleSheetsConverter(mergedOptions);\n                _this.options = mergedOptions;\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Loads data from a Google Spreadsheet.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<this>}\n             * Same connector instance with modified table.\n             */\n            GoogleSheetsConnector.prototype.load = function (eventDetail) {\n                var connector = this, converter = connector.converter, table = connector.table, _a = connector.options, dataModifier = _a.dataModifier, dataRefreshRate = _a.dataRefreshRate, enablePolling = _a.enablePolling, firstRowAsNames = _a.firstRowAsNames, googleAPIKey = _a.googleAPIKey, googleSpreadsheetKey = _a.googleSpreadsheetKey, url = GoogleSheetsConnector.buildFetchURL(googleAPIKey, googleSpreadsheetKey, connector.options);\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table: table,\n                    url: url\n                });\n                if (!URL.canParse(url)) {\n                    throw new Error('Invalid URL: ' + url);\n                }\n                return fetch(url)\n                    .then(function (response) { return (response.json()); })\n                    .then(function (json) {\n                    if (isGoogleError(json)) {\n                        throw new Error(json.error.message);\n                    }\n                    converter.parse({\n                        firstRowAsNames: firstRowAsNames,\n                        json: json\n                    });\n                    // If already loaded, clear the current table\n                    table.deleteColumns();\n                    table.setColumns(converter.getTable().getColumns());\n                    return connector.setModifierOptions(dataModifier);\n                })\n                    .then(function () {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table: table,\n                        url: url\n                    });\n                    // Polling\n                    if (enablePolling) {\n                        setTimeout(function () { return connector.load(); }, Math.max(dataRefreshRate || 0, 1) * 1000);\n                    }\n                    return connector;\n                })['catch'](function (error) {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error: error,\n                        table: table\n                    });\n                    throw error;\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            GoogleSheetsConnector.defaultOptions = {\n                googleAPIKey: '',\n                googleSpreadsheetKey: '',\n                enablePolling: false,\n                dataRefreshRate: 2,\n                firstRowAsNames: true\n            };\n            return GoogleSheetsConnector;\n        }(DataConnector));\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GoogleSheetsConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates GoogleSheets API v4 URL.\n             * @private\n             */\n            function buildFetchURL(apiKey, sheetKey, options) {\n                if (options === void 0) { options = {}; }\n                var url = new URL(\"https://sheets.googleapis.com/v4/spreadsheets/\".concat(sheetKey, \"/values/\"));\n                var range = options.onlyColumnNames ?\n                    'A1:Z1' : buildQueryRange(options);\n                url.pathname += range;\n                var searchParams = url.searchParams;\n                searchParams.set('alt', 'json');\n                if (!options.onlyColumnNames) {\n                    searchParams.set('dateTimeRenderOption', 'FORMATTED_STRING');\n                    searchParams.set('majorDimension', 'COLUMNS');\n                    searchParams.set('valueRenderOption', 'UNFORMATTED_VALUE');\n                }\n                searchParams.set('prettyPrint', 'false');\n                searchParams.set('key', apiKey);\n                return url.href;\n            }\n            GoogleSheetsConnector.buildFetchURL = buildFetchURL;\n            /**\n             * Creates sheets range.\n             * @private\n             */\n            function buildQueryRange(options) {\n                if (options === void 0) { options = {}; }\n                var endColumn = options.endColumn, endRow = options.endRow, googleSpreadsheetRange = options.googleSpreadsheetRange, startColumn = options.startColumn, startRow = options.startRow;\n                return googleSpreadsheetRange || ((alphabet[startColumn || 0] || 'A') +\n                    (Math.max((startRow || 0), 0) + 1) +\n                    ':' +\n                    (alphabet[pick(endColumn, 25)] || 'Z') +\n                    (endRow ?\n                        Math.max(endRow, 0) :\n                        'Z'));\n            }\n            GoogleSheetsConnector.buildQueryRange = buildQueryRange;\n        })(GoogleSheetsConnector || (GoogleSheetsConnector = {}));\n        DataConnector.registerType('GoogleSheets', GoogleSheetsConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/HTMLTableConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var merge = U.merge;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Row equal\n         */\n        function isRowEqual(row1, row2) {\n            var i = row1.length;\n            if (row2.length === i) {\n                while (--i) {\n                    if (row1[i] !== row2[i]) {\n                        return false;\n                    }\n                }\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an HTML table to a table.\n         *\n         * @private\n         */\n        var HTMLTableConverter = /** @class */ (function (_super) {\n            __extends(HTMLTableConverter, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the HTMLTableConverter.\n             *\n             * @param {HTMLTableConverter.UserOptions} [options]\n             * Options for the HTMLTableConverter.\n             */\n            function HTMLTableConverter(options) {\n                var _this = this;\n                var mergedOptions = merge(HTMLTableConverter.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.columns = [];\n                _this.headers = [];\n                _this.options = mergedOptions;\n                if (mergedOptions.tableElement) {\n                    _this.tableElement = mergedOptions.tableElement;\n                    _this.tableElementID = mergedOptions.tableElement.id;\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Exports the dataconnector as an HTML string, using the options\n             * provided on      *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {HTMLTableConnector.ExportOptions} [options]\n             * Options that override default or existing export options.\n             *\n             * @return {string}\n             * HTML from the current dataTable.\n             */\n            HTMLTableConverter.prototype.export = function (connector, options) {\n                if (options === void 0) { options = this.options; }\n                var exportNames = (options.firstRowAsNames !== false), useMultiLevelHeaders = options.useMultiLevelHeaders;\n                var columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), htmlRows = [], columnsCount = columnNames.length;\n                var rowArray = [];\n                var tableHead = '';\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    var subcategories = [];\n                    // If using multilevel headers, the first value\n                    // of each column is a subcategory\n                    if (useMultiLevelHeaders) {\n                        for (var _i = 0, columnNames_1 = columnNames; _i < columnNames_1.length; _i++) {\n                            var name_1 = columnNames_1[_i];\n                            var subhead = (columns[name_1].shift() || '').toString();\n                            subcategories.push(subhead);\n                        }\n                        tableHead = this.getTableHeaderHTML(columnNames, subcategories, options);\n                    }\n                    else {\n                        tableHead = this.getTableHeaderHTML(void 0, columnNames, options);\n                    }\n                }\n                for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    var columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    for (var rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        var cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Alternative: Datatype from HTML attribute with\n                        // connector.whatIs(columnName)\n                        if (!(typeof cellValue === 'string' ||\n                            typeof cellValue === 'number' ||\n                            typeof cellValue === 'undefined')) {\n                            cellValue = (cellValue || '').toString();\n                        }\n                        rowArray[rowIndex][columnIndex] = this.getCellHTMLFromValue(columnIndex ? 'td' : 'th', null, columnIndex ? '' : 'scope=\"row\"', cellValue);\n                        // On the final column, push the row to the array\n                        if (columnIndex === columnsCount - 1) {\n                            htmlRows.push('<tr>' +\n                                rowArray[rowIndex].join('') +\n                                '</tr>');\n                        }\n                    }\n                }\n                var caption = '';\n                // Add table caption\n                // Current exportdata falls back to chart title\n                // but that should probably be handled elsewhere?\n                if (options.tableCaption) {\n                    caption = '<caption class=\"highcharts-table-caption\">' +\n                        options.tableCaption +\n                        '</caption>';\n                }\n                return ('<table>' +\n                    caption +\n                    tableHead +\n                    '<tbody>' +\n                    htmlRows.join('') +\n                    '</tbody>' +\n                    '</table>');\n            };\n            /**\n             * Get table cell markup from row data.\n             */\n            HTMLTableConverter.prototype.getCellHTMLFromValue = function (tag, classes, attrs, value, decimalPoint) {\n                var val = value, className = 'text' + (classes ? ' ' + classes : '');\n                // Convert to string if number\n                if (typeof val === 'number') {\n                    val = val.toString();\n                    if (decimalPoint === ',') {\n                        val = val.replace('.', decimalPoint);\n                    }\n                    className = 'number';\n                }\n                else if (!value) {\n                    val = '';\n                    className = 'empty';\n                }\n                return '<' + tag + (attrs ? ' ' + attrs : '') +\n                    ' class=\"' + className + '\">' +\n                    val + '</' + tag + '>';\n            };\n            /**\n             * Get table header markup from row data.\n             */\n            HTMLTableConverter.prototype.getTableHeaderHTML = function (topheaders, subheaders, options) {\n                if (topheaders === void 0) { topheaders = []; }\n                if (subheaders === void 0) { subheaders = []; }\n                if (options === void 0) { options = this.options; }\n                var useMultiLevelHeaders = options.useMultiLevelHeaders, useRowspanHeaders = options.useRowspanHeaders;\n                var html = '<thead>', i = 0, len = subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n                // Clean up multiple table headers. Chart.getDataRows() returns two\n                // levels of headers when using multilevel, not merged. We need to\n                // merge identical headers, remove redundant headers, and keep it\n                // all marked up nicely.\n                if (useMultiLevelHeaders &&\n                    topheaders &&\n                    subheaders &&\n                    !isRowEqual(topheaders, subheaders)) {\n                    html += '<tr>';\n                    for (; i < len; ++i) {\n                        cur = topheaders[i];\n                        next = topheaders[i + 1];\n                        if (cur === next) {\n                            ++curColspan;\n                        }\n                        else if (curColspan) {\n                            // Ended colspan\n                            // Add cur to HTML with colspan.\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\" ' +\n                                'colspan=\"' + (curColspan + 1) + '\"', cur);\n                            curColspan = 0;\n                        }\n                        else {\n                            // Cur is standalone. If it is same as sublevel,\n                            // remove sublevel and add just toplevel.\n                            if (cur === subheaders[i]) {\n                                if (useRowspanHeaders) {\n                                    rowspan = 2;\n                                    delete subheaders[i];\n                                }\n                                else {\n                                    rowspan = 1;\n                                    subheaders[i] = '';\n                                }\n                            }\n                            else {\n                                rowspan = 1;\n                            }\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\"' +\n                                (rowspan > 1 ?\n                                    ' valign=\"top\" rowspan=\"' + rowspan + '\"' :\n                                    ''), cur);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                // Add the subheaders (the only headers if not using multilevels)\n                if (subheaders) {\n                    html += '<tr>';\n                    for (i = 0, len = subheaders.length; i < len; ++i) {\n                        if (typeof subheaders[i] !== 'undefined') {\n                            html += this.getCellHTMLFromValue('th', null, 'scope=\"col\"', subheaders[i]);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</thead>';\n                return html;\n            };\n            /**\n             * Initiates the parsing of the HTML table\n             *\n             * @param {HTMLTableConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             * @emits HTMLTableParser#parseError\n             */\n            HTMLTableConverter.prototype.parse = function (options, eventDetail) {\n                var converter = this, columns = [], headers = [], parseOptions = merge(converter.options, options), endRow = parseOptions.endRow, startColumn = parseOptions.startColumn, endColumn = parseOptions.endColumn, firstRowAsNames = parseOptions.firstRowAsNames, tableHTML = parseOptions.tableElement || this.tableElement;\n                if (!(tableHTML instanceof HTMLElement)) {\n                    converter.emit({\n                        type: 'parseError',\n                        columns: columns,\n                        detail: eventDetail,\n                        headers: headers,\n                        error: 'Not a valid HTML Table'\n                    });\n                    return;\n                }\n                converter.tableElement = tableHTML;\n                converter.tableElementID = tableHTML.id;\n                this.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                var rows = tableHTML.getElementsByTagName('tr'), rowsCount = rows.length;\n                var rowIndex = 0, item, startRow = parseOptions.startRow;\n                // Insert headers from the first row\n                if (firstRowAsNames && rowsCount) {\n                    var items = rows[0].children, itemsLength = items.length;\n                    for (var i = startColumn; i < itemsLength; i++) {\n                        if (i > endColumn) {\n                            break;\n                        }\n                        item = items[i];\n                        if (item.tagName === 'TD' ||\n                            item.tagName === 'TH') {\n                            headers.push(item.innerHTML);\n                        }\n                    }\n                    startRow++;\n                }\n                while (rowIndex < rowsCount) {\n                    if (rowIndex >= startRow && rowIndex <= endRow) {\n                        var columnsInRow = rows[rowIndex].children, columnsInRowLength = columnsInRow.length;\n                        var columnIndex = 0;\n                        while (columnIndex < columnsInRowLength) {\n                            var relativeColumnIndex = columnIndex - startColumn, row = columns[relativeColumnIndex];\n                            item = columnsInRow[columnIndex];\n                            if ((item.tagName === 'TD' ||\n                                item.tagName === 'TH') &&\n                                (columnIndex >= startColumn &&\n                                    columnIndex <= endColumn)) {\n                                if (!columns[relativeColumnIndex]) {\n                                    columns[relativeColumnIndex] = [];\n                                }\n                                var cellValue = converter.asGuessedType(item.innerHTML);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                columns[relativeColumnIndex][rowIndex - startRow] = cellValue;\n                                // Loop over all previous indices and make sure\n                                // they are nulls, not undefined.\n                                var i = 1;\n                                while (rowIndex - startRow >= i &&\n                                    row[rowIndex - startRow - i] === void 0) {\n                                    row[rowIndex - startRow - i] = null;\n                                    i++;\n                                }\n                            }\n                            columnIndex++;\n                        }\n                    }\n                    rowIndex++;\n                }\n                this.columns = columns;\n                this.headers = headers;\n                this.emit({\n                    type: 'afterParse',\n                    columns: columns,\n                    detail: eventDetail,\n                    headers: headers\n                });\n            };\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed HTML table\n             */\n            HTMLTableConverter.prototype.getTable = function () {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options\n             */\n            HTMLTableConverter.defaultOptions = __assign(__assign({}, DataConverter.defaultOptions), { useRowspanHeaders: true, useMultiLevelHeaders: true });\n            return HTMLTableConverter;\n        }(DataConverter));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/HTMLTableConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Globals.js'], _modules['Data/Converters/HTMLTableConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, H, HTMLTableConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var win = H.win;\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a data connector from an HTML table.\n         *\n         * @private\n         */\n        var HTMLTableConnector = /** @class */ (function (_super) {\n            __extends(HTMLTableConnector, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of HTMLTableConnector.\n             *\n             * @param {HTMLTableConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            function HTMLTableConnector(options) {\n                var _this = this;\n                var mergedOptions = merge(HTMLTableConnector.defaultOptions, options);\n                _this = _super.call(this, mergedOptions) || this;\n                _this.converter = new HTMLTableConverter(mergedOptions);\n                _this.options = mergedOptions;\n                return _this;\n            }\n            /**\n             * Initiates creating the dataconnector from the HTML table\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits HTMLTableConnector#load\n             * @emits HTMLTableConnector#afterLoad\n             * @emits HTMLTableConnector#loadError\n             */\n            HTMLTableConnector.prototype.load = function (eventDetail) {\n                var connector = this, converter = connector.converter, table = connector.table, _a = connector.options, dataModifier = _a.dataModifier, tableHTML = _a.table;\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table: table,\n                    tableElement: connector.tableElement\n                });\n                var tableElement;\n                if (typeof tableHTML === 'string') {\n                    connector.tableID = tableHTML;\n                    tableElement = win.document.getElementById(tableHTML);\n                }\n                else {\n                    tableElement = tableHTML;\n                    connector.tableID = tableElement.id;\n                }\n                connector.tableElement = tableElement || void 0;\n                if (!connector.tableElement) {\n                    var error = 'HTML table not provided, or element with ID not found';\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error: error,\n                        table: table\n                    });\n                    return Promise.reject(new Error(error));\n                }\n                converter.parse(merge({ tableElement: connector.tableElement }, connector.options), eventDetail);\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                table.setColumns(converter.getTable().getColumns());\n                return connector\n                    .setModifierOptions(dataModifier)\n                    .then(function () {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table: table,\n                        tableElement: connector.tableElement\n                    });\n                    return connector;\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            HTMLTableConnector.defaultOptions = {\n                table: ''\n            };\n            return HTMLTableConnector;\n        }(DataConnector));\n        DataConnector.registerType('HTMLTable', HTMLTableConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConnector;\n    });\n    _registerModule(_modules, 'Data/Modifiers/ChainModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n            function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n            return new (P || (P = Promise))(function (resolve, reject) {\n                function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n                function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n                function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n                step((generator = generator.apply(thisArg, _arguments || [])).next());\n            });\n        };\n        var __generator = (this && this.__generator) || function (thisArg, body) {\n            var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n            return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n            function verb(n) { return function (v) { return step([n, v]); }; }\n            function step(op) {\n                if (f) throw new TypeError(\"Generator is already executing.\");\n                while (g && (g = 0, op[0] && (_ = 0)), _) try {\n                    if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n                    if (y = 0, t) op = [op[0] & 2, t.value];\n                    switch (op[0]) {\n                        case 0: case 1: t = op; break;\n                        case 4: _.label++; return { value: op[1], done: false };\n                        case 5: _.label++; y = op[1]; op = [0]; continue;\n                        case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                        default:\n                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                            if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                            if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                            if (t[2]) _.ops.pop();\n                            _.trys.pop(); continue;\n                    }\n                    op = body.call(thisArg, _);\n                } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n                if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n            }\n        };\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Modifies a table with the help of modifiers in an ordered chain.\n         *\n         */\n        var ChainModifier = /** @class */ (function (_super) {\n            __extends(ChainModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the modifier chain.\n             *\n             * @param {Partial<ChainModifier.Options>} [options]\n             * Options to configure the modifier chain.\n             *\n             * @param {...DataModifier} [chain]\n             * Ordered chain of modifiers.\n             */\n            function ChainModifier(options) {\n                var chain = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    chain[_i - 1] = arguments[_i];\n                }\n                var _this = _super.call(this) || this;\n                _this.chain = chain;\n                _this.options = merge(ChainModifier.defaultOptions, options);\n                var optionsChain = _this.options.chain || [];\n                for (var i = 0, iEnd = optionsChain.length, modifierOptions = void 0, ModifierClass = void 0; i < iEnd; ++i) {\n                    modifierOptions = optionsChain[i];\n                    if (!modifierOptions.type) {\n                        continue;\n                    }\n                    ModifierClass = DataModifier.types[modifierOptions.type];\n                    if (ModifierClass) {\n                        chain.push(new ModifierClass(modifierOptions));\n                    }\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a configured modifier to the end of the modifier chain. Please note,\n             * that the modifier can be added multiple times.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to add.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            ChainModifier.prototype.add = function (modifier, eventDetail) {\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier: modifier\n                });\n                this.chain.push(modifier);\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier: modifier\n                });\n            };\n            /**\n             * Clears all modifiers from the chain.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            ChainModifier.prototype.clear = function (eventDetail) {\n                this.emit({\n                    type: 'clearChain',\n                    detail: eventDetail\n                });\n                this.chain.length = 0;\n                this.emit({\n                    type: 'afterClearChain',\n                    detail: eventDetail\n                });\n            };\n            /**\n             * Applies several modifications to the table and returns a modified copy of\n             * the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            ChainModifier.prototype.modify = function (table, eventDetail) {\n                return __awaiter(this, void 0, void 0, function () {\n                    var modifiers, modified, i, iEnd, error_1;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                modifiers = (this.options.reverse ?\n                                    this.chain.slice().reverse() :\n                                    this.chain.slice());\n                                if (table.modified === table) {\n                                    table.modified = table.clone(false, eventDetail);\n                                }\n                                modified = table;\n                                i = 0, iEnd = modifiers.length;\n                                _a.label = 1;\n                            case 1:\n                                if (!(i < iEnd)) return [3 /*break*/, 7];\n                                _a.label = 2;\n                            case 2:\n                                _a.trys.push([2, 4, , 5]);\n                                return [4 /*yield*/, modifiers[i].modify(modified, eventDetail)];\n                            case 3:\n                                _a.sent();\n                                return [3 /*break*/, 5];\n                            case 4:\n                                error_1 = _a.sent();\n                                this.emit({\n                                    type: 'error',\n                                    detail: eventDetail,\n                                    table: table\n                                });\n                                throw error_1;\n                            case 5:\n                                modified = modified.modified;\n                                _a.label = 6;\n                            case 6:\n                                ++i;\n                                return [3 /*break*/, 1];\n                            case 7:\n                                table.modified = modified;\n                                return [2 /*return*/, table];\n                        }\n                    });\n                });\n            };\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            ChainModifier.prototype.modifyCell = function (table, columnName, rowIndex, cellValue, eventDetail) {\n                var modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain);\n                if (modifiers.length) {\n                    var clone = table.clone();\n                    for (var i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyCell(clone, columnName, rowIndex, cellValue, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            ChainModifier.prototype.modifyColumns = function (table, columns, rowIndex, eventDetail) {\n                var modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    var clone = table.clone();\n                    for (var i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyColumns(clone, columns, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            ChainModifier.prototype.modifyRows = function (table, rows, rowIndex, eventDetail) {\n                var modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    var clone = table.clone();\n                    for (var i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyRows(clone, rows, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            };\n            /**\n             * Applies several modifications to the table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table as a reference.\n             *\n             * @emits ChainDataModifier#execute\n             * @emits ChainDataModifier#afterExecute\n             */\n            ChainModifier.prototype.modifyTable = function (table, eventDetail) {\n                var chain = this;\n                chain.emit({\n                    type: 'modify',\n                    detail: eventDetail,\n                    table: table\n                });\n                var modifiers = (chain.options.reverse ?\n                    chain.chain.reverse() :\n                    chain.chain.slice());\n                var modified = table.modified;\n                for (var i = 0, iEnd = modifiers.length, modifier = void 0; i < iEnd; ++i) {\n                    modifier = modifiers[i];\n                    modified = modifier.modifyTable(modified, eventDetail).modified;\n                }\n                table.modified = modified;\n                chain.emit({\n                    type: 'afterModify',\n                    detail: eventDetail,\n                    table: table\n                });\n                return table;\n            };\n            /**\n             * Removes a configured modifier from all positions in the modifier chain.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to remove.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            ChainModifier.prototype.remove = function (modifier, eventDetail) {\n                var modifiers = this.chain;\n                this.emit({\n                    type: 'removeModifier',\n                    detail: eventDetail,\n                    modifier: modifier\n                });\n                modifiers.splice(modifiers.indexOf(modifier), 1);\n                this.emit({\n                    type: 'afterRemoveModifier',\n                    detail: eventDetail,\n                    modifier: modifier\n                });\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default option for the ordered modifier chain.\n             */\n            ChainModifier.defaultOptions = {\n                type: 'Chain'\n            };\n            return ChainModifier;\n        }(DataModifier));\n        DataModifier.registerType('Chain', ChainModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChainModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/InvertModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Inverts columns and rows in a table.\n         *\n         * @private\n         */\n        var InvertModifier = /** @class */ (function (_super) {\n            __extends(InvertModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the invert modifier.\n             *\n             * @param {Partial<InvertModifier.Options>} [options]\n             * Options to configure the invert modifier.\n             */\n            function InvertModifier(options) {\n                var _this = _super.call(this) || this;\n                _this.options = merge(InvertModifier.defaultOptions, options);\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            InvertModifier.prototype.modifyCell = function (table, columnName, rowIndex, cellValue, eventDetail) {\n                var modified = table.modified, modifiedRowIndex = modified.getRowIndexBy('columnNames', columnName);\n                if (typeof modifiedRowIndex === 'undefined') {\n                    modified.setColumns(this.modifyTable(table.clone()).getColumns(), void 0, eventDetail);\n                }\n                else {\n                    modified.setCell(\"\".concat(rowIndex), modifiedRowIndex, cellValue, eventDetail);\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            InvertModifier.prototype.modifyColumns = function (table, columns, rowIndex, eventDetail) {\n                var modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                var columnNames = table.getColumnNames(), reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                columnNames = Object.keys(columns);\n                for (var i = 0, iEnd = columnNames.length, column = void 0, columnName = void 0, modifiedRowIndex = void 0; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    modifiedRowIndex = (modified.getRowIndexBy('columnNames', columnName) ||\n                        modified.getRowCount());\n                    for (var j = 0, j2 = rowIndex, jEnd = column.length; j < jEnd; ++j, ++j2) {\n                        modified.setCell(\"\".concat(j2), modifiedRowIndex, column[j], eventDetail);\n                    }\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            InvertModifier.prototype.modifyRows = function (table, rows, rowIndex, eventDetail) {\n                var columnNames = table.getColumnNames(), modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                var reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (var i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                for (var i = 0, i2 = rowIndex, iEnd = rows.length, row = void 0; i < iEnd; ++i, ++i2) {\n                    row = rows[i];\n                    if (row instanceof Array) {\n                        modified.setColumn(\"\".concat(i2), row);\n                    }\n                    else {\n                        for (var j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            modified.setCell(\"\".concat(i2), j, row[columnNames[j]], eventDetail);\n                        }\n                    }\n                }\n                return table;\n            };\n            /**\n             * Inverts rows and columns in the table.\n             *\n             * @param {DataTable} table\n             * Table to invert.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with inverted `modified` property as a reference.\n             */\n            InvertModifier.prototype.modifyTable = function (table, eventDetail) {\n                var modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table: table });\n                var modified = table.modified;\n                if (table.hasColumns(['columnNames'])) { // Inverted table\n                    var columnNames = ((table.deleteColumns(['columnNames']) || {})\n                        .columnNames || []).map(function (column) { return \"\".concat(column); }), columns = {};\n                    for (var i = 0, iEnd = table.getRowCount(), row = void 0; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[columnNames[i]] = row;\n                        }\n                    }\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                else { // Regular table\n                    var columns = {};\n                    for (var i = 0, iEnd = table.getRowCount(), row = void 0; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[\"\".concat(i)] = row;\n                        }\n                    }\n                    columns.columnNames = table.getColumnNames();\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table: table });\n                return table;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options for the invert modifier.\n             */\n            InvertModifier.defaultOptions = {\n                type: 'Invert'\n            };\n            return InvertModifier;\n        }(DataModifier));\n        DataModifier.registerType('Invert', InvertModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return InvertModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/MathModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/Formula/FormulaParser.js'], _modules['Data/Formula/FormulaProcessor.js']], function (DataModifier, FormulaParser, FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Replaces formula strings in a table with calculated values.\n         *\n         * @class\n         * @name Highcharts.DataModifier.types.MathModifier\n         * @augments Highcharts.DataModifier\n         */\n        var MathModifier = /** @class */ (function (_super) {\n            __extends(MathModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            function MathModifier(options) {\n                var _this = _super.call(this) || this;\n                _this.options = __assign(__assign({}, MathModifier.defaultOptions), options);\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            MathModifier.prototype.modifyTable = function (table, eventDetail) {\n                var modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table: table });\n                var alternativeSeparators = modifier.options.alternativeSeparators, formulaColumns = (modifier.options.formulaColumns ||\n                    table.getColumnNames()), modified = table.modified;\n                for (var i = 0, iEnd = formulaColumns.length, columnName = void 0; i < iEnd; ++i) {\n                    columnName = formulaColumns[i];\n                    if (formulaColumns.indexOf(columnName) >= 0) {\n                        modified.setColumn(columnName, modifier.processColumn(table, columnName));\n                    }\n                }\n                var columnFormulas = (modifier.options.columnFormulas || []);\n                for (var i = 0, iEnd = columnFormulas.length, columnFormula = void 0, formula = void 0; i < iEnd; ++i) {\n                    columnFormula = columnFormulas[i];\n                    formula = FormulaParser.parseFormula(columnFormula.formula, alternativeSeparators);\n                    modified.setColumn(columnFormula.column, modifier.processColumnFormula(formula, table, columnFormula.rowStart, columnFormula.rowEnd));\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table: table });\n                return table;\n            };\n            /**\n             * Process a column by replacing formula strings with calculated values.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to extract column from and use as reference.\n             *\n             * @param {string} columnName\n             * Name of column to process.\n             *\n             * @param {number} rowIndex\n             * Row index to start the replacing process from.\n             *\n             * @return {Highcharts.DataTableColumn}\n             * Returns the processed table column.\n             */\n            MathModifier.prototype.processColumn = function (table, columnName, rowIndex) {\n                if (rowIndex === void 0) { rowIndex = 0; }\n                var alternativeSeparators = this.options.alternativeSeparators, column = (table.getColumn(columnName, true) || [])\n                    .slice(rowIndex > 0 ? rowIndex : 0);\n                for (var i = 0, iEnd = column.length, cacheFormula = [], cacheString = '', cell = void 0; i < iEnd; ++i) {\n                    cell = column[i];\n                    if (typeof cell === 'string' &&\n                        cell[0] === '=') {\n                        try {\n                            // Use cache while formula string is repetitive\n                            cacheFormula = (cacheString === cell ?\n                                cacheFormula :\n                                FormulaParser.parseFormula(cell.substring(1), alternativeSeparators));\n                            // Process parsed formula string\n                            column[i] =\n                                FormulaProcessor.processFormula(cacheFormula, table);\n                        }\n                        catch (_a) {\n                            column[i] = NaN;\n                        }\n                    }\n                }\n                return column;\n            };\n            /**\n             * Process a column by replacing cell values with calculated values from a\n             * given formula.\n             *\n             * @private\n             *\n             * @param {Highcharts.Formula} formula\n             * Formula to use for processing.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to extract column from and use as reference.\n             *\n             * @param {number} rowStart\n             * Row index to start the replacing process from.\n             *\n             * @param {number} rowEnd\n             * Row index to end the replacing process.\n             *\n             * @return {Highcharts.DataTableColumn}\n             * Returns the processed table column.\n             */\n            MathModifier.prototype.processColumnFormula = function (formula, table, rowStart, rowEnd) {\n                if (rowStart === void 0) { rowStart = 0; }\n                if (rowEnd === void 0) { rowEnd = table.getRowCount(); }\n                rowStart = rowStart >= 0 ? rowStart : 0;\n                rowEnd = rowEnd >= 0 ? rowEnd : table.getRowCount() + rowEnd;\n                var column = [], modified = table.modified;\n                for (var i = 0, iEnd = (rowEnd - rowStart); i < iEnd; ++i) {\n                    try {\n                        column[i] = FormulaProcessor.processFormula(formula, modified);\n                    }\n                    catch (_a) {\n                        column[i] = NaN;\n                    }\n                    finally {\n                        formula = FormulaProcessor.translateReferences(formula, 0, 1);\n                    }\n                }\n                return column;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options of MathModifier.\n             * @private\n             */\n            MathModifier.defaultOptions = {\n                type: 'Math',\n                alternativeSeparators: false\n            };\n            return MathModifier;\n        }(DataModifier));\n        DataModifier.registerType('Math', MathModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MathModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/RangeModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Filters out table rows with a specific value range.\n         *\n         */\n        var RangeModifier = /** @class */ (function (_super) {\n            __extends(RangeModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            function RangeModifier(options) {\n                var _this = _super.call(this) || this;\n                _this.options = merge(RangeModifier.defaultOptions, options);\n                return _this;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Replaces table rows with filtered rows.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            RangeModifier.prototype.modifyTable = function (table, eventDetail) {\n                var modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table: table });\n                var indexes = [];\n                var _a = modifier.options, additive = _a.additive, ranges = _a.ranges, strict = _a.strict;\n                if (ranges.length) {\n                    var modified = table.modified;\n                    var columns = table.getColumns(), rows = [];\n                    for (var i = 0, iEnd = ranges.length, range = void 0, rangeColumn = void 0; i < iEnd; ++i) {\n                        range = ranges[i];\n                        if (strict &&\n                            typeof range.minValue !== typeof range.maxValue) {\n                            continue;\n                        }\n                        if (i > 0 && !additive) {\n                            modified.deleteRows();\n                            modified.setRows(rows);\n                            modified.setOriginalRowIndexes(indexes, true);\n                            columns = modified.getColumns();\n                            rows = [];\n                            indexes = [];\n                        }\n                        rangeColumn = (columns[range.column] || []);\n                        for (var j = 0, jEnd = rangeColumn.length, cell = void 0, row = void 0, originalRowIndex = void 0; j < jEnd; ++j) {\n                            cell = rangeColumn[j];\n                            switch (typeof cell) {\n                                default:\n                                    continue;\n                                case 'boolean':\n                                case 'number':\n                                case 'string':\n                                    break;\n                            }\n                            if (strict &&\n                                typeof cell !== typeof range.minValue) {\n                                continue;\n                            }\n                            if (cell >= range.minValue &&\n                                cell <= range.maxValue) {\n                                if (additive) {\n                                    row = table.getRow(j);\n                                    originalRowIndex = table.getOriginalRowIndex(j);\n                                }\n                                else {\n                                    row = modified.getRow(j);\n                                    originalRowIndex = modified.getOriginalRowIndex(j);\n                                }\n                                if (row) {\n                                    rows.push(row);\n                                    indexes.push(originalRowIndex);\n                                }\n                            }\n                        }\n                    }\n                    modified.deleteRows();\n                    modified.setRows(rows);\n                    modified.setOriginalRowIndexes(indexes);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table: table });\n                return table;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options for the range modifier.\n             */\n            RangeModifier.defaultOptions = {\n                type: 'Range',\n                ranges: []\n            };\n            return RangeModifier;\n        }(DataModifier));\n        DataModifier.registerType('Range', RangeModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RangeModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/SortModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var merge = U.merge;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Sort table rows according to values of a column.\n         *\n         */\n        var SortModifier = /** @class */ (function (_super) {\n            __extends(SortModifier, _super);\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeDataModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            function SortModifier(options) {\n                var _this = _super.call(this) || this;\n                _this.options = merge(SortModifier.defaultOptions, options);\n                return _this;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            SortModifier.ascending = function (a, b) {\n                return ((a || 0) < (b || 0) ? -1 :\n                    (a || 0) > (b || 0) ? 1 :\n                        0);\n            };\n            SortModifier.descending = function (a, b) {\n                return ((b || 0) < (a || 0) ? -1 :\n                    (b || 0) > (a || 0) ? 1 :\n                        0);\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns index and row for sort reference.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table with rows to reference.\n             *\n             * @return {Array<SortModifier.RowReference>}\n             * Array of row references.\n             */\n            SortModifier.prototype.getRowReferences = function (table) {\n                var rows = table.getRows(), rowReferences = [];\n                for (var i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rowReferences.push({\n                        index: i,\n                        row: rows[i]\n                    });\n                }\n                return rowReferences;\n            };\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            SortModifier.prototype.modifyCell = function (table, columnName, rowIndex, cellValue, eventDetail) {\n                var modifier = this, _a = modifier.options, orderByColumn = _a.orderByColumn, orderInColumn = _a.orderInColumn;\n                if (columnName === orderByColumn) {\n                    if (orderInColumn) {\n                        table.modified.setCell(columnName, rowIndex, cellValue);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            SortModifier.prototype.modifyColumns = function (table, columns, rowIndex, eventDetail) {\n                var modifier = this, _a = modifier.options, orderByColumn = _a.orderByColumn, orderInColumn = _a.orderInColumn, columnNames = Object.keys(columns);\n                if (columnNames.indexOf(orderByColumn) > -1) {\n                    if (orderInColumn &&\n                        columns[columnNames[0]].length) {\n                        table.modified.setColumns(columns, rowIndex);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            };\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            SortModifier.prototype.modifyRows = function (table, rows, rowIndex, eventDetail) {\n                var modifier = this, _a = modifier.options, orderByColumn = _a.orderByColumn, orderInColumn = _a.orderInColumn;\n                if (orderInColumn &&\n                    rows.length) {\n                    table.modified.setRows(rows, rowIndex);\n                    table.modified.setColumn(orderInColumn, modifier\n                        .modifyTable(new DataTable({\n                        columns: table\n                            .getColumns([orderByColumn, orderInColumn])\n                    }))\n                        .modified\n                        .getColumn(orderInColumn));\n                }\n                else {\n                    modifier.modifyTable(table, eventDetail);\n                }\n                return table;\n            };\n            /**\n             * Sorts rows in the table.\n             *\n             * @param {DataTable} table\n             * Table to sort in.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            SortModifier.prototype.modifyTable = function (table, eventDetail) {\n                var _a;\n                var modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table: table });\n                var columnNames = table.getColumnNames(), rowCount = table.getRowCount(), rowReferences = this.getRowReferences(table), _b = modifier.options, direction = _b.direction, orderByColumn = _b.orderByColumn, orderInColumn = _b.orderInColumn, compare = (direction === 'asc' ?\n                    SortModifier.ascending :\n                    SortModifier.descending), orderByColumnIndex = columnNames.indexOf(orderByColumn), modified = table.modified;\n                if (orderByColumnIndex !== -1) {\n                    rowReferences.sort(function (a, b) { return compare(a.row[orderByColumnIndex], b.row[orderByColumnIndex]); });\n                }\n                if (orderInColumn) {\n                    var column = [];\n                    for (var i = 0; i < rowCount; ++i) {\n                        column[rowReferences[i].index] = i;\n                    }\n                    modified.setColumns((_a = {}, _a[orderInColumn] = column, _a));\n                }\n                else {\n                    var originalIndexes = [];\n                    var rows = [];\n                    var rowReference = void 0;\n                    for (var i = 0; i < rowCount; ++i) {\n                        rowReference = rowReferences[i];\n                        originalIndexes.push(modified.getOriginalRowIndex(rowReference.index));\n                        rows.push(rowReference.row);\n                    }\n                    modified.setRows(rows, 0);\n                    modified.setOriginalRowIndexes(originalIndexes);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table: table });\n                return table;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Default options to group table rows.\n             */\n            SortModifier.defaultOptions = {\n                type: 'Sort',\n                direction: 'desc',\n                orderByColumn: 'y'\n            };\n            return SortModifier;\n        }(DataModifier));\n        DataModifier.registerType('Sort', SortModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortModifier;\n    });\n    _registerModule(_modules, 'masters/modules/data-tools.src.js', [_modules['Core/Globals.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/DataCursor.js'], _modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataPool.js'], _modules['Data/DataTable.js'], _modules['Data/Formula/Formula.js']], function (Highcharts, DataConnector, DataConverter, DataCursor, DataModifier, DataPool, DataTable, Formula) {\n\n        var G = Highcharts;\n        G.DataConnector = G.DataConnector || DataConnector;\n        G.DataConverter = G.DataConverter || DataConverter;\n        G.DataCursor = G.DataCursor || DataCursor;\n        G.DataModifier = G.DataModifier || DataModifier;\n        G.DataPool = G.DataPool || DataPool;\n        G.DataTable = G.DataTable || DataTable;\n        G.Formula = G.Formula || Formula;\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","U","DataModifier","addEvent","fireEvent","merge","prototype","benchmark","dataTable","options","results","modifier","execute","modifyTable","emit","type","iterations","on","length","times","startTime","endTime","window","performance","now","push","e","modify","table","eventDetail","Promise","resolve","reject","modified","clone","modifyCell","columnName","rowIndex","cellValue","modifyColumns","columns","modifyRows","rows","callback","types","registerType","key","DataModifierClass","defined","uniqueKey","DataTable","autoId","id","rowCount","versionTag","columnNames","Object","keys","thisColumns","i","iEnd","column","slice","Math","max","isNull","row","NULL","Array","skipColumns","tableOptions","tableClone","originalRowIndexes","localRowIndexes","deleteColumns","deletedColumns","modifiedColumns","deleteRowIndexReferences","deleteRows","deletedRows","modifiedRows","deletedCells","splice","j","jEnd","getCell","getCellAsBoolean","getCellAsNumber","useNaN","isNaN","parseFloat","concat","getCellAsString","getColumn","asReference","getColumns","getColumnAsNumbers","columnAsNumber","columnLength","getColumnNames","tableColumns","getLocalRowIndex","originalRowIndex","getModifier","getOriginalRowIndex","getRow","getRows","getRowCount","getRowIndexBy","rowIndexOffset","indexOf","getRowObject","getRowObjects","i2","min","_i","columnNames_1","columnNames_2","getVersionTag","hasColumns","hasRowWith","renameColumn","newColumnName","setCell","setColumn","_a","setColumns","tableModifier","reset","tableColumn","i_1","iEnd_1","tableColumnNames","setModifier","promise","then","error","setOriginalRowIndexes","omitLocalRowIndexes","modifiedIndexes","originalIndex","setRow","setRows","rowColumnNames","rowColumnName","indexRowCount","version","DataConnector","pick","metadata","defineProperty","get","polling","enumerable","configurable","describeColumn","name","columnMeta","connector","describeColumns","pop","getColumnOrder","usePresentationState","names","sort","a","b","index","getSortedColumns","usePresentationOrder","load","save","Error","setColumnOrder","setModifierOptions","modifierOptions","_this","ModifierClass","startPolling","refreshTime","clearTimeout","_polling","setTimeout","stopPolling","whatIs","DataConnectorClass","isNumber","DataConverter","dateFormats","regex","parser","match","Date","UTC","NaN","alternative","d","year","getFullYear","mergedOptions","defaultOptions","regExpPoint","decimalPoint","decimalRegExp","RegExp","asBoolean","value","asNumber","asDate","timestamp","parseDate","asString","asGuessedType","typeMap","converter","guessType","call","decimalRegex","replace","test","getDate","deduceDateFormat","data","limit","thing","elem","stable","format","guessedFormat","madeDeduction","trim","split","parseInt","join","dateFormat","export","headers","getTable","result","trimedValue","innerTrimedValue","floatValue","parse","dateFormatProp","getTime","getTimezoneOffset","str","inside","alternativeFormat","startColumn","endColumn","Number","MAX_VALUE","startRow","endRow","firstRowAsNames","switchRowsAndColumns","getTableFromColumns","DataCursor","stateMap","emittingRegister","listenerMap","addListener","tableId","state","listener","listeners","buildEmittingTag","cursor","firstRow","lastRow","emitCursor","event","lasting","cursors","getIndex","emittingTag","remitCursor","removeListener","toRange","defaultRange","_b","_c","_d","range","needle","columnNeedle","JSON","stringify","isEqual","cursorA","cursorB","isInRange","needleColumns","rangeColumns","every","toPositions","positions","rowEnd","columnEnd","connectors","DataPoolDefaults","DataPool","waiting","getConnector","connectorId","waitingList","connectorOptions","getConnectorOptions","loadConnector","getConnectorIds","connectorIds","getConnectorTable","isNewConnector","ConnectorClass","setConnectorOptions","instances","booleanRegExp","decimal1RegExp","decimal2RegExp","functionRegExp","operatorRegExp","rangeA1RegExp","rangeR1C1RegExp","referenceA1RegExp","referenceR1C1RegExp","extractParantheses","text","parantheseLevel","char","parantheseStart","substring","extractString","start","escaping","parseArgument","alternativeSeparators","beginColumnRelative","beginRowRelative","endColumnRelative","endRowRelative","beginColumn","beginRow","parseReferenceColumn","formula","parseFormula","next","columnRelative","rowRelative","reference","string","parantheses","parseArguments","argumentsSeparator","term","paranteses","position","code","factor","charCodeAt","pow","operators","isFormula","item","isFunction","isOperator","isRange","isReference","isValue","FormulaTypes","asLogicalStringRegExp","MAX_FALSE","MAX_STRING","MAX_TRUE","operatorPriority","processorFunctions","processorFunctionNameRegExp","asLogicalNumber","asLogicalString","toLowerCase","basicOperation","operator","x","y","round","getArgumentValue","arg","getRangeValues","processFunction","processFormula","values","cell","cells","getReferenceValue","operator2","formulaFunction","processor","getArgumentsValues","registerProcessorFunction","processorFunction","translateReferences","columnDelta","rowDelta","FormulaProcessor","ABS","abs","value2","AND","AVERAGE","count","AVERAGEA","COUNT","COUNTA","IF","ISNA","MAX","NEGATIVE_INFINITY","isFinite","MEDIAN","median","half","floor","MIN","POSITIVE_INFINITY","MOD","value1","getModeMap","modeMap","MULT","modeKeys","modeCount","SNGL","modeKey","keyValue","NOT","OR","PRODUCT","calculated","SUM","XOR","lastValue","FormulaParser","FormulaType","__assign","assign","t","s","n","arguments","p","extendStatics","__extends","setPrototypeOf","__proto__","TypeError","String","__","constructor","create","_super","CSVConverter","dataTypes","useLocalDecimalPoint","lineDelimiter","exportNames","itemDelimiter","toLocaleString","csvRows","columnsCount","rowArray","map","columnIndex","columnDataType","dataType","cellVal","lines","parserOptions","beforeParse","rowIt","csv","guessedItemDelimiter","guessDelimiter","offset","parseCSVRow","columnStr","rowNumber","guessedDecimalPoint","c","token","actualColumn","read","pushType","initialValue","guessed","points","commas","potDelimiters","linesCount","inStr","cn","cl","CSVConnector","enablePolling","dataRefreshRate","csvURL","dataModifier","fetch","response","isArray","objectEach","JSONConverter","orientation","shift","toString","this_1","_loop_1","newRow_1","arrayWithPath","reduce","acc","JSONConnector","dataUrl","json","GoogleSheetsConverter","header","parseOptions","GoogleSheetsConnector","googleAPIKey","googleSpreadsheetKey","url","buildFetchURL","URL","canParse","message","status","alphabet","buildQueryRange","googleSpreadsheetRange","apiKey","sheetKey","onlyColumnNames","pathname","searchParams","set","href","HTMLTableConverter","tableElement","tableElementID","useMultiLevelHeaders","htmlRows","tableHead","subcategories","subhead","getTableHeaderHTML","getCellHTMLFromValue","caption","tableCaption","tag","classes","attrs","val","className","topheaders","subheaders","cur","rowspan","useRowspanHeaders","html","len","curColspan","isRowEqual","row1","row2","tableHTML","HTMLElement","getElementsByTagName","rowsCount","items","children","itemsLength","tagName","innerHTML","columnsInRow","columnsInRowLength","relativeColumnIndex","H","HTMLTableConnector","tableID","document","getElementById","__awaiter","thisArg","_arguments","P","generator","fulfilled","step","rejected","done","adopt","__generator","body","f","g","_","label","sent","trys","ops","verb","Symbol","iterator","v","op","ChainModifier","chain","optionsChain","add","clear","modifiers","error_1","reverse","remove","InvertModifier","modifiedRowIndex","modifiedColumnNames","j2","MathModifier","formulaColumns","processColumn","columnFormulas","columnFormula","processColumnFormula","rowStart","cacheFormula","cacheString","RangeModifier","indexes","additive","ranges","strict","rangeColumn","minValue","maxValue","SortModifier","ascending","descending","getRowReferences","rowReferences","orderByColumn","orderInColumn","direction","compare","orderByColumnIndex","originalIndexes","rowReference","Formula","G"],"mappings":"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"}