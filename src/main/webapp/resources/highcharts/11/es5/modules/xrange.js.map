{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * X-range series\n *\n * (c) 2010-2024 Torstein Honsi, Lars A. V. Cabrera\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/xrange', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/XRange/XRangeSeriesDefaults.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2024 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var correctFloat = U.correctFloat, isNumber = U.isNumber, isObject = U.isObject;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The X-range series displays ranges on the X axis, typically time\n         * intervals with a start and end date.\n         *\n         * @sample {highcharts} highcharts/demo/x-range/\n         *         X-range\n         * @sample {highcharts} highcharts/css/x-range/\n         *         Styled mode X-range\n         * @sample {highcharts} highcharts/chart/inverted-xrange/\n         *         Inverted X-range\n         *\n         * @extends      plotOptions.column\n         * @since        6.0.0\n         * @product      highcharts highstock gantt\n         * @excluding    boostThreshold, crisp, cropThreshold, depth, edgeColor,\n         *               edgeWidth, findNearestPointBy, getExtremesFromAll,\n         *               negativeColor, pointInterval, pointIntervalUnit,\n         *               pointPlacement, pointRange, pointStart, softThreshold,\n         *               stacking, threshold, data, dataSorting, boostBlending\n         * @requires     modules/xrange\n         * @optionparent plotOptions.xrange\n         */\n        var XRangeSeriesDefaults = {\n            /**\n             * A partial fill for each point, typically used to visualize how much\n             * of a task is performed. The partial fill object can be set either on\n             * series or point level.\n             *\n             * @sample {highcharts} highcharts/demo/x-range\n             *         X-range with partial fill\n             *\n             * @product   highcharts highstock gantt\n             * @apioption plotOptions.xrange.partialFill\n             */\n            /**\n             * The fill color to be used for partial fills. Defaults to a darker\n             * shade of the point color.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highcharts highstock gantt\n             * @apioption plotOptions.xrange.partialFill.fill\n             */\n            /**\n             * A partial fill for each point, typically used to visualize how much\n             * of a task is performed. See [completed](series.gantt.data.completed).\n             *\n             * @sample gantt/demo/progress-indicator\n             *         Gantt with progress indicator\n             *\n             * @product   gantt\n             * @apioption plotOptions.gantt.partialFill\n             */\n            /**\n             * In an X-range series, this option makes all points of the same Y-axis\n             * category the same color.\n             */\n            colorByPoint: true,\n            dataLabels: {\n                formatter: function () {\n                    var amount = this.point.partialFill;\n                    if (isObject(amount)) {\n                        amount = amount.amount;\n                    }\n                    if (isNumber(amount) && amount > 0) {\n                        return correctFloat(amount * 100) + '%';\n                    }\n                },\n                inside: true,\n                verticalAlign: 'middle',\n                style: {\n                    whiteSpace: 'nowrap'\n                }\n            },\n            tooltip: {\n                headerFormat: '<span style=\"font-size: 0.8em\">{point.x} - {point.x2}</span><br/>',\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.yCategory}</b><br/>'\n            },\n            borderRadius: 3,\n            pointRange: 0\n        };\n        /* *\n         *\n         *  Export Default\n         *\n         * */\n        /* *\n         *\n         * API Options\n         *\n         * */\n        /**\n         * An `xrange` series. If the [type](#series.xrange.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.xrange\n         * @excluding boostThreshold, crisp, cropThreshold, depth, edgeColor, edgeWidth,\n         *            findNearestPointBy, getExtremesFromAll, negativeColor,\n         *            pointInterval, pointIntervalUnit, pointPlacement, pointRange,\n         *            pointStart, softThreshold, stacking, threshold, dataSorting,\n         *            boostBlending\n         * @product   highcharts highstock gantt\n         * @requires  modules/xrange\n         * @apioption series.xrange\n         */\n        /**\n         * An array of data points for the series. For the `xrange` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of objects with named values. The objects are point configuration\n         *    objects as seen below.\n         *    ```js\n         *    data: [{\n         *        x: Date.UTC(2017, 0, 1),\n         *        x2: Date.UTC(2017, 0, 3),\n         *        name: \"Test\",\n         *        y: 0,\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: Date.UTC(2017, 0, 4),\n         *        x2: Date.UTC(2017, 0, 5),\n         *        name: \"Deploy\",\n         *        y: 1,\n         *        color: \"#FF0000\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @declare   Highcharts.XrangePointOptionsObject\n         * @type      {Array<*>}\n         * @extends   series.line.data\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data\n         */\n        /**\n         * The starting X value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.x\n         */\n        /**\n         * The ending X value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.x2\n         */\n        /**\n         * The Y value of the range point.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.y\n         */\n        /**\n         * A partial fill for each point, typically used to visualize how much of\n         * a task is performed. The partial fill object can be set either on series\n         * or point level.\n         *\n         * @sample {highcharts} highcharts/demo/x-range\n         *         X-range with partial fill\n         *\n         * @declare   Highcharts.XrangePointPartialFillOptionsObject\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill\n         */\n        /**\n         * The amount of the X-range point to be filled. Values can be 0-1 and are\n         * converted to percentages in the default data label formatter.\n         *\n         * @type      {number}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill.amount\n         */\n        /**\n         * The fill color to be used for partial fills. Defaults to a darker shade\n         * of the point color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highcharts highstock gantt\n         * @apioption series.xrange.data.partialFill.fill\n         */\n        (''); // Adds doclets above to transpiled file\n\n        return XRangeSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/XRange/XRangePoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2024 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var ColumnPoint = SeriesRegistry.seriesTypes.column.prototype.pointClass;\n        var extend = U.extend;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        var XRangePoint = /** @class */ (function (_super) {\n            __extends(XRangePoint, _super);\n            /**\n             * Extend init to have y default to 0.\n             *\n             * @private\n             */\n            function XRangePoint(series, options) {\n                var _this = _super.call(this, series, options) || this;\n                if (!_this.y) {\n                    _this.y = 0;\n                }\n                return _this;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Return color of a point based on its category.\n             *\n             * @private\n             * @function getColorByCategory\n             *\n             * @param {object} series\n             *        The series which the point belongs to.\n             *\n             * @param {object} point\n             *        The point to calculate its color for.\n             *\n             * @return {object}\n             *         Returns an object containing the properties color and colorIndex.\n             */\n            XRangePoint.getColorByCategory = function (series, point) {\n                var colors = series.options.colors || series.chart.options.colors, colorCount = colors ?\n                    colors.length :\n                    series.chart.options.chart.colorCount, colorIndex = point.y % colorCount, color = colors && colors[colorIndex];\n                return {\n                    colorIndex: colorIndex,\n                    color: color\n                };\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            XRangePoint.prototype.resolveColor = function () {\n                var series = this.series;\n                if (series.options.colorByPoint && !this.options.color) {\n                    var colorByPoint = XRangePoint.getColorByCategory(series, this);\n                    if (!series.chart.styledMode) {\n                        this.color = colorByPoint.color;\n                    }\n                    if (!this.options.colorIndex) {\n                        this.colorIndex = colorByPoint.colorIndex;\n                    }\n                }\n                else {\n                    this.color = this.options.color || series.color;\n                }\n            };\n            /**\n             * @private\n             */\n            XRangePoint.prototype.setState = function () {\n                _super.prototype.setState.apply(this, arguments);\n                this.series.drawPoint(this, this.series.getAnimationVerb());\n            };\n            /**\n             * Add x2 and yCategory to the available properties for tooltip formats.\n             *\n             * @private\n             */\n            XRangePoint.prototype.getLabelConfig = function () {\n                var cfg = _super.prototype.getLabelConfig.call(this), yCats = this.series.yAxis.categories;\n                cfg.x2 = this.x2;\n                cfg.yCategory = this.yCategory = yCats && yCats[this.y];\n                // Use 'category' as 'key' to ensure tooltip datetime formatting.\n                // Use 'name' only when 'category' is undefined.\n                cfg.key = this.category || this.name;\n                return cfg;\n            };\n            /**\n             * @private\n             */\n            XRangePoint.prototype.isValid = function () {\n                return typeof this.x === 'number' &&\n                    typeof this.x2 === 'number';\n            };\n            return XRangePoint;\n        }(ColumnPoint));\n        extend(XRangePoint.prototype, {\n            ttBelow: false,\n            tooltipDateKeys: ['x', 'x2']\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * The ending X value of the range point.\n         * @name Highcharts.Point#x2\n         * @type {number|undefined}\n         * @requires modules/xrange\n         */\n        /**\n         * Extend applyOptions so that `colorByPoint` for x-range means that one\n         * color is applied per Y axis category.\n         *\n         * @private\n         * @function Highcharts.Point#applyOptions\n         *\n         * @return {Highcharts.Series}\n         */\n        /**\n         * @interface Highcharts.PointOptionsObject in parts/Point.ts\n         */ /**\n        * The ending X value of the range point.\n        * @name Highcharts.PointOptionsObject#x2\n        * @type {number|undefined}\n        * @requires modules/xrange\n        */\n        (''); // Keeps doclets above in JS file\n\n        return XRangePoint;\n    });\n    _registerModule(_modules, 'Series/XRange/XRangeSeries.js', [_modules['Core/Globals.js'], _modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Series/XRange/XRangeSeriesDefaults.js'], _modules['Series/XRange/XRangePoint.js']], function (H, Color, SeriesRegistry, U, XRangeSeriesDefaults, XRangePoint) {\n        /* *\n         *\n         *  X-range series module\n         *\n         *  (c) 2010-2024 Torstein Honsi, Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __extends = (this && this.__extends) || (function () {\n            var extendStatics = function (d, b) {\n                extendStatics = Object.setPrototypeOf ||\n                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n                    function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n                return extendStatics(d, b);\n            };\n            return function (d, b) {\n                if (typeof b !== \"function\" && b !== null)\n                    throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n                extendStatics(d, b);\n                function __() { this.constructor = d; }\n                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n            };\n        })();\n        var composed = H.composed, noop = H.noop;\n        var color = Color.parse;\n        var ColumnSeries = SeriesRegistry.seriesTypes.column;\n        var addEvent = U.addEvent, clamp = U.clamp, crisp = U.crisp, defined = U.defined, extend = U.extend, find = U.find, isNumber = U.isNumber, isObject = U.isObject, merge = U.merge, pick = U.pick, pushUnique = U.pushUnique, relativeLength = U.relativeLength;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Max x2 should be considered in xAxis extremes\n         * @private\n         */\n        function onAxisAfterGetSeriesExtremes() {\n            var dataMax, modMax;\n            if (this.isXAxis) {\n                dataMax = pick(this.dataMax, -Number.MAX_VALUE);\n                for (var _i = 0, _a = this.series; _i < _a.length; _i++) {\n                    var series = _a[_i];\n                    if (series.x2Data) {\n                        for (var _b = 0, _c = series.x2Data; _b < _c.length; _b++) {\n                            var val = _c[_b];\n                            if (val && val > dataMax) {\n                                dataMax = val;\n                                modMax = true;\n                            }\n                        }\n                    }\n                }\n                if (modMax) {\n                    this.dataMax = dataMax;\n                }\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.xrange\n         *\n         * @augments Highcharts.Series\n         */\n        var XRangeSeries = /** @class */ (function (_super) {\n            __extends(XRangeSeries, _super);\n            function XRangeSeries() {\n                return _super !== null && _super.apply(this, arguments) || this;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            XRangeSeries.compose = function (AxisClass) {\n                if (pushUnique(composed, 'Series.XRange')) {\n                    addEvent(AxisClass, 'afterGetSeriesExtremes', onAxisAfterGetSeriesExtremes);\n                }\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            XRangeSeries.prototype.init = function () {\n                _super.prototype.init.apply(this, arguments);\n                this.options.stacking = void 0; // #13161\n            };\n            /**\n             * Borrow the column series metrics, but with swapped axes. This gives\n             * free access to features like groupPadding, grouping, pointWidth etc.\n             * @private\n             */\n            XRangeSeries.prototype.getColumnMetrics = function () {\n                var _this = this;\n                var swapAxes = function () {\n                    for (var _i = 0, _a = _this.chart.series; _i < _a.length; _i++) {\n                        var series = _a[_i];\n                        var xAxis = series.xAxis;\n                        series.xAxis = series.yAxis;\n                        series.yAxis = xAxis;\n                    }\n                };\n                swapAxes();\n                var metrics = _super.prototype.getColumnMetrics.call(this);\n                swapAxes();\n                return metrics;\n            };\n            /**\n             * Override cropData to show a point where x or x2 is outside visible range,\n             * but one of them is inside.\n             * @private\n             */\n            XRangeSeries.prototype.cropData = function (xData, yData, min, max) {\n                // Replace xData with x2Data to find the appropriate cropStart\n                var crop = _super.prototype.cropData.call(this, this.x2Data, yData, min, max);\n                // Re-insert the cropped xData\n                crop.xData = xData.slice(crop.start, crop.end);\n                return crop;\n            };\n            /**\n             * Finds the index of an existing point that matches the given point\n             * options.\n             *\n             * @private\n             *\n             * @param {Highcharts.XRangePointOptions} options\n             *        The options of the point.\n             *\n             * @return {number|undefined}\n             *         Returns index of a matching point, or undefined if no match is\n             *         found.\n             */\n            XRangeSeries.prototype.findPointIndex = function (options) {\n                var _a = this, cropStart = _a.cropStart, points = _a.points;\n                var id = options.id;\n                var pointIndex;\n                if (id) {\n                    var point = find(points, function (point) { return point.id === id; });\n                    pointIndex = point ? point.index : void 0;\n                }\n                if (typeof pointIndex === 'undefined') {\n                    var point = find(points, function (point) { return (point.x === options.x &&\n                        point.x2 === options.x2 &&\n                        !point.touched); });\n                    pointIndex = point ? point.index : void 0;\n                }\n                // Reduce pointIndex if data is cropped\n                if (this.cropped &&\n                    isNumber(pointIndex) &&\n                    isNumber(cropStart) &&\n                    pointIndex >= cropStart) {\n                    pointIndex -= cropStart;\n                }\n                return pointIndex;\n            };\n            XRangeSeries.prototype.alignDataLabel = function (point) {\n                var _a;\n                var oldPlotX = point.plotX;\n                point.plotX = pick(point.dlBox && point.dlBox.centerX, point.plotX);\n                if (point.dataLabel && ((_a = point.shapeArgs) === null || _a === void 0 ? void 0 : _a.width)) {\n                    point.dataLabel.css({\n                        width: \"\".concat(point.shapeArgs.width, \"px\")\n                    });\n                }\n                _super.prototype.alignDataLabel.apply(this, arguments);\n                point.plotX = oldPlotX;\n            };\n            /**\n             * @private\n             */\n            XRangeSeries.prototype.translatePoint = function (point) {\n                var xAxis = this.xAxis, yAxis = this.yAxis, metrics = this.columnMetrics, options = this.options, minPointLength = options.minPointLength || 0, oldColWidth = (point.shapeArgs && point.shapeArgs.width || 0) / 2, seriesXOffset = this.pointXOffset = metrics.offset, posX = pick(point.x2, point.x + (point.len || 0)), borderRadius = options.borderRadius, plotTop = this.chart.plotTop, plotLeft = this.chart.plotLeft;\n                var plotX = point.plotX, plotX2 = xAxis.translate(posX, 0, 0, 0, 1);\n                var length = Math.abs(plotX2 - plotX), inverted = this.chart.inverted, borderWidth = pick(options.borderWidth, 1);\n                var widthDifference, partialFill, yOffset = metrics.offset, pointHeight = Math.round(metrics.width), dlLeft, dlRight, dlWidth, clipRectWidth;\n                if (minPointLength) {\n                    widthDifference = minPointLength - length;\n                    if (widthDifference < 0) {\n                        widthDifference = 0;\n                    }\n                    plotX -= widthDifference / 2;\n                    plotX2 += widthDifference / 2;\n                }\n                plotX = Math.max(plotX, -10);\n                plotX2 = clamp(plotX2, -10, xAxis.len + 10);\n                // Handle individual pointWidth\n                if (defined(point.options.pointWidth)) {\n                    yOffset -= ((Math.ceil(point.options.pointWidth) - pointHeight) / 2);\n                    pointHeight = Math.ceil(point.options.pointWidth);\n                }\n                // Apply pointPlacement to the Y axis\n                if (options.pointPlacement &&\n                    isNumber(point.plotY) &&\n                    yAxis.categories) {\n                    point.plotY = yAxis.translate(point.y, 0, 1, 0, 1, options.pointPlacement);\n                }\n                var x = crisp(Math.min(plotX, plotX2), borderWidth), x2 = crisp(Math.max(plotX, plotX2), borderWidth), width = x2 - x;\n                var r = Math.min(relativeLength((typeof borderRadius === 'object' ?\n                    borderRadius.radius :\n                    borderRadius || 0), pointHeight), Math.min(width, pointHeight) / 2);\n                var shapeArgs = {\n                    x: x,\n                    y: crisp((point.plotY || 0) + yOffset, borderWidth),\n                    width: width,\n                    height: pointHeight,\n                    r: r\n                };\n                point.shapeArgs = shapeArgs;\n                // Move tooltip to default position\n                if (!inverted) {\n                    point.tooltipPos[0] -= oldColWidth +\n                        seriesXOffset -\n                        shapeArgs.width / 2;\n                }\n                else {\n                    point.tooltipPos[1] += seriesXOffset +\n                        oldColWidth;\n                }\n                // Align data labels inside the shape and inside the plot area\n                dlLeft = shapeArgs.x;\n                dlRight = dlLeft + shapeArgs.width;\n                if (dlLeft < 0 || dlRight > xAxis.len) {\n                    dlLeft = clamp(dlLeft, 0, xAxis.len);\n                    dlRight = clamp(dlRight, 0, xAxis.len);\n                    dlWidth = dlRight - dlLeft;\n                    point.dlBox = merge(shapeArgs, {\n                        x: dlLeft,\n                        width: dlRight - dlLeft,\n                        centerX: dlWidth ? dlWidth / 2 : null\n                    });\n                }\n                else {\n                    point.dlBox = null;\n                }\n                // Tooltip position\n                var tooltipPos = point.tooltipPos;\n                var xIndex = !inverted ? 0 : 1;\n                var yIndex = !inverted ? 1 : 0;\n                var tooltipYOffset = (this.columnMetrics ?\n                    this.columnMetrics.offset :\n                    -metrics.width / 2);\n                // Centering tooltip position (#14147)\n                if (inverted) {\n                    tooltipPos[xIndex] += shapeArgs.width / 2;\n                }\n                else {\n                    tooltipPos[xIndex] = clamp(tooltipPos[xIndex] +\n                        (xAxis.reversed ? -1 : 0) * shapeArgs.width, xAxis.left - plotLeft, xAxis.left + xAxis.len - plotLeft - 1);\n                }\n                tooltipPos[yIndex] = clamp(tooltipPos[yIndex] + ((inverted ? -1 : 1) * tooltipYOffset), yAxis.top - plotTop, yAxis.top + yAxis.len - plotTop - 1);\n                // Add a partShapeArgs to the point, based on the shapeArgs property\n                partialFill = point.partialFill;\n                if (partialFill) {\n                    // Get the partial fill amount\n                    if (isObject(partialFill)) {\n                        partialFill = partialFill.amount;\n                    }\n                    // If it was not a number, assume 0\n                    if (!isNumber(partialFill)) {\n                        partialFill = 0;\n                    }\n                    point.partShapeArgs = merge(shapeArgs);\n                    clipRectWidth = Math.max(Math.round(length * partialFill + point.plotX -\n                        plotX), 0);\n                    point.clipRectArgs = {\n                        x: xAxis.reversed ? // #10717\n                            shapeArgs.x + length - clipRectWidth :\n                            shapeArgs.x,\n                        y: shapeArgs.y,\n                        width: clipRectWidth,\n                        height: shapeArgs.height\n                    };\n                }\n            };\n            /**\n             * @private\n             */\n            XRangeSeries.prototype.translate = function () {\n                _super.prototype.translate.apply(this, arguments);\n                for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n                    var point = _a[_i];\n                    this.translatePoint(point);\n                }\n            };\n            /**\n             * Draws a single point in the series. Needed for partial fill.\n             *\n             * This override turns point.graphic into a group containing the\n             * original graphic and an overlay displaying the partial fill.\n             *\n             * @private\n             *\n             * @param {Highcharts.Point} point\n             *        An instance of Point in the series.\n             *\n             * @param {\"animate\"|\"attr\"} verb\n             *        'animate' (animates changes) or 'attr' (sets options)\n             */\n            XRangeSeries.prototype.drawPoint = function (point, verb) {\n                var seriesOpts = this.options, renderer = this.chart.renderer, type = point.shapeType, shapeArgs = point.shapeArgs, partShapeArgs = point.partShapeArgs, clipRectArgs = point.clipRectArgs, pointState = point.state, stateOpts = (seriesOpts.states[pointState || 'normal'] ||\n                    {}), pointStateVerb = typeof pointState === 'undefined' ?\n                    'attr' : verb, pointAttr = this.pointAttribs(point, pointState), animation = pick(this.chart.options.chart.animation, stateOpts.animation);\n                var graphic = point.graphic, pfOptions = point.partialFill;\n                if (!point.isNull && point.visible !== false) {\n                    // Original graphic\n                    if (graphic) { // Update\n                        graphic.rect[verb](shapeArgs);\n                    }\n                    else {\n                        point.graphic = graphic = renderer.g('point')\n                            .addClass(point.getClassName())\n                            .add(point.group || this.group);\n                        graphic.rect = renderer[type](merge(shapeArgs))\n                            .addClass(point.getClassName())\n                            .addClass('highcharts-partfill-original')\n                            .add(graphic);\n                    }\n                    // Partial fill graphic\n                    if (partShapeArgs) {\n                        if (graphic.partRect) {\n                            graphic.partRect[verb](merge(partShapeArgs));\n                            graphic.partialClipRect[verb](merge(clipRectArgs));\n                        }\n                        else {\n                            graphic.partialClipRect = renderer.clipRect(clipRectArgs.x, clipRectArgs.y, clipRectArgs.width, clipRectArgs.height);\n                            graphic.partRect =\n                                renderer[type](partShapeArgs)\n                                    .addClass('highcharts-partfill-overlay')\n                                    .add(graphic)\n                                    .clip(graphic.partialClipRect);\n                        }\n                    }\n                    // Presentational\n                    if (!this.chart.styledMode) {\n                        graphic\n                            .rect[verb](pointAttr, animation)\n                            .shadow(seriesOpts.shadow);\n                        if (partShapeArgs) {\n                            // Ensure pfOptions is an object\n                            if (!isObject(pfOptions)) {\n                                pfOptions = {};\n                            }\n                            if (isObject(seriesOpts.partialFill)) {\n                                pfOptions = merge(seriesOpts.partialFill, pfOptions);\n                            }\n                            var fill = (pfOptions.fill ||\n                                color(pointAttr.fill).brighten(-0.3).get() ||\n                                color(point.color || this.color)\n                                    .brighten(-0.3).get());\n                            pointAttr.fill = fill;\n                            graphic\n                                .partRect[pointStateVerb](pointAttr, animation)\n                                .shadow(seriesOpts.shadow);\n                        }\n                    }\n                }\n                else if (graphic) {\n                    point.graphic = graphic.destroy(); // #1269\n                }\n            };\n            /**\n             * @private\n             */\n            XRangeSeries.prototype.drawPoints = function () {\n                var verb = this.getAnimationVerb();\n                // Draw the columns\n                for (var _i = 0, _a = this.points; _i < _a.length; _i++) {\n                    var point = _a[_i];\n                    this.drawPoint(point, verb);\n                }\n            };\n            /**\n             * Returns \"animate\", or \"attr\" if the number of points is above the\n             * animation limit.\n             *\n             * @private\n             */\n            XRangeSeries.prototype.getAnimationVerb = function () {\n                return (this.chart.pointCount < (this.options.animationLimit || 250) ?\n                    'animate' :\n                    'attr');\n            };\n            /**\n             * @private\n             */\n            XRangeSeries.prototype.isPointInside = function (point) {\n                var shapeArgs = point.shapeArgs, plotX = point.plotX, plotY = point.plotY;\n                if (!shapeArgs) {\n                    return _super.prototype.isPointInside.apply(this, arguments);\n                }\n                var isInside = typeof plotX !== 'undefined' &&\n                    typeof plotY !== 'undefined' &&\n                    plotY >= 0 &&\n                    plotY <= this.yAxis.len &&\n                    (shapeArgs.x || 0) + (shapeArgs.width || 0) >= 0 &&\n                    plotX <= this.xAxis.len;\n                return isInside;\n            };\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            XRangeSeries.defaultOptions = merge(ColumnSeries.defaultOptions, XRangeSeriesDefaults);\n            return XRangeSeries;\n        }(ColumnSeries));\n        extend(XRangeSeries.prototype, {\n            pointClass: XRangePoint,\n            pointArrayMap: ['x2', 'y'],\n            getExtremesFromAll: true,\n            parallelArrays: ['x', 'x2', 'y'],\n            requireSorting: false,\n            type: 'xrange',\n            animate: SeriesRegistry.series.prototype.animate,\n            autoIncrement: noop,\n            buildKDTree: noop\n        });\n        SeriesRegistry.registerSeriesType('xrange', XRangeSeries);\n        /* *\n         *\n         * Default Export\n         *\n         * */\n\n        return XRangeSeries;\n    });\n    _registerModule(_modules, 'masters/modules/xrange.src.js', [_modules['Core/Globals.js'], _modules['Series/XRange/XRangeSeries.js']], function (Highcharts, XRangeSeries) {\n\n        var G = Highcharts;\n        XRangeSeries.compose(G.Axis);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","U","correctFloat","isNumber","isObject","colorByPoint","dataLabels","formatter","amount","point","partialFill","inside","verticalAlign","style","whiteSpace","tooltip","headerFormat","pointFormat","borderRadius","pointRange","SeriesRegistry","extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","call","TypeError","String","__","constructor","create","ColumnPoint","seriesTypes","column","pointClass","extend","XRangePoint","_super","series","options","_this","y","getColorByCategory","colors","chart","colorCount","length","colorIndex","color","resolveColor","styledMode","setState","arguments","drawPoint","getAnimationVerb","getLabelConfig","cfg","yCats","yAxis","categories","x2","yCategory","key","category","name","isValid","x","ttBelow","tooltipDateKeys","H","Color","XRangeSeriesDefaults","composed","noop","parse","ColumnSeries","addEvent","clamp","crisp","defined","find","merge","pick","pushUnique","relativeLength","onAxisAfterGetSeriesExtremes","dataMax","modMax","isXAxis","Number","MAX_VALUE","_i","_a","x2Data","_b","_c","val","XRangeSeries","compose","AxisClass","init","stacking","getColumnMetrics","swapAxes","xAxis","metrics","cropData","xData","yData","min","max","crop","slice","start","end","findPointIndex","pointIndex","cropStart","points","id","index","touched","cropped","alignDataLabel","oldPlotX","plotX","dlBox","centerX","dataLabel","shapeArgs","width","css","concat","translatePoint","widthDifference","dlLeft","dlRight","dlWidth","clipRectWidth","columnMetrics","minPointLength","oldColWidth","seriesXOffset","pointXOffset","offset","posX","len","plotTop","plotLeft","plotX2","translate","Math","abs","inverted","borderWidth","yOffset","pointHeight","round","pointWidth","ceil","pointPlacement","plotY","r","radius","height","tooltipPos","xIndex","yIndex","tooltipYOffset","reversed","left","top","partShapeArgs","clipRectArgs","verb","seriesOpts","renderer","type","shapeType","pointState","state","stateOpts","states","pointStateVerb","pointAttr","pointAttribs","animation","graphic","pfOptions","isNull","visible","destroy","rect","g","addClass","getClassName","add","group","partRect","partialClipRect","clipRect","clip","shadow","fill","brighten","get","drawPoints","pointCount","animationLimit","isPointInside","defaultOptions","pointArrayMap","getExtremesFromAll","parallelArrays","requireSorting","animate","autoIncrement","buildKDTree","registerSeriesType","G","Axis"],"mappings":"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"}