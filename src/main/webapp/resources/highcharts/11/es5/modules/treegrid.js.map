{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Gantt JS v11.4.8 (2024-08-29)\n *\n * Tree Grid\n *\n * (c) 2016-2024 Jon Arild Nygard\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/treegrid', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Axis/BrokenAxis.js', [_modules['Core/Axis/Stacking/StackItem.js'], _modules['Core/Utilities.js']], function (StackItem, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var addEvent = U.addEvent, find = U.find, fireEvent = U.fireEvent, isArray = U.isArray, isNumber = U.isNumber, pick = U.pick;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Axis with support of broken data rows.\n         * @private\n         */\n        var BrokenAxis;\n        (function (BrokenAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds support for broken axes.\n             * @private\n             */\n            function compose(AxisClass, SeriesClass) {\n                if (!AxisClass.keepProps.includes('brokenAxis')) {\n                    AxisClass.keepProps.push('brokenAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterSetTickPositions', onAxisAfterSetTickPositions);\n                    addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                    var seriesProto = SeriesClass.prototype;\n                    seriesProto.drawBreaks = seriesDrawBreaks;\n                    seriesProto.gappedPath = seriesGappedPath;\n                    addEvent(SeriesClass, 'afterGeneratePoints', onSeriesAfterGeneratePoints);\n                    addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n                }\n                return AxisClass;\n            }\n            BrokenAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterInit() {\n                if (typeof this.brokenAxis !== 'undefined') {\n                    this.brokenAxis.setBreaks(this.options.breaks, false);\n                }\n            }\n            /**\n             * Force Axis to be not-ordinal when breaks are defined.\n             * @private\n             */\n            function onAxisAfterSetOptions() {\n                var _a;\n                var axis = this;\n                if ((_a = axis.brokenAxis) === null || _a === void 0 ? void 0 : _a.hasBreaks) {\n                    axis.options.ordinal = false;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterSetTickPositions() {\n                var axis = this, brokenAxis = axis.brokenAxis;\n                if (brokenAxis === null || brokenAxis === void 0 ? void 0 : brokenAxis.hasBreaks) {\n                    var tickPositions = axis.tickPositions, info = axis.tickPositions.info, newPositions = [];\n                    for (var i = 0; i < tickPositions.length; i++) {\n                        if (!brokenAxis.isInAnyBreak(tickPositions[i])) {\n                            newPositions.push(tickPositions[i]);\n                        }\n                    }\n                    axis.tickPositions = newPositions;\n                    axis.tickPositions.info = info;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                var axis = this;\n                if (!axis.brokenAxis) {\n                    axis.brokenAxis = new Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterGeneratePoints() {\n                var _a, _b;\n                var _c = this, isDirty = _c.isDirty, connectNulls = _c.options.connectNulls, points = _c.points, xAxis = _c.xAxis, yAxis = _c.yAxis;\n                // Set, or reset visibility of the points. Axis.setBreaks marks\n                // the series as isDirty\n                if (isDirty) {\n                    var i = points.length;\n                    while (i--) {\n                        var point = points[i];\n                        // Respect nulls inside the break (#4275)\n                        var nullGap = point.y === null && connectNulls === false;\n                        var isPointInBreak = (!nullGap && (((_a = xAxis === null || xAxis === void 0 ? void 0 : xAxis.brokenAxis) === null || _a === void 0 ? void 0 : _a.isInAnyBreak(point.x, true)) ||\n                            ((_b = yAxis === null || yAxis === void 0 ? void 0 : yAxis.brokenAxis) === null || _b === void 0 ? void 0 : _b.isInAnyBreak(point.y, true))));\n                        // Set point.visible if in any break.\n                        // If not in break, reset visible to original value.\n                        point.visible = isPointInBreak ?\n                            false :\n                            point.options.visible !== false;\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterRender() {\n                this.drawBreaks(this.xAxis, ['x']);\n                this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));\n            }\n            /**\n             * @private\n             */\n            function seriesDrawBreaks(axis, keys) {\n                var _a;\n                var series = this, points = series.points;\n                var breaks, threshold, y;\n                if ((_a = axis === null || axis === void 0 ? void 0 : axis.brokenAxis) === null || _a === void 0 ? void 0 : _a.hasBreaks) {\n                    var brokenAxis_1 = axis.brokenAxis;\n                    keys.forEach(function (key) {\n                        var _a, _b;\n                        breaks = (brokenAxis_1 === null || brokenAxis_1 === void 0 ? void 0 : brokenAxis_1.breakArray) || [];\n                        threshold = axis.isXAxis ?\n                            axis.min :\n                            pick(series.options.threshold, axis.min);\n                        // Array of breaks that have been \"zoomed-out\" which means that\n                        // they were shown previously, but now after zoom, they are not\n                        // (#19885).\n                        var breaksOutOfRange = (_b = (_a = axis === null || axis === void 0 ? void 0 : axis.options) === null || _a === void 0 ? void 0 : _a.breaks) === null || _b === void 0 ? void 0 : _b.filter(function (brk) {\n                            var isOut = true;\n                            // Iterate to see if \"brk\" is in axis range\n                            for (var i = 0; i < breaks.length; i++) {\n                                var otherBreak = breaks[i];\n                                if (otherBreak.from === brk.from &&\n                                    otherBreak.to === brk.to) {\n                                    isOut = false;\n                                    break;\n                                }\n                            }\n                            return isOut;\n                        });\n                        points.forEach(function (point) {\n                            y = pick(point['stack' + key.toUpperCase()], point[key]);\n                            breaks.forEach(function (brk) {\n                                if (isNumber(threshold) && isNumber(y)) {\n                                    var eventName = '';\n                                    if ((threshold < brk.from && y > brk.to) ||\n                                        (threshold > brk.from && y < brk.from)) {\n                                        eventName = 'pointBreak';\n                                    }\n                                    else if ((threshold < brk.from &&\n                                        y > brk.from &&\n                                        y < brk.to) || (threshold > brk.from &&\n                                        y > brk.to &&\n                                        y < brk.from)) {\n                                        eventName = 'pointInBreak';\n                                    }\n                                    if (eventName) {\n                                        fireEvent(axis, eventName, { point: point, brk: brk });\n                                    }\n                                }\n                            });\n                            breaksOutOfRange === null || breaksOutOfRange === void 0 ? void 0 : breaksOutOfRange.forEach(function (brk) {\n                                fireEvent(axis, 'pointOutsideOfBreak', { point: point, brk: brk });\n                            });\n                        });\n                    });\n                }\n            }\n            /**\n             * Extend getGraphPath by identifying gaps in the data so that we\n             * can draw a gap in the line or area. This was moved from ordinal\n             * axis module to broken axis module as of #5045.\n             *\n             * @private\n             * @function Highcharts.Series#gappedPath\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Gapped path\n             */\n            function seriesGappedPath() {\n                var currentDataGrouping = this.currentDataGrouping, groupingSize = currentDataGrouping === null || currentDataGrouping === void 0 ? void 0 : currentDataGrouping.gapSize, points = this.points.slice(), yAxis = this.yAxis;\n                var gapSize = this.options.gapSize, i = points.length - 1, stack;\n                /**\n                 * Defines when to display a gap in the graph, together with the\n                 * [gapUnit](plotOptions.series.gapUnit) option.\n                 *\n                 * In case when `dataGrouping` is enabled, points can be grouped\n                 * into a larger time span. This can make the grouped points to\n                 * have a greater distance than the absolute value of `gapSize`\n                 * property, which will result in disappearing graph completely.\n                 * To prevent this situation the mentioned distance between\n                 * grouped points is used instead of previously defined\n                 * `gapSize`.\n                 *\n                 * In practice, this option is most often used to visualize gaps\n                 * in time series. In a stock chart, intraday data is available\n                 * for daytime hours, while gaps will appear in nights and\n                 * weekends.\n                 *\n                 * @see [gapUnit](plotOptions.series.gapUnit)\n                 * @see [xAxis.breaks](#xAxis.breaks)\n                 *\n                 * @sample {highstock} stock/plotoptions/series-gapsize/\n                 * Setting the gap size to 2 introduces gaps for weekends in\n                 * daily datasets.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @product   highstock\n                 * @requires  modules/broken-axis\n                 * @apioption plotOptions.series.gapSize\n                 */\n                /**\n                 * Together with [gapSize](plotOptions.series.gapSize), this\n                 * option defines where to draw gaps in the graph.\n                 *\n                 * When the `gapUnit` is `\"relative\"` (default), a gap size of 5\n                 * means that if the distance between two points is greater than\n                 * 5 times that of the two closest points, the graph will be\n                 * broken.\n                 *\n                 * When the `gapUnit` is `\"value\"`, the gap is based on absolute\n                 * axis values, which on a datetime axis is milliseconds. This\n                 * also applies to the navigator series that inherits gap\n                 * options from the base series.\n                 *\n                 * @see [gapSize](plotOptions.series.gapSize)\n                 *\n                 * @type       {string}\n                 * @default    relative\n                 * @since      5.0.13\n                 * @product    highstock\n                 * @validvalue [\"relative\", \"value\"]\n                 * @requires   modules/broken-axis\n                 * @apioption  plotOptions.series.gapUnit\n                 */\n                if (gapSize && i > 0) { // #5008\n                    // Gap unit is relative\n                    if (this.options.gapUnit !== 'value') {\n                        gapSize *= this.basePointRange;\n                    }\n                    // Setting a new gapSize in case dataGrouping is enabled\n                    // (#7686)\n                    if (groupingSize &&\n                        groupingSize > gapSize &&\n                        // Except when DG is forced (e.g. from other series)\n                        // and has lower granularity than actual points (#11351)\n                        groupingSize >= this.basePointRange) {\n                        gapSize = groupingSize;\n                    }\n                    // Extension for ordinal breaks\n                    var current = void 0, next = void 0;\n                    while (i--) {\n                        // Reassign next if it is not visible\n                        if (!(next && next.visible !== false)) {\n                            next = points[i + 1];\n                        }\n                        current = points[i];\n                        // Skip iteration if one of the points is not visible\n                        if (next.visible === false || current.visible === false) {\n                            continue;\n                        }\n                        if (next.x - current.x > gapSize) {\n                            var xRange = (current.x + next.x) / 2;\n                            points.splice(// Insert after this one\n                            i + 1, 0, {\n                                isNull: true,\n                                x: xRange\n                            });\n                            // For stacked chart generate empty stack items, #6546\n                            if (yAxis.stacking && this.options.stacking) {\n                                stack = yAxis.stacking.stacks[this.stackKey][xRange] = new StackItem(yAxis, yAxis.options.stackLabels, false, xRange, this.stack);\n                                stack.total = 0;\n                            }\n                        }\n                        // Assign current to next for the upcoming iteration\n                        next = current;\n                    }\n                }\n                // Call base method\n                return this.getGraphPath(points);\n            }\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Provides support for broken axes.\n             * @private\n             * @class\n             */\n            var Additions = /** @class */ (function () {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                function Additions(axis) {\n                    this.hasBreaks = false;\n                    this.axis = axis;\n                }\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                Additions.isInBreak = function (brk, val) {\n                    var repeat = brk.repeat || Infinity, from = brk.from, length = brk.to - brk.from, test = (val >= from ?\n                        (val - from) % repeat :\n                        repeat - ((from - val) % repeat));\n                    var ret;\n                    if (!brk.inclusive) {\n                        ret = test < length && test !== 0;\n                    }\n                    else {\n                        ret = test <= length;\n                    }\n                    return ret;\n                };\n                /**\n                 * @private\n                 */\n                Additions.lin2Val = function (val) {\n                    var axis = this;\n                    var brokenAxis = axis.brokenAxis;\n                    var breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    var nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.from >= nval) {\n                            break;\n                        }\n                        else if (brk.to < nval) {\n                            nval += brk.len;\n                        }\n                        else if (Additions.isInBreak(brk, nval)) {\n                            nval += brk.len;\n                        }\n                    }\n                    return nval;\n                };\n                /**\n                 * @private\n                 */\n                Additions.val2Lin = function (val) {\n                    var axis = this;\n                    var brokenAxis = axis.brokenAxis;\n                    var breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    var nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.to <= val) {\n                            nval -= brk.len;\n                        }\n                        else if (brk.from >= val) {\n                            break;\n                        }\n                        else if (Additions.isInBreak(brk, val)) {\n                            nval -= (val - brk.from);\n                            break;\n                        }\n                    }\n                    return nval;\n                };\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Returns the first break found where the x is larger then break.from\n                 * and smaller then break.to.\n                 *\n                 * @param {number} x\n                 * The number which should be within a break.\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} breaks\n                 * The array of breaks to search within.\n                 *\n                 * @return {Highcharts.XAxisBreaksOptions|undefined}\n                 * Returns the first break found that matches, returns false if no break\n                 * is found.\n                 */\n                Additions.prototype.findBreakAt = function (x, breaks) {\n                    return find(breaks, function (b) {\n                        return b.from < x && x < b.to;\n                    });\n                };\n                /**\n                 * @private\n                 */\n                Additions.prototype.isInAnyBreak = function (val, testKeep) {\n                    var brokenAxis = this, axis = brokenAxis.axis, breaks = axis.options.breaks || [];\n                    var i = breaks.length, inbrk, keep, ret;\n                    if (i && isNumber(val)) {\n                        while (i--) {\n                            if (Additions.isInBreak(breaks[i], val)) {\n                                inbrk = true;\n                                if (!keep) {\n                                    keep = pick(breaks[i].showPoints, !axis.isXAxis);\n                                }\n                            }\n                        }\n                        if (inbrk && testKeep) {\n                            ret = inbrk && !keep;\n                        }\n                        else {\n                            ret = inbrk;\n                        }\n                    }\n                    return ret;\n                };\n                /**\n                 * Dynamically set or unset breaks in an axis. This function in lighter\n                 * than using Axis.update, and it also preserves animation.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#setBreaks\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} [breaks]\n                 * The breaks to add. When `undefined` it removes existing breaks.\n                 *\n                 * @param {boolean} [redraw=true]\n                 * Whether to redraw the chart immediately.\n                 */\n                Additions.prototype.setBreaks = function (breaks, redraw) {\n                    var brokenAxis = this;\n                    var axis = brokenAxis.axis;\n                    var hasBreaks = isArray(breaks) &&\n                        !!breaks.length &&\n                        !!Object.keys(breaks[0]).length; // Check for [{}], #16368.\n                    axis.isDirty = brokenAxis.hasBreaks !== hasBreaks;\n                    brokenAxis.hasBreaks = hasBreaks;\n                    if (breaks !== axis.options.breaks) {\n                        axis.options.breaks = axis.userOptions.breaks = breaks;\n                    }\n                    axis.forceRedraw = true; // Force recalculation in setScale\n                    // Recalculate series related to the axis.\n                    axis.series.forEach(function (series) {\n                        series.isDirty = true;\n                    });\n                    if (!hasBreaks && axis.val2lin === Additions.val2Lin) {\n                        // Revert to prototype functions\n                        delete axis.val2lin;\n                        delete axis.lin2val;\n                    }\n                    if (hasBreaks) {\n                        axis.userOptions.ordinal = false;\n                        axis.lin2val = Additions.lin2Val;\n                        axis.val2lin = Additions.val2Lin;\n                        axis.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {\n                            // If trying to set extremes inside a break, extend min to\n                            // after, and max to before the break ( #3857 )\n                            if (brokenAxis.hasBreaks) {\n                                var breaks_1 = (this.options.breaks || []);\n                                var axisBreak = void 0;\n                                while ((axisBreak = brokenAxis.findBreakAt(newMin, breaks_1))) {\n                                    newMin = axisBreak.to;\n                                }\n                                while ((axisBreak = brokenAxis.findBreakAt(newMax, breaks_1))) {\n                                    newMax = axisBreak.from;\n                                }\n                                // If both min and max is within the same break.\n                                if (newMax < newMin) {\n                                    newMax = newMin;\n                                }\n                            }\n                            axis.constructor.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);\n                        };\n                        axis.setAxisTranslation = function () {\n                            axis.constructor.prototype.setAxisTranslation.call(this);\n                            brokenAxis.unitLength = void 0;\n                            if (brokenAxis.hasBreaks) {\n                                var breaks_2 = axis.options.breaks || [], \n                                // Temporary one:\n                                breakArrayT_1 = [], breakArray_1 = [], pointRangePadding = pick(axis.pointRangePadding, 0);\n                                var length_1 = 0, inBrk_1, repeat_1, min_1 = axis.userMin || axis.min, max_1 = axis.userMax || axis.max, start_1, i_1;\n                                // Min & max check (#4247)\n                                breaks_2.forEach(function (brk) {\n                                    repeat_1 = brk.repeat || Infinity;\n                                    if (isNumber(min_1) && isNumber(max_1)) {\n                                        if (Additions.isInBreak(brk, min_1)) {\n                                            min_1 += ((brk.to % repeat_1) -\n                                                (min_1 % repeat_1));\n                                        }\n                                        if (Additions.isInBreak(brk, max_1)) {\n                                            max_1 -= ((max_1 % repeat_1) -\n                                                (brk.from % repeat_1));\n                                        }\n                                    }\n                                });\n                                // Construct an array holding all breaks in the axis\n                                breaks_2.forEach(function (brk) {\n                                    start_1 = brk.from;\n                                    repeat_1 = brk.repeat || Infinity;\n                                    if (isNumber(min_1) && isNumber(max_1)) {\n                                        while (start_1 - repeat_1 > min_1) {\n                                            start_1 -= repeat_1;\n                                        }\n                                        while (start_1 < min_1) {\n                                            start_1 += repeat_1;\n                                        }\n                                        for (i_1 = start_1; i_1 < max_1; i_1 += repeat_1) {\n                                            breakArrayT_1.push({\n                                                value: i_1,\n                                                move: 'in'\n                                            });\n                                            breakArrayT_1.push({\n                                                value: i_1 + brk.to - brk.from,\n                                                move: 'out',\n                                                size: brk.breakSize\n                                            });\n                                        }\n                                    }\n                                });\n                                breakArrayT_1.sort(function (a, b) {\n                                    return ((a.value === b.value) ?\n                                        ((a.move === 'in' ? 0 : 1) -\n                                            (b.move === 'in' ? 0 : 1)) :\n                                        a.value - b.value);\n                                });\n                                // Simplify the breaks\n                                inBrk_1 = 0;\n                                start_1 = min_1;\n                                breakArrayT_1.forEach(function (brk) {\n                                    inBrk_1 += (brk.move === 'in' ? 1 : -1);\n                                    if (inBrk_1 === 1 && brk.move === 'in') {\n                                        start_1 = brk.value;\n                                    }\n                                    if (inBrk_1 === 0 && isNumber(start_1)) {\n                                        breakArray_1.push({\n                                            from: start_1,\n                                            to: brk.value,\n                                            len: brk.value - start_1 - (brk.size || 0)\n                                        });\n                                        length_1 += (brk.value -\n                                            start_1 -\n                                            (brk.size || 0));\n                                    }\n                                });\n                                brokenAxis.breakArray = breakArray_1;\n                                // Used with staticScale, and below the actual axis\n                                // length, when breaks are subtracted.\n                                if (isNumber(min_1) &&\n                                    isNumber(max_1) &&\n                                    isNumber(axis.min)) {\n                                    brokenAxis.unitLength = max_1 - min_1 - length_1 +\n                                        pointRangePadding;\n                                    fireEvent(axis, 'afterBreaks');\n                                    if (axis.staticScale) {\n                                        axis.transA = axis.staticScale;\n                                    }\n                                    else if (brokenAxis.unitLength) {\n                                        axis.transA *=\n                                            (max_1 - axis.min + pointRangePadding) /\n                                                brokenAxis.unitLength;\n                                    }\n                                    if (pointRangePadding) {\n                                        axis.minPixelPadding =\n                                            axis.transA * (axis.minPointOffset || 0);\n                                    }\n                                    axis.min = min_1;\n                                    axis.max = max_1;\n                                }\n                            }\n                        };\n                    }\n                    if (pick(redraw, true)) {\n                        axis.chart.redraw();\n                    }\n                };\n                return Additions;\n            }());\n            BrokenAxis.Additions = Additions;\n        })(BrokenAxis || (BrokenAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BrokenAxis;\n    });\n    _registerModule(_modules, 'Core/Axis/GridAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (Axis, H, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var dateFormats = H.dateFormats;\n        var addEvent = U.addEvent, defined = U.defined, erase = U.erase, find = U.find, isArray = U.isArray, isNumber = U.isNumber, merge = U.merge, pick = U.pick, timeUnits = U.timeUnits, wrap = U.wrap;\n        /* *\n         *\n         *  Enums\n         *\n         * */\n        /**\n         * Enum for which side the axis is on. Maps to axis.side.\n         * @private\n         */\n        var GridAxisSide;\n        (function (GridAxisSide) {\n            GridAxisSide[GridAxisSide[\"top\"] = 0] = \"top\";\n            GridAxisSide[GridAxisSide[\"right\"] = 1] = \"right\";\n            GridAxisSide[GridAxisSide[\"bottom\"] = 2] = \"bottom\";\n            GridAxisSide[GridAxisSide[\"left\"] = 3] = \"left\";\n        })(GridAxisSide || (GridAxisSide = {}));\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function argsToArray(args) {\n            return Array.prototype.slice.call(args, 1);\n        }\n        /**\n         * @private\n         */\n        function isObject(x) {\n            // Always use strict mode\n            return U.isObject(x, true);\n        }\n        /**\n         * @private\n         */\n        function applyGridOptions(axis) {\n            var options = axis.options;\n            // Center-align by default\n            /*\n            if (!options.labels) {\n                options.labels = {};\n            }\n            */\n            options.labels.align = pick(options.labels.align, 'center');\n            // @todo: Check against tickLabelPlacement between/on etc\n            /* Prevents adding the last tick label if the axis is not a category\n               axis.\n               Since numeric labels are normally placed at starts and ends of a\n               range of value, and this module makes the label point at the value,\n               an \"extra\" label would appear. */\n            if (!axis.categories) {\n                options.showLastLabel = false;\n            }\n            // Prevents rotation of labels when squished, as rotating them would not\n            // help.\n            axis.labelRotation = 0;\n            options.labels.rotation = 0;\n            // Allow putting ticks closer than their data points.\n            options.minTickInterval = 1;\n        }\n        /**\n         * Extends axis class with grid support.\n         * @private\n         */\n        function compose(AxisClass, ChartClass, TickClass) {\n            if (!AxisClass.keepProps.includes('grid')) {\n                AxisClass.keepProps.push('grid');\n                AxisClass.prototype.getMaxLabelDimensions = getMaxLabelDimensions;\n                wrap(AxisClass.prototype, 'unsquish', wrapUnsquish);\n                wrap(AxisClass.prototype, 'getOffset', wrapGetOffset);\n                // Add event handlers\n                addEvent(AxisClass, 'init', onInit);\n                addEvent(AxisClass, 'afterGetTitlePosition', onAfterGetTitlePosition);\n                addEvent(AxisClass, 'afterInit', onAfterInit);\n                addEvent(AxisClass, 'afterRender', onAfterRender);\n                addEvent(AxisClass, 'afterSetAxisTranslation', onAfterSetAxisTranslation);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions2);\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                addEvent(AxisClass, 'afterTickSize', onAfterTickSize);\n                addEvent(AxisClass, 'trimTicks', onTrimTicks);\n                addEvent(AxisClass, 'destroy', onDestroy);\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n                addEvent(TickClass, 'afterGetLabelPosition', onTickAfterGetLabelPosition);\n                addEvent(TickClass, 'labelFormat', onTickLabelFormat);\n            }\n            return AxisClass;\n        }\n        /**\n         * Get the largest label width and height.\n         *\n         * @private\n         * @function Highcharts.Axis#getMaxLabelDimensions\n         *\n         * @param {Highcharts.Dictionary<Highcharts.Tick>} ticks\n         * All the ticks on one axis.\n         *\n         * @param {Array<number|string>} tickPositions\n         * All the tick positions on one axis.\n         *\n         * @return {Highcharts.SizeObject}\n         * Object containing the properties height and width.\n         *\n         * @todo Move this to the generic axis implementation, as it is used there.\n         */\n        function getMaxLabelDimensions(ticks, tickPositions) {\n            var dimensions = {\n                width: 0,\n                height: 0\n            };\n            tickPositions.forEach(function (pos) {\n                var tick = ticks[pos];\n                var labelHeight = 0, labelWidth = 0, label;\n                if (isObject(tick)) {\n                    label = isObject(tick.label) ? tick.label : {};\n                    // Find width and height of label\n                    labelHeight = label.getBBox ? label.getBBox().height : 0;\n                    if (label.textStr && !isNumber(label.textPxLength)) {\n                        label.textPxLength = label.getBBox().width;\n                    }\n                    labelWidth = isNumber(label.textPxLength) ?\n                        // Math.round ensures crisp lines\n                        Math.round(label.textPxLength) :\n                        0;\n                    if (label.textStr) {\n                        // Set the tickWidth same as the label width after ellipsis\n                        // applied #10281\n                        labelWidth = Math.round(label.getBBox().width);\n                    }\n                    // Update the result if width and/or height are larger\n                    dimensions.height = Math.max(labelHeight, dimensions.height);\n                    dimensions.width = Math.max(labelWidth, dimensions.width);\n                }\n            });\n            // For tree grid, add indentation\n            if (this.type === 'treegrid' &&\n                this.treeGrid &&\n                this.treeGrid.mapOfPosToGridNode) {\n                var treeDepth = this.treeGrid.mapOfPosToGridNode[-1].height || 0;\n                dimensions.width += (this.options.labels.indentation *\n                    (treeDepth - 1));\n            }\n            return dimensions;\n        }\n        /**\n         * Handle columns and getOffset.\n         * @private\n         */\n        function wrapGetOffset(proceed) {\n            var grid = this.grid, \n            // On the left side we handle the columns first because the offset is\n            // calculated from the plot area and out\n            columnsFirst = this.side === 3;\n            if (!columnsFirst) {\n                proceed.apply(this);\n            }\n            if (!(grid === null || grid === void 0 ? void 0 : grid.isColumn)) {\n                var columns = (grid === null || grid === void 0 ? void 0 : grid.columns) || [];\n                if (columnsFirst) {\n                    columns = columns.slice().reverse();\n                }\n                columns\n                    .forEach(function (column) {\n                    column.getOffset();\n                });\n            }\n            if (columnsFirst) {\n                proceed.apply(this);\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterGetTitlePosition(e) {\n            var axis = this;\n            var options = axis.options;\n            var gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                // Compute anchor points for each of the title align options\n                var axisTitle = axis.axisTitle, axisHeight = axis.height, horiz = axis.horiz, axisLeft = axis.left, offset = axis.offset, opposite = axis.opposite, options_1 = axis.options, axisTop = axis.top, axisWidth = axis.width;\n                var tickSize = axis.tickSize();\n                var titleWidth = axisTitle && axisTitle.getBBox().width;\n                var xOption = options_1.title.x;\n                var yOption = options_1.title.y;\n                var titleMargin = pick(options_1.title.margin, horiz ? 5 : 10);\n                var titleFontSize = axisTitle ? axis.chart.renderer.fontMetrics(axisTitle).f : 0;\n                var crispCorr = tickSize ? tickSize[0] / 2 : 0;\n                // TODO account for alignment\n                // the position in the perpendicular direction of the axis\n                var offAxis = ((horiz ? axisTop + axisHeight : axisLeft) +\n                    (horiz ? 1 : -1) * // Horizontal axis reverses the margin\n                        (opposite ? -1 : 1) * // So does opposite axes\n                        crispCorr +\n                    (axis.side === GridAxisSide.bottom ? titleFontSize : 0));\n                e.titlePosition.x = horiz ?\n                    axisLeft - (titleWidth || 0) / 2 - titleMargin + xOption :\n                    offAxis + (opposite ? axisWidth : 0) + offset + xOption;\n                e.titlePosition.y = horiz ?\n                    (offAxis -\n                        (opposite ? axisHeight : 0) +\n                        (opposite ? titleFontSize : -titleFontSize) / 2 +\n                        offset +\n                        yOption) :\n                    axisTop - titleMargin + yOption;\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterInit() {\n            var axis = this;\n            var chart = axis.chart, _a = axis.options.grid, gridOptions = _a === void 0 ? {} : _a, userOptions = axis.userOptions;\n            if (gridOptions.enabled) {\n                applyGridOptions(axis);\n            }\n            if (gridOptions.columns) {\n                var columns = axis.grid.columns = [];\n                var columnIndex = axis.grid.columnIndex = 0;\n                // Handle columns, each column is a grid axis\n                while (++columnIndex < gridOptions.columns.length) {\n                    var columnOptions = merge(userOptions, gridOptions.columns[columnIndex], {\n                        isInternal: true,\n                        linkedTo: 0,\n                        // Disable by default the scrollbar on the grid axis\n                        scrollbar: {\n                            enabled: false\n                        }\n                    }, \n                    // Avoid recursion\n                    {\n                        grid: {\n                            columns: void 0\n                        }\n                    });\n                    var column = new Axis(axis.chart, columnOptions, 'yAxis');\n                    column.grid.isColumn = true;\n                    column.grid.columnIndex = columnIndex;\n                    // Remove column axis from chart axes array, and place it\n                    // in the columns array.\n                    erase(chart.axes, column);\n                    erase(chart[axis.coll] || [], column);\n                    columns.push(column);\n                }\n            }\n        }\n        /**\n         * Draw an extra line on the far side of the outermost axis,\n         * creating floor/roof/wall of a grid. And some padding.\n         * ```\n         * Make this:\n         *             (axis.min) __________________________ (axis.max)\n         *                           |    |    |    |    |\n         * Into this:\n         *             (axis.min) __________________________ (axis.max)\n         *                        ___|____|____|____|____|__\n         * ```\n         * @private\n         */\n        function onAfterRender() {\n            var axis = this, axisTitle = axis.axisTitle, grid = axis.grid, options = axis.options, gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                var min = axis.min || 0, max = axis.max || 0, firstTick = axis.ticks[axis.tickPositions[0]];\n                // Adjust the title max width to the column width (#19657)\n                if (axisTitle &&\n                    !axis.chart.styledMode &&\n                    (firstTick === null || firstTick === void 0 ? void 0 : firstTick.slotWidth) &&\n                    !axis.options.title.style.width) {\n                    axisTitle.css({ width: \"\".concat(firstTick.slotWidth, \"px\") });\n                }\n                // @todo actual label padding (top, bottom, left, right)\n                axis.maxLabelDimensions = axis.getMaxLabelDimensions(axis.ticks, axis.tickPositions);\n                // Remove right wall before rendering if updating\n                if (axis.rightWall) {\n                    axis.rightWall.destroy();\n                }\n                /*\n                Draw an extra axis line on outer axes\n                            >\n                Make this:    |______|______|______|___\n\n                            > _________________________\n                Into this:    |______|______|______|__|\n                                                        */\n                if (axis.grid && axis.grid.isOuterAxis() && axis.axisLine) {\n                    var lineWidth = options.lineWidth;\n                    if (lineWidth) {\n                        var linePath = axis.getLinePath(lineWidth), startPoint = linePath[0], endPoint = linePath[1], \n                        // Negate distance if top or left axis\n                        // Subtract 1px to draw the line at the end of the tick\n                        tickLength = (axis.tickSize('tick') || [1])[0], distance = tickLength * ((axis.side === GridAxisSide.top ||\n                            axis.side === GridAxisSide.left) ? -1 : 1);\n                        // If axis is horizontal, reposition line path vertically\n                        if (startPoint[0] === 'M' && endPoint[0] === 'L') {\n                            if (axis.horiz) {\n                                startPoint[2] += distance;\n                                endPoint[2] += distance;\n                            }\n                            else {\n                                startPoint[1] += distance;\n                                endPoint[1] += distance;\n                            }\n                        }\n                        // If it doesn't exist, add an upper and lower border\n                        // for the vertical grid axis.\n                        if (!axis.horiz && axis.chart.marginRight) {\n                            var upperBorderStartPoint = startPoint, upperBorderEndPoint = [\n                                'L',\n                                axis.left,\n                                startPoint[2] || 0\n                            ], upperBorderPath = [\n                                upperBorderStartPoint,\n                                upperBorderEndPoint\n                            ], lowerBorderEndPoint = [\n                                'L',\n                                axis.chart.chartWidth - axis.chart.marginRight,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderStartPoint = [\n                                'M',\n                                endPoint[1] || 0,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderPath = [\n                                lowerBorderStartPoint,\n                                lowerBorderEndPoint\n                            ];\n                            if (!axis.grid.upperBorder && min % 1 !== 0) {\n                                axis.grid.upperBorder = axis.grid.renderBorder(upperBorderPath);\n                            }\n                            if (axis.grid.upperBorder) {\n                                axis.grid.upperBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.upperBorder.animate({\n                                    d: upperBorderPath\n                                });\n                            }\n                            if (!axis.grid.lowerBorder && max % 1 !== 0) {\n                                axis.grid.lowerBorder = axis.grid.renderBorder(lowerBorderPath);\n                            }\n                            if (axis.grid.lowerBorder) {\n                                axis.grid.lowerBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.lowerBorder.animate({\n                                    d: lowerBorderPath\n                                });\n                            }\n                        }\n                        // Render an extra line parallel to the existing axes, to\n                        // close the grid.\n                        if (!axis.grid.axisLineExtra) {\n                            axis.grid.axisLineExtra = axis.grid.renderBorder(linePath);\n                        }\n                        else {\n                            axis.grid.axisLineExtra.attr({\n                                stroke: options.lineColor,\n                                'stroke-width': options.lineWidth\n                            });\n                            axis.grid.axisLineExtra.animate({\n                                d: linePath\n                            });\n                        }\n                        // Show or hide the line depending on options.showEmpty\n                        axis.axisLine[axis.showAxis ? 'show' : 'hide']();\n                    }\n                }\n                (grid && grid.columns || []).forEach(function (column) { return column.render(); });\n                // Manipulate the tick mark visibility\n                // based on the axis.max- allows smooth scrolling.\n                if (!axis.horiz &&\n                    axis.chart.hasRendered &&\n                    (axis.scrollbar ||\n                        (axis.linkedParent && axis.linkedParent.scrollbar)) &&\n                    axis.tickPositions.length) {\n                    var tickmarkOffset = axis.tickmarkOffset, lastTick = axis.tickPositions[axis.tickPositions.length - 1], firstTick_1 = axis.tickPositions[0];\n                    var label = void 0, tickMark = void 0;\n                    while ((label = axis.hiddenLabels.pop()) && label.element) {\n                        label.show(); // #15453\n                    }\n                    while ((tickMark = axis.hiddenMarks.pop()) &&\n                        tickMark.element) {\n                        tickMark.show(); // #16439\n                    }\n                    // Hide/show first tick label.\n                    label = axis.ticks[firstTick_1].label;\n                    if (label) {\n                        if (min - firstTick_1 > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    // Hide/show last tick mark/label.\n                    label = axis.ticks[lastTick].label;\n                    if (label) {\n                        if (lastTick - max > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    var mark = axis.ticks[lastTick].mark;\n                    if (mark &&\n                        lastTick - max < tickmarkOffset &&\n                        lastTick - max > 0 && axis.ticks[lastTick].isLast) {\n                        axis.hiddenMarks.push(mark.hide());\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetAxisTranslation() {\n            var axis = this;\n            var tickInfo = axis.tickPositions && axis.tickPositions.info;\n            var options = axis.options;\n            var gridOptions = options.grid || {};\n            var userLabels = axis.userOptions.labels || {};\n            // Fire this only for the Gantt type chart, #14868.\n            if (gridOptions.enabled) {\n                if (axis.horiz) {\n                    axis.series.forEach(function (series) {\n                        series.options.pointRange = 0;\n                    });\n                    // Lower level time ticks, like hours or minutes, represent\n                    // points in time and not ranges. These should be aligned\n                    // left in the grid cell by default. The same applies to\n                    // years of higher order.\n                    if (tickInfo &&\n                        options.dateTimeLabelFormats &&\n                        options.labels &&\n                        !defined(userLabels.align) &&\n                        (options.dateTimeLabelFormats[tickInfo.unitName]\n                            .range === false ||\n                            tickInfo.count > 1 // Years\n                        )) {\n                        options.labels.align = 'left';\n                        if (!defined(userLabels.x)) {\n                            options.labels.x = 3;\n                        }\n                    }\n                }\n                else {\n                    // Don't trim ticks which not in min/max range but\n                    // they are still in the min/max plus tickInterval.\n                    if (this.type !== 'treegrid' &&\n                        axis.grid &&\n                        axis.grid.columns) {\n                        this.minPointOffset = this.tickInterval;\n                    }\n                }\n            }\n        }\n        /**\n         * Creates a left and right wall on horizontal axes:\n         * - Places leftmost tick at the start of the axis, to create a left\n         *   wall\n         * - Ensures that the rightmost tick is at the end of the axis, to\n         *   create a right wall.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            var options = this.options, userOptions = e.userOptions, gridOptions = ((options && isObject(options.grid)) ? options.grid : {});\n            var gridAxisOptions;\n            if (gridOptions.enabled === true) {\n                // Merge the user options into default grid axis options so\n                // that when a user option is set, it takes precedence.\n                gridAxisOptions = merge(true, {\n                    className: ('highcharts-grid-axis ' + (userOptions.className || '')),\n                    dateTimeLabelFormats: {\n                        hour: {\n                            list: ['%H:%M', '%H']\n                        },\n                        day: {\n                            list: ['%A, %e. %B', '%a, %e. %b', '%E']\n                        },\n                        week: {\n                            list: ['Week %W', 'W%W']\n                        },\n                        month: {\n                            list: ['%B', '%b', '%o']\n                        }\n                    },\n                    grid: {\n                        borderWidth: 1\n                    },\n                    labels: {\n                        padding: 2,\n                        style: {\n                            fontSize: '0.9em'\n                        }\n                    },\n                    margin: 0,\n                    title: {\n                        text: null,\n                        reserveSpace: false,\n                        rotation: 0,\n                        style: {\n                            textOverflow: 'ellipsis'\n                        }\n                    },\n                    // In a grid axis, only allow one unit of certain types,\n                    // for example we shouldn't have one grid cell spanning\n                    // two days.\n                    units: [[\n                            'millisecond', // Unit name\n                            [1, 10, 100]\n                        ], [\n                            'second',\n                            [1, 10]\n                        ], [\n                            'minute',\n                            [1, 5, 15]\n                        ], [\n                            'hour',\n                            [1, 6]\n                        ], [\n                            'day',\n                            [1]\n                        ], [\n                            'week',\n                            [1]\n                        ], [\n                            'month',\n                            [1]\n                        ], [\n                            'year',\n                            null\n                        ]]\n                }, userOptions);\n                // X-axis specific options\n                if (this.coll === 'xAxis') {\n                    // For linked axes, tickPixelInterval is used only if\n                    // the tickPositioner below doesn't run or returns\n                    // undefined (like multiple years)\n                    if (defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPixelInterval)) {\n                        gridAxisOptions.tickPixelInterval = 350;\n                    }\n                    // For the secondary grid axis, use the primary axis'\n                    // tick intervals and return ticks one level higher.\n                    if (\n                    // Check for tick pixel interval in options\n                    !defined(userOptions.tickPixelInterval) &&\n                        // Only for linked axes\n                        defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPositioner) &&\n                        !defined(userOptions.tickInterval) &&\n                        !defined(userOptions.units)) {\n                        gridAxisOptions.tickPositioner = function (min, max) {\n                            var parentInfo = (this.linkedParent &&\n                                this.linkedParent.tickPositions &&\n                                this.linkedParent.tickPositions.info);\n                            if (parentInfo) {\n                                var units = (gridAxisOptions.units || []);\n                                var unitIdx = void 0, count = 1, unitName = 'year';\n                                for (var i = 0; i < units.length; i++) {\n                                    var unit_1 = units[i];\n                                    if (unit_1 && unit_1[0] === parentInfo.unitName) {\n                                        unitIdx = i;\n                                        break;\n                                    }\n                                }\n                                // Get the first allowed count on the next unit.\n                                var unit = (isNumber(unitIdx) && units[unitIdx + 1]);\n                                if (unit) {\n                                    unitName = unit[0] || 'year';\n                                    var counts = unit[1];\n                                    count = counts && counts[0] || 1;\n                                    // In case the base X axis shows years, make the\n                                    // secondary axis show ten times the years (#11427)\n                                }\n                                else if (parentInfo.unitName === 'year') {\n                                    // `unitName` is 'year'\n                                    count = parentInfo.count * 10;\n                                }\n                                var unitRange = timeUnits[unitName];\n                                this.tickInterval = unitRange * count;\n                                return this.chart.time.getTimeTicks({ unitRange: unitRange, count: count, unitName: unitName }, min, max, this.options.startOfWeek);\n                            }\n                        };\n                    }\n                }\n                // Now merge the combined options into the axis options\n                merge(true, this.options, gridAxisOptions);\n                if (this.horiz) {\n                    /*               _________________________\n                    Make this:    ___|_____|_____|_____|__|\n                                    ^                     ^\n                                    _________________________\n                    Into this:    |_____|_____|_____|_____|\n                                        ^                 ^    */\n                    options.minPadding = pick(userOptions.minPadding, 0);\n                    options.maxPadding = pick(userOptions.maxPadding, 0);\n                }\n                // If borderWidth is set, then use its value for tick and\n                // line width.\n                if (isNumber(options.grid.borderWidth)) {\n                    options.tickWidth = options.lineWidth =\n                        gridOptions.borderWidth;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetOptions2(e) {\n            var axis = this;\n            var userOptions = e.userOptions;\n            var gridOptions = userOptions && userOptions.grid || {};\n            var columns = gridOptions.columns;\n            // Add column options to the parent axis. Children has their column options\n            // set on init in onGridAxisAfterInit.\n            if (gridOptions.enabled && columns) {\n                merge(true, axis.options, columns[0]);\n            }\n        }\n        /**\n         * Handle columns and setScale.\n         * @private\n         */\n        function onAfterSetScale() {\n            var axis = this;\n            (axis.grid.columns || []).forEach(function (column) { return column.setScale(); });\n        }\n        /**\n         * Draw vertical axis ticks extra long to create cell floors and roofs.\n         * Overrides the tickLength for vertical axes.\n         * @private\n         */\n        function onAfterTickSize(e) {\n            var _a = this, horiz = _a.horiz, maxLabelDimensions = _a.maxLabelDimensions, _b = _a.options.grid, gridOptions = _b === void 0 ? {} : _b;\n            if (gridOptions.enabled && maxLabelDimensions) {\n                var labelPadding = this.options.labels.distance * 2;\n                var distance = horiz ?\n                    (gridOptions.cellHeight ||\n                        labelPadding + maxLabelDimensions.height) :\n                    labelPadding + maxLabelDimensions.width;\n                if (isArray(e.tickSize)) {\n                    e.tickSize[0] = distance;\n                }\n                else {\n                    e.tickSize = [distance, 0];\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            this.axes.forEach(function (axis) {\n                (axis.grid && axis.grid.columns || []).forEach(function (column) {\n                    column.setAxisSize();\n                    column.setAxisTranslation();\n                });\n            });\n        }\n        /**\n         * @private\n         */\n        function onDestroy(e) {\n            var grid = this.grid;\n            (grid.columns || []).forEach(function (column) { return column.destroy(e.keepEvents); });\n            grid.columns = void 0;\n        }\n        /**\n         * Wraps axis init to draw cell walls on vertical axes.\n         * @private\n         */\n        function onInit(e) {\n            var axis = this;\n            var userOptions = e.userOptions || {};\n            var gridOptions = userOptions.grid || {};\n            if (gridOptions.enabled && defined(gridOptions.borderColor)) {\n                userOptions.tickColor = userOptions.lineColor = (gridOptions.borderColor);\n            }\n            if (!axis.grid) {\n                axis.grid = new GridAxisAdditions(axis);\n            }\n            axis.hiddenLabels = [];\n            axis.hiddenMarks = [];\n        }\n        /**\n         * Center tick labels in cells.\n         * @private\n         */\n        function onTickAfterGetLabelPosition(e) {\n            var tick = this, label = tick.label, axis = tick.axis, reversed = axis.reversed, chart = axis.chart, options = axis.options, gridOptions = options.grid || {}, labelOpts = axis.options.labels, align = labelOpts.align, \n            // `verticalAlign` is currently not supported for axis.labels.\n            verticalAlign = 'middle', // LabelOpts.verticalAlign,\n            side = GridAxisSide[axis.side], tickmarkOffset = e.tickmarkOffset, tickPositions = axis.tickPositions, tickPos = tick.pos - tickmarkOffset, nextTickPos = (isNumber(tickPositions[e.index + 1]) ?\n                tickPositions[e.index + 1] - tickmarkOffset :\n                (axis.max || 0) + tickmarkOffset), tickSize = axis.tickSize('tick'), tickWidth = tickSize ? tickSize[0] : 0, crispCorr = tickSize ? tickSize[1] / 2 : 0;\n            // Only center tick labels in grid axes\n            if (gridOptions.enabled === true) {\n                var bottom = void 0, top_1, left = void 0, right = void 0;\n                // Calculate top and bottom positions of the cell.\n                if (side === 'top') {\n                    bottom = axis.top + axis.offset;\n                    top_1 = bottom - tickWidth;\n                }\n                else if (side === 'bottom') {\n                    top_1 = chart.chartHeight - axis.bottom + axis.offset;\n                    bottom = top_1 + tickWidth;\n                }\n                else {\n                    bottom = axis.top + axis.len - (axis.translate(reversed ? nextTickPos : tickPos) || 0);\n                    top_1 = axis.top + axis.len - (axis.translate(reversed ? tickPos : nextTickPos) || 0);\n                }\n                // Calculate left and right positions of the cell.\n                if (side === 'right') {\n                    left = chart.chartWidth - axis.right + axis.offset;\n                    right = left + tickWidth;\n                }\n                else if (side === 'left') {\n                    right = axis.left + axis.offset;\n                    left = right - tickWidth;\n                }\n                else {\n                    left = Math.round(axis.left + (axis.translate(reversed ? nextTickPos : tickPos) || 0)) - crispCorr;\n                    right = Math.min(// #15742\n                    Math.round(axis.left + (axis.translate(reversed ? tickPos : nextTickPos) || 0)) - crispCorr, axis.left + axis.len);\n                }\n                tick.slotWidth = right - left;\n                // Calculate the positioning of the label based on\n                // alignment.\n                e.pos.x = (align === 'left' ?\n                    left :\n                    align === 'right' ?\n                        right :\n                        left + ((right - left) / 2) // Default to center\n                );\n                e.pos.y = (verticalAlign === 'top' ?\n                    top_1 :\n                    verticalAlign === 'bottom' ?\n                        bottom :\n                        top_1 + ((bottom - top_1) / 2) // Default to middle\n                );\n                if (label) {\n                    var lblMetrics = chart.renderer.fontMetrics(label), labelHeight = label.getBBox().height;\n                    // Adjustment to y position to align the label correctly.\n                    // Would be better to have a setter or similar for this.\n                    if (!labelOpts.useHTML) {\n                        var lines = Math.round(labelHeight / lblMetrics.h);\n                        e.pos.y += (\n                        // Center the label\n                        // TODO: why does this actually center the label?\n                        ((lblMetrics.b - (lblMetrics.h - lblMetrics.f)) / 2) +\n                            // Adjust for height of additional lines.\n                            -(((lines - 1) * lblMetrics.h) / 2));\n                    }\n                    else {\n                        e.pos.y += (\n                        // Readjust yCorr in htmlUpdateTransform\n                        lblMetrics.b +\n                            // Adjust for height of html label\n                            -(labelHeight / 2));\n                    }\n                }\n                e.pos.x += (axis.horiz && labelOpts.x) || 0;\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickLabelFormat(ctx) {\n            var axis = ctx.axis, value = ctx.value;\n            if (axis.options.grid &&\n                axis.options.grid.enabled) {\n                var tickPos = axis.tickPositions;\n                var series = (axis.linkedParent || axis).series[0];\n                var isFirst = value === tickPos[0];\n                var isLast = value === tickPos[tickPos.length - 1];\n                var point = series && find(series.options.data, function (p) {\n                    return p[axis.isXAxis ? 'x' : 'y'] === value;\n                });\n                var pointCopy = void 0;\n                if (point && series.is('gantt')) {\n                    // For the Gantt set point aliases to the pointCopy\n                    // to do not change the original point\n                    pointCopy = merge(point);\n                    H.seriesTypes.gantt.prototype.pointClass\n                        .setGanttPointAliases(pointCopy);\n                }\n                // Make additional properties available for the\n                // formatter\n                ctx.isFirst = isFirst;\n                ctx.isLast = isLast;\n                ctx.point = pointCopy;\n            }\n        }\n        /**\n         * Makes tick labels which are usually ignored in a linked axis\n         * displayed if they are within range of linkedParent.min.\n         * ```\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Make this:             |   |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Into this:             | 1 |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         * ```\n         * @private\n         * @todo Does this function do what the drawing says? Seems to affect\n         *       ticks and not the labels directly?\n         */\n        function onTrimTicks() {\n            var axis = this, options = axis.options, gridOptions = options.grid || {}, categoryAxis = axis.categories, tickPositions = axis.tickPositions, firstPos = tickPositions[0], secondPos = tickPositions[1], lastPos = tickPositions[tickPositions.length - 1], beforeLastPos = tickPositions[tickPositions.length - 2], linkedMin = axis.linkedParent && axis.linkedParent.min, linkedMax = axis.linkedParent && axis.linkedParent.max, min = linkedMin || axis.min, max = linkedMax || axis.max, tickInterval = axis.tickInterval, startLessThanMin = ( // #19845\n            isNumber(min) &&\n                min >= firstPos + tickInterval &&\n                min < secondPos), endMoreThanMin = (isNumber(min) &&\n                firstPos < min &&\n                firstPos + tickInterval > min), startLessThanMax = (isNumber(max) &&\n                lastPos > max &&\n                lastPos - tickInterval < max), endMoreThanMax = (isNumber(max) &&\n                max <= lastPos - tickInterval &&\n                max > beforeLastPos);\n            if (gridOptions.enabled === true &&\n                !categoryAxis &&\n                (axis.isXAxis || axis.isLinked)) {\n                if ((endMoreThanMin || startLessThanMin) && !options.startOnTick) {\n                    tickPositions[0] = min;\n                }\n                if ((startLessThanMax || endMoreThanMax) && !options.endOnTick) {\n                    tickPositions[tickPositions.length - 1] = max;\n                }\n            }\n        }\n        /**\n         * Avoid altering tickInterval when reserving space.\n         * @private\n         */\n        function wrapUnsquish(proceed) {\n            var axis = this;\n            var _a = axis.options.grid, gridOptions = _a === void 0 ? {} : _a;\n            if (gridOptions.enabled === true && axis.categories) {\n                return axis.tickInterval;\n            }\n            return proceed.apply(axis, argsToArray(arguments));\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Additions for grid axes.\n         * @private\n         * @class\n         */\n        var GridAxisAdditions = /** @class */ (function () {\n            /* *\n            *\n            *  Constructors\n            *\n            * */\n            function GridAxisAdditions(axis) {\n                this.axis = axis;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Checks if an axis is the outer axis in its dimension. Since\n             * axes are placed outwards in order, the axis with the highest\n             * index is the outermost axis.\n             *\n             * Example: If there are multiple x-axes at the top of the chart,\n             * this function returns true if the axis supplied is the last\n             * of the x-axes.\n             *\n             * @private\n             *\n             * @return {boolean}\n             * True if the axis is the outermost axis in its dimension; false if\n             * not.\n             */\n            GridAxisAdditions.prototype.isOuterAxis = function () {\n                var _a;\n                var axis = this.axis;\n                var chart = axis.chart;\n                var columnIndex = axis.grid.columnIndex;\n                var columns = (((_a = axis.linkedParent) === null || _a === void 0 ? void 0 : _a.grid.columns) ||\n                    axis.grid.columns ||\n                    []);\n                var parentAxis = columnIndex ? axis.linkedParent : axis;\n                var thisIndex = -1, lastIndex = 0;\n                // On the left side, when we have columns (not only multiple axes), the\n                // main axis is to the left\n                if (axis.side === 3 && !chart.inverted && columns.length) {\n                    return !axis.linkedParent;\n                }\n                (chart[axis.coll] || []).forEach(function (otherAxis, index) {\n                    if (otherAxis.side === axis.side &&\n                        !otherAxis.options.isInternal) {\n                        lastIndex = index;\n                        if (otherAxis === parentAxis) {\n                            // Get the index of the axis in question\n                            thisIndex = index;\n                        }\n                    }\n                });\n                return (lastIndex === thisIndex &&\n                    (isNumber(columnIndex) ?\n                        columns.length === columnIndex :\n                        true));\n            };\n            /**\n             * Add extra border based on the provided path.\n             * @private\n             * @param {SVGPath} path\n             * The path of the border.\n             * @return {Highcharts.SVGElement}\n             * Border\n             */\n            GridAxisAdditions.prototype.renderBorder = function (path) {\n                var axis = this.axis, renderer = axis.chart.renderer, options = axis.options, extraBorderLine = renderer.path(path)\n                    .addClass('highcharts-axis-line')\n                    .add(axis.axisGroup);\n                if (!renderer.styledMode) {\n                    extraBorderLine.attr({\n                        stroke: options.lineColor,\n                        'stroke-width': options.lineWidth,\n                        zIndex: 7\n                    });\n                }\n                return extraBorderLine;\n            };\n            return GridAxisAdditions;\n        }());\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        // First letter of the day of the week, e.g. 'M' for 'Monday'.\n        dateFormats.E = function (timestamp) {\n            return this.dateFormat('%a', timestamp, true).charAt(0);\n        };\n        // Adds week date format\n        dateFormats.W = function (timestamp) {\n            var time = this, d = new this.Date(timestamp), unitsToOmit = ['Hours', 'Milliseconds', 'Minutes', 'Seconds'];\n            unitsToOmit.forEach(function (format) {\n                time.set(format, d, 0);\n            });\n            var firstDay = (this.get('Day', d) + 6) % 7;\n            var thursday = new this.Date(d.valueOf());\n            this.set('Date', thursday, this.get('Date', d) - firstDay + 3);\n            var firstThursday = new this.Date(this.get('FullYear', thursday), 0, 1);\n            if (this.get('Day', firstThursday) !== 4) {\n                this.set('Month', d, 0);\n                this.set('Date', d, 1 + (11 - this.get('Day', firstThursday)) % 7);\n            }\n            return (1 +\n                Math.floor((thursday.valueOf() - firstThursday.valueOf()) / 604800000)).toString();\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var GridAxis = {\n            compose: compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * @productdesc {gantt}\n         * For grid axes (like in Gantt charts),\n         * it is possible to declare as a list to provide different\n         * formats depending on available space.\n         *\n         * Defaults to:\n         * ```js\n         * {\n         *     hour: { list: ['%H:%M', '%H'] },\n         *     day: { list: ['%A, %e. %B', '%a, %e. %b', '%E'] },\n         *     week: { list: ['Week %W', 'W%W'] },\n         *     month: { list: ['%B', '%b', '%o'] }\n         * }\n         * ```\n         *\n         * @sample {gantt} gantt/grid-axis/date-time-label-formats\n         *         Gantt chart with custom axis date format.\n         *\n         * @apioption xAxis.dateTimeLabelFormats\n         */\n        /**\n         * Set grid options for the axis labels. Requires Highcharts Gantt.\n         *\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid\n         */\n        /**\n         * Enable grid on the axis labels. Defaults to true for Gantt charts.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid.enabled\n         */\n        /**\n         * Set specific options for each column (or row for horizontal axes) in the\n         * grid. Each extra column/row is its own axis, and the axis options can be set\n         * here.\n         *\n         * @sample gantt/demo/left-axis-table\n         *         Left axis as a table\n         * @sample gantt/demo/treegrid-columns\n         *         Collapsible tree grid with columns\n         *\n         * @type      {Array<Highcharts.XAxisOptions>}\n         * @apioption xAxis.grid.columns\n         */\n        /**\n         * Set border color for the label grid lines.\n         *\n         * @type      {Highcharts.ColorString}\n         * @default   #e6e6e6\n         * @apioption xAxis.grid.borderColor\n         */\n        /**\n         * Set border width of the label grid lines.\n         *\n         * @type      {number}\n         * @default   1\n         * @apioption xAxis.grid.borderWidth\n         */\n        /**\n         * Set cell height for grid axis labels. By default this is calculated from font\n         * size. This option only applies to horizontal axes. For vertical axes, check\n         * the [#yAxis.staticScale](yAxis.staticScale) option.\n         *\n         * @sample gantt/grid-axis/cellheight\n         *         Gant chart with custom cell height\n         * @type      {number}\n         * @apioption xAxis.grid.cellHeight\n         */\n        ''; // Keeps doclets above in JS file\n\n        return GridAxis;\n    });\n    _registerModule(_modules, 'Gantt/Tree.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __rest = (this && this.__rest) || function (s, e) {\n            var t = {};\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n                t[p] = s[p];\n            if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n                for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n                    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                        t[p[i]] = s[p[i]];\n                }\n            return t;\n        };\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        var extend = U.extend, isNumber = U.isNumber, pick = U.pick;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates an object map from parent id to children's index.\n         *\n         * @private\n         * @function Highcharts.Tree#getListOfParents\n         *\n         * @param {Array<*>} data\n         *        List of points set in options. `Array.parent` is parent id of point.\n         *\n         * @return {Highcharts.Dictionary<Array<*>>}\n         * Map from parent id to children index in data\n         */\n        function getListOfParents(data) {\n            var root = '', ids = [], listOfParents = data.reduce(function (prev, curr) {\n                var _a = curr.parent, parent = _a === void 0 ? '' : _a, id = curr.id;\n                if (typeof prev[parent] === 'undefined') {\n                    prev[parent] = [];\n                }\n                prev[parent].push(curr);\n                if (id) {\n                    ids.push(id);\n                }\n                return prev;\n            }, {});\n            Object.keys(listOfParents).forEach(function (node) {\n                var _a;\n                if ((node !== root) && (ids.indexOf(node) === -1)) {\n                    var adoptedByRoot = listOfParents[node].map(function (orphan) {\n                        var parentExcluded = __rest(orphan, []); // #15196\n                        return parentExcluded;\n                    });\n                    (_a = listOfParents[root]).push.apply(_a, adoptedByRoot);\n                    delete listOfParents[node];\n                }\n            });\n            return listOfParents;\n        }\n        /** @private */\n        function getNode(id, parent, level, data, mapOfIdToChildren, options) {\n            var after = options && options.after, before = options && options.before, node = {\n                data: data,\n                depth: level - 1,\n                id: id,\n                level: level,\n                parent: (parent || '')\n            };\n            var descendants = 0, height = 0, start, end;\n            // Allow custom logic before the children has been created.\n            if (typeof before === 'function') {\n                before(node, options);\n            }\n            // Call getNode recursively on the children. Calculate the height of the\n            // node, and the number of descendants.\n            var children = ((mapOfIdToChildren[id] || [])).map(function (child) {\n                var node = getNode(child.id, id, (level + 1), child, mapOfIdToChildren, options), childStart = child.start || NaN, childEnd = (child.milestone === true ?\n                    childStart :\n                    child.end ||\n                        NaN);\n                // Start should be the lowest child.start.\n                start = ((!isNumber(start) || childStart < start) ?\n                    childStart :\n                    start);\n                // End should be the largest child.end.\n                // If child is milestone, then use start as end.\n                end = ((!isNumber(end) || childEnd > end) ?\n                    childEnd :\n                    end);\n                descendants = descendants + 1 + node.descendants;\n                height = Math.max(node.height + 1, height);\n                return node;\n            });\n            // Calculate start and end for point if it is not already explicitly set.\n            if (data) {\n                data.start = pick(data.start, start);\n                data.end = pick(data.end, end);\n            }\n            extend(node, {\n                children: children,\n                descendants: descendants,\n                height: height\n            });\n            // Allow custom logic after the children has been created.\n            if (typeof after === 'function') {\n                after(node, options);\n            }\n            return node;\n        }\n        /** @private */\n        function getTree(data, options) {\n            return getNode('', null, 1, null, getListOfParents(data), options);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var Tree = {\n            getNode: getNode,\n            getTree: getTree\n        };\n\n        return Tree;\n    });\n    _registerModule(_modules, 'Core/Axis/TreeGrid/TreeGridTick.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var addEvent = U.addEvent, removeEvent = U.removeEvent, isObject = U.isObject, isNumber = U.isNumber, pick = U.pick, wrap = U.wrap;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onTickInit() {\n            var tick = this;\n            if (!tick.treeGrid) {\n                tick.treeGrid = new TreeGridTickAdditions(tick);\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickHover(label) {\n            label.addClass('highcharts-treegrid-node-active');\n            if (!label.renderer.styledMode) {\n                label.css({\n                    textDecoration: 'underline'\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickHoverExit(label, options) {\n            var css = isObject(options.style) ? options.style : {};\n            label.removeClass('highcharts-treegrid-node-active');\n            if (!label.renderer.styledMode) {\n                label.css({ textDecoration: (css.textDecoration || 'none') });\n            }\n        }\n        /**\n         * @private\n         */\n        function renderLabelIcon(tick, params) {\n            var _a;\n            var treeGrid = tick.treeGrid, isNew = !treeGrid.labelIcon, renderer = params.renderer, labelBox = params.xy, options = params.options, width = options.width || 0, height = options.height || 0, padding = ((_a = options.padding) !== null && _a !== void 0 ? _a : tick.axis.linkedParent) ? 0 : 5, iconCenter = {\n                x: labelBox.x - (width / 2) - padding,\n                y: labelBox.y - (height / 2)\n            }, rotation = params.collapsed ? 90 : 180, shouldRender = params.show && isNumber(iconCenter.y);\n            var icon = treeGrid.labelIcon;\n            if (!icon) {\n                treeGrid.labelIcon = icon = renderer\n                    .path(renderer.symbols[options.type](options.x || 0, options.y || 0, width, height))\n                    .addClass('highcharts-label-icon')\n                    .add(params.group);\n            }\n            // Set the new position, and show or hide\n            icon[shouldRender ? 'show' : 'hide'](); // #14904, #1338\n            // Presentational attributes\n            if (!renderer.styledMode) {\n                icon\n                    .attr({\n                    cursor: 'pointer',\n                    'fill': pick(params.color, \"#666666\" /* Palette.neutralColor60 */),\n                    'stroke-width': 1,\n                    stroke: options.lineColor,\n                    strokeWidth: options.lineWidth || 0\n                });\n            }\n            // Update the icon positions\n            icon[isNew ? 'attr' : 'animate']({\n                translateX: iconCenter.x,\n                translateY: iconCenter.y,\n                rotation: rotation\n            });\n        }\n        /**\n         * @private\n         */\n        function wrapGetLabelPosition(proceed, x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {\n            var tick = this, lbOptions = pick(tick.options && tick.options.labels, labelOptions), pos = tick.pos, axis = tick.axis, isTreeGrid = axis.type === 'treegrid', result = proceed.apply(tick, [x, y, label, horiz, lbOptions, tickmarkOffset, index, step]);\n            var mapOfPosToGridNode, node, level;\n            if (isTreeGrid) {\n                var _a = (lbOptions && isObject(lbOptions.symbol, true) ?\n                    lbOptions.symbol :\n                    {}), _b = _a.width, width = _b === void 0 ? 0 : _b, _c = _a.padding, padding = _c === void 0 ? axis.linkedParent ? 0 : 5 : _c, indentation = (lbOptions && isNumber(lbOptions.indentation) ?\n                    lbOptions.indentation :\n                    0);\n                mapOfPosToGridNode = axis.treeGrid.mapOfPosToGridNode;\n                node = mapOfPosToGridNode && mapOfPosToGridNode[pos];\n                level = (node && node.depth) || 1;\n                result.x += (\n                // Add space for symbols\n                (width + (padding * 2)) +\n                    // Apply indentation\n                    ((level - 1) * indentation));\n            }\n            return result;\n        }\n        /**\n         * @private\n         */\n        function wrapRenderLabel(proceed) {\n            var tick = this, pos = tick.pos, axis = tick.axis, label = tick.label, tickGrid = tick.treeGrid, tickOptions = tick.options, icon = tickGrid === null || tickGrid === void 0 ? void 0 : tickGrid.labelIcon, labelElement = label === null || label === void 0 ? void 0 : label.element, axisGrid = axis.treeGrid, axisOptions = axis.options, chart = axis.chart, tickPositions = axis.tickPositions, mapOfPosToGridNode = axisGrid.mapOfPosToGridNode, labelOptions = pick(tickOptions === null || tickOptions === void 0 ? void 0 : tickOptions.labels, axisOptions === null || axisOptions === void 0 ? void 0 : axisOptions.labels), symbolOptions = (labelOptions && isObject(labelOptions.symbol, true) ?\n                labelOptions.symbol :\n                {}), node = mapOfPosToGridNode && mapOfPosToGridNode[pos], _a = node || {}, descendants = _a.descendants, depth = _a.depth, hasDescendants = node && descendants && descendants > 0, level = depth, isTreeGridElement = (axis.type === 'treegrid') && labelElement, shouldRender = tickPositions.indexOf(pos) > -1, prefixClassName = 'highcharts-treegrid-node-', prefixLevelClass = prefixClassName + 'level-', styledMode = chart.styledMode;\n            var collapsed, addClassName, removeClassName;\n            if (isTreeGridElement && node) {\n                // Add class name for hierarchical styling.\n                label\n                    .removeClass(new RegExp(prefixLevelClass + '.*'))\n                    .addClass(prefixLevelClass + level);\n            }\n            proceed.apply(tick, Array.prototype.slice.call(arguments, 1));\n            if (isTreeGridElement && hasDescendants) {\n                collapsed = axisGrid.isCollapsed(node);\n                renderLabelIcon(tick, {\n                    color: (!styledMode &&\n                        label.styles.color ||\n                        ''),\n                    collapsed: collapsed,\n                    group: label.parentGroup,\n                    options: symbolOptions,\n                    renderer: label.renderer,\n                    show: shouldRender,\n                    xy: label.xy\n                });\n                // Add class name for the node.\n                addClassName = prefixClassName +\n                    (collapsed ? 'collapsed' : 'expanded');\n                removeClassName = prefixClassName +\n                    (collapsed ? 'expanded' : 'collapsed');\n                label\n                    .addClass(addClassName)\n                    .removeClass(removeClassName);\n                if (!styledMode) {\n                    label.css({\n                        cursor: 'pointer'\n                    });\n                }\n                // Add events to both label text and icon\n                [label, icon].forEach(function (object) {\n                    if (object && !object.attachedTreeGridEvents) {\n                        // On hover\n                        addEvent(object.element, 'mouseover', function () {\n                            onTickHover(label);\n                        });\n                        // On hover out\n                        addEvent(object.element, 'mouseout', function () {\n                            onTickHoverExit(label, labelOptions);\n                        });\n                        addEvent(object.element, 'click', function () {\n                            tickGrid.toggleCollapse();\n                        });\n                        object.attachedTreeGridEvents = true;\n                    }\n                });\n            }\n            else if (icon) {\n                removeEvent(labelElement);\n                label === null || label === void 0 ? void 0 : label.css({ cursor: 'default' });\n                icon.destroy();\n            }\n        }\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        var TreeGridTickAdditions = /** @class */ (function () {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * @private\n             */\n            function TreeGridTickAdditions(tick) {\n                this.tick = tick;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            TreeGridTickAdditions.compose = function (TickClass) {\n                var tickProto = TickClass.prototype;\n                if (!tickProto.toggleCollapse) {\n                    addEvent(TickClass, 'init', onTickInit);\n                    wrap(tickProto, 'getLabelPosition', wrapGetLabelPosition);\n                    wrap(tickProto, 'renderLabel', wrapRenderLabel);\n                    // Backwards compatibility\n                    tickProto.collapse = function (redraw) {\n                        this.treeGrid.collapse(redraw);\n                    };\n                    tickProto.expand = function (redraw) {\n                        this.treeGrid.expand(redraw);\n                    };\n                    tickProto.toggleCollapse = function (redraw) {\n                        this.treeGrid.toggleCollapse(redraw);\n                    };\n                }\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Collapse the grid cell. Used when axis is of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#collapse\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            TreeGridTickAdditions.prototype.collapse = function (redraw) {\n                var tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    var pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.collapse(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            };\n            /**\n             * Destroy remaining labelIcon if exist.\n             *\n             * @private\n             * @function Highcharts.Tick#destroy\n             */\n            TreeGridTickAdditions.prototype.destroy = function () {\n                if (this.labelIcon) {\n                    this.labelIcon.destroy();\n                }\n            };\n            /**\n             * Expand the grid cell. Used when axis is of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#expand\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            TreeGridTickAdditions.prototype.expand = function (redraw) {\n                var _a = this.tick, pos = _a.pos, axis = _a.axis, treeGrid = axis.treeGrid, brokenAxis = axis.brokenAxis, posMappedNodes = treeGrid.mapOfPosToGridNode;\n                if (brokenAxis && posMappedNodes) {\n                    var node = posMappedNodes[pos], breaks = treeGrid.expand(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            };\n            /**\n             * Toggle the collapse/expand state of the grid cell. Used when axis is\n             * of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#toggleCollapse\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            TreeGridTickAdditions.prototype.toggleCollapse = function (redraw) {\n                var tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    var pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.toggleCollapse(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            };\n            return TreeGridTickAdditions;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreeGridTickAdditions;\n    });\n    _registerModule(_modules, 'Series/TreeUtilities.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var extend = U.extend, isArray = U.isArray, isNumber = U.isNumber, isObject = U.isObject, merge = U.merge, pick = U.pick, relativeLength = U.relativeLength;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getColor(node, options) {\n            var index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n            var getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n            /**\n             * @private\n             */\n            var variateColor = function (color) {\n                var colorVariation = level && level.colorVariation;\n                if (colorVariation &&\n                    colorVariation.key === 'brightness' &&\n                    index &&\n                    siblings) {\n                    return Color.parse(color).brighten(colorVariation.to * (index / siblings)).get();\n                }\n                return color;\n            };\n            if (node) {\n                point = points[node.i];\n                level = mapOptionsToLevel[node.level] || {};\n                getColorByPoint = point && level.colorByPoint;\n                if (getColorByPoint) {\n                    colorIndexByPoint = point.index % (colors ?\n                        colors.length :\n                        chartOptionsChart.colorCount);\n                    colorByPoint = colors && colors[colorIndexByPoint];\n                }\n                // Select either point color, level color or inherited color.\n                if (!series.chart.styledMode) {\n                    color = pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n                }\n                colorIndex = pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n            }\n            return {\n                color: color,\n                colorIndex: colorIndex\n            };\n        }\n        /**\n         * Creates a map from level number to its given options.\n         *\n         * @private\n         *\n         * @param {Object} params\n         * Object containing parameters.\n         * - `defaults` Object containing default options. The default options are\n         *   merged with the userOptions to get the final options for a specific\n         *   level.\n         * - `from` The lowest level number.\n         * - `levels` User options from series.levels.\n         * - `to` The highest level number.\n         *\n         * @return {Highcharts.Dictionary<object>|null}\n         * Returns a map from level number to its given options.\n         */\n        function getLevelOptions(params) {\n            var result = {};\n            var defaults, converted, i, from, to, levels;\n            if (isObject(params)) {\n                from = isNumber(params.from) ? params.from : 1;\n                levels = params.levels;\n                converted = {};\n                defaults = isObject(params.defaults) ? params.defaults : {};\n                if (isArray(levels)) {\n                    converted = levels.reduce(function (obj, item) {\n                        var level, levelIsConstant, options;\n                        if (isObject(item) && isNumber(item.level)) {\n                            options = merge({}, item);\n                            levelIsConstant = pick(options.levelIsConstant, defaults.levelIsConstant);\n                            // Delete redundant properties.\n                            delete options.levelIsConstant;\n                            delete options.level;\n                            // Calculate which level these options apply to.\n                            level = item.level + (levelIsConstant ? 0 : from - 1);\n                            if (isObject(obj[level])) {\n                                merge(true, obj[level], options); // #16329\n                            }\n                            else {\n                                obj[level] = options;\n                            }\n                        }\n                        return obj;\n                    }, {});\n                }\n                to = isNumber(params.to) ? params.to : 1;\n                for (i = 0; i <= to; i++) {\n                    result[i] = merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         * @todo Combine buildTree and buildNode with setTreeValues\n         * @todo Remove logic from Treemap and make it utilize this mixin.\n         */\n        function setTreeValues(tree, options) {\n            var before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n            var childrenTotal = 0;\n            tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n            tree.name = pick(point && point.name, '');\n            tree.visible = (idRoot === tree.id ||\n                options.visible === true);\n            if (typeof before === 'function') {\n                tree = before(tree, options);\n            }\n            // First give the children some values\n            tree.children.forEach(function (child, i) {\n                var newOptions = extend({}, options);\n                extend(newOptions, {\n                    index: i,\n                    siblings: tree.children.length,\n                    visible: tree.visible\n                });\n                child = setTreeValues(child, newOptions);\n                children.push(child);\n                if (child.visible) {\n                    childrenTotal += child.val;\n                }\n            });\n            // Set the values\n            var value = pick(optionsPoint.value, childrenTotal);\n            tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n            tree.children = children;\n            tree.childrenTotal = childrenTotal;\n            tree.isLeaf = tree.visible && !childrenTotal;\n            tree.val = value;\n            return tree;\n        }\n        /**\n         * Update the rootId property on the series. Also makes sure that it is\n         * accessible to exporting.\n         *\n         * @private\n         *\n         * @param {Object} series\n         * The series to operate on.\n         *\n         * @return {string}\n         * Returns the resulting rootId after update.\n         */\n        function updateRootId(series) {\n            var rootId, options;\n            if (isObject(series)) {\n                // Get the series options.\n                options = isObject(series.options) ? series.options : {};\n                // Calculate the rootId.\n                rootId = pick(series.rootNode, options.rootId, '');\n                // Set rootId on series.userOptions to pick it up in exporting.\n                if (isObject(series.userOptions)) {\n                    series.userOptions.rootId = rootId;\n                }\n                // Set rootId on series to pick it up on next update.\n                series.rootNode = rootId;\n            }\n            return rootId;\n        }\n        /**\n         * Get the node width, which relies on the plot width and the nodeDistance\n         * option.\n         *\n         * @private\n         */\n        function getNodeWidth(series, columnCount) {\n            var chart = series.chart, options = series.options, _a = options.nodeDistance, nodeDistance = _a === void 0 ? 0 : _a, _b = options.nodeWidth, nodeWidth = _b === void 0 ? 0 : _b, _c = chart.plotSizeX, plotSizeX = _c === void 0 ? 1 : _c;\n            // Node width auto means they are evenly distributed along the width of\n            // the plot area\n            if (nodeWidth === 'auto') {\n                if (typeof nodeDistance === 'string' && /%$/.test(nodeDistance)) {\n                    var fraction = parseFloat(nodeDistance) / 100, total = columnCount + fraction * (columnCount - 1);\n                    return plotSizeX / total;\n                }\n                var nDistance = Number(nodeDistance);\n                return ((plotSizeX + nDistance) /\n                    (columnCount || 1)) - nDistance;\n            }\n            return relativeLength(nodeWidth, plotSizeX);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var TreeUtilities = {\n            getColor: getColor,\n            getLevelOptions: getLevelOptions,\n            getNodeWidth: getNodeWidth,\n            setTreeValues: setTreeValues,\n            updateRootId: updateRootId\n        };\n\n        return TreeUtilities;\n    });\n    _registerModule(_modules, 'Core/Axis/TreeGrid/TreeGridAxis.js', [_modules['Core/Axis/BrokenAxis.js'], _modules['Core/Axis/GridAxis.js'], _modules['Gantt/Tree.js'], _modules['Core/Axis/TreeGrid/TreeGridTick.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js']], function (BrokenAxis, GridAxis, Tree, TreeGridTick, TU, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var getLevelOptions = TU.getLevelOptions;\n        var addEvent = U.addEvent, find = U.find, fireEvent = U.fireEvent, isArray = U.isArray, isObject = U.isObject, isString = U.isString, merge = U.merge, pick = U.pick, removeEvent = U.removeEvent, wrap = U.wrap;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        var TickConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function getBreakFromNode(node, max) {\n            var to = node.collapseEnd || 0;\n            var from = node.collapseStart || 0;\n            // In broken-axis, the axis.max is minimized until it is not within a\n            // break. Therefore, if break.to is larger than axis.max, the axis.to\n            // should not add the 0.5 axis.tickMarkOffset, to avoid adding a break\n            // larger than axis.max.\n            // TODO consider simplifying broken-axis and this might solve itself\n            if (to >= max) {\n                from -= 0.5;\n            }\n            return {\n                from: from,\n                to: to,\n                showPoints: false\n            };\n        }\n        /**\n         * Creates a tree structure of the data, and the treegrid. Calculates\n         * categories, and y-values of points based on the tree.\n         *\n         * @private\n         * @function getTreeGridFromData\n         *\n         * @param {Array<Highcharts.GanttPointOptions>} data\n         * All the data points to display in the axis.\n         *\n         * @param {boolean} uniqueNames\n         * Whether or not the data node with the same name should share grid cell. If\n         * true they do share cell. False by default.\n         *\n         * @param {number} numberOfSeries\n         *\n         * @return {Object}\n         * Returns an object containing categories, mapOfIdToNode,\n         * mapOfPosToGridNode, and tree.\n         *\n         * @todo There should be only one point per line.\n         * @todo It should be optional to have one category per point, or merge\n         *       cells\n         * @todo Add unit-tests.\n         */\n        function getTreeGridFromData(data, uniqueNames, numberOfSeries) {\n            var categories = [], collapsedNodes = [], mapOfIdToNode = {}, uniqueNamesEnabled = uniqueNames || false;\n            var mapOfPosToGridNode = {}, posIterator = -1;\n            // Build the tree from the series data.\n            var treeParams = {\n                // After the children has been created.\n                after: function (node) {\n                    var gridNode = mapOfPosToGridNode[node.pos];\n                    var height = 0, descendants = 0;\n                    gridNode.children.forEach(function (child) {\n                        descendants += (child.descendants || 0) + 1;\n                        height = Math.max((child.height || 0) + 1, height);\n                    });\n                    gridNode.descendants = descendants;\n                    gridNode.height = height;\n                    if (gridNode.collapsed) {\n                        collapsedNodes.push(gridNode);\n                    }\n                },\n                // Before the children has been created.\n                before: function (node) {\n                    var data = isObject(node.data, true) ?\n                        node.data :\n                        {}, name = isString(data.name) ? data.name : '', parentNode = mapOfIdToNode[node.parent], parentGridNode = (isObject(parentNode, true) ?\n                        mapOfPosToGridNode[parentNode.pos] :\n                        null), hasSameName = function (x) {\n                        return x.name === name;\n                    };\n                    var gridNode, pos;\n                    // If not unique names, look for sibling node with the same name\n                    if (uniqueNamesEnabled &&\n                        isObject(parentGridNode, true) &&\n                        !!(gridNode = find(parentGridNode.children, hasSameName))) {\n                        // If there is a gridNode with the same name, reuse position\n                        pos = gridNode.pos;\n                        // Add data node to list of nodes in the grid node.\n                        gridNode.nodes.push(node);\n                    }\n                    else {\n                        // If it is a new grid node, increment position.\n                        pos = posIterator++;\n                    }\n                    // Add new grid node to map.\n                    if (!mapOfPosToGridNode[pos]) {\n                        mapOfPosToGridNode[pos] = gridNode = {\n                            depth: parentGridNode ? parentGridNode.depth + 1 : 0,\n                            name: name,\n                            id: data.id,\n                            nodes: [node],\n                            children: [],\n                            pos: pos\n                        };\n                        // If not root, then add name to categories.\n                        if (pos !== -1) {\n                            categories.push(name);\n                        }\n                        // Add name to list of children.\n                        if (isObject(parentGridNode, true)) {\n                            parentGridNode.children.push(gridNode);\n                        }\n                    }\n                    // Add data node to map\n                    if (isString(node.id)) {\n                        mapOfIdToNode[node.id] = node;\n                    }\n                    // If one of the points are collapsed, then start the grid node\n                    // in collapsed state.\n                    if (gridNode &&\n                        data.collapsed === true) {\n                        gridNode.collapsed = true;\n                    }\n                    // Assign pos to data node\n                    node.pos = pos;\n                }\n            };\n            var updateYValuesAndTickPos = function (map, numberOfSeries) {\n                var setValues = function (gridNode, start, result) {\n                    var nodes = gridNode.nodes, padding = 0.5;\n                    var end = start + (start === -1 ? 0 : numberOfSeries - 1);\n                    var diff = (end - start) / 2, pos = start + diff;\n                    nodes.forEach(function (node) {\n                        var data = node.data;\n                        if (isObject(data, true)) {\n                            // Update point\n                            data.y = start + (data.seriesIndex || 0);\n                            // Remove the property once used\n                            delete data.seriesIndex;\n                        }\n                        node.pos = pos;\n                    });\n                    result[pos] = gridNode;\n                    gridNode.pos = pos;\n                    gridNode.tickmarkOffset = diff + padding;\n                    gridNode.collapseStart = end + padding;\n                    gridNode.children.forEach(function (child) {\n                        setValues(child, end + 1, result);\n                        end = (child.collapseEnd || 0) - padding;\n                    });\n                    // Set collapseEnd to the end of the last child node.\n                    gridNode.collapseEnd = end + padding;\n                    return result;\n                };\n                return setValues(map['-1'], -1, {});\n            };\n            // Create tree from data\n            var tree = Tree.getTree(data, treeParams);\n            // Update y values of data, and set calculate tick positions.\n            mapOfPosToGridNode = updateYValuesAndTickPos(mapOfPosToGridNode, numberOfSeries);\n            // Return the resulting data.\n            return {\n                categories: categories,\n                mapOfIdToNode: mapOfIdToNode,\n                mapOfPosToGridNode: mapOfPosToGridNode,\n                collapsedNodes: collapsedNodes,\n                tree: tree\n            };\n        }\n        /**\n         * Builds the tree of categories and calculates its positions.\n         * @private\n         * @param {Object} e Event object\n         * @param {Object} e.target The chart instance which the event was fired on.\n         * @param {object[]} e.target.axes The axes of the chart.\n         */\n        function onBeforeRender(e) {\n            var chart = e.target, axes = chart.axes;\n            axes.filter(function (axis) { return axis.type === 'treegrid'; }).forEach(function (axis) {\n                var options = axis.options || {}, labelOptions = options.labels, uniqueNames = axis.uniqueNames, max = options.max, \n                // Check whether any of series is rendering for the first\n                // time, visibility has changed, or its data is dirty, and\n                // only then update. #10570, #10580. Also check if\n                // mapOfPosToGridNode exists. #10887\n                isDirty = (!axis.treeGrid.mapOfPosToGridNode ||\n                    axis.series.some(function (series) {\n                        return !series.hasRendered ||\n                            series.isDirtyData ||\n                            series.isDirty;\n                    }));\n                var numberOfSeries = 0, data, treeGrid;\n                if (isDirty) {\n                    // Concatenate data from all series assigned to this axis.\n                    data = axis.series.reduce(function (arr, s) {\n                        if (s.visible) {\n                            // Push all data to array\n                            (s.options.data || []).forEach(function (data) {\n                                // For using keys - rebuild the data structure\n                                if (s.options.keys && s.options.keys.length) {\n                                    data = s.pointClass.prototype\n                                        .optionsToObject\n                                        .call({ series: s }, data);\n                                    s.pointClass.setGanttPointAliases(data);\n                                }\n                                if (isObject(data, true)) {\n                                    // Set series index on data. Removed again\n                                    // after use.\n                                    data.seriesIndex = (numberOfSeries);\n                                    arr.push(data);\n                                }\n                            });\n                            // Increment series index\n                            if (uniqueNames === true) {\n                                numberOfSeries++;\n                            }\n                        }\n                        return arr;\n                    }, []);\n                    // If max is higher than set data - add a\n                    // dummy data to render categories #10779\n                    if (max && data.length < max) {\n                        for (var i = data.length; i <= max; i++) {\n                            data.push({\n                                // Use the zero-width character\n                                // to avoid conflict with uniqueNames\n                                name: i + '\\u200B'\n                            });\n                        }\n                    }\n                    // `setScale` is fired after all the series is initialized,\n                    // which is an ideal time to update the axis.categories.\n                    treeGrid = getTreeGridFromData(data, uniqueNames || false, (uniqueNames === true) ? numberOfSeries : 1);\n                    // Assign values to the axis.\n                    axis.categories = treeGrid.categories;\n                    axis.treeGrid.mapOfPosToGridNode = (treeGrid.mapOfPosToGridNode);\n                    axis.hasNames = true;\n                    axis.treeGrid.tree = treeGrid.tree;\n                    // Update yData now that we have calculated the y values\n                    axis.series.forEach(function (series) {\n                        var axisData = (series.options.data || []).map(function (d) {\n                            if (isArray(d) &&\n                                series.options.keys &&\n                                series.options.keys.length) {\n                                // Get the axisData from the data array used to\n                                // build the treeGrid where has been modified\n                                data.forEach(function (point) {\n                                    if (d.indexOf(point.x) >= 0 &&\n                                        d.indexOf(point.x2) >= 0) {\n                                        d = point;\n                                    }\n                                });\n                            }\n                            return isObject(d, true) ? merge(d) : d;\n                        });\n                        // Avoid destroying points when series is not visible\n                        if (series.visible) {\n                            series.setData(axisData, false);\n                        }\n                    });\n                    // Calculate the label options for each level in the tree.\n                    axis.treeGrid.mapOptionsToLevel =\n                        getLevelOptions({\n                            defaults: labelOptions,\n                            from: 1,\n                            levels: labelOptions && labelOptions.levels,\n                            to: axis.treeGrid.tree && axis.treeGrid.tree.height\n                        });\n                    // Setting initial collapsed nodes\n                    if (e.type === 'beforeRender') {\n                        axis.treeGrid.collapsedNodes = treeGrid.collapsedNodes;\n                    }\n                }\n            });\n        }\n        /**\n         * Generates a tick for initial positioning.\n         *\n         * @private\n         * @function Highcharts.GridAxis#generateTick\n         *\n         * @param {Function} proceed\n         * The original generateTick function.\n         *\n         * @param {number} pos\n         * The tick position in axis values.\n         */\n        function wrapGenerateTick(proceed, pos) {\n            var axis = this, mapOptionsToLevel = axis.treeGrid.mapOptionsToLevel || {}, isTreeGrid = axis.type === 'treegrid', ticks = axis.ticks;\n            var tick = ticks[pos], levelOptions, options, gridNode;\n            if (isTreeGrid &&\n                axis.treeGrid.mapOfPosToGridNode) {\n                gridNode = axis.treeGrid.mapOfPosToGridNode[pos];\n                levelOptions = mapOptionsToLevel[gridNode.depth];\n                if (levelOptions) {\n                    options = {\n                        labels: levelOptions\n                    };\n                }\n                if (!tick &&\n                    TickConstructor) {\n                    ticks[pos] = tick =\n                        new TickConstructor(axis, pos, void 0, void 0, {\n                            category: gridNode.name,\n                            tickmarkOffset: gridNode.tickmarkOffset,\n                            options: options\n                        });\n                }\n                else {\n                    // Update labels depending on tick interval\n                    tick.parameters.category = gridNode.name;\n                    tick.options = options;\n                    tick.addLabel();\n                }\n            }\n            else {\n                proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /**\n         * @private\n         */\n        function wrapInit(proceed, chart, userOptions, coll) {\n            var axis = this, isTreeGrid = userOptions.type === 'treegrid';\n            if (!axis.treeGrid) {\n                axis.treeGrid = new TreeGridAxisAdditions(axis);\n            }\n            // Set default and forced options for TreeGrid\n            if (isTreeGrid) {\n                // Add event for updating the categories of a treegrid.\n                // NOTE Preferably these events should be set on the axis.\n                addEvent(chart, 'beforeRender', onBeforeRender);\n                addEvent(chart, 'beforeRedraw', onBeforeRender);\n                // Add new collapsed nodes on addseries\n                addEvent(chart, 'addSeries', function (e) {\n                    if (e.options.data) {\n                        var treeGrid = getTreeGridFromData(e.options.data, userOptions.uniqueNames || false, 1);\n                        axis.treeGrid.collapsedNodes = (axis.treeGrid.collapsedNodes || []).concat(treeGrid.collapsedNodes);\n                    }\n                });\n                // Collapse all nodes in axis.treegrid.collapsednodes\n                // where collapsed equals true.\n                addEvent(axis, 'foundExtremes', function () {\n                    if (axis.treeGrid.collapsedNodes) {\n                        axis.treeGrid.collapsedNodes.forEach(function (node) {\n                            var breaks = axis.treeGrid.collapse(node);\n                            if (axis.brokenAxis) {\n                                axis.brokenAxis.setBreaks(breaks, false);\n                                // Remove the node from the axis collapsedNodes\n                                if (axis.treeGrid.collapsedNodes) {\n                                    axis.treeGrid.collapsedNodes = axis.treeGrid\n                                        .collapsedNodes\n                                        .filter(function (n) { return ((node.collapseStart !==\n                                        n.collapseStart) ||\n                                        node.collapseEnd !== n.collapseEnd); });\n                                }\n                            }\n                        });\n                    }\n                });\n                // If staticScale is not defined on the yAxis\n                // and chart height is set, set axis.isDirty\n                // to ensure collapsing works (#12012)\n                addEvent(axis, 'afterBreaks', function () {\n                    if (axis.coll === 'yAxis' &&\n                        !axis.staticScale &&\n                        axis.chart.options.chart.height) {\n                        axis.isDirty = true;\n                    }\n                });\n                userOptions = merge({\n                    // Default options\n                    grid: {\n                        enabled: true\n                    },\n                    // TODO: add support for align in treegrid.\n                    labels: {\n                        align: 'left',\n                        /**\n                        * Set options on specific levels in a tree grid axis. Takes\n                        * precedence over labels options.\n                        *\n                        * @sample {gantt} gantt/treegrid-axis/labels-levels\n                        *         Levels on TreeGrid Labels\n                        *\n                        * @type      {Array<*>}\n                        * @product   gantt\n                        * @apioption yAxis.labels.levels\n                        *\n                        * @private\n                        */\n                        levels: [{\n                                /**\n                                * Specify the level which the options within this object\n                                * applies to.\n                                *\n                                * @type      {number}\n                                * @product   gantt\n                                * @apioption yAxis.labels.levels.level\n                                *\n                                * @private\n                                */\n                                level: void 0\n                            }, {\n                                level: 1,\n                                /**\n                                 * @type      {Highcharts.CSSObject}\n                                 * @product   gantt\n                                 * @apioption yAxis.labels.levels.style\n                                 *\n                                 * @private\n                                 */\n                                style: {\n                                    /** @ignore-option */\n                                    fontWeight: 'bold'\n                                }\n                            }],\n                        /**\n                         * The symbol for the collapse and expand icon in a\n                         * treegrid.\n                         *\n                         * @product      gantt\n                         * @optionparent yAxis.labels.symbol\n                         *\n                         * @private\n                         */\n                        symbol: {\n                            /**\n                             * The symbol type. Points to a definition function in\n                             * the `Highcharts.Renderer.symbols` collection.\n                             *\n                             * @type {Highcharts.SymbolKeyValue}\n                             *\n                             * @private\n                             */\n                            type: 'triangle',\n                            x: -5,\n                            y: -5,\n                            height: 10,\n                            width: 10\n                        }\n                    },\n                    uniqueNames: false\n                }, userOptions, {\n                    // Forced options\n                    reversed: true\n                });\n            }\n            // Now apply the original function with the original arguments, which are\n            // sliced off this function's arguments\n            proceed.apply(axis, [chart, userOptions, coll]);\n            if (isTreeGrid) {\n                axis.hasNames = true;\n                axis.options.showLastLabel = true;\n            }\n        }\n        /**\n         * Set the tick positions, tickInterval, axis min and max.\n         *\n         * @private\n         * @function Highcharts.GridAxis#setTickInterval\n         *\n         * @param {Function} proceed\n         * The original setTickInterval function.\n         */\n        function wrapSetTickInterval(proceed) {\n            var _a;\n            var axis = this, options = axis.options, linkedParent = typeof options.linkedTo === 'number' ?\n                (_a = this.chart[axis.coll]) === null || _a === void 0 ? void 0 : _a[options.linkedTo] :\n                void 0, isTreeGrid = axis.type === 'treegrid';\n            if (isTreeGrid) {\n                axis.min = pick(axis.userMin, options.min, axis.dataMin);\n                axis.max = pick(axis.userMax, options.max, axis.dataMax);\n                fireEvent(axis, 'foundExtremes');\n                // `setAxisTranslation` modifies the min and max according to axis\n                // breaks.\n                axis.setAxisTranslation();\n                axis.tickInterval = 1;\n                axis.tickmarkOffset = 0.5;\n                axis.tickPositions = axis.treeGrid.mapOfPosToGridNode ?\n                    axis.treeGrid.getTickPositions() :\n                    [];\n                if (linkedParent) {\n                    var linkedParentExtremes = linkedParent.getExtremes();\n                    axis.min = pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);\n                    axis.max = pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);\n                    axis.tickPositions = linkedParent.tickPositions;\n                }\n                axis.linkedParent = linkedParent;\n            }\n            else {\n                proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /**\n         * Wrap axis redraw to remove TreeGrid events from ticks\n         *\n         * @private\n         * @function Highcharts.GridAxis#redraw\n         *\n         * @param {Function} proceed\n         * The original setTickInterval function.\n         */\n        function wrapRedraw(proceed) {\n            var axis = this, isTreeGrid = this.type === 'treegrid';\n            if (isTreeGrid && axis.visible) {\n                axis.tickPositions.forEach(function (pos) {\n                    var tick = axis.ticks[pos];\n                    if (tick.label && tick.label.attachedTreeGridEvents) {\n                        removeEvent(tick.label.element);\n                        tick.label.attachedTreeGridEvents = false;\n                    }\n                });\n            }\n            proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n        }\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        var TreeGridAxisAdditions = /** @class */ (function () {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * @private\n             */\n            function TreeGridAxisAdditions(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            TreeGridAxisAdditions.compose = function (AxisClass, ChartClass, SeriesClass, TickClass) {\n                if (!AxisClass.keepProps.includes('treeGrid')) {\n                    var axisProps = AxisClass.prototype;\n                    AxisClass.keepProps.push('treeGrid');\n                    wrap(axisProps, 'generateTick', wrapGenerateTick);\n                    wrap(axisProps, 'init', wrapInit);\n                    wrap(axisProps, 'setTickInterval', wrapSetTickInterval);\n                    wrap(axisProps, 'redraw', wrapRedraw);\n                    // Make utility functions available for testing.\n                    axisProps.utils = {\n                        getNode: Tree.getNode\n                    };\n                    if (!TickConstructor) {\n                        TickConstructor = TickClass;\n                    }\n                }\n                GridAxis.compose(AxisClass, ChartClass, TickClass);\n                BrokenAxis.compose(AxisClass, SeriesClass);\n                TreeGridTick.compose(TickClass);\n                return AxisClass;\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set the collapse status.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to collapse.\n             */\n            TreeGridAxisAdditions.prototype.setCollapsedStatus = function (node) {\n                var axis = this.axis, chart = axis.chart;\n                axis.series.forEach(function (series) {\n                    var data = series.options.data;\n                    if (node.id && data) {\n                        var point = chart.get(node.id), dataPoint = data[series.data.indexOf(point)];\n                        if (point && dataPoint) {\n                            point.collapsed = node.collapsed;\n                            dataPoint.collapsed = node.collapsed;\n                        }\n                    }\n                });\n            };\n            /**\n             * Calculates the new axis breaks to collapse a node.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to collapse.\n             *\n             * @param {number} pos\n             * The tick position to collapse.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            TreeGridAxisAdditions.prototype.collapse = function (node) {\n                var axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                breaks.push(obj);\n                // Change the collapsed flag #13838\n                node.collapsed = true;\n                axis.treeGrid.setCollapsedStatus(node);\n                return breaks;\n            };\n            /**\n             * Calculates the new axis breaks to expand a node.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to expand.\n             *\n             * @param {number} pos\n             * The tick position to expand.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            TreeGridAxisAdditions.prototype.expand = function (node) {\n                var axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                // Change the collapsed flag #13838\n                node.collapsed = false;\n                axis.treeGrid.setCollapsedStatus(node);\n                // Remove the break from the axis breaks array.\n                return breaks.reduce(function (arr, b) {\n                    if (b.to !== obj.to || b.from !== obj.from) {\n                        arr.push(b);\n                    }\n                    return arr;\n                }, []);\n            };\n            /**\n             * Creates a list of positions for the ticks on the axis. Filters out\n             * positions that are outside min and max, or is inside an axis break.\n             *\n             * @private\n             *\n             * @return {Array<number>}\n             * List of positions.\n             */\n            TreeGridAxisAdditions.prototype.getTickPositions = function () {\n                var axis = this.axis, roundedMin = Math.floor(axis.min / axis.tickInterval) * axis.tickInterval, roundedMax = Math.ceil(axis.max / axis.tickInterval) * axis.tickInterval;\n                return Object.keys(axis.treeGrid.mapOfPosToGridNode || {}).reduce(function (arr, key) {\n                    var pos = +key;\n                    if (pos >= roundedMin &&\n                        pos <= roundedMax &&\n                        !(axis.brokenAxis && axis.brokenAxis.isInAnyBreak(pos))) {\n                        arr.push(pos);\n                    }\n                    return arr;\n                }, []);\n            };\n            /**\n             * Check if a node is collapsed.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Object} node\n             * The node to check if is collapsed.\n             *\n             * @param {number} pos\n             * The tick position to collapse.\n             *\n             * @return {boolean}\n             * Returns true if collapsed, false if expanded.\n             */\n            TreeGridAxisAdditions.prototype.isCollapsed = function (node) {\n                var axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                return breaks.some(function (b) {\n                    return b.from === obj.from && b.to === obj.to;\n                });\n            };\n            /**\n             * Calculates the new axis breaks after toggling the collapse/expand\n             * state of a node. If it is collapsed it will be expanded, and if it is\n             * expanded it will be collapsed.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to toggle.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            TreeGridAxisAdditions.prototype.toggleCollapse = function (node) {\n                return (this.isCollapsed(node) ?\n                    this.expand(node) :\n                    this.collapse(node));\n            };\n            return TreeGridAxisAdditions;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreeGridAxisAdditions;\n    });\n    _registerModule(_modules, 'masters/modules/treegrid.src.js', [_modules['Core/Globals.js'], _modules['Core/Axis/TreeGrid/TreeGridAxis.js']], function (Highcharts, TreeGridAxis) {\n\n        var G = Highcharts;\n        TreeGridAxis.compose(G.Axis, G.Chart, G.Series, G.Tick);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","StackItem","U","BrokenAxis","addEvent","find","fireEvent","isArray","isNumber","pick","onAxisAfterInit","brokenAxis","setBreaks","options","breaks","onAxisAfterSetOptions","_a","axis","hasBreaks","ordinal","onAxisAfterSetTickPositions","tickPositions","info","newPositions","i","length","isInAnyBreak","push","onAxisInit","Additions","onSeriesAfterGeneratePoints","_b","isDirty","_c","connectNulls","points","xAxis","yAxis","point","isPointInBreak","y","x","visible","onSeriesAfterRender","drawBreaks","pointArrayMap","seriesDrawBreaks","keys","threshold","series","brokenAxis_1","forEach","key","breakArray","isXAxis","min","breaksOutOfRange","filter","brk","isOut","otherBreak","from","to","toUpperCase","eventName","seriesGappedPath","currentDataGrouping","groupingSize","gapSize","slice","gapUnit","basePointRange","current","next","xRange","splice","isNull","stacking","stack","stacks","stackKey","stackLabels","total","getGraphPath","compose","AxisClass","SeriesClass","keepProps","includes","seriesProto","prototype","gappedPath","isInBreak","val","repeat","Infinity","test","inclusive","lin2Val","nval","len","val2Lin","findBreakAt","b","testKeep","inbrk","keep","ret","showPoints","redraw","Object","userOptions","forceRedraw","val2lin","lin2val","setExtremes","newMin","newMax","animation","eventArguments","breaks_1","axisBreak","constructor","call","setAxisTranslation","unitLength","inBrk_1","repeat_1","start_1","i_1","breaks_2","breakArrayT_1","breakArray_1","pointRangePadding","length_1","min_1","userMin","max_1","userMax","max","value","move","size","breakSize","sort","a","staticScale","transA","minPixelPadding","minPointOffset","chart","Axis","H","GridAxisSide","dateFormats","defined","erase","merge","timeUnits","wrap","isObject","getMaxLabelDimensions","ticks","dimensions","width","height","pos","label","tick","labelHeight","labelWidth","getBBox","textStr","textPxLength","Math","round","type","treeGrid","mapOfPosToGridNode","treeDepth","labels","indentation","wrapGetOffset","proceed","grid","columnsFirst","side","isColumn","columns","reverse","column","getOffset","onAfterGetTitlePosition","e","gridOptions","enabled","axisTitle","axisHeight","horiz","axisLeft","left","offset","opposite","options_1","axisTop","top","axisWidth","tickSize","titleWidth","xOption","title","yOption","titleMargin","margin","titleFontSize","renderer","fontMetrics","f","offAxis","bottom","titlePosition","onAfterInit","align","categories","showLastLabel","labelRotation","rotation","minTickInterval","columnIndex","columnOptions","isInternal","linkedTo","scrollbar","axes","coll","onAfterRender","firstTick","styledMode","slotWidth","style","css","concat","maxLabelDimensions","rightWall","destroy","isOuterAxis","axisLine","lineWidth","linePath","getLinePath","startPoint","endPoint","distance","tickLength","marginRight","upperBorderEndPoint","upperBorderPath","lowerBorderEndPoint","chartWidth","toPixels","tickmarkOffset","lowerBorderPath","upperBorder","renderBorder","attr","stroke","lineColor","animate","d","lowerBorder","axisLineExtra","showAxis","render","hasRendered","linkedParent","lastTick","firstTick_1","tickMark","hiddenLabels","pop","element","show","hiddenMarks","hide","mark","isLast","onAfterSetAxisTranslation","tickInfo","userLabels","pointRange","dateTimeLabelFormats","unitName","range","count","tickInterval","onAfterSetOptions","gridAxisOptions","className","hour","list","day","week","month","borderWidth","padding","fontSize","text","reserveSpace","textOverflow","units","tickPixelInterval","tickPositioner","parentInfo","unitIdx","unit_1","unit","counts","unitRange","time","getTimeTicks","startOfWeek","minPadding","maxPadding","tickWidth","onAfterSetOptions2","onAfterSetScale","setScale","onAfterTickSize","labelPadding","cellHeight","onChartAfterSetChartSize","setAxisSize","onDestroy","keepEvents","onInit","borderColor","tickColor","GridAxisAdditions","onTickAfterGetLabelPosition","reversed","labelOpts","tickPos","nextTickPos","index","crispCorr","top_1","right","chartHeight","translate","lblMetrics","useHTML","lines","h","onTickLabelFormat","ctx","isFirst","data","p","pointCopy","is","seriesTypes","gantt","pointClass","setGanttPointAliases","onTrimTicks","categoryAxis","firstPos","secondPos","lastPos","beforeLastPos","linkedMin","linkedMax","startLessThanMin","endMoreThanMin","startLessThanMax","endMoreThanMax","isLinked","startOnTick","endOnTick","wrapUnsquish","arguments","Array","parentAxis","thisIndex","lastIndex","inverted","otherAxis","extraBorderLine","addClass","add","axisGroup","zIndex","E","timestamp","dateFormat","charAt","W","Date","unitsToOmit","format","set","firstDay","get","thursday","valueOf","firstThursday","floor","toString","ChartClass","TickClass","__rest","s","t","indexOf","getOwnPropertySymbols","propertyIsEnumerable","extend","getNode","id","parent","level","mapOfIdToChildren","start","end","after","before","node","depth","descendants","children","map","child","childStart","NaN","childEnd","milestone","getTree","ids","listOfParents","reduce","prev","curr","adoptedByRoot","orphan","removeEvent","onTickInit","TreeGridTickAdditions","wrapGetLabelPosition","labelOptions","step","lbOptions","isTreeGrid","result","symbol","wrapRenderLabel","params","isNew","labelBox","iconCenter","shouldRender","icon","collapsed","addClassName","removeClassName","tickGrid","tickOptions","labelIcon","labelElement","axisGrid","axisOptions","symbolOptions","hasDescendants","isTreeGridElement","prefixClassName","prefixLevelClass","removeClass","RegExp","isCollapsed","color","styles","group","parentGroup","xy","symbols","cursor","strokeWidth","translateX","translateY","object","attachedTreeGridEvents","textDecoration","toggleCollapse","tickProto","collapse","expand","posMappedNodes","Color","relativeLength","getColor","colorVariation","colorByPoint","colorIndexByPoint","colorIndex","mapOptionsToLevel","parentColor","parentColorIndex","colors","siblings","chartOptionsChart","colorCount","parse","brighten","getLevelOptions","defaults","converted","levels","item","levelIsConstant","getNodeWidth","columnCount","nodeDistance","nodeWidth","plotSizeX","fraction","parseFloat","nDistance","Number","setTreeValues","tree","idRoot","nodeRoot","mapIdToNode","optionsPoint","childrenTotal","levelDynamic","name","newOptions","isLeaf","updateRootId","rootId","rootNode","GridAxis","Tree","TreeGridTick","TU","TickConstructor","isString","getBreakFromNode","collapseEnd","collapseStart","getTreeGridFromData","uniqueNames","numberOfSeries","setValues","collapsedNodes","mapOfIdToNode","uniqueNamesEnabled","posIterator","gridNode","parentNode","parentGridNode","nodes","diff","seriesIndex","onBeforeRender","target","some","isDirtyData","arr","optionsToObject","hasNames","axisData","x2","setData","wrapGenerateTick","levelOptions","category","parameters","addLabel","wrapInit","TreeGridAxisAdditions","n","fontWeight","wrapSetTickInterval","dataMin","dataMax","getTickPositions","linkedParentExtremes","getExtremes","wrapRedraw","axisProps","utils","setCollapsedStatus","dataPoint","roundedMin","roundedMax","ceil","TreeGridAxis","G","Chart","Series","Tick"],"mappings":"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"}