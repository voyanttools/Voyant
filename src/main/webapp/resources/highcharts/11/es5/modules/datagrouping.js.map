{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.8 (2024-08-29)\n *\n * Data grouping module\n *\n * (c) 2010-2024 Torstein HÃ¸nsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/datagrouping', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationRegistry.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Define the available approximation types. The data grouping\n         * approximations takes an array or numbers as the first parameter. In case\n         * of ohlc, four arrays are sent in as four parameters. Each array consists\n         * only of numbers. In case null values belong to the group, the property\n         * .hasNulls will be set to true on the array.\n         *\n         * @product highstock\n         *\n         * @private\n         */\n        var ApproximationRegistry = {\n        // Approximations added programmatically\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ApproximationRegistry;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationDefaults.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var arrayMax = U.arrayMax, arrayMin = U.arrayMin, correctFloat = U.correctFloat, extend = U.extend, isNumber = U.isNumber;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function average(arr) {\n            var len = arr.length;\n            var ret = sum(arr);\n            // If we have a number, return it divided by the length. If not,\n            // return null or undefined based on what the sum method finds.\n            if (isNumber(ret) && len) {\n                ret = correctFloat(ret / len);\n            }\n            return ret;\n        }\n        /**\n         * The same as average, but for series with multiple values, like area ranges.\n         * @private\n         */\n        function averages() {\n            var ret = [];\n            [].forEach.call(arguments, function (arr) {\n                ret.push(average(arr));\n            });\n            // Return undefined when first elem. is undefined and let\n            // sum method handle null (#7377)\n            return typeof ret[0] === 'undefined' ? void 0 : ret;\n        }\n        /**\n         * @private\n         */\n        function close(arr) {\n            return arr.length ?\n                arr[arr.length - 1] :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function high(arr) {\n            return arr.length ?\n                arrayMax(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * HLC, OHLC and range are special cases where a multidimensional array is input\n         * and an array is output.\n         * @private\n         */\n        function hlc(high, low, close) {\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function low(arr) {\n            return arr.length ?\n                arrayMin(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function ohlc(open, high, low, close) {\n            open = ApproximationRegistry.open(open);\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(open) ||\n                isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [open, high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function open(arr) {\n            return arr.length ? arr[0] : (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function range(low, high) {\n            low = ApproximationRegistry.low(low);\n            high = ApproximationRegistry.high(high);\n            if (isNumber(low) || isNumber(high)) {\n                return [low, high];\n            }\n            if (low === null && high === null) {\n                return null;\n            }\n            // Else, return is undefined\n        }\n        /**\n         * @private\n         */\n        function sum(arr) {\n            var len = arr.length, ret;\n            // 1. it consists of nulls exclusive\n            if (!len && arr.hasNulls) {\n                ret = null;\n                // 2. it has a length and real values\n            }\n            else if (len) {\n                ret = 0;\n                while (len--) {\n                    ret += arr[len];\n                }\n            }\n            // 3. it has zero length, so just return undefined\n            // => doNothing()\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var ApproximationDefaults = {\n            average: average,\n            averages: averages,\n            close: close,\n            high: high,\n            hlc: hlc,\n            low: low,\n            ohlc: ohlc,\n            open: open,\n            range: range,\n            sum: sum\n        };\n        extend(ApproximationRegistry, ApproximationDefaults);\n\n        return ApproximationDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Common options\n         * @private\n         */\n        var common = {\n            /// enabled: null, // (true for stock charts, false for basic),\n            // forced: undefined,\n            groupPixelWidth: 2,\n            // The first one is the point or start value, the second is the start\n            // value if we're dealing with range, the third one is the end value if\n            // dealing with a range\n            dateTimeLabelFormats: {\n                millisecond: [\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '-%H:%M:%S.%L'\n                ],\n                second: [\n                    '%A, %e %b, %H:%M:%S',\n                    '%A, %e %b, %H:%M:%S',\n                    '-%H:%M:%S'\n                ],\n                minute: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                hour: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                day: [\n                    '%A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                week: [\n                    'Week from %A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                month: [\n                    '%B %Y',\n                    '%B',\n                    '-%B %Y'\n                ],\n                year: [\n                    '%Y',\n                    '%Y',\n                    '-%Y'\n                ]\n            }\n            /// smoothed = false, // enable this for navigator series only\n        };\n        /**\n         * Extends common options\n         * @private\n         */\n        var seriesSpecific = {\n            line: {},\n            spline: {},\n            area: {},\n            areaspline: {},\n            arearange: {},\n            column: {\n                groupPixelWidth: 10\n            },\n            columnrange: {\n                groupPixelWidth: 10\n            },\n            candlestick: {\n                groupPixelWidth: 10\n            },\n            ohlc: {\n                groupPixelWidth: 5\n            },\n            hlc: {\n                groupPixelWidth: 5\n                // Move to HeikinAshiSeries.ts after refactoring data grouping.\n            },\n            heikinashi: {\n                groupPixelWidth: 10\n            }\n        };\n        /**\n         * Units are defined in a separate array to allow complete overriding in\n         * case of a user option.\n         * @private\n         */\n        var units = [\n            [\n                'millisecond', // Unit name\n                [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // Allowed multiples\n            ], [\n                'second',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'minute',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'hour',\n                [1, 2, 3, 4, 6, 8, 12]\n            ], [\n                'day',\n                [1]\n            ], [\n                'week',\n                [1]\n            ], [\n                'month',\n                [1, 3, 6]\n            ], [\n                'year',\n                null\n            ]\n        ];\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var DataGroupingDefaults = {\n            common: common,\n            seriesSpecific: seriesSpecific,\n            units: units\n        };\n\n        return DataGroupingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingAxisComposition.js', [_modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Utilities.js']], function (DataGroupingDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var addEvent = U.addEvent, extend = U.extend, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        var AxisConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Check the groupPixelWidth and apply the grouping if needed.\n         * Fired only after processing the data.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#applyGrouping\n         */\n        function applyGrouping(e) {\n            var axis = this, series = axis.series;\n            // Reset the groupPixelWidth for all series, #17141.\n            series.forEach(function (series) {\n                series.groupPixelWidth = void 0; // #2110\n            });\n            series.forEach(function (series) {\n                series.groupPixelWidth = (axis.getGroupPixelWidth &&\n                    axis.getGroupPixelWidth());\n                if (series.groupPixelWidth) {\n                    series.hasProcessed = true; // #2692\n                }\n                // Fire independing on series.groupPixelWidth to always set a proper\n                // dataGrouping state, (#16238)\n                series.applyGrouping(!!e.hasExtremesChanged);\n            });\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass) {\n            AxisConstructor = AxisClass;\n            var axisProto = AxisClass.prototype;\n            if (!axisProto.applyGrouping) {\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                // When all series are processed, calculate the group pixel width and\n                // then if this value is different than zero apply groupings.\n                addEvent(AxisClass, 'postProcessData', applyGrouping);\n                extend(axisProto, {\n                    applyGrouping: applyGrouping,\n                    getGroupPixelWidth: getGroupPixelWidth,\n                    setDataGrouping: setDataGrouping\n                });\n            }\n        }\n        /**\n         * Get the data grouping pixel width based on the greatest defined individual\n         * width of the axis' series, and if whether one of the axes need grouping.\n         * @private\n         */\n        function getGroupPixelWidth() {\n            var series = this.series;\n            var i = series.length, groupPixelWidth = 0, doGrouping = false, dataLength, dgOptions;\n            // If one of the series needs grouping, apply it to all (#1634)\n            while (i--) {\n                dgOptions = series[i].options.dataGrouping;\n                if (dgOptions) { // #2692\n                    // If multiple series are compared on the same x axis, give them the\n                    // same group pixel width (#334)\n                    groupPixelWidth = Math.max(groupPixelWidth, \n                    // Fallback to commonOptions (#9693)\n                    pick(dgOptions.groupPixelWidth, DataGroupingDefaults.common.groupPixelWidth));\n                    dataLength = (series[i].processedXData || series[i].data).length;\n                    // Execute grouping if the amount of points is greater than the\n                    // limit defined in groupPixelWidth\n                    if (series[i].groupPixelWidth ||\n                        (dataLength >\n                            (this.chart.plotSizeX / groupPixelWidth)) ||\n                        (dataLength && dgOptions.forced)) {\n                        doGrouping = true;\n                    }\n                }\n            }\n            return doGrouping ? groupPixelWidth : 0;\n        }\n        /**\n         * When resetting the scale reset the hasProcessed flag to avoid taking\n         * previous data grouping of neighbour series into account when determining\n         * group pixel width (#2692).\n         * @private\n         */\n        function onAfterSetScale() {\n            this.series.forEach(function (series) {\n                series.hasProcessed = false;\n            });\n        }\n        /**\n         * Highcharts Stock only. Force data grouping on all the axis' series.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#setDataGrouping\n         *\n         * @param {boolean|Highcharts.DataGroupingOptionsObject} [dataGrouping]\n         *        A `dataGrouping` configuration. Use `false` to disable data grouping\n         *        dynamically.\n         *\n         * @param {boolean} [redraw=true]\n         *        Whether to redraw the chart or wait for a later call to\n         *        {@link Chart#redraw}.\n         */\n        function setDataGrouping(dataGrouping, redraw) {\n            var axis = this;\n            var i;\n            redraw = pick(redraw, true);\n            if (!dataGrouping) {\n                dataGrouping = {\n                    forced: false,\n                    units: null\n                };\n            }\n            // Axis is instantiated, update all series\n            if (this instanceof AxisConstructor) {\n                i = this.series.length;\n                while (i--) {\n                    this.series[i].update({\n                        dataGrouping: dataGrouping\n                    }, false);\n                }\n                // Axis not yet instantiated, alter series options\n            }\n            else {\n                this.chart.options.series.forEach(function (seriesOptions) {\n                    // Merging dataGrouping options with already defined options #16759\n                    seriesOptions.dataGrouping = typeof dataGrouping === 'boolean' ?\n                        dataGrouping :\n                        merge(dataGrouping, seriesOptions.dataGrouping);\n                });\n            }\n            // Clear ordinal slope, so we won't accidentally use the old one (#7827)\n            if (axis.ordinal) {\n                axis.ordinal.slope = void 0;\n            }\n            if (redraw) {\n                this.chart.redraw();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var DataGroupingAxisComposition = {\n            compose: compose\n        };\n\n        return DataGroupingAxisComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingSeriesComposition.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Axis/DateTimeAxis.js'], _modules['Core/Defaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, DataGroupingDefaults, DateTimeAxis, D, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var seriesProto = SeriesRegistry.series.prototype;\n        var addEvent = U.addEvent, defined = U.defined, error = U.error, extend = U.extend, isNumber = U.isNumber, merge = U.merge, pick = U.pick;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        var baseGeneratePoints = seriesProto.generatePoints;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function adjustExtremes(xAxis, groupedXData) {\n            // Make sure the X axis extends to show the first group (#2533)\n            // But only for visible series (#5493, #6393)\n            if (defined(groupedXData[0]) &&\n                isNumber(xAxis.min) &&\n                isNumber(xAxis.dataMin) &&\n                groupedXData[0] < xAxis.min) {\n                if ((!defined(xAxis.options.min) &&\n                    xAxis.min <= xAxis.dataMin) ||\n                    xAxis.min === xAxis.dataMin) {\n                    xAxis.min = Math.min(groupedXData[0], xAxis.min);\n                }\n                xAxis.dataMin = Math.min(groupedXData[0], xAxis.dataMin);\n            }\n            // When the last anchor set, change the extremes that\n            // the last point is visible (#12455).\n            if (defined(groupedXData[groupedXData.length - 1]) &&\n                isNumber(xAxis.max) &&\n                isNumber(xAxis.dataMax) &&\n                groupedXData[groupedXData.length - 1] > xAxis.max) {\n                if ((!defined(xAxis.options.max) &&\n                    isNumber(xAxis.dataMax) &&\n                    xAxis.max >= xAxis.dataMax) || xAxis.max === xAxis.dataMax) {\n                    xAxis.max = Math.max(groupedXData[groupedXData.length - 1], xAxis.max);\n                }\n                xAxis.dataMax = Math.max(groupedXData[groupedXData.length - 1], xAxis.dataMax);\n            }\n        }\n        /**\n         * @private\n         */\n        function anchorPoints(series, groupedXData, xMax) {\n            var options = series.options, dataGroupingOptions = options.dataGrouping, totalRange = (series.currentDataGrouping && series.currentDataGrouping.gapSize);\n            if (!(dataGroupingOptions &&\n                series.xData &&\n                totalRange &&\n                series.groupMap)) {\n                return;\n            }\n            var groupedDataLastIndex = groupedXData.length - 1, anchor = dataGroupingOptions.anchor, firstAnchor = dataGroupingOptions.firstAnchor, lastAnchor = dataGroupingOptions.lastAnchor;\n            var anchorIndexIterator = groupedXData.length - 1, anchorFirstIndex = 0;\n            // Change the first point position, but only when it is\n            // the first point in the data set not in the current zoom.\n            if (firstAnchor && series.xData[0] >= groupedXData[0]) {\n                anchorFirstIndex++;\n                var groupStart = series.groupMap[0].start, groupLength = series.groupMap[0].length;\n                var firstGroupEnd = void 0;\n                if (isNumber(groupStart) && isNumber(groupLength)) {\n                    firstGroupEnd = groupStart + (groupLength - 1);\n                }\n                groupedXData[0] = {\n                    start: groupedXData[0],\n                    middle: groupedXData[0] + 0.5 * totalRange,\n                    end: groupedXData[0] + totalRange,\n                    firstPoint: series.xData[0],\n                    lastPoint: firstGroupEnd && series.xData[firstGroupEnd]\n                }[firstAnchor];\n            }\n            // Change the last point position but only when it is\n            // the last point in the data set not in the current zoom,\n            // or if it is not the 1st point simultaneously.\n            if (groupedDataLastIndex > 0 &&\n                lastAnchor &&\n                totalRange &&\n                groupedXData[groupedDataLastIndex] >= xMax - totalRange) {\n                anchorIndexIterator--;\n                var lastGroupStart = series.groupMap[series.groupMap.length - 1].start;\n                groupedXData[groupedDataLastIndex] = {\n                    start: groupedXData[groupedDataLastIndex],\n                    middle: groupedXData[groupedDataLastIndex] + 0.5 * totalRange,\n                    end: groupedXData[groupedDataLastIndex] + totalRange,\n                    firstPoint: lastGroupStart && series.xData[lastGroupStart],\n                    lastPoint: series.xData[series.xData.length - 1]\n                }[lastAnchor];\n            }\n            if (anchor && anchor !== 'start') {\n                var shiftInterval = (totalRange *\n                    { middle: 0.5, end: 1 }[anchor]);\n                // Anchor the rest of the points apart from the ones, that were\n                // previously moved.\n                while (anchorIndexIterator >= anchorFirstIndex) {\n                    groupedXData[anchorIndexIterator] += shiftInterval;\n                    anchorIndexIterator--;\n                }\n            }\n        }\n        /**\n         * For the processed data, calculate the grouped data if needed.\n         *\n         * @private\n         * @function Highcharts.Series#applyGrouping\n         */\n        function applyGrouping(hasExtremesChanged) {\n            var series = this, chart = series.chart, options = series.options, dataGroupingOptions = options.dataGrouping, groupingEnabled = series.allowDG !== false && dataGroupingOptions &&\n                pick(dataGroupingOptions.enabled, chart.options.isStock), reserveSpace = series.reserveSpace(), lastDataGrouping = this.currentDataGrouping;\n            var currentDataGrouping, croppedData, revertRequireSorting = false;\n            // Data needs to be sorted for dataGrouping\n            if (groupingEnabled && !series.requireSorting) {\n                series.requireSorting = revertRequireSorting = true;\n            }\n            // Skip if skipDataGrouping method returns false or if grouping is disabled\n            // (in that order).\n            var skip = skipDataGrouping(series, hasExtremesChanged) === false || !groupingEnabled;\n            // Revert original requireSorting value if changed\n            if (revertRequireSorting) {\n                series.requireSorting = false;\n            }\n            if (skip) {\n                return;\n            }\n            series.destroyGroupedData();\n            var processedXData = dataGroupingOptions.groupAll ?\n                series.xData :\n                series.processedXData, processedYData = dataGroupingOptions.groupAll ?\n                series.yData :\n                series.processedYData, plotSizeX = chart.plotSizeX, xAxis = series.xAxis, ordinal = xAxis.options.ordinal, groupPixelWidth = series.groupPixelWidth;\n            var i, hasGroupedData;\n            // Execute grouping if the amount of points is greater than the limit\n            // defined in groupPixelWidth\n            if (groupPixelWidth &&\n                processedXData &&\n                processedXData.length &&\n                plotSizeX) {\n                hasGroupedData = true;\n                // Force recreation of point instances in series.translate, #5699\n                series.isDirty = true;\n                series.points = null; // #6709\n                var extremes = xAxis.getExtremes(), xMin = extremes.min, xMax = extremes.max, groupIntervalFactor = (ordinal &&\n                    xAxis.ordinal &&\n                    xAxis.ordinal.getGroupIntervalFactor(xMin, xMax, series)) || 1, interval = (groupPixelWidth * (xMax - xMin) / plotSizeX) *\n                    groupIntervalFactor, groupPositions = xAxis.getTimeTicks(DateTimeAxis.Additions.prototype.normalizeTimeTickInterval(interval, dataGroupingOptions.units ||\n                    DataGroupingDefaults.units), \n                // Processed data may extend beyond axis (#4907)\n                Math.min(xMin, processedXData[0]), Math.max(xMax, processedXData[processedXData.length - 1]), xAxis.options.startOfWeek, processedXData, series.closestPointRange), groupedData = seriesProto.groupData.apply(series, [\n                    processedXData,\n                    processedYData,\n                    groupPositions,\n                    dataGroupingOptions.approximation\n                ]);\n                var groupedXData = groupedData.groupedXData, groupedYData = groupedData.groupedYData, gapSize = 0;\n                // The smoothed option is deprecated, instead, there is a fallback\n                // to the new anchoring mechanism. #12455.\n                if (dataGroupingOptions &&\n                    dataGroupingOptions.smoothed &&\n                    groupedXData.length) {\n                    dataGroupingOptions.firstAnchor = 'firstPoint';\n                    dataGroupingOptions.anchor = 'middle';\n                    dataGroupingOptions.lastAnchor = 'lastPoint';\n                    error(32, false, chart, {\n                        'dataGrouping.smoothed': 'use dataGrouping.anchor'\n                    });\n                }\n                // Record what data grouping values were used\n                for (i = 1; i < groupPositions.length; i++) {\n                    // The grouped gapSize needs to be the largest distance between\n                    // the group to capture varying group sizes like months or DST\n                    // crossing (#10000). Also check that the gap is not at the\n                    // start of a segment.\n                    if (!groupPositions.info.segmentStarts ||\n                        groupPositions.info.segmentStarts.indexOf(i) === -1) {\n                        gapSize = Math.max(groupPositions[i] - groupPositions[i - 1], gapSize);\n                    }\n                }\n                currentDataGrouping = groupPositions.info;\n                currentDataGrouping.gapSize = gapSize;\n                series.closestPointRange = groupPositions.info.totalRange;\n                series.groupMap = groupedData.groupMap;\n                series.currentDataGrouping = currentDataGrouping;\n                anchorPoints(series, groupedXData, xMax);\n                if (reserveSpace) {\n                    adjustExtremes(xAxis, groupedXData);\n                }\n                // We calculated all group positions but we should render\n                // only the ones within the visible range\n                if (dataGroupingOptions.groupAll) {\n                    // Keep the reference to all grouped points\n                    // for further calculation (eg. heikinashi).\n                    series.allGroupedData = groupedYData;\n                    croppedData = series.cropData(groupedXData, groupedYData, xAxis.min, xAxis.max);\n                    groupedXData = croppedData.xData;\n                    groupedYData = croppedData.yData;\n                    series.cropStart = croppedData.start; // #15005\n                }\n                // Set series props\n                series.processedXData = groupedXData;\n                series.processedYData = groupedYData;\n            }\n            else {\n                series.groupMap = null;\n                series.currentDataGrouping = void 0;\n            }\n            series.hasGroupedData = hasGroupedData;\n            series.preventGraphAnimation =\n                (lastDataGrouping && lastDataGrouping.totalRange) !==\n                    (currentDataGrouping && currentDataGrouping.totalRange);\n        }\n        /**\n         * @private\n         */\n        function compose(SeriesClass) {\n            var seriesProto = SeriesClass.prototype;\n            if (!seriesProto.applyGrouping) {\n                var PointClass = SeriesClass.prototype.pointClass;\n                // Override point prototype to throw a warning when trying to update\n                // grouped points.\n                addEvent(PointClass, 'update', function () {\n                    if (this.dataGroup) {\n                        error(24, false, this.series.chart);\n                        return false;\n                    }\n                });\n                addEvent(SeriesClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(SeriesClass, 'destroy', destroyGroupedData);\n                extend(seriesProto, {\n                    applyGrouping: applyGrouping,\n                    destroyGroupedData: destroyGroupedData,\n                    generatePoints: generatePoints,\n                    getDGApproximation: getDGApproximation,\n                    groupData: groupData\n                });\n            }\n        }\n        /**\n         * Destroy the grouped data points. #622, #740\n         * @private\n         */\n        function destroyGroupedData() {\n            // Clear previous groups\n            if (this.groupedData) {\n                this.groupedData.forEach(function (point, i) {\n                    if (point) {\n                        this.groupedData[i] = point.destroy ?\n                            point.destroy() : null;\n                    }\n                }, this);\n                // Clears all:\n                // - `this.groupedData`\n                // - `this.points`\n                // - `preserve` object in series.update()\n                this.groupedData.length = 0;\n                delete this.allGroupedData; // #19892\n            }\n        }\n        /**\n         * Override the generatePoints method by adding a reference to grouped data\n         * @private\n         */\n        function generatePoints() {\n            baseGeneratePoints.apply(this);\n            // Record grouped data in order to let it be destroyed the next time\n            // processData runs\n            this.destroyGroupedData(); // #622\n            this.groupedData = this.hasGroupedData ? this.points : null;\n        }\n        /**\n         * Set default approximations to the prototypes if present. Properties are\n         * inherited down. Can be overridden for individual series types.\n         * @private\n         */\n        function getDGApproximation() {\n            if (this.is('arearange')) {\n                return 'range';\n            }\n            if (this.is('ohlc')) {\n                return 'ohlc';\n            }\n            if (this.is('hlc')) {\n                return 'hlc';\n            }\n            if (\n            // #18974, default approximation for cumulative\n            // should be `sum` when `dataGrouping` is enabled\n            this.is('column') ||\n                this.options.cumulative) {\n                return 'sum';\n            }\n            return 'average';\n        }\n        /**\n         * Highcharts Stock only. Takes parallel arrays of x and y data and groups the\n         * data into intervals defined by groupPositions, a collection of starting x\n         * values for each group.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Series#groupData\n         * @param {Array<number>} xData\n         *        Parallel array of x data.\n         * @param {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>} yData\n         *        Parallel array of y data.\n         * @param {Array<number>} groupPositions\n         *        Group positions.\n         * @param {string|Function} [approximation]\n         *        Approximation to use.\n         * @return {Highcharts.DataGroupingResultObject}\n         *         Mapped groups.\n         */\n        function groupData(xData, yData, groupPositions, approximation) {\n            var series = this, data = series.data, dataOptions = series.options && series.options.data, groupedXData = [], groupedYData = [], groupMap = [], dataLength = xData.length, \n            // When grouping the fake extended axis for panning, we don't need to\n            // consider y\n            handleYData = !!yData, values = [], pointArrayMap = series.pointArrayMap, pointArrayMapLength = pointArrayMap && pointArrayMap.length, extendedPointArrayMap = ['x'].concat(pointArrayMap || ['y']), groupAll = (this.options.dataGrouping &&\n                this.options.dataGrouping.groupAll);\n            var pointX, pointY, groupedY, pos = 0, start = 0;\n            var approximationFn = (typeof approximation === 'function' ?\n                approximation :\n                approximation && ApproximationRegistry[approximation] ?\n                    ApproximationRegistry[approximation] :\n                    ApproximationRegistry[(series.getDGApproximation && series.getDGApproximation() ||\n                        'average')]);\n            // Calculate values array size from pointArrayMap length\n            if (pointArrayMapLength) {\n                var len = pointArrayMap.length;\n                while (len--) {\n                    values.push([]);\n                }\n            }\n            else {\n                values.push([]);\n            }\n            var valuesLen = pointArrayMapLength || 1;\n            for (var i = 0; i <= dataLength; i++) {\n                // Start with the first point within the X axis range (#2696)\n                if (xData[i] < groupPositions[0]) {\n                    continue; // With next point\n                }\n                // When a new group is entered, summarize and initialize\n                // the previous group\n                while ((typeof groupPositions[pos + 1] !== 'undefined' &&\n                    xData[i] >= groupPositions[pos + 1]) ||\n                    i === dataLength) { // Get the last group\n                    // get group x and y\n                    pointX = groupPositions[pos];\n                    series.dataGroupInfo = {\n                        start: groupAll ? start : (series.cropStart + start),\n                        length: values[0].length,\n                        groupStart: pointX\n                    };\n                    groupedY = approximationFn.apply(series, values);\n                    // By default, let options of the first grouped point be passed over\n                    // to the grouped point. This allows preserving properties like\n                    // `name` and `color` or custom properties. Implementers can\n                    // override this from the approximation function, where they can\n                    // write custom options to `this.dataGroupInfo.options`.\n                    if (series.pointClass && !defined(series.dataGroupInfo.options)) {\n                        // Convert numbers and arrays into objects\n                        series.dataGroupInfo.options = merge(series.pointClass.prototype\n                            .optionsToObject.call({ series: series }, series.options.data[series.cropStart + start]));\n                        // Make sure the raw data (x, y, open, high etc) is not copied\n                        // over and overwriting approximated data.\n                        extendedPointArrayMap.forEach(function (key) {\n                            delete series.dataGroupInfo.options[key];\n                        });\n                    }\n                    // Push the grouped data\n                    if (typeof groupedY !== 'undefined') {\n                        groupedXData.push(pointX);\n                        groupedYData.push(groupedY);\n                        groupMap.push(series.dataGroupInfo);\n                    }\n                    // Reset the aggregate arrays\n                    start = i;\n                    for (var j = 0; j < valuesLen; j++) {\n                        values[j].length = 0; // Faster than values[j] = []\n                        values[j].hasNulls = false;\n                    }\n                    // Advance on the group positions\n                    pos += 1;\n                    // Don't loop beyond the last group\n                    if (i === dataLength) {\n                        break;\n                    }\n                }\n                // Break out\n                if (i === dataLength) {\n                    break;\n                }\n                // For each raw data point, push it to an array that contains all values\n                // for this specific group\n                if (pointArrayMap) {\n                    var index = (series.options.dataGrouping &&\n                        series.options.dataGrouping.groupAll ?\n                        i : series.cropStart + i), point = (data && data[index]) ||\n                        series.pointClass.prototype.applyOptions.apply({\n                            series: series\n                        }, [dataOptions[index]]);\n                    var val = void 0;\n                    for (var j = 0; j < pointArrayMapLength; j++) {\n                        val = point[pointArrayMap[j]];\n                        if (isNumber(val)) {\n                            values[j].push(val);\n                        }\n                        else if (val === null) {\n                            values[j].hasNulls = true;\n                        }\n                    }\n                }\n                else {\n                    pointY = handleYData ? yData[i] : null;\n                    if (isNumber(pointY)) {\n                        values[0].push(pointY);\n                    }\n                    else if (pointY === null) {\n                        values[0].hasNulls = true;\n                    }\n                }\n            }\n            return {\n                groupedXData: groupedXData,\n                groupedYData: groupedYData,\n                groupMap: groupMap\n            };\n        }\n        /**\n         * Handle default options for data grouping. This must be set at runtime because\n         * some series types are defined after this.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            var options = e.options, type = this.type, plotOptions = this.chart.options.plotOptions, \n            // External series, for example technical indicators should also inherit\n            // commonOptions which are not available outside this module\n            baseOptions = (this.useCommonDataGrouping &&\n                DataGroupingDefaults.common), seriesSpecific = DataGroupingDefaults.seriesSpecific;\n            var defaultOptions = D.defaultOptions.plotOptions[type].dataGrouping;\n            if (plotOptions && (seriesSpecific[type] || baseOptions)) { // #1284\n                var rangeSelector = this.chart.rangeSelector;\n                if (!defaultOptions) {\n                    defaultOptions = merge(DataGroupingDefaults.common, seriesSpecific[type]);\n                }\n                options.dataGrouping = merge(baseOptions, defaultOptions, plotOptions.series && plotOptions.series.dataGrouping, // #1228\n                // Set by the StockChart constructor:\n                plotOptions[type].dataGrouping, this.userOptions.dataGrouping, !options.isInternal &&\n                    rangeSelector &&\n                    isNumber(rangeSelector.selected) &&\n                    rangeSelector.buttonOptions[rangeSelector.selected].dataGrouping);\n            }\n        }\n        /**\n         * @private\n         */\n        function skipDataGrouping(series, force) {\n            return !(series.isCartesian &&\n                !series.isDirty &&\n                !series.xAxis.isDirty &&\n                !series.yAxis.isDirty &&\n                !force);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var DataGroupingSeriesComposition = {\n            compose: compose,\n            groupData: groupData\n        };\n\n        return DataGroupingSeriesComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGrouping.js', [_modules['Extensions/DataGrouping/DataGroupingAxisComposition.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Extensions/DataGrouping/DataGroupingSeriesComposition.js'], _modules['Core/Templating.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (DataGroupingAxisComposition, DataGroupingDefaults, DataGroupingSeriesComposition, F, H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var format = F.format;\n        var composed = H.composed;\n        var addEvent = U.addEvent, extend = U.extend, isNumber = U.isNumber, pick = U.pick, pushUnique = U.pushUnique;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, SeriesClass, TooltipClass) {\n            DataGroupingAxisComposition.compose(AxisClass);\n            DataGroupingSeriesComposition.compose(SeriesClass);\n            if (TooltipClass &&\n                pushUnique(composed, 'DataGrouping')) {\n                addEvent(TooltipClass, 'headerFormatter', onTooltipHeaderFormatter);\n            }\n        }\n        /**\n         * Extend the original method, make the tooltip's header reflect the grouped\n         * range.\n         * @private\n         */\n        function onTooltipHeaderFormatter(e) {\n            var _a;\n            var chart = this.chart, time = chart.time, labelConfig = e.labelConfig, series = labelConfig.series, point = labelConfig.point, options = series.options, tooltipOptions = series.tooltipOptions, dataGroupingOptions = options.dataGrouping, xAxis = series.xAxis;\n            var xDateFormat = tooltipOptions.xDateFormat, xDateFormatEnd, currentDataGrouping, dateTimeLabelFormats, labelFormats, formattedKey, formatString = tooltipOptions[e.isFooter ? 'footerFormat' : 'headerFormat'];\n            // Apply only to grouped series\n            if (xAxis &&\n                xAxis.options.type === 'datetime' &&\n                dataGroupingOptions &&\n                isNumber(labelConfig.key)) {\n                // Set variables\n                currentDataGrouping = series.currentDataGrouping;\n                dateTimeLabelFormats = dataGroupingOptions.dateTimeLabelFormats ||\n                    // Fallback to commonOptions (#9693)\n                    DataGroupingDefaults.common.dateTimeLabelFormats;\n                // If we have grouped data, use the grouping information to get the\n                // right format\n                if (currentDataGrouping) {\n                    labelFormats = dateTimeLabelFormats[currentDataGrouping.unitName];\n                    if (currentDataGrouping.count === 1) {\n                        xDateFormat = labelFormats[0];\n                    }\n                    else {\n                        xDateFormat = labelFormats[1];\n                        xDateFormatEnd = labelFormats[2];\n                    }\n                    // If not grouped, and we don't have set the xDateFormat option, get the\n                    // best fit, so if the least distance between points is one minute, show\n                    // it, but if the least distance is one day, skip hours and minutes etc.\n                }\n                else if (!xDateFormat && dateTimeLabelFormats && xAxis.dateTime) {\n                    xDateFormat = xAxis.dateTime.getXDateFormat(labelConfig.x, tooltipOptions.dateTimeLabelFormats);\n                }\n                var groupStart = pick((_a = series.groupMap) === null || _a === void 0 ? void 0 : _a[point.index].groupStart, labelConfig.key), groupEnd = groupStart + (currentDataGrouping === null || currentDataGrouping === void 0 ? void 0 : currentDataGrouping.totalRange) - 1;\n                formattedKey = time.dateFormat(xDateFormat, groupStart);\n                if (xDateFormatEnd) {\n                    formattedKey += time.dateFormat(xDateFormatEnd, groupEnd);\n                }\n                // Replace default header style with class name\n                if (series.chart.styledMode) {\n                    formatString = this.styledModeFormat(formatString);\n                }\n                // Return the replaced format\n                e.text = format(formatString, {\n                    point: extend(labelConfig.point, { key: formattedKey }),\n                    series: series\n                }, chart);\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var DataGroupingComposition = {\n            compose: compose,\n            groupData: DataGroupingSeriesComposition.groupData\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"average\"|\"averages\"|\"open\"|\"high\"|\"low\"|\"close\"|\"sum\"} Highcharts.DataGroupingApproximationValue\n         */\n        /**\n         * The position of the point inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"} Highcharts.DataGroupingAnchor\n         */\n        /**\n         * The position of the first or last point in the series inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"|\"firstPoint\"|\"lastPoint\"} Highcharts.DataGroupingAnchorExtremes\n         */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingInfoObject\n         */ /**\n        * @name Highcharts.DataGroupingInfoObject#length\n        * @type {number}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#options\n        * @type {Highcharts.SeriesOptionsType|undefined}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#start\n        * @type {number}\n        */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingResultObject\n         */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedXData\n        * @type {Array<number>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedYData\n        * @type {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupMap\n        * @type {Array<DataGroupingInfoObject>}\n        */\n        /**\n         * Highcharts Stock only. If a point object is created by data\n         * grouping, it doesn't reflect actual points in the raw\n         * data. In this case, the `dataGroup` property holds\n         * information that points back to the raw data.\n         *\n         * - `dataGroup.start` is the index of the first raw data\n         *   point in the group.\n         *\n         * - `dataGroup.length` is the amount of points in the\n         *   group.\n         *\n         * @sample stock/members/point-datagroup\n         *         Click to inspect raw data points\n         *\n         * @product highstock\n         *\n         * @name Highcharts.Point#dataGroup\n         * @type {Highcharts.DataGroupingInfoObject|undefined}\n         */\n        (''); // Detach doclets above\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Data grouping is the concept of sampling the data values into larger\n         * blocks in order to ease readability and increase performance of the\n         * JavaScript charts. Highcharts Stock by default applies data grouping when\n         * the points become closer than a certain pixel value, determined by\n         * the `groupPixelWidth` option.\n         *\n         * If data grouping is applied, the grouping information of grouped\n         * points can be read from the [Point.dataGroup](\n         * /class-reference/Highcharts.Point#dataGroup). If point options other than\n         * the data itself are set, for example `name` or `color` or custom properties,\n         * the grouping logic doesn't know how to group it. In this case the options of\n         * the first point instance are copied over to the group point. This can be\n         * altered through a custom `approximation` callback function.\n         *\n         * @declare   Highcharts.DataGroupingOptionsObject\n         * @product   highstock\n         * @requires  modules/stock\n         * @apioption plotOptions.series.dataGrouping\n         */\n        /**\n         * Specifies how the points should be located on the X axis inside the group.\n         * Points that are extremes can be set separately. Available options:\n         *\n         * - `start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * - `middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * - `end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-anchor\n         *         Changing the point x-coordinate inside the group.\n         *\n         * @see [dataGrouping.firstAnchor](#plotOptions.series.dataGrouping.firstAnchor)\n         * @see [dataGrouping.lastAnchor](#plotOptions.series.dataGrouping.lastAnchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchor}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.anchor\n         */\n        /**\n         * The method of approximation inside a group. When for example 30 days\n         * are grouped into one month, this determines what value should represent\n         * the group. Possible values are \"average\", \"averages\", \"open\", \"high\",\n         * \"low\", \"close\" and \"sum\". For OHLC and candlestick series the approximation\n         * is \"ohlc\" by default, which finds the open, high, low and close values\n         * within all the grouped data. For ranges, the approximation is \"range\",\n         * which finds the low and high values. For multi-dimensional data,\n         * like ranges and OHLC, \"averages\" will compute the average for each\n         * dimension.\n         *\n         * Custom aggregate methods can be added by assigning a callback function\n         * as the approximation. This function takes a numeric array as the\n         * argument and should return a single numeric value or `null`. Note\n         * that the numeric array will never contain null values, only true\n         * numbers. Instead, if null values are present in the raw data, the\n         * numeric array will have an `.hasNulls` property set to `true`. For\n         * single-value data sets the data is available in the first argument\n         * of the callback function. For OHLC data sets, all the open values\n         * are in the first argument, all high values in the second etc.\n         *\n         * Since v4.2.7, grouping meta data is available in the approximation\n         * callback from `this.dataGroupInfo`. It can be used to extract information\n         * from the raw data.\n         *\n         * Defaults to `average` for line-type series, `sum` for columns, `range`\n         * for range series, `hlc` for HLC, and `ohlc` for OHLC and candlestick.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-approximation\n         *         Approximation callback with custom data\n         * @sample {highstock} stock/plotoptions/series-datagrouping-simple-approximation\n         *         Simple approximation demo\n         *\n         * @type       {Highcharts.DataGroupingApproximationValue|Function}\n         * @apioption  plotOptions.series.dataGrouping.approximation\n         */\n        /**\n         * Datetime formats for the header of the tooltip in a stock chart.\n         * The format can vary within a chart depending on the currently selected\n         * time range and the current data grouping.\n         *\n         * The default formats are:\n         * ```js\n         * {\n         *     millisecond: [\n         *         '%A, %e %b, %H:%M:%S.%L', '%A, %e %b, %H:%M:%S.%L', '-%H:%M:%S.%L'\n         *     ],\n         *     second: ['%A, %e %b, %H:%M:%S', '%A, %e %b, %H:%M:%S', '-%H:%M:%S'],\n         *     minute: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     hour: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     day: ['%A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     week: ['Week from %A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     month: ['%B %Y', '%B', '-%B %Y'],\n         *     year: ['%Y', '%Y', '-%Y']\n         * }\n         * ```\n         *\n         * For each of these array definitions, the first item is the format\n         * used when the active time span is one unit. For instance, if the\n         * current data applies to one week, the first item of the week array\n         * is used. The second and third items are used when the active time\n         * span is more than two units. For instance, if the current data applies\n         * to two weeks, the second and third item of the week array are used,\n         *  and applied to the start and end date of the time span.\n         *\n         * @type      {Object}\n         * @apioption plotOptions.series.dataGrouping.dateTimeLabelFormats\n         */\n        /**\n         * Enable or disable data grouping.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @apioption plotOptions.series.dataGrouping.enabled\n         */\n        /**\n         * Specifies how the first grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.firstAnchor\n         */\n        /**\n         * When data grouping is forced, it runs no matter how small the intervals\n         * are. This can be handy for example when the sum should be calculated\n         * for values appearing at random times within each hour.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption plotOptions.series.dataGrouping.forced\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. If multiple series with different group pixel widths\n         * are drawn on the same x axis, all series will take the greatest width.\n         * For example, line series have 2px default group width, while column\n         * series have 10px. If combined, both the line and the column will\n         * have 10px by default.\n         *\n         * @type      {number}\n         * @default   2\n         * @apioption plotOptions.series.dataGrouping.groupPixelWidth\n         */\n        /**\n         * By default only points within the visible range are grouped. Enabling this\n         * option will force data grouping to calculate all grouped points for a given\n         * dataset. That option prevents for example a column series from calculating\n         * a grouped point partially. The effect is similar to\n         * [Series.getExtremesFromAll](#plotOptions.series.getExtremesFromAll) but does\n         * not affect yAxis extremes.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-groupall/\n         *         Two series with the same data but different groupAll setting\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.1.0\n         * @apioption plotOptions.series.dataGrouping.groupAll\n         */\n        /**\n         * Specifies how the last grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-last-anchor\n         *         Applying the last anchor in the chart with live data.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.lastAnchor\n         */\n        /**\n         * Normally, a group is indexed by the start of that group, so for example\n         * when 30 daily values are grouped into one month, that month's x value\n         * will be the 1st of the month. This apparently shifts the data to\n         * the left. When the smoothed option is true, this is compensated for.\n         * The data is shifted to the middle of the group, and min and max\n         * values are preserved. Internally, this is used in the Navigator series.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @deprecated\n         * @apioption plotOptions.series.dataGrouping.smoothed\n         */\n        /**\n         * An array determining what time intervals the data is allowed to be\n         * grouped to. Each array item is an array where the first value is\n         * the time unit and the second value another array of allowed multiples.\n         *\n         * Defaults to:\n         * ```js\n         * units: [[\n         *     'millisecond', // unit name\n         *     [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n         * ], [\n         *     'second',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'minute',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'hour',\n         *     [1, 2, 3, 4, 6, 8, 12]\n         * ], [\n         *     'day',\n         *     [1]\n         * ], [\n         *     'week',\n         *     [1]\n         * ], [\n         *     'month',\n         *     [1, 3, 6]\n         * ], [\n         *     'year',\n         *     null\n         * ]]\n         * ```\n         *\n         * @type      {Array<Array<string,(Array<number>|null)>>}\n         * @apioption plotOptions.series.dataGrouping.units\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. Defaults to `10`.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-grouppixelwidth/\n         *         Two series with the same data density but different groupPixelWidth\n         *\n         * @type      {number}\n         * @default   10\n         * @apioption plotOptions.column.dataGrouping.groupPixelWidth\n         */\n        ''; // Required by JSDoc parsing\n\n        return DataGroupingComposition;\n    });\n    _registerModule(_modules, 'masters/modules/datagrouping.src.js', [_modules['Core/Globals.js'], _modules['Extensions/DataGrouping/ApproximationDefaults.js'], _modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGrouping.js']], function (Highcharts, ApproximationDefaults, ApproximationRegistry, DataGrouping) {\n\n        var G = Highcharts;\n        G.dataGrouping = G.dataGrouping || {};\n        G.dataGrouping.approximationDefaults = (G.dataGrouping.approximationDefaults ||\n            ApproximationDefaults);\n        G.dataGrouping.approximations = (G.dataGrouping.approximations ||\n            ApproximationRegistry);\n        DataGrouping.compose(G.Axis, G.Series, G.Tooltip);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","ApproximationRegistry","U","arrayMax","arrayMin","correctFloat","extend","isNumber","average","arr","len","length","ret","sum","hasNulls","ApproximationDefaults","averages","forEach","call","arguments","push","close","high","hlc","low","ohlc","open","range","common","groupPixelWidth","dateTimeLabelFormats","millisecond","second","minute","hour","day","week","month","year","seriesSpecific","line","spline","area","areaspline","arearange","column","columnrange","candlestick","heikinashi","units","DataGroupingDefaults","AxisConstructor","addEvent","merge","pick","applyGrouping","e","axis","series","getGroupPixelWidth","hasProcessed","hasExtremesChanged","dataLength","dgOptions","i","doGrouping","options","dataGrouping","Math","max","processedXData","data","chart","plotSizeX","forced","onAfterSetScale","setDataGrouping","redraw","update","seriesOptions","ordinal","slope","compose","AxisClass","axisProto","prototype","DateTimeAxis","D","SeriesRegistry","seriesProto","defined","error","baseGeneratePoints","generatePoints","hasGroupedData","currentDataGrouping","croppedData","dataGroupingOptions","groupingEnabled","allowDG","enabled","isStock","reserveSpace","lastDataGrouping","revertRequireSorting","requireSorting","skip","skipDataGrouping","isCartesian","isDirty","xAxis","yAxis","destroyGroupedData","groupAll","xData","processedYData","yData","points","groupedXData","extremes","getExtremes","xMin","min","xMax","groupIntervalFactor","getGroupIntervalFactor","interval","groupPositions","getTimeTicks","Additions","normalizeTimeTickInterval","startOfWeek","closestPointRange","groupedData","groupData","approximation","groupedYData","gapSize","smoothed","firstAnchor","anchor","lastAnchor","info","segmentStarts","indexOf","totalRange","groupMap","anchorPoints","groupedDataLastIndex","anchorIndexIterator","anchorFirstIndex","groupStart","start","groupLength","firstGroupEnd","middle","end","firstPoint","lastPoint","lastGroupStart","shiftInterval","dataMin","dataMax","allGroupedData","cropData","cropStart","preventGraphAnimation","point","destroy","getDGApproximation","is","cumulative","pointX","pointY","groupedY","dataOptions","handleYData","values","pointArrayMap","pointArrayMapLength","extendedPointArrayMap","concat","pos","approximationFn","valuesLen","dataGroupInfo","pointClass","optionsToObject","key","j","index","applyOptions","val","onAfterSetOptions","type","plotOptions","baseOptions","useCommonDataGrouping","defaultOptions","rangeSelector","userOptions","isInternal","selected","buttonOptions","SeriesClass","dataGroup","DataGroupingAxisComposition","DataGroupingSeriesComposition","F","H","format","composed","pushUnique","onTooltipHeaderFormatter","_a","xDateFormatEnd","labelFormats","formattedKey","time","labelConfig","tooltipOptions","xDateFormat","formatString","isFooter","unitName","count","dateTime","getXDateFormat","x","groupEnd","dateFormat","styledMode","styledModeFormat","text","preventDefault","TooltipClass","DataGrouping","G","approximationDefaults","approximations","Axis","Series","Tooltip"],"mappings":"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"}