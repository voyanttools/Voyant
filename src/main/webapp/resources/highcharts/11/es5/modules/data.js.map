{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * Data module\n *\n * (c) 2012-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/data', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/HttpUtilities.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (G, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Christer Vasseng, Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var __assign = (this && this.__assign) || function () {\n            __assign = Object.assign || function(t) {\n                for (var s, i = 1, n = arguments.length; i < n; i++) {\n                    s = arguments[i];\n                    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n                }\n                return t;\n            };\n            return __assign.apply(this, arguments);\n        };\n        var win = G.win;\n        var discardElement = U.discardElement, objectEach = U.objectEach;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Perform an Ajax call.\n         *\n         * @function Highcharts.ajax\n         *\n         * @param {Highcharts.AjaxSettingsObject} settings\n         *        The Ajax settings to use.\n         *\n         * @return {false|undefined}\n         *         Returns false, if error occurred.\n         */\n        function ajax(settings) {\n            var headers = {\n                json: 'application/json',\n                xml: 'application/xml',\n                text: 'text/plain',\n                octet: 'application/octet-stream'\n            }, r = new XMLHttpRequest();\n            /**\n             * Private error handler.\n             * @private\n             * @param {XMLHttpRequest} xhr\n             * Internal request object.\n             * @param {string|Error} err\n             * Occurred error.\n             */\n            function handleError(xhr, err) {\n                if (settings.error) {\n                    settings.error(xhr, err);\n                }\n                else {\n                    // @todo Maybe emit a highcharts error event here\n                }\n            }\n            if (!settings.url) {\n                return false;\n            }\n            r.open((settings.type || 'get').toUpperCase(), settings.url, true);\n            if (!settings.headers || !settings.headers['Content-Type']) {\n                r.setRequestHeader('Content-Type', headers[settings.dataType || 'json'] || headers.text);\n            }\n            objectEach(settings.headers, function (val, key) {\n                r.setRequestHeader(key, val);\n            });\n            if (settings.responseType) {\n                r.responseType = settings.responseType;\n            }\n            // @todo lacking timeout handling\n            r.onreadystatechange = function () {\n                var res;\n                if (r.readyState === 4) {\n                    if (r.status === 200) {\n                        if (settings.responseType !== 'blob') {\n                            res = r.responseText;\n                            if (settings.dataType === 'json') {\n                                try {\n                                    res = JSON.parse(res);\n                                }\n                                catch (e) {\n                                    if (e instanceof Error) {\n                                        return handleError(r, e);\n                                    }\n                                }\n                            }\n                        }\n                        return settings.success && settings.success(res, r);\n                    }\n                    handleError(r, r.responseText);\n                }\n            };\n            if (settings.data && typeof settings.data !== 'string') {\n                settings.data = JSON.stringify(settings.data);\n            }\n            r.send(settings.data);\n        }\n        /**\n         * Get a JSON resource over XHR, also supporting CORS without preflight.\n         *\n         * @function Highcharts.getJSON\n         * @param {string} url\n         *        The URL to load.\n         * @param {Function} success\n         *        The success callback. For error handling, use the `Highcharts.ajax`\n         *        function instead.\n         */\n        function getJSON(url, success) {\n            HttpUtilities.ajax({\n                url: url,\n                success: success,\n                dataType: 'json',\n                headers: {\n                    // Override the Content-Type to avoid preflight problems with CORS\n                    // in the Highcharts demos\n                    'Content-Type': 'text/plain'\n                }\n            });\n        }\n        /**\n         * The post utility\n         *\n         * @private\n         * @function Highcharts.post\n         *\n         * @param {string} url\n         * Post URL\n         *\n         * @param {Object} data\n         * Post data\n         *\n         * @param {RequestInit} [fetchOptions]\n         * Additional attributes for the post request\n         */\n        /**\n         *\n         */\n        function post(url, data, fetchOptions) {\n            var formData = new win.FormData();\n            // Add the data\n            objectEach(data, function (val, name) {\n                formData.append(name, val);\n            });\n            formData.append('b64', 'true');\n            var filename = data.filename, type = data.type;\n            return win.fetch(url, __assign({ method: 'POST', body: formData }, fetchOptions)).then(function (res) {\n                if (res.ok) {\n                    res.text().then(function (text) {\n                        var link = document.createElement('a');\n                        link.href = \"data:\".concat(type, \";base64,\").concat(text);\n                        link.download = filename;\n                        link.click();\n                        discardElement(link);\n                    });\n                }\n            });\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var HttpUtilities = {\n            ajax: ajax,\n            getJSON: getJSON,\n            post: post\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @interface Highcharts.AjaxSettingsObject\n         */ /**\n        * The payload to send.\n        *\n        * @name Highcharts.AjaxSettingsObject#data\n        * @type {string|Highcharts.Dictionary<any>|undefined}\n        */ /**\n        * The data type expected.\n        * @name Highcharts.AjaxSettingsObject#dataType\n        * @type {\"json\"|\"xml\"|\"text\"|\"octet\"|undefined}\n        */ /**\n        * Function to call on error.\n        * @name Highcharts.AjaxSettingsObject#error\n        * @type {Function|undefined}\n        */ /**\n        * The headers; keyed on header name.\n        * @name Highcharts.AjaxSettingsObject#headers\n        * @type {Highcharts.Dictionary<string>|undefined}\n        */ /**\n        * Function to call on success.\n        * @name Highcharts.AjaxSettingsObject#success\n        * @type {Function|undefined}\n        */ /**\n        * The HTTP method to use. For example GET or POST.\n        * @name Highcharts.AjaxSettingsObject#type\n        * @type {string|undefined}\n        */ /**\n        * The URL to call.\n        * @name Highcharts.AjaxSettingsObject#url\n        * @type {string}\n        */\n        (''); // Keeps doclets above in JS file\n\n        return HttpUtilities;\n    });\n    _registerModule(_modules, 'Extensions/Data.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/HttpUtilities.js'], _modules['Core/Series/Point.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Axis, Chart, D, G, HU, Point, SeriesRegistry, U) {\n        /* *\n         *\n         *  Data module\n         *\n         *  (c) 2012-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var getOptions = D.getOptions;\n        var doc = G.doc;\n        var ajax = HU.ajax;\n        var seriesTypes = SeriesRegistry.seriesTypes;\n        var addEvent = U.addEvent, defined = U.defined, extend = U.extend, fireEvent = U.fireEvent, isNumber = U.isNumber, merge = U.merge, objectEach = U.objectEach, pick = U.pick, splat = U.splat;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function getFreeIndexes(numberOfColumns, seriesBuilders) {\n            var freeIndexes = [], freeIndexValues = [];\n            var s, i, referencedIndexes;\n            // Add all columns as free\n            for (i = 0; i < numberOfColumns; i = i + 1) {\n                freeIndexes.push(true);\n            }\n            // Loop all defined builders and remove their referenced columns\n            for (s = 0; s < seriesBuilders.length; s = s + 1) {\n                referencedIndexes = seriesBuilders[s].getReferencedColumnIndexes();\n                for (i = 0; i < referencedIndexes.length; i = i + 1) {\n                    freeIndexes[referencedIndexes[i]] = false;\n                }\n            }\n            // Collect the values for the free indexes\n            for (i = 0; i < freeIndexes.length; i = i + 1) {\n                if (freeIndexes[i]) {\n                    freeIndexValues.push(i);\n                }\n            }\n            return freeIndexValues;\n        }\n        /**\n         *\n         */\n        function hasURLOption(options) {\n            return Boolean(options &&\n                (options.rowsURL || options.csvURL || options.columnsURL));\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Data class\n         *\n         * @requires modules/data\n         *\n         * @class\n         * @name Highcharts.Data\n         *\n         * @param {Highcharts.DataOptions} dataOptions\n         *\n         * @param {Highcharts.Options} [chartOptions]\n         *\n         * @param {Highcharts.Chart} [chart]\n         */\n        var Data = /** @class */ (function () {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            function Data(dataOptions, chartOptions, chart) {\n                if (chartOptions === void 0) { chartOptions = {}; }\n                this.rowsToColumns = Data.rowsToColumns; // Backwards compatibility\n                /**\n                 * A collection of available date formats, extendable from the outside to\n                 * support custom date formats.\n                 *\n                 * @name Highcharts.Data#dateFormats\n                 * @type {Highcharts.Dictionary<Highcharts.DataDateFormatObject>}\n                 */\n                this.dateFormats = {\n                    'YYYY/mm/dd': {\n                        regex: /^(\\d{4})[\\-\\/\\.](\\d{1,2})[\\-\\/\\.](\\d{1,2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[1], +match[2] - 1, +match[3]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YYYY': {\n                        regex: /^(\\d{1,2})[\\-\\/\\.](\\d{1,2})[\\-\\/\\.](\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[3], +match[2] - 1, +match[1]) :\n                                NaN);\n                        },\n                        alternative: 'mm/dd/YYYY' // Different format with the same regex\n                    },\n                    'mm/dd/YYYY': {\n                        regex: /^(\\d{1,2})[\\-\\/\\.](\\d{1,2})[\\-\\/\\.](\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[3], +match[1] - 1, +match[2]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YY': {\n                        regex: /^(\\d{1,2})[\\-\\/\\.](\\d{1,2})[\\-\\/\\.](\\d{2})$/,\n                        parser: function (match) {\n                            if (!match) {\n                                return NaN;\n                            }\n                            var d = new Date();\n                            var year = +match[3];\n                            if (year > (d.getFullYear() - 2000)) {\n                                year += 1900;\n                            }\n                            else {\n                                year += 2000;\n                            }\n                            return Date.UTC(year, +match[2] - 1, +match[1]);\n                        },\n                        alternative: 'mm/dd/YY' // Different format with the same regex\n                    },\n                    'mm/dd/YY': {\n                        regex: /^(\\d{1,2})[\\-\\/\\.](\\d{1,2})[\\-\\/\\.](\\d{2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[3] + 2000, +match[1] - 1, +match[2]) :\n                                NaN);\n                        }\n                    }\n                };\n                this.chart = chart;\n                this.chartOptions = chartOptions;\n                this.options = dataOptions;\n                this.rawColumns = [];\n                this.init(dataOptions, chartOptions, chart);\n            }\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            /**\n             * Creates a data object to parse data for a chart.\n             *\n             * @function Highcharts.data\n             */\n            Data.data = function (dataOptions, chartOptions, chart) {\n                if (chartOptions === void 0) { chartOptions = {}; }\n                return new Data(dataOptions, chartOptions, chart);\n            };\n            /**\n             * Reorganize rows into columns.\n             *\n             * @function Highcharts.Data.rowsToColumns\n             */\n            Data.rowsToColumns = function (rows) {\n                var row, rowsLength, col, colsLength, columns;\n                if (rows) {\n                    columns = [];\n                    rowsLength = rows.length;\n                    for (row = 0; row < rowsLength; row++) {\n                        colsLength = rows[row].length;\n                        for (col = 0; col < colsLength; col++) {\n                            if (!columns[col]) {\n                                columns[col] = [];\n                            }\n                            columns[col][row] = rows[row][col];\n                        }\n                    }\n                }\n                return columns;\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initialize the Data object with the given options\n             *\n             * @private\n             * @function Highcharts.Data#init\n             */\n            Data.prototype.init = function (dataOptions, chartOptions, chart) {\n                var decimalPoint = dataOptions.decimalPoint, hasData;\n                if (chartOptions) {\n                    this.chartOptions = chartOptions;\n                }\n                if (chart) {\n                    this.chart = chart;\n                }\n                if (decimalPoint !== '.' && decimalPoint !== ',') {\n                    decimalPoint = void 0;\n                }\n                this.options = dataOptions;\n                this.columns = (dataOptions.columns ||\n                    this.rowsToColumns(dataOptions.rows) ||\n                    []);\n                this.firstRowAsNames = pick(dataOptions.firstRowAsNames, this.firstRowAsNames, true);\n                this.decimalRegex = (decimalPoint &&\n                    new RegExp('^(-?[0-9]+)' + decimalPoint + '([0-9]+)$'));\n                // Always stop old polling when we have new options\n                if (this.liveDataTimeout !== void 0) {\n                    clearTimeout(this.liveDataTimeout);\n                }\n                // This is a two-dimensional array holding the raw, trimmed string\n                // values with the same organisation as the columns array. It makes it\n                // possible for example to revert from interpreted timestamps to\n                // string-based categories.\n                this.rawColumns = [];\n                // No need to parse or interpret anything\n                if (this.columns.length) {\n                    this.dataFound();\n                    hasData = !hasURLOption(dataOptions);\n                }\n                if (!hasData) {\n                    // Fetch live data\n                    hasData = this.fetchLiveData();\n                }\n                if (!hasData) {\n                    // Parse a CSV string if options.csv is given. The parseCSV function\n                    // returns a columns array, if it has no length, we have no data\n                    hasData = Boolean(this.parseCSV().length);\n                }\n                if (!hasData) {\n                    // Parse a HTML table if options.table is given\n                    hasData = Boolean(this.parseTable().length);\n                }\n                if (!hasData) {\n                    // Parse a Google Spreadsheet\n                    hasData = this.parseGoogleSpreadsheet();\n                }\n                if (!hasData && dataOptions.afterComplete) {\n                    dataOptions.afterComplete(this);\n                }\n            };\n            /**\n             * Get the column distribution. For example, a line series takes a single\n             * column for Y values. A range series takes two columns for low and high\n             * values respectively, and an OHLC series takes four columns.\n             *\n             * @function Highcharts.Data#getColumnDistribution\n             */\n            Data.prototype.getColumnDistribution = function () {\n                var _a, _b;\n                var chartOptions = this.chartOptions, options = this.options, xColumns = [], getValueCount = function (type) {\n                    if (type === void 0) { type = 'line'; }\n                    return (seriesTypes[type].prototype.pointArrayMap || [0]).length;\n                }, getPointArrayMap = function (type) {\n                    if (type === void 0) { type = 'line'; }\n                    return seriesTypes[type].prototype.pointArrayMap;\n                }, globalType = (_a = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.chart) === null || _a === void 0 ? void 0 : _a.type, individualCounts = [], seriesBuilders = [], \n                // If no series mapping is defined, check if the series array is\n                // defined with types.\n                seriesMapping = ((options === null || options === void 0 ? void 0 : options.seriesMapping) ||\n                    ((_b = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.series) === null || _b === void 0 ? void 0 : _b.map(function () {\n                        return { x: 0 };\n                    })) ||\n                    []);\n                var seriesIndex = 0;\n                ((chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.series) || []).forEach(function (series) {\n                    individualCounts.push(getValueCount(series.type || globalType));\n                });\n                // Collect the x-column indexes from seriesMapping\n                seriesMapping.forEach(function (mapping) {\n                    xColumns.push(mapping.x || 0);\n                });\n                // If there are no defined series with x-columns, use the first column\n                // as x column\n                if (xColumns.length === 0) {\n                    xColumns.push(0);\n                }\n                // Loop all seriesMappings and constructs SeriesBuilders from\n                // the mapping options.\n                seriesMapping.forEach(function (mapping) {\n                    var _a, _b;\n                    var builder = new SeriesBuilder(), numberOfValueColumnsNeeded = individualCounts[seriesIndex] ||\n                        getValueCount(globalType), seriesArr = (_a = chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.series) !== null && _a !== void 0 ? _a : [], series = (_b = seriesArr[seriesIndex]) !== null && _b !== void 0 ? _b : {}, defaultPointArrayMap = getPointArrayMap(series.type || globalType), pointArrayMap = defaultPointArrayMap !== null && defaultPointArrayMap !== void 0 ? defaultPointArrayMap : ['y'];\n                    if (\n                    // User-defined x.mapping\n                    defined(mapping.x) ||\n                        // All non cartesian don't need 'x'\n                        series.isCartesian ||\n                        // Except pie series:\n                        !defaultPointArrayMap) {\n                        // Add an x reader from the x property or from an undefined\n                        // column if the property is not set. It will then be auto\n                        // populated later.\n                        builder.addColumnReader(mapping.x, 'x');\n                    }\n                    // Add all column mappings\n                    objectEach(mapping, function (val, name) {\n                        if (name !== 'x') {\n                            builder.addColumnReader(val, name);\n                        }\n                    });\n                    // Add missing columns\n                    for (var i = 0; i < numberOfValueColumnsNeeded; i++) {\n                        if (!builder.hasReader(pointArrayMap[i])) {\n                            // Create and add a column reader for the next free column\n                            // index\n                            builder.addColumnReader(void 0, pointArrayMap[i]);\n                        }\n                    }\n                    seriesBuilders.push(builder);\n                    seriesIndex++;\n                });\n                var globalPointArrayMap = getPointArrayMap(globalType);\n                if (typeof globalPointArrayMap === 'undefined') {\n                    globalPointArrayMap = ['y'];\n                }\n                this.valueCount = {\n                    global: getValueCount(globalType),\n                    xColumns: xColumns,\n                    individual: individualCounts,\n                    seriesBuilders: seriesBuilders,\n                    globalPointArrayMap: globalPointArrayMap\n                };\n            };\n            /**\n             * When the data is parsed into columns, either by CSV, table, GS or direct\n             * input, continue with other operations.\n             *\n             * @private\n             * @function Highcharts.Data#dataFound\n             */\n            Data.prototype.dataFound = function () {\n                if (this.options.switchRowsAndColumns) {\n                    this.columns = this.rowsToColumns(this.columns);\n                }\n                // Interpret the info about series and columns\n                this.getColumnDistribution();\n                // Interpret the values into right types\n                this.parseTypes();\n                // Handle columns if a handleColumns callback is given\n                if (this.parsed() !== false) {\n                    // Complete if a complete callback is given\n                    this.complete();\n                }\n            };\n            /**\n             * Parse a CSV input string\n             *\n             * @function Highcharts.Data#parseCSV\n             */\n            Data.prototype.parseCSV = function (inOptions) {\n                var self = this, columns = this.columns = [], options = inOptions || this.options, startColumn = options.startColumn || 0, endColumn = options.endColumn || Number.MAX_VALUE, dataTypes = [], \n                // We count potential delimiters in the prepass, and use the\n                // result as the basis of half-intelligent guesses.\n                potDelimiters = {\n                    ',': 0,\n                    ';': 0,\n                    '\\t': 0\n                };\n                var csv = options.csv, startRow = options.startRow || 0, endRow = options.endRow || Number.MAX_VALUE, itemDelimiter, lines, rowIt = 0;\n                /*\n                    This implementation is quite verbose. It will be shortened once\n                    it's stable and passes all the test.\n\n                    It's also not written with speed in mind, instead everything is\n                    very segregated, and there a several redundant loops.\n                    This is to make it easier to stabilize the code initially.\n\n                    We do a pre-pass on the first 4 rows to make some intelligent\n                    guesses on the set. Guessed delimiters are in this pass counted.\n\n                    Auto detecting delimiters\n                        - If we meet a quoted string, the next symbol afterwards\n                          (that's not \\s, \\t) is the delimiter\n                        - If we meet a date, the next symbol afterwards is the delimiter\n\n                    Date formats\n                        - If we meet a column with date formats, check all of them to\n                          see if one of the potential months crossing 12. If it does,\n                          we now know the format\n\n                    It would make things easier to guess the delimiter before\n                    doing the actual parsing.\n\n                    General rules:\n                        - Quoting is allowed, e.g: \"Col 1\",123,321\n                        - Quoting is optional, e.g.: Col1,123,321\n                        - Double quoting is escaping, e.g. \"Col \"\"Hello world\"\"\",123\n                        - Spaces are considered part of the data: Col1 ,123\n                        - New line is always the row delimiter\n                        - Potential column delimiters are , ; \\t\n                        - First row may optionally contain headers\n                        - The last row may or may not have a row delimiter\n                        - Comments are optionally supported, in which case the comment\n                          must start at the first column, and the rest of the line will\n                          be ignored\n                */\n                /**\n                 * Parse a single row.\n                 * @private\n                 */\n                function parseRow(columnStr, rowNumber, noAdd, callbacks) {\n                    var i = 0, c = '', cl = '', cn = '', token = '', actualColumn = 0, column = 0;\n                    /**\n                     * @private\n                     */\n                    function read(j) {\n                        c = columnStr[j];\n                        cl = columnStr[j - 1];\n                        cn = columnStr[j + 1];\n                    }\n                    /**\n                     * @private\n                     */\n                    function pushType(type) {\n                        if (dataTypes.length < column + 1) {\n                            dataTypes.push([type]);\n                        }\n                        if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                            dataTypes[column].push(type);\n                        }\n                    }\n                    /**\n                     * @private\n                     */\n                    function push() {\n                        if (startColumn > actualColumn || actualColumn > endColumn) {\n                            // Skip this column, but increment the column count (#7272)\n                            ++actualColumn;\n                            token = '';\n                            return;\n                        }\n                        if (!options.columnTypes) {\n                            if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                                token = parseFloat(token);\n                                pushType('number');\n                            }\n                            else if (!isNaN(Date.parse(token))) {\n                                token = token.replace(/\\//g, '-');\n                                pushType('date');\n                            }\n                            else {\n                                pushType('string');\n                            }\n                        }\n                        if (columns.length < column + 1) {\n                            columns.push([]);\n                        }\n                        if (!noAdd) {\n                            // Don't push - if there's a varying amount of columns\n                            // for each row, pushing will skew everything down n slots\n                            columns[column][rowNumber] = token;\n                        }\n                        token = '';\n                        ++column;\n                        ++actualColumn;\n                    }\n                    if (!columnStr.trim().length) {\n                        return;\n                    }\n                    if (columnStr.trim()[0] === '#') {\n                        return;\n                    }\n                    for (; i < columnStr.length; i++) {\n                        read(i);\n                        if (c === '\"') {\n                            read(++i);\n                            while (i < columnStr.length) {\n                                if (c === '\"' && cl !== '\"' && cn !== '\"') {\n                                    break;\n                                }\n                                if (c !== '\"' || (c === '\"' && cl !== '\"')) {\n                                    token += c;\n                                }\n                                read(++i);\n                            }\n                            // Perform \"plugin\" handling\n                        }\n                        else if (callbacks === null || callbacks === void 0 ? void 0 : callbacks[c]) {\n                            if (callbacks[c](c, token)) {\n                                push();\n                            }\n                            // Delimiter - push current token\n                        }\n                        else if (c === itemDelimiter) {\n                            push();\n                            // Actual column data\n                        }\n                        else {\n                            token += c;\n                        }\n                    }\n                    push();\n                }\n                /**\n                 * Attempt to guess the delimiter. We do a separate parse pass here\n                 * because we need to count potential delimiters softly without making\n                 * any assumptions.\n                 * @private\n                 */\n                function guessDelimiter(lines) {\n                    var points = 0, commas = 0, guessed = false;\n                    lines.some(function (columnStr, i) {\n                        var inStr = false, c, cn, cl, token = '';\n                        // We should be able to detect dateformats within 13 rows\n                        if (i > 13) {\n                            return true;\n                        }\n                        for (var j = 0; j < columnStr.length; j++) {\n                            c = columnStr[j];\n                            cn = columnStr[j + 1];\n                            cl = columnStr[j - 1];\n                            if (c === '#') {\n                                // Skip the rest of the line - it's a comment\n                                return;\n                            }\n                            if (c === '\"') {\n                                if (inStr) {\n                                    if (cl !== '\"' && cn !== '\"') {\n                                        while (cn === ' ' && j < columnStr.length) {\n                                            cn = columnStr[++j];\n                                        }\n                                        // After parsing a string, the next non-blank\n                                        // should be a delimiter if the CSV is properly\n                                        // formed.\n                                        if (typeof potDelimiters[cn] !== 'undefined') {\n                                            potDelimiters[cn]++;\n                                        }\n                                        inStr = false;\n                                    }\n                                }\n                                else {\n                                    inStr = true;\n                                }\n                            }\n                            else if (typeof potDelimiters[c] !== 'undefined') {\n                                token = token.trim();\n                                if (!isNaN(Date.parse(token))) {\n                                    potDelimiters[c]++;\n                                }\n                                else if (isNaN(token) ||\n                                    !isFinite(token)) {\n                                    potDelimiters[c]++;\n                                }\n                                token = '';\n                            }\n                            else {\n                                token += c;\n                            }\n                            if (c === ',') {\n                                commas++;\n                            }\n                            if (c === '.') {\n                                points++;\n                            }\n                        }\n                    });\n                    // Count the potential delimiters.\n                    // This could be improved by checking if the number of delimiters\n                    // equals the number of columns - 1\n                    if (potDelimiters[';'] > potDelimiters[',']) {\n                        guessed = ';';\n                    }\n                    else if (potDelimiters[','] > potDelimiters[';']) {\n                        guessed = ',';\n                    }\n                    else {\n                        // No good guess could be made..\n                        guessed = ',';\n                    }\n                    // Try to deduce the decimal point if it's not explicitly set.\n                    // If both commas or points is > 0 there is likely an issue\n                    if (!options.decimalPoint) {\n                        if (points > commas) {\n                            options.decimalPoint = '.';\n                        }\n                        else {\n                            options.decimalPoint = ',';\n                        }\n                        // Apply a new decimal regex based on the presumed decimal sep.\n                        self.decimalRegex = new RegExp('^(-?[0-9]+)' +\n                            options.decimalPoint +\n                            '([0-9]+)$');\n                    }\n                    return guessed;\n                }\n                /**\n                 * Tries to guess the date format\n                 *  - Check if either month candidate exceeds 12\n                 *  - Check if year is missing (use current year)\n                 *  - Check if a shortened year format is used (e.g. 1/1/99)\n                 *  - If no guess can be made, the user must be prompted\n                 * data is the data to deduce a format based on\n                 * @private\n                 */\n                function deduceDateFormat(data, limit) {\n                    var _a;\n                    var format = 'YYYY/mm/dd', stable = [], max = [];\n                    var thing, guessedFormat = [], calculatedFormat, i = 0, madeDeduction = false, j;\n                    if (!limit || limit > data.length) {\n                        limit = data.length;\n                    }\n                    for (; i < limit; i++) {\n                        if (typeof data[i] !== 'undefined' &&\n                            ((_a = data[i]) === null || _a === void 0 ? void 0 : _a.length)) {\n                            thing = data[i]\n                                .trim()\n                                .replace(/\\//g, ' ')\n                                .replace(/\\-/g, ' ')\n                                .replace(/\\./g, ' ')\n                                .split(' ');\n                            guessedFormat = [\n                                '',\n                                '',\n                                ''\n                            ];\n                            for (j = 0; j < thing.length; j++) {\n                                if (j < guessedFormat.length) {\n                                    thing[j] = parseInt(thing[j], 10);\n                                    if (thing[j]) {\n                                        max[j] = (!max[j] || max[j] < thing[j]) ?\n                                            thing[j] :\n                                            max[j];\n                                        if (typeof stable[j] !== 'undefined') {\n                                            if (stable[j] !== thing[j]) {\n                                                stable[j] = false;\n                                            }\n                                        }\n                                        else {\n                                            stable[j] = thing[j];\n                                        }\n                                        if (thing[j] > 31) {\n                                            if (thing[j] < 100) {\n                                                guessedFormat[j] = 'YY';\n                                            }\n                                            else {\n                                                guessedFormat[j] = 'YYYY';\n                                            }\n                                        }\n                                        else if (thing[j] > 12 &&\n                                            thing[j] <= 31) {\n                                            guessedFormat[j] = 'dd';\n                                            madeDeduction = true;\n                                        }\n                                        else if (!guessedFormat[j].length) {\n                                            guessedFormat[j] = 'mm';\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (madeDeduction) {\n                        // This handles a few edge cases with hard to guess dates\n                        for (j = 0; j < stable.length; j++) {\n                            if (stable[j] !== false) {\n                                if (max[j] > 12 &&\n                                    guessedFormat[j] !== 'YY' &&\n                                    guessedFormat[j] !== 'YYYY') {\n                                    guessedFormat[j] = 'YY';\n                                }\n                            }\n                            else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                                guessedFormat[j] = 'dd';\n                            }\n                        }\n                        // If the middle one is dd, and the last one is dd,\n                        // the last should likely be year.\n                        if (guessedFormat.length === 3 &&\n                            guessedFormat[1] === 'dd' &&\n                            guessedFormat[2] === 'dd') {\n                            guessedFormat[2] = 'YY';\n                        }\n                        calculatedFormat = guessedFormat.join('/');\n                        // If the calculated format is not valid, we need to present an\n                        // error.\n                        if (!(options.dateFormats || self.dateFormats)[calculatedFormat]) {\n                            // This should emit an event instead\n                            fireEvent(self, 'deduceDateFailed');\n                            return format;\n                        }\n                        return calculatedFormat;\n                    }\n                    return format;\n                }\n                if (csv && options.beforeParse) {\n                    csv = options.beforeParse.call(this, csv);\n                }\n                if (csv) {\n                    lines = csv\n                        .replace(/\\r\\n/g, '\\n') // Unix\n                        .replace(/\\r/g, '\\n') // Mac\n                        .split(options.lineDelimiter || '\\n');\n                    if (!startRow || startRow < 0) {\n                        startRow = 0;\n                    }\n                    if (!endRow || endRow >= lines.length) {\n                        endRow = lines.length - 1;\n                    }\n                    if (options.itemDelimiter) {\n                        itemDelimiter = options.itemDelimiter;\n                    }\n                    else {\n                        itemDelimiter = guessDelimiter(lines);\n                    }\n                    var offset = 0;\n                    for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                        if (lines[rowIt][0] === '#') {\n                            offset++;\n                        }\n                        else {\n                            parseRow(lines[rowIt], rowIt - startRow - offset);\n                        }\n                    }\n                    if ((!options.columnTypes || options.columnTypes.length === 0) &&\n                        dataTypes.length &&\n                        dataTypes[0].length &&\n                        dataTypes[0][1] === 'date' &&\n                        !options.dateFormat) {\n                        options.dateFormat = deduceDateFormat(columns[0]);\n                    }\n                    /// lines.forEach(function (line, rowNo) {\n                    //    let trimmed = self.trim(line),\n                    //        isComment = trimmed.indexOf('#') === 0,\n                    //        isBlank = trimmed === '',\n                    //        items;\n                    //    if (\n                    //        rowNo >= startRow &&\n                    //        rowNo <= endRow &&\n                    //        !isComment && !isBlank\n                    //    ) {\n                    //        items = line.split(itemDelimiter);\n                    //        items.forEach(function (item, colNo) {\n                    //            if (colNo >= startColumn && colNo <= endColumn) {\n                    //                if (!columns[colNo - startColumn]) {\n                    //                    columns[colNo - startColumn] = [];\n                    //                }\n                    //                columns[colNo - startColumn][activeRowNo] = item;\n                    //            }\n                    //        });\n                    //        activeRowNo += 1;\n                    //    }\n                    // });\n                    //\n                    this.dataFound();\n                }\n                return columns;\n            };\n            /**\n             * Parse a HTML table\n             *\n             * @function Highcharts.Data#parseTable\n             */\n            Data.prototype.parseTable = function () {\n                var options = this.options, columns = this.columns || [], startRow = options.startRow || 0, endRow = options.endRow || Number.MAX_VALUE, startColumn = options.startColumn || 0, endColumn = options.endColumn || Number.MAX_VALUE;\n                if (options.table) {\n                    var table = options.table;\n                    if (typeof table === 'string') {\n                        table = doc.getElementById(table);\n                    }\n                    [].forEach.call(table.getElementsByTagName('tr'), function (tr, rowNo) {\n                        if (rowNo >= startRow && rowNo <= endRow) {\n                            [].forEach.call(tr.children, function (item, colNo) {\n                                var row = columns[colNo - startColumn];\n                                var i = 1;\n                                if ((item.tagName === 'TD' ||\n                                    item.tagName === 'TH') &&\n                                    colNo >= startColumn &&\n                                    colNo <= endColumn) {\n                                    if (!columns[colNo - startColumn]) {\n                                        columns[colNo - startColumn] = [];\n                                    }\n                                    columns[colNo - startColumn][rowNo - startRow] = item.innerHTML;\n                                    // Loop over all previous indices and make sure\n                                    // they are nulls, not undefined.\n                                    while (rowNo - startRow >= i &&\n                                        row[rowNo - startRow - i] === void 0) {\n                                        row[rowNo - startRow - i] = null;\n                                        i++;\n                                    }\n                                }\n                            });\n                        }\n                    });\n                    this.dataFound(); // Continue\n                }\n                return columns;\n            };\n            /**\n             * Fetch or refetch live data\n             *\n             * @function Highcharts.Data#fetchLiveData\n             *\n             * @return {boolean}\n             *         The URLs that were tried can be found in the options\n             */\n            Data.prototype.fetchLiveData = function () {\n                var data = this, chart = this.chart, options = this.options, maxRetries = 3, pollingEnabled = options.enablePolling, originalOptions = merge(options);\n                var currentRetries = 0, updateIntervalMs = (options.dataRefreshRate || 2) * 1000;\n                if (!hasURLOption(options)) {\n                    return false;\n                }\n                // Do not allow polling more than once a second\n                if (updateIntervalMs < 1000) {\n                    updateIntervalMs = 1000;\n                }\n                delete options.csvURL;\n                delete options.rowsURL;\n                delete options.columnsURL;\n                /**\n                 * @private\n                 */\n                function performFetch(initialFetch) {\n                    /**\n                     * Helper function for doing the data fetch + polling.\n                     * @private\n                     */\n                    function request(url, done, tp) {\n                        if (!url ||\n                            !/^(http|\\/|\\.\\/|\\.\\.\\/)/.test(url)) {\n                            if (url && options.error) {\n                                options.error('Invalid URL');\n                            }\n                            return false;\n                        }\n                        if (initialFetch) {\n                            clearTimeout(data.liveDataTimeout);\n                            chart.liveDataURL = url;\n                        }\n                        /**\n                         * @private\n                         */\n                        function poll() {\n                            // Poll\n                            if (pollingEnabled && chart.liveDataURL === url) {\n                                // We need to stop doing this if the URL has changed\n                                data.liveDataTimeout =\n                                    setTimeout(performFetch, updateIntervalMs);\n                            }\n                        }\n                        ajax({\n                            url: url,\n                            dataType: tp || 'json',\n                            success: function (res) {\n                                if (chart === null || chart === void 0 ? void 0 : chart.series) {\n                                    done(res);\n                                }\n                                poll();\n                            },\n                            error: function (xhr, text) {\n                                var _a;\n                                if (++currentRetries < maxRetries) {\n                                    poll();\n                                }\n                                return (_a = options.error) === null || _a === void 0 ? void 0 : _a.call(options, text, xhr);\n                            }\n                        });\n                        return true;\n                    }\n                    if (!request(originalOptions.csvURL, function (res) {\n                        chart.update({\n                            data: {\n                                csv: res\n                            }\n                        });\n                    }, 'text')) {\n                        if (!request(originalOptions.rowsURL, function (res) {\n                            chart.update({\n                                data: {\n                                    rows: res\n                                }\n                            });\n                        })) {\n                            request(originalOptions.columnsURL, function (res) {\n                                chart.update({\n                                    data: {\n                                        columns: res\n                                    }\n                                });\n                            });\n                        }\n                    }\n                }\n                performFetch(true);\n                return hasURLOption(options);\n            };\n            /**\n             * Parse a Google spreadsheet.\n             *\n             * @function Highcharts.Data#parseGoogleSpreadsheet\n             *\n             * @return {boolean}\n             *         Always returns false, because it is an intermediate fetch.\n             */\n            Data.prototype.parseGoogleSpreadsheet = function () {\n                var data = this, options = this.options, googleSpreadsheetKey = options.googleSpreadsheetKey, chart = this.chart, refreshRate = Math.max((options.dataRefreshRate || 2) * 1000, 4000);\n                /**\n                 * Form the `values` field after range settings, unless the\n                 * googleSpreadsheetRange option is set.\n                 */\n                var getRange = function () {\n                    if (options.googleSpreadsheetRange) {\n                        return options.googleSpreadsheetRange;\n                    }\n                    var alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n                    var start = (alphabet.charAt(options.startColumn || 0) || 'A') +\n                        ((options.startRow || 0) + 1);\n                    var end = alphabet.charAt(pick(options.endColumn, -1)) || 'ZZ';\n                    if (defined(options.endRow)) {\n                        end += options.endRow + 1;\n                    }\n                    return \"\".concat(start, \":\").concat(end);\n                };\n                /**\n                 * Fetch the actual spreadsheet using XMLHttpRequest.\n                 * @private\n                 */\n                function fetchSheet(fn) {\n                    var url = [\n                        'https://sheets.googleapis.com/v4/spreadsheets',\n                        googleSpreadsheetKey,\n                        'values',\n                        getRange(),\n                        '?alt=json&' +\n                            'majorDimension=COLUMNS&' +\n                            'valueRenderOption=UNFORMATTED_VALUE&' +\n                            'dateTimeRenderOption=FORMATTED_STRING&' +\n                            'key=' + options.googleAPIKey\n                    ].join('/');\n                    ajax({\n                        url: url,\n                        dataType: 'json',\n                        success: function (json) {\n                            fn(json);\n                            if (options.enablePolling) {\n                                data.liveDataTimeout = setTimeout(function () {\n                                    fetchSheet(fn);\n                                }, refreshRate);\n                            }\n                        },\n                        error: function (xhr, text) {\n                            var _a;\n                            return (_a = options.error) === null || _a === void 0 ? void 0 : _a.call(options, text, xhr);\n                        }\n                    });\n                }\n                if (googleSpreadsheetKey) {\n                    delete options.googleSpreadsheetKey;\n                    fetchSheet(function (json) {\n                        // Prepare the data from the spreadsheet\n                        var columns = json.values;\n                        if (!columns || columns.length === 0) {\n                            return false;\n                        }\n                        // Find the maximum row count in order to extend shorter columns\n                        var rowCount = columns.reduce(function (rowCount, column) { return Math.max(rowCount, column.length); }, 0);\n                        // Insert null for empty spreadsheet cells (#5298)\n                        columns.forEach(function (column) {\n                            for (var i = 0; i < rowCount; i++) {\n                                if (typeof column[i] === 'undefined') {\n                                    column[i] = null;\n                                }\n                            }\n                        });\n                        if (chart === null || chart === void 0 ? void 0 : chart.series) {\n                            chart.update({\n                                data: {\n                                    columns: columns\n                                }\n                            });\n                        }\n                        else { // #8245\n                            data.columns = columns;\n                            data.dataFound();\n                        }\n                    });\n                }\n                // This is an intermediate fetch, so always return false.\n                return false;\n            };\n            /**\n             * Trim a string from whitespaces.\n             *\n             * @function Highcharts.Data#trim\n             *\n             * @param {string} str\n             *        String to trim\n             *\n             * @param {boolean} [inside=false]\n             *        Remove all spaces between numbers.\n             *\n             * @return {string}\n             *         Trimed string\n             */\n            Data.prototype.trim = function (str, inside) {\n                if (typeof str === 'string') {\n                    str = str.replace(/^\\s+|\\s+$/g, '');\n                    // Clear white space inside the string, like thousands separators\n                    if (inside && /[\\d\\s]+/.test(str)) {\n                        str = str.replace(/\\s/g, '');\n                    }\n                    if (this.decimalRegex) {\n                        str = str.replace(this.decimalRegex, '$1.$2');\n                    }\n                }\n                return str;\n            };\n            /**\n             * Parse numeric cells in to number types and date types in to true dates.\n             *\n             * @function Highcharts.Data#parseTypes\n             */\n            Data.prototype.parseTypes = function () {\n                var columns = this.columns || [];\n                var col = columns.length;\n                while (col--) {\n                    this.parseColumn(columns[col], col);\n                }\n            };\n            /**\n             * Parse a single column. Set properties like .isDatetime and .isNumeric.\n             *\n             * @function Highcharts.Data#parseColumn\n             *\n             * @param {Array<Highcharts.DataValueType>} column\n             *        Column to parse\n             *\n             * @param {number} col\n             *        Column index\n             */\n            Data.prototype.parseColumn = function (column, col) {\n                var _a;\n                var rawColumns = this.rawColumns, columns = this.columns = this.columns || [], firstRowAsNames = this.firstRowAsNames, isXColumn = ((_a = this.valueCount) === null || _a === void 0 ? void 0 : _a.xColumns.indexOf(col)) !== -1, backup = [], chartOptions = this.chartOptions, columnTypes = this.options.columnTypes || [], columnType = columnTypes[col], forceCategory = (isXColumn &&\n                    ((chartOptions === null || chartOptions === void 0 ? void 0 : chartOptions.xAxis) &&\n                        splat(chartOptions.xAxis)[0].type === 'category')) || columnType === 'string', columnHasName = defined(column.name);\n                var row = column.length, val, floatVal, trimVal, trimInsideVal, dateVal, diff, descending;\n                if (!rawColumns[col]) {\n                    rawColumns[col] = [];\n                }\n                while (row--) {\n                    val = backup[row] || column[row];\n                    trimVal = this.trim(val);\n                    trimInsideVal = this.trim(val, true);\n                    floatVal = parseFloat(trimInsideVal);\n                    // Set it the first time\n                    if (typeof rawColumns[col][row] === 'undefined') {\n                        rawColumns[col][row] = trimVal;\n                    }\n                    // Disable number or date parsing by setting the X axis type to\n                    // category\n                    if (forceCategory ||\n                        (row === 0 && firstRowAsNames && !columnHasName)) {\n                        column[row] = '' + trimVal;\n                    }\n                    else if (+trimInsideVal === floatVal) { // Is numeric\n                        column[row] = floatVal;\n                        // If the number is greater than milliseconds in a year, assume\n                        // datetime\n                        if (floatVal > 365 * 24 * 3600 * 1000 &&\n                            columnType !== 'float') {\n                            column.isDatetime = true;\n                        }\n                        else {\n                            column.isNumeric = true;\n                        }\n                        if (typeof column[row + 1] !== 'undefined') {\n                            descending = floatVal > column[row + 1];\n                        }\n                        // String, continue to determine if it is a date string or really a\n                        // string\n                    }\n                    else {\n                        if (trimVal === null || trimVal === void 0 ? void 0 : trimVal.length) {\n                            dateVal = this.parseDate(val);\n                        }\n                        // Only allow parsing of dates if this column is an x-column\n                        if (isXColumn && isNumber(dateVal) && columnType !== 'float') {\n                            backup[row] = val;\n                            column[row] = dateVal;\n                            column.isDatetime = true;\n                            // Check if the dates are uniformly descending or ascending.\n                            // If they are not, chances are that they are a different\n                            // time format, so check for alternative.\n                            if (typeof column[row + 1] !== 'undefined') {\n                                diff = dateVal > column[row + 1];\n                                if (diff !== descending &&\n                                    typeof descending !== 'undefined') {\n                                    if (this.alternativeFormat) {\n                                        this.dateFormat = this.alternativeFormat;\n                                        row = column.length;\n                                        this.alternativeFormat =\n                                            this.dateFormats[this.dateFormat]\n                                                .alternative;\n                                    }\n                                    else {\n                                        column.unsorted = true;\n                                    }\n                                }\n                                descending = diff;\n                            }\n                        }\n                        else { // String\n                            column[row] = trimVal === '' ? null : trimVal;\n                            if (row !== 0 &&\n                                (column.isDatetime ||\n                                    column.isNumeric)) {\n                                column.mixed = true;\n                            }\n                        }\n                    }\n                }\n                // If strings are intermixed with numbers or dates in a parsed column,\n                // it is an indication that parsing went wrong or the data was not\n                // intended to display as numbers or dates and parsing is too\n                // aggressive. Fall back to categories. Demonstrated in the\n                // highcharts/demo/column-drilldown sample.\n                if (isXColumn && column.mixed) {\n                    columns[col] = rawColumns[col];\n                }\n                // If the 0 column is date or number and descending, reverse all\n                // columns.\n                if (isXColumn && descending && this.options.sort) {\n                    for (col = 0; col < columns.length; col++) {\n                        columns[col].reverse();\n                        if (firstRowAsNames) {\n                            var poppedColumn = columns[col].pop();\n                            if (poppedColumn) {\n                                columns[col].unshift(poppedColumn);\n                            }\n                        }\n                    }\n                }\n            };\n            /**\n             * Parse a date and return it as a number. Overridable through\n             * `options.parseDate`.\n             *\n             * @function Highcharts.Data#parseDate\n             */\n            Data.prototype.parseDate = function (val) {\n                var parseDate = this.options.parseDate;\n                var ret, key, format, dateFormat = this.options.dateFormat || this.dateFormat, match;\n                if (parseDate) {\n                    ret = parseDate(val);\n                }\n                else if (typeof val === 'string') {\n                    // Auto-detect the date format the first time\n                    if (!dateFormat) {\n                        for (key in this.dateFormats) { // eslint-disable-line guard-for-in\n                            format = this.dateFormats[key];\n                            match = val.match(format.regex);\n                            if (match) {\n                                this.dateFormat = dateFormat = key;\n                                this.alternativeFormat = format.alternative;\n                                ret = format.parser(match);\n                                break;\n                            }\n                        }\n                        // Next time, use the one previously found\n                    }\n                    else {\n                        format = this.dateFormats[dateFormat];\n                        if (!format) {\n                            // The selected format is invalid\n                            format = this.dateFormats['YYYY/mm/dd'];\n                        }\n                        match = val.match(format.regex);\n                        if (match) {\n                            ret = format.parser(match);\n                        }\n                    }\n                    // Fall back to Date.parse\n                    if (!match) {\n                        if (val.match(/:.+(GMT|UTC|[Z+\\-])/)) {\n                            val = val\n                                .replace(/\\s*(?:GMT|UTC)?([+\\-])(\\d\\d)(\\d\\d)$/, '$1$2:$3')\n                                .replace(/(?:\\s+|GMT|UTC)([+\\-])/, '$1')\n                                .replace(/(\\d)\\s*(?:GMT|UTC|Z)$/, '$1+00:00');\n                        }\n                        match = Date.parse(val);\n                        // External tools like Date.js and MooTools extend Date object\n                        // and return a date.\n                        if (typeof match === 'object' &&\n                            match !== null &&\n                            match.getTime) {\n                            ret = (match.getTime() -\n                                match.getTimezoneOffset() *\n                                    60000);\n                            // Timestamp\n                        }\n                        else if (isNumber(match)) {\n                            ret = match - (new Date(match)).getTimezoneOffset() * 60000;\n                        }\n                    }\n                }\n                return ret;\n            };\n            /**\n             * Get the parsed data in a form that we can apply directly to the\n             * `series.data` config. Array positions can be mapped using the\n             * `series.keys` option.\n             *\n             * @example\n             * const data = Highcharts.data({\n             *   csv: document.getElementById('data').innerHTML\n             * }).getData();\n             *\n             * @function Highcharts.Data#getData\n             *\n             * @return {Array<Array<DataValueType>>|undefined} Data rows\n             */\n            Data.prototype.getData = function () {\n                var _a;\n                if (this.columns) {\n                    return (_a = this.rowsToColumns(this.columns)) === null || _a === void 0 ? void 0 : _a.slice(1);\n                }\n            };\n            /**\n             * A hook for working directly on the parsed columns\n             *\n             * @function Highcharts.Data#parsed\n             */\n            Data.prototype.parsed = function () {\n                if (this.options.parsed) {\n                    return this.options.parsed.call(this, this.columns);\n                }\n            };\n            /**\n             * If a complete callback function is provided in the options, interpret the\n             * columns into a Highcharts options object.\n             *\n             * The function requires that the context has the `valueCount` property set.\n             *\n             * @function Highcharts.Data#complete\n             */\n            Data.prototype.complete = function () {\n                var _a, _b, _c, _d, _e;\n                var columns = this.columns = this.columns || [], xColumns = [], options = this.options, allSeriesBuilders = [];\n                var type = 'linear', series, data, i, j, r, seriesIndex, chartOptions, builder, freeIndexes, typeCol, index;\n                xColumns.length = columns.length;\n                if (options.complete || options.afterComplete) {\n                    // Get the names and shift the top row\n                    if (this.firstRowAsNames) {\n                        for (i = 0; i < columns.length; i++) {\n                            var curCol = columns[i];\n                            if (!defined(curCol.name)) {\n                                curCol.name = pick(curCol.shift(), '').toString();\n                            }\n                        }\n                    }\n                    // Use the next columns for series\n                    series = [];\n                    freeIndexes = getFreeIndexes((columns === null || columns === void 0 ? void 0 : columns.length) || 0, this.valueCount.seriesBuilders);\n                    // Populate defined series\n                    for (seriesIndex = 0; seriesIndex < this.valueCount.seriesBuilders.length; seriesIndex++) {\n                        builder = this.valueCount.seriesBuilders[seriesIndex];\n                        // If the builder can be populated with remaining columns, then\n                        // add it to allBuilders\n                        if (builder.populateColumns(freeIndexes)) {\n                            allSeriesBuilders.push(builder);\n                        }\n                    }\n                    // Populate dynamic series\n                    while (freeIndexes.length > 0) {\n                        builder = new SeriesBuilder();\n                        builder.addColumnReader(0, 'x');\n                        // Mark index as used (not free)\n                        index = freeIndexes.indexOf(0);\n                        if (index !== -1) {\n                            freeIndexes.splice(index, 1);\n                        }\n                        for (i = 0; i < this.valueCount.global; i++) {\n                            // Create and add a column reader for the next free column\n                            // index\n                            builder.addColumnReader(void 0, this.valueCount.globalPointArrayMap[i]);\n                        }\n                        // If the builder can be populated with remaining columns, then\n                        // add it to allBuilders\n                        if (builder.populateColumns(freeIndexes)) {\n                            allSeriesBuilders.push(builder);\n                        }\n                    }\n                    // Get the data-type from the first series x column\n                    if (allSeriesBuilders.length > 0 &&\n                        allSeriesBuilders[0].readers.length > 0) {\n                        typeCol = columns === null || columns === void 0 ? void 0 : columns[(_a = allSeriesBuilders[0].readers[0].columnIndex) !== null && _a !== void 0 ? _a : -1];\n                        if (typeof typeCol !== 'undefined') {\n                            if (typeCol.isDatetime) {\n                                type = 'datetime';\n                            }\n                            else if (!typeCol.isNumeric) {\n                                type = 'category';\n                            }\n                        }\n                    }\n                    // Axis type is category, then the \"x\" column should be called\n                    // \"name\"\n                    if (type === 'category') {\n                        for (seriesIndex = 0; seriesIndex < allSeriesBuilders.length; seriesIndex++) {\n                            builder = allSeriesBuilders[seriesIndex];\n                            for (r = 0; r < builder.readers.length; r++) {\n                                if (builder.readers[r].configName === 'x') {\n                                    builder.readers[r].configName = 'name';\n                                }\n                            }\n                        }\n                    }\n                    // Read data for all builders\n                    for (seriesIndex = 0; seriesIndex < allSeriesBuilders.length; seriesIndex++) {\n                        builder = allSeriesBuilders[seriesIndex];\n                        // Iterate down the cells of each column and add data to the\n                        // series\n                        data = [];\n                        for (j = 0; j < columns[0].length; j++) {\n                            data[j] = builder.read(columns, j);\n                        }\n                        // Add the series\n                        series[seriesIndex] = {\n                            data: data,\n                            pointStart: data[0] && (builder.pointIsArray ?\n                                (_b = data[0]) === null || _b === void 0 ? void 0 : _b[0] :\n                                (_c = data[0]) === null || _c === void 0 ? void 0 : _c.x) || void 0\n                        };\n                        if (builder.name) {\n                            series[seriesIndex].name = builder.name;\n                        }\n                        if (type === 'category') {\n                            series[seriesIndex].turboThreshold = 0;\n                            series[seriesIndex].pointStart = 0;\n                        }\n                    }\n                    // Do the callback\n                    chartOptions = { series: series };\n                    // Prepare the axis options\n                    if (type === 'linear' && (!this.xAxisOptions ||\n                        this.xAxisOptions.type === type)) {\n                        // Clear default value ('linear') if it is not changing the\n                        // axis type to avoid loosing animation\n                        type = this.xAxisOptions = void 0;\n                    }\n                    else {\n                        this.xAxisOptions = { type: type };\n                        if (type === 'category') {\n                            this.xAxisOptions.uniqueNames = false;\n                        }\n                    }\n                    // Merge the xAxisOptions for the standalone Data module\n                    if (!this.chart) {\n                        merge(true, chartOptions, { xAxis: this.xAxisOptions || {} });\n                    }\n                    (_d = options.complete) === null || _d === void 0 ? void 0 : _d.call(options, chartOptions);\n                    // The afterComplete hook is used internally to avoid conflict with\n                    // the externally available complete option.\n                    (_e = options.afterComplete) === null || _e === void 0 ? void 0 : _e.call(options, this, chartOptions);\n                }\n            };\n            /**\n             * Sets properties directly on the xAxis object.\n             *\n             * @private\n             */\n            Data.prototype.xAxisUpdateHandler = function (axis) {\n                var options = this.xAxisOptions;\n                if (!options) {\n                    return;\n                }\n                // Set the axis properties if not blocked by the axis options that could\n                // have changed in the update event.\n                if (!axis.options.type && options.type) {\n                    axis.type = options.type;\n                }\n                if (!axis.options.uniqueNames &&\n                    options.uniqueNames === false) {\n                    axis.uniqueNames = options.uniqueNames;\n                }\n            };\n            /**\n             * Updates the chart with new data options.\n             *\n             * @function Highcharts.Data#update\n             *\n             * @param {Highcharts.DataOptions} options\n             *        The new data options.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart after the new options are set.\n             */\n            Data.prototype.update = function (options, redraw) {\n                var _a;\n                var chart = this.chart, chartOptions = chart.options;\n                if (options) {\n                    // Set the complete handler\n                    options.afterComplete = function (dataInstance, dataOptions) {\n                        if (!dataOptions) {\n                            return;\n                        }\n                        // Avoid setting axis options unless they change. Running\n                        // Axis.update will cause the whole structure to be\n                        // destroyed and rebuilt, and animation is lost.\n                        var xAxis = chart.xAxis[0], xAxisOptions = dataInstance.xAxisOptions;\n                        // Update axis if xAxisOptions are different from the current\n                        // and not blocked by the axis options.\n                        if (xAxisOptions && xAxis && ((xAxis.type !== xAxisOptions.type && !xAxis.options.type) ||\n                            (xAxis.uniqueNames &&\n                                xAxisOptions.uniqueNames === false &&\n                                xAxis.options.uniqueNames === void 0))) {\n                            xAxis.update({}, false);\n                        }\n                        else {\n                            // Prefer smooth points update when no axis update\n                            ((dataOptions === null || dataOptions === void 0 ? void 0 : dataOptions.series) || []).forEach(function (seriesOptions) {\n                                delete seriesOptions.pointStart;\n                            });\n                        }\n                        chart.update(dataOptions, redraw, true);\n                    };\n                    // Apply it\n                    merge(true, chartOptions.data, options);\n                    // Reset columns if fetching spreadsheet, to force a re-fetch\n                    if (((_a = chartOptions.data) === null || _a === void 0 ? void 0 : _a.googleSpreadsheetKey) && !options.columns) {\n                        delete chartOptions.data.columns;\n                    }\n                    this.init(chartOptions.data || {}, chartOptions);\n                }\n            };\n            return Data;\n        }());\n        // Fire 1st xAxis properties modifier after the options are set.\n        addEvent(Axis, 'afterSetOptions', function () {\n            var _a;\n            // Target first xAxis only\n            if (this.isXAxis &&\n                // Init or update\n                (!this.chart.xAxis.length || this.chart.xAxis[0] === this)) {\n                (_a = this.chart.data) === null || _a === void 0 ? void 0 : _a.xAxisUpdateHandler(this);\n            }\n        });\n        // Extend Chart.init so that the Chart constructor accepts a new configuration\n        // option group, data.\n        addEvent(Chart, 'init', function (e) {\n            var chart = this, callback = e.args[1], defaultDataOptions = getOptions().data;\n            var userOptions = (e.args[0] || {});\n            if ((defaultDataOptions || userOptions && userOptions.data) &&\n                !chart.hasDataDef) {\n                chart.hasDataDef = true;\n                /**\n                 * The data parser for this chart.\n                 *\n                 * @name Highcharts.Chart#data\n                 * @type {Highcharts.Data|undefined}\n                 */\n                var dataOptions = merge(defaultDataOptions, userOptions.data);\n                chart.data = new Data(extend(dataOptions, {\n                    afterComplete: function (dataInstance, dataOptions) {\n                        var _a, _b, _c, _d;\n                        var i, series;\n                        // Merge series configs\n                        if (Object.hasOwnProperty.call(userOptions, 'series')) {\n                            if (typeof userOptions.series === 'object') {\n                                i = Math.max(userOptions.series.length, (_b = (_a = dataOptions === null || dataOptions === void 0 ? void 0 : dataOptions.series) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);\n                                while (i--) {\n                                    series = userOptions.series[i] || {};\n                                    userOptions.series[i] = merge(series, (_d = (_c = dataOptions === null || dataOptions === void 0 ? void 0 : dataOptions.series) === null || _c === void 0 ? void 0 : _c[i]) !== null && _d !== void 0 ? _d : {});\n                                }\n                            }\n                            else { // Allow merging in dataOptions.series (#2856)\n                                delete userOptions.series;\n                            }\n                        }\n                        // Do the merge\n                        userOptions = merge(dataOptions, userOptions);\n                        // Register for access in events (Axis' afterSetOptions)\n                        chart.data = dataInstance;\n                        // Run chart.init again\n                        chart.init(userOptions, callback);\n                    }\n                }), userOptions, chart);\n                e.preventDefault();\n            }\n        });\n        /**\n         * Creates a new SeriesBuilder. A SeriesBuilder consists of a number\n         * of ColumnReaders that reads columns and give them a name.\n         * Ex: A series builder can be constructed to read column 3 as 'x' and\n         * column 7 and 8 as 'y1' and 'y2'.\n         * The output would then be points/rows of the form {x: 11, y1: 22, y2: 33}\n         *\n         * The name of the builder is taken from the second column. In the above\n         * example it would be the column with index 7.\n         *\n         * @private\n         * @class\n         * @name SeriesBuilder\n         */\n        var SeriesBuilder = /** @class */ (function () {\n            function SeriesBuilder() {\n                /* eslint-disable no-invalid-this */\n                this.readers = [];\n                this.pointIsArray = true;\n            }\n            /**\n             * Populates readers with column indexes. A reader can be added without\n             * a specific index and for those readers the index is taken sequentially\n             * from the free columns (this is handled by the ColumnCursor instance).\n             *\n             * @function SeriesBuilder#populateColumns\n             */\n            SeriesBuilder.prototype.populateColumns = function (freeIndexes) {\n                var builder = this;\n                var enoughColumns = true;\n                // Loop each reader and give it an index if its missing.\n                // The freeIndexes.shift() will return undefined if there\n                // are no more columns.\n                builder.readers.forEach(function (reader) {\n                    if (typeof reader.columnIndex === 'undefined') {\n                        reader.columnIndex = freeIndexes.shift();\n                    }\n                });\n                // Now, all readers should have columns mapped. If not\n                // then return false to signal that this series should\n                // not be added.\n                builder.readers.forEach(function (reader) {\n                    if (typeof reader.columnIndex === 'undefined') {\n                        enoughColumns = false;\n                    }\n                });\n                return enoughColumns;\n            };\n            /**\n             * Reads a row from the dataset and returns a point or array depending\n             * on the names of the readers.\n             *\n             * @function SeriesBuilder#read<T>\n             */\n            SeriesBuilder.prototype.read = function (columns, rowIndex) {\n                var builder = this, pointIsArray = builder.pointIsArray, point = pointIsArray ? [] : {};\n                // Loop each reader and ask it to read its value.\n                // Then, build an array or point based on the readers names.\n                builder.readers.forEach(function (reader) {\n                    var value = columns[reader.columnIndex][rowIndex];\n                    if (pointIsArray) {\n                        point.push(value);\n                    }\n                    else {\n                        if (reader.configName.indexOf('.') > 0) {\n                            // Handle nested property names\n                            Point.prototype.setNestedProperty(point, value, reader.configName);\n                        }\n                        else {\n                            point[reader.configName] = value;\n                        }\n                    }\n                });\n                // The name comes from the first column (excluding the x column)\n                if (typeof this.name === 'undefined' && builder.readers.length >= 2) {\n                    var columnIndexes_1 = [];\n                    builder.readers.forEach(function (reader) {\n                        if (reader.configName === 'x' ||\n                            reader.configName === 'name' ||\n                            reader.configName === 'y') {\n                            if (typeof reader.columnIndex !== 'undefined') {\n                                columnIndexes_1.push(reader.columnIndex);\n                            }\n                        }\n                    });\n                    if (columnIndexes_1.length >= 2) {\n                        // Remove the first one (x col)\n                        columnIndexes_1.shift();\n                        // Sort the remaining\n                        columnIndexes_1.sort(function (a, b) {\n                            return a - b;\n                        });\n                    }\n                    // Now use the lowest index as name column\n                    this.name = columns[pick(columnIndexes_1.shift(), 0)].name;\n                }\n                return point;\n            };\n            /**\n             * Creates and adds ColumnReader from the given columnIndex and configName.\n             * ColumnIndex can be undefined and in that case the reader will be given\n             * an index when columns are populated.\n             *\n             * @function SeriesBuilder#addColumnReader\n             */\n            SeriesBuilder.prototype.addColumnReader = function (columnIndex, configName) {\n                this.readers.push({\n                    columnIndex: columnIndex,\n                    configName: configName\n                });\n                if (!(configName === 'x' ||\n                    configName === 'y' ||\n                    typeof configName === 'undefined')) {\n                    this.pointIsArray = false;\n                }\n            };\n            /**\n             * Returns an array of column indexes that the builder will use when\n             * reading data.\n             *\n             * @function SeriesBuilder#getReferencedColumnIndexes\n             */\n            SeriesBuilder.prototype.getReferencedColumnIndexes = function () {\n                var referencedColumnIndexes = [];\n                var i, columnReader;\n                for (i = 0; i < this.readers.length; i = i + 1) {\n                    columnReader = this.readers[i];\n                    if (typeof columnReader.columnIndex !== 'undefined') {\n                        referencedColumnIndexes.push(columnReader.columnIndex);\n                    }\n                }\n                return referencedColumnIndexes;\n            };\n            /**\n             * Returns true if the builder has a reader for the given configName.\n             *\n             * @function SeriesBuilder#hasReader\n             */\n            SeriesBuilder.prototype.hasReader = function (configName) {\n                var i, columnReader;\n                for (i = 0; i < this.readers.length; i = i + 1) {\n                    columnReader = this.readers[i];\n                    if (columnReader.configName === configName) {\n                        return true;\n                    }\n                }\n                // Else return undefined\n            };\n            return SeriesBuilder;\n        }());\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Callback function to modify the CSV before parsing it by the data module.\n         *\n         * @callback Highcharts.DataBeforeParseCallbackFunction\n         *\n         * @param {string} csv\n         *        The CSV to modify.\n         *\n         * @return {string}\n         *         The CSV to parse.\n         */\n        /**\n         * Callback function that gets called after parsing data.\n         *\n         * @callback Highcharts.DataCompleteCallbackFunction\n         *\n         * @param {Highcharts.Options} chartOptions\n         *        The chart options that were used.\n         */\n        /**\n         * Callback function that returns the corresponding Date object to a match.\n         *\n         * @callback Highcharts.DataDateFormatCallbackFunction\n         *\n         * @param {Array<number>} match\n         *\n         * @return {number}\n         */\n        /**\n         * Structure for alternative date formats to parse.\n         *\n         * @interface Highcharts.DataDateFormatObject\n         */ /**\n        * @name Highcharts.DataDateFormatObject#alternative\n        * @type {string|undefined}\n        */ /**\n        * @name Highcharts.DataDateFormatObject#parser\n        * @type {Highcharts.DataDateFormatCallbackFunction}\n        */ /**\n        * @name Highcharts.DataDateFormatObject#regex\n        * @type {global.RegExp}\n        */\n        /**\n         * Possible types for a data item in a column or row.\n         *\n         * @typedef {number|string|null} Highcharts.DataValueType\n         */\n        /**\n         * Callback function to parse string representations of dates into\n         * JavaScript timestamps (milliseconds since 1.1.1970).\n         *\n         * @callback Highcharts.DataParseDateCallbackFunction\n         *\n         * @param {string} dateValue\n         *\n         * @return {number}\n         *         Timestamp (milliseconds since 1.1.1970) as integer for Date class.\n         */\n        /**\n         * Callback function to access the parsed columns, the two-dimensional\n         * input data array directly, before they are interpreted into series\n         * data and categories.\n         *\n         * @callback Highcharts.DataParsedCallbackFunction\n         *\n         * @param {Array<Array<*>>} columns\n         *        The parsed columns by the data module.\n         *\n         * @return {boolean|undefined}\n         *         Return `false` to stop completion, or call `this.complete()` to\n         *         continue async.\n         */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The Data module provides a simplified interface for adding data to\n         * a chart from sources like CVS, HTML tables or grid views. See also\n         * the [tutorial article on the Data module](\n         * https://www.highcharts.com/docs/working-with-data/data-module).\n         *\n         * It requires the `modules/data.js` file to be loaded.\n         *\n         * Please note that the default way of adding data in Highcharts, without\n         * the need of a module, is through the [series._type_.data](#series.line.data)\n         * option.\n         *\n         * @sample {highcharts} highcharts/demo/column-parsed/\n         *         HTML table\n         * @sample {highcharts} highcharts/data/csv/\n         *         CSV\n         *\n         * @since     4.0\n         * @requires  modules/data\n         * @apioption data\n         */\n        /**\n         * A callback function to modify the CSV before parsing it. Return the modified\n         * string.\n         *\n         * @sample {highcharts} highcharts/demo/line-csv/\n         *         Modify CSV before parse\n         *\n         * @type      {Highcharts.DataBeforeParseCallbackFunction}\n         * @since     6.1\n         * @apioption data.beforeParse\n         */\n        /**\n         * A two-dimensional array representing the input data on tabular form.\n         * This input can be used when the data is already parsed, for example\n         * from a grid view component. Each cell can be a string or number.\n         * If not switchRowsAndColumns is set, the columns are interpreted as\n         * series.\n         *\n         * @see [data.rows](#data.rows)\n         *\n         * @sample {highcharts} highcharts/data/columns/\n         *         Columns\n         *\n         * @type      {Array<Array<Highcharts.DataValueType>>}\n         * @since     4.0\n         * @apioption data.columns\n         */\n        /**\n         * An array option that specifies the data type for each column in the series\n         * loaded within the data module.\n         *\n         * Possible values: `\"string\"`, `\"number\"`, `\"float\"`, `\"date\"`.\n         *\n         * @sample {highcharts|highstock} highcharts/data/column-types/\n         *         X-axis categories based on CSV data\n         * @sample {highmaps} highcharts/data/column-types-map/\n         *         Map chart created with fips from CSV\n         *\n         * @type       {Array<'string'|'number'|'float'|'date'>}\n         * @since      11.3.0\n         * @validvalue [\"string\", \"number\", \"float\", \"date\"]\n         * @apioption  data.columnTypes\n         */\n        /**\n         * The callback that is evaluated when the data is finished loading,\n         * optionally from an external source, and parsed. The first argument\n         * passed is a finished chart options object, containing the series.\n         * These options can be extended with additional options and passed\n         * directly to the chart constructor.\n         *\n         * @see [data.parsed](#data.parsed)\n         *\n         * @sample {highcharts} highcharts/data/complete/\n         *         Modify data on complete\n         *\n         * @type      {Highcharts.DataCompleteCallbackFunction}\n         * @since     4.0\n         * @apioption data.complete\n         */\n        /**\n         * A comma delimited string to be parsed. Related options are [startRow](\n         * #data.startRow), [endRow](#data.endRow), [startColumn](#data.startColumn)\n         * and [endColumn](#data.endColumn) to delimit what part of the table\n         * is used. The [lineDelimiter](#data.lineDelimiter) and [itemDelimiter](\n         * #data.itemDelimiter) options define the CSV delimiter formats.\n         *\n         * The built-in CSV parser doesn't support all flavours of CSV, so in\n         * some cases it may be necessary to use an external CSV parser. See\n         * [this example](https://jsfiddle.net/highcharts/u59176h4/) of parsing\n         * CSV through the MIT licensed [Papa Parse](http://papaparse.com/)\n         * library.\n         *\n         * @sample {highcharts} highcharts/data/csv/\n         *         Data from CSV\n         *\n         * @type      {string}\n         * @since     4.0\n         * @apioption data.csv\n         */\n        /**\n         * Which of the predefined date formats in Date.prototype.dateFormats\n         * to use to parse date values. Defaults to a best guess based on what\n         * format gives valid and ordered dates. Valid options include: `YYYY/mm/dd`,\n         * `dd/mm/YYYY`, `mm/dd/YYYY`, `dd/mm/YY`, `mm/dd/YY`.\n         *\n         * @see [data.parseDate](#data.parseDate)\n         *\n         * @sample {highcharts} highcharts/data/dateformat-auto/\n         *         Best guess date format\n         *\n         * @type       {string}\n         * @since      4.0\n         * @validvalue [\"YYYY/mm/dd\", \"dd/mm/YYYY\", \"mm/dd/YYYY\", \"dd/mm/YYYY\",\n         *             \"dd/mm/YY\", \"mm/dd/YY\"]\n         * @apioption  data.dateFormat\n         */\n        /**\n         * The decimal point used for parsing numbers in the CSV.\n         *\n         * If both this and data.delimiter is set to `undefined`, the parser will\n         * attempt to deduce the decimal point automatically.\n         *\n         * @sample {highcharts} highcharts/data/delimiters/\n         *         Comma as decimal point\n         *\n         * @type      {string}\n         * @default   .\n         * @since     4.1.0\n         * @apioption data.decimalPoint\n         */\n        /**\n         * In tabular input data, the last column (indexed by 0) to use. Defaults\n         * to the last column containing data.\n         *\n         * @sample {highcharts} highcharts/data/start-end/\n         *         Limited data\n         *\n         * @type      {number}\n         * @since     4.0\n         * @apioption data.endColumn\n         */\n        /**\n         * In tabular input data, the last row (indexed by 0) to use. Defaults\n         * to the last row containing data.\n         *\n         * @sample {highcharts} highcharts/data/start-end/\n         *         Limited data\n         *\n         * @type      {number}\n         * @since     4.0.4\n         * @apioption data.endRow\n         */\n        /**\n         * Whether to use the first row in the data set as series names.\n         *\n         * @sample {highcharts} highcharts/data/start-end/\n         *         Don't get series names from the CSV\n         * @sample {highstock} highcharts/data/start-end/\n         *         Don't get series names from the CSV\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since     4.1.0\n         * @product   highcharts highstock gantt\n         * @apioption data.firstRowAsNames\n         */\n        /**\n         * The Google Spreadsheet API key required for access generated at [API Services\n         * / Credentials](https://console.cloud.google.com/apis/credentials). See a\n         * comprehensive tutorial for setting up the key at the\n         * [Hands-On Data Visualization](https://handsondataviz.org/google-sheets-api-key.html)\n         * book website.\n         *\n         * @sample {highcharts} highcharts/data/google-spreadsheet/\n         *         Load a Google Spreadsheet\n         *\n         * @type      {string}\n         * @since     9.2.2\n         * @apioption data.googleAPIKey\n         */\n        /**\n         * The key or `spreadsheetId` value for a Google Spreadsheet to load. See\n         * [developers.google.com](https://developers.google.com/sheets/api/guides/concepts)\n         * for how to find the `spreadsheetId`.\n         *\n         * In order for Google Sheets to load, a valid [googleAPIKey](#data.googleAPIKey)\n         * must also be given.\n         *\n         * @sample {highcharts} highcharts/data/google-spreadsheet/\n         *         Load a Google Spreadsheet\n         *\n         * @type      {string}\n         * @since     4.0\n         * @apioption data.googleSpreadsheetKey\n         */\n        /**\n         * The Google Spreadsheet `range` to use in combination with\n         * [googleSpreadsheetKey](#data.googleSpreadsheetKey). See\n         * [developers.google.com](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/get)\n         * for details.\n         *\n         * If given, it takes precedence over `startColumn`, `endColumn`, `startRow` and\n         * `endRow`.\n         *\n         * @example\n         * googleSpreadsheetRange: 'Fruit Consumption' // Load a named worksheet\n         * googleSpreadsheetRange: 'A:Z' // Load columns A to Z\n         *\n         * @sample {highcharts} highcharts/data/google-spreadsheet/\n         *         Load a Google Spreadsheet\n         *\n         * @type      {string|undefined}\n         * @since     9.2.2\n         * @apioption data.googleSpreadsheetRange\n         */\n        /**\n         * No longer works since v9.2.2, that uses Google Sheets API v4. Instead, use\n         * the [googleSpreadsheetRange](#data.googleSpreadsheetRange) option to load a\n         * specific sheet.\n         *\n         * @deprecated\n         * @type      {string}\n         * @since     4.0\n         * @apioption data.googleSpreadsheetWorksheet\n         */\n        /**\n         * Item or cell delimiter for parsing CSV. Defaults to the tab character\n         * `\\t` if a tab character is found in the CSV string, if not it defaults\n         * to `,`.\n         *\n         * If this is set to false or undefined, the parser will attempt to deduce\n         * the delimiter automatically.\n         *\n         * @sample {highcharts} highcharts/data/delimiters/\n         *         Delimiters\n         *\n         * @type      {string}\n         * @since     4.0\n         * @apioption data.itemDelimiter\n         */\n        /**\n         * Line delimiter for parsing CSV.\n         *\n         * @sample {highcharts} highcharts/data/delimiters/\n         *         Delimiters\n         *\n         * @type      {string}\n         * @default   \\n\n         * @since     4.0\n         * @apioption data.lineDelimiter\n         */\n        /**\n         * A callback function to access the parsed columns, the two-dimensional\n         * input data array directly, before they are interpreted into series\n         * data and categories. Return `false` to stop completion, or call\n         * `this.complete()` to continue async.\n         *\n         * @see [data.complete](#data.complete)\n         *\n         * @sample {highcharts} highcharts/data/parsed/\n         *         Modify data after parse\n         *\n         * @type      {Highcharts.DataParsedCallbackFunction}\n         * @since     4.0\n         * @apioption data.parsed\n         */\n        /**\n         * A callback function to parse string representations of dates into\n         * JavaScript timestamps. Should return an integer timestamp on success.\n         *\n         * @see [dateFormat](#data.dateFormat)\n         *\n         * @type      {Highcharts.DataParseDateCallbackFunction}\n         * @since     4.0\n         * @apioption data.parseDate\n         */\n        /**\n         * The same as the columns input option, but defining rows instead of\n         * columns.\n         *\n         * @see [data.columns](#data.columns)\n         *\n         * @sample {highcharts} highcharts/data/rows/\n         *         Data in rows\n         *\n         * @type      {Array<Array<Highcharts.DataValueType>>}\n         * @since     4.0\n         * @apioption data.rows\n         */\n        /**\n         * An array containing dictionaries for each series. A dictionary exists of\n         * Point property names as the key and the CSV column index as the value.\n         *\n         * @sample {highcharts} highcharts/data/seriesmapping-label/\n         *         Label from data set\n         *\n         * @type      {Array<Highcharts.Dictionary<number>>}\n         * @since     4.0.4\n         * @apioption data.seriesMapping\n         */\n        /**\n         * In tabular input data, the first column (indexed by 0) to use.\n         *\n         * @sample {highcharts} highcharts/data/start-end/\n         *         Limited data\n         *\n         * @type      {number}\n         * @default   0\n         * @since     4.0\n         * @apioption data.startColumn\n         */\n        /**\n         * In tabular input data, the first row (indexed by 0) to use.\n         *\n         * @sample {highcharts} highcharts/data/start-end/\n         *         Limited data\n         *\n         * @type      {number}\n         * @default   0\n         * @since     4.0\n         * @apioption data.startRow\n         */\n        /**\n         * Switch rows and columns of the input data, so that `this.columns`\n         * effectively becomes the rows of the data set, and the rows are interpreted\n         * as series.\n         *\n         * @sample {highcharts} highcharts/data/switchrowsandcolumns/\n         *         Switch rows and columns\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     4.0\n         * @apioption data.switchRowsAndColumns\n         */\n        /**\n         * An HTML table or the id of such to be parsed as input data. Related\n         * options are `startRow`, `endRow`, `startColumn` and `endColumn` to\n         * delimit what part of the table is used.\n         *\n         * @sample {highcharts} highcharts/demo/column-parsed/\n         *         Parsed table\n         *\n         * @type      {string|global.HTMLElement}\n         * @since     4.0\n         * @apioption data.table\n         */\n        /**\n         * An URL to a remote CSV dataset. Will be fetched when the chart is created\n         * using Ajax.\n         *\n         * @sample highcharts/data/livedata-columns\n         *         Categorized bar chart with CSV and live polling\n         * @sample highcharts/data/livedata-csv\n         *         Time based line chart with CSV and live polling\n         *\n         * @type      {string}\n         * @apioption data.csvURL\n         */\n        /**\n         * A URL to a remote JSON dataset, structured as a row array.\n         * Will be fetched when the chart is created using Ajax.\n         *\n         * @sample highcharts/data/livedata-rows\n         *         Rows with live polling\n         *\n         * @type      {string}\n         * @apioption data.rowsURL\n         */\n        /**\n         * A URL to a remote JSON dataset, structured as a column array.\n         * Will be fetched when the chart is created using Ajax.\n         *\n         * @sample highcharts/data/livedata-columns\n         *         Columns with live polling\n         *\n         * @type      {string}\n         * @apioption data.columnsURL\n         */\n        /**\n         * Sets the refresh rate for data polling when importing remote dataset by\n         * setting [data.csvURL](data.csvURL), [data.rowsURL](data.rowsURL),\n         * [data.columnsURL](data.columnsURL), or\n         * [data.googleSpreadsheetKey](data.googleSpreadsheetKey).\n         *\n         * Note that polling must be enabled by setting\n         * [data.enablePolling](data.enablePolling) to true.\n         *\n         * The value is the number of seconds between pollings.\n         * It cannot be set to less than 1 second.\n         *\n         * @sample highcharts/demo/live-data\n         *         Live data with user set refresh rate\n         *\n         * @default   1\n         * @type      {number}\n         * @apioption data.dataRefreshRate\n         */\n        /**\n         * Enables automatic refetching of remote datasets every _n_ seconds (defined by\n         * setting [data.dataRefreshRate](data.dataRefreshRate)).\n         *\n         * Only works when either [data.csvURL](data.csvURL),\n         * [data.rowsURL](data.rowsURL), [data.columnsURL](data.columnsURL), or\n         * [data.googleSpreadsheetKey](data.googleSpreadsheetKey).\n         *\n         * @sample highcharts/demo/live-data\n         *         Live data\n         * @sample highcharts/data/livedata-columns\n         *         Categorized bar chart with CSV and live polling\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption data.enablePolling\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Data;\n    });\n    _registerModule(_modules, 'masters/modules/data.src.js', [_modules['Core/Globals.js'], _modules['Core/HttpUtilities.js'], _modules['Extensions/Data.js']], function (Highcharts, HttpUtilities, Data) {\n\n        var G = Highcharts;\n        // Classes\n        G.Data = G.Data || Data;\n        G.HttpUtilities = G.HttpUtilities || HttpUtilities;\n        // Functions\n        G.ajax = G.HttpUtilities.ajax;\n        G.data = G.Data.data;\n        G.getJSON = G.HttpUtilities.getJSON;\n        G.post = G.HttpUtilities.post;\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","G","U","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","call","discardElement","objectEach","HttpUtilities","ajax","settings","headers","json","xml","text","octet","r","XMLHttpRequest","handleError","xhr","err","error","url","open","type","toUpperCase","setRequestHeader","dataType","val","key","responseType","onreadystatechange","res","readyState","status","responseText","JSON","parse","e","Error","success","data","stringify","send","getJSON","post","fetchOptions","formData","FormData","name","append","filename","fetch","method","body","then","ok","link","document","createElement","href","concat","download","click","Axis","Chart","D","HU","Point","SeriesRegistry","getOptions","doc","seriesTypes","addEvent","defined","extend","fireEvent","isNumber","merge","pick","splat","hasURLOption","options","Boolean","rowsURL","csvURL","columnsURL","Data","dataOptions","chartOptions","chart","rowsToColumns","dateFormats","regex","parser","match","Date","UTC","NaN","alternative","d","year","getFullYear","rawColumns","init","rows","row","rowsLength","col","colsLength","columns","hasData","decimalPoint","firstRowAsNames","decimalRegex","RegExp","liveDataTimeout","clearTimeout","dataFound","fetchLiveData","parseCSV","parseTable","parseGoogleSpreadsheet","afterComplete","getColumnDistribution","_a","_b","xColumns","getValueCount","pointArrayMap","getPointArrayMap","globalType","individualCounts","seriesBuilders","seriesMapping","series","map","x","seriesIndex","forEach","push","mapping","builder","SeriesBuilder","numberOfValueColumnsNeeded","seriesArr","defaultPointArrayMap","isCartesian","addColumnReader","hasReader","globalPointArrayMap","valueCount","global","individual","switchRowsAndColumns","parseTypes","parsed","complete","inOptions","points","commas","guessed","itemDelimiter","lines","self","startColumn","endColumn","Number","MAX_VALUE","dataTypes","potDelimiters","csv","startRow","endRow","rowIt","beforeParse","replace","split","lineDelimiter","some","columnStr","c","cn","cl","inStr","token","j","isNaN","trim","isFinite","offset","parseRow","rowNumber","noAdd","callbacks","actualColumn","column","read","pushType","columnTypes","parseFloat","dateFormat","deduceDateFormat","limit","thing","calculatedFormat","format","stable","max","guessedFormat","madeDeduction","parseInt","join","table","getElementById","getElementsByTagName","tr","rowNo","children","item","colNo","tagName","innerHTML","pollingEnabled","enablePolling","originalOptions","currentRetries","updateIntervalMs","dataRefreshRate","performFetch","initialFetch","request","done","tp","test","poll","liveDataURL","setTimeout","update","googleSpreadsheetKey","refreshRate","Math","getRange","googleSpreadsheetRange","alphabet","start","charAt","end","fetchSheet","googleAPIKey","values","rowCount","reduce","str","inside","parseColumn","floatVal","trimVal","trimInsideVal","dateVal","diff","descending","isXColumn","indexOf","backup","columnType","forceCategory","xAxis","columnHasName","isDatetime","isNumeric","parseDate","alternativeFormat","unsorted","mixed","sort","reverse","poppedColumn","pop","unshift","ret","getTime","getTimezoneOffset","getData","slice","_c","_d","_e","freeIndexes","typeCol","index","allSeriesBuilders","curCol","shift","toString","getFreeIndexes","numberOfColumns","referencedIndexes","freeIndexValues","getReferencedColumnIndexes","populateColumns","splice","readers","columnIndex","configName","pointStart","pointIsArray","turboThreshold","xAxisOptions","uniqueNames","xAxisUpdateHandler","axis","redraw","dataInstance","seriesOptions","isXAxis","callback","defaultDataOptions","userOptions","hasDataDef","preventDefault","enoughColumns","reader","rowIndex","point","value","setNestedProperty","columnIndexes_1","a","b","columnReader","referencedColumnIndexes"],"mappings":"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"}