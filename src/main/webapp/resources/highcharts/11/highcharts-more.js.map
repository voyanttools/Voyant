{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * (c) 2009-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/highcharts-more', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/Pane/PaneComposition.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { addEvent, correctFloat, defined, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /** @private */\n        function chartGetHoverPane(eventArgs) {\n            const chart = this;\n            let hoverPane;\n            if (eventArgs) {\n                chart.pane.forEach((pane) => {\n                    const x = eventArgs.chartX - chart.plotLeft, y = eventArgs.chartY - chart.plotTop;\n                    if (isInsidePane(x, y, pane.center)) {\n                        hoverPane = pane;\n                    }\n                });\n            }\n            return hoverPane;\n        }\n        /** @private */\n        function compose(ChartClass, PointerClass) {\n            const chartProto = ChartClass.prototype;\n            if (!chartProto.getHoverPane) {\n                chartProto.collectionsWithUpdate.push('pane');\n                chartProto.getHoverPane = chartGetHoverPane;\n                addEvent(ChartClass, 'afterIsInsidePlot', onChartAfterIsInsiderPlot);\n                addEvent(PointerClass, 'afterGetHoverData', onPointerAfterGetHoverData);\n                addEvent(PointerClass, 'beforeGetHoverData', onPointerBeforeGetHoverData);\n            }\n        }\n        /**\n         * Check whether element is inside or outside pane.\n         * @private\n         * @param  {number} x\n         * Element's x coordinate\n         * @param  {number} y\n         * Element's y coordinate\n         * @param  {Array<number>} center\n         * Pane's center (x, y) and diameter\n         * @param  {number} startAngle\n         * Pane's normalized start angle in radians (<-PI, PI>)\n         * @param  {number} endAngle\n         * Pane's normalized end angle in radians (<-PI, PI>)\n         */\n        function isInsidePane(x, y, center, startAngle, endAngle) {\n            let insideSlice = true;\n            const cx = center[0], cy = center[1];\n            const distance = Math.sqrt(Math.pow(x - cx, 2) + Math.pow(y - cy, 2));\n            if (defined(startAngle) && defined(endAngle)) {\n                // Round angle to N-decimals to avoid numeric errors\n                const angle = Math.atan2(correctFloat(y - cy, 8), correctFloat(x - cx, 8));\n                // Ignore full circle panes:\n                if (endAngle !== startAngle) {\n                    // If normalized start angle is bigger than normalized end,\n                    // it means angles have different signs. In such situation we\n                    // check the <-PI, startAngle> and <endAngle, PI> ranges.\n                    if (startAngle > endAngle) {\n                        insideSlice = (angle >= startAngle &&\n                            angle <= Math.PI) || (angle <= endAngle &&\n                            angle >= -Math.PI);\n                    }\n                    else {\n                        // In this case, we simple check if angle is within the\n                        // <startAngle, endAngle> range\n                        insideSlice = angle >= startAngle &&\n                            angle <= correctFloat(endAngle, 8);\n                    }\n                }\n            }\n            // Round up radius because x and y values are rounded\n            return distance <= Math.ceil(center[2] / 2) && insideSlice;\n        }\n        /**\n         * Check if (x, y) position is within pane for polar.\n         * @private\n         */\n        function onChartAfterIsInsiderPlot(e) {\n            const chart = this;\n            if (chart.polar) {\n                if (e.options.inverted) {\n                    [e.x, e.y] = [e.y, e.x];\n                }\n                e.isInsidePlot = chart.pane.some((pane) => isInsidePane(e.x, e.y, pane.center, pane.axis && pane.axis.normalizedStartAngleRad, pane.axis && pane.axis.normalizedEndAngleRad));\n            }\n        }\n        /**\n         *\n         */\n        function onPointerAfterGetHoverData(eventArgs) {\n            const chart = this.chart;\n            if (eventArgs.hoverPoint &&\n                eventArgs.hoverPoint.plotX &&\n                eventArgs.hoverPoint.plotY &&\n                chart.hoverPane &&\n                !isInsidePane(eventArgs.hoverPoint.plotX, eventArgs.hoverPoint.plotY, chart.hoverPane.center)) {\n                eventArgs.hoverPoint = void 0;\n            }\n        }\n        /** @private */\n        function onPointerBeforeGetHoverData(eventArgs) {\n            const chart = this.chart;\n            if (chart.polar) {\n                // Find pane we are currently hovering over.\n                chart.hoverPane = chart.getHoverPane(eventArgs);\n                // Edit filter method to handle polar\n                eventArgs.filter = function (s) {\n                    return (s.visible &&\n                        !(!eventArgs.shared && s.directTouch) && // #3821\n                        pick(s.options.enableMouseTracking, true) &&\n                        (!chart.hoverPane || s.xAxis.pane === chart.hoverPane));\n                };\n            }\n            else {\n                chart.hoverPane = void 0;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const PaneComposition = {\n            compose\n        };\n\n        return PaneComposition;\n    });\n    _registerModule(_modules, 'Extensions/Pane/PaneDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An array of background items for the pane.\n         *\n         * @sample {highcharts} highcharts/demo/gauge-speedometer/\n         *         Speedometer gauge with multiple backgrounds\n         *\n         * @type         {Array<*>}\n         * @optionparent pane.background\n         */\n        const background = {\n            /**\n             * The class name for this background.\n             *\n             * @sample {highcharts} highcharts/css/pane/\n             *         Panes styled by CSS\n             * @sample {highstock} highcharts/css/pane/\n             *         Panes styled by CSS\n             * @sample {highmaps} highcharts/css/pane/\n             *         Panes styled by CSS\n             *\n             * @type      {string}\n             * @default   highcharts-pane\n             * @since     5.0.0\n             * @apioption pane.background.className\n             */\n            /**\n             * The shape of the pane background. When `solid`, the background\n             * is circular. When `arc`, the background extends only from the min\n             * to the max of the value axis.\n             *\n             * @type    {Highcharts.PaneBackgroundShapeValue}\n             * @since   2.3.0\n             * @product highcharts\n             */\n            shape: 'circle',\n            /**\n             * The border radius of the pane background when the shape is `arc`. Can be\n             * a number (pixels) or a percentage string.\n             *\n             * @since 11.4.2\n             * @sample  highcharts/series-solidgauge/pane-borderradius\n             *          Circular gauge and pane with equal border radius\n             * @product highcharts\n             * @type    {number|string}\n             */\n            borderRadius: 0,\n            /**\n             * The pixel border width of the pane background.\n             *\n             * @since 2.3.0\n             * @product highcharts\n             */\n            borderWidth: 1,\n            /**\n             * The pane background border color.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since   2.3.0\n             * @product highcharts\n             */\n            borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The background color or gradient for the pane.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default { linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, stops: [[0, #ffffff], [1, #e6e6e6]] }\n             * @since   2.3.0\n             * @product highcharts\n             */\n            backgroundColor: {\n                /** @ignore-option */\n                linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },\n                /** @ignore-option */\n                stops: [\n                    [0, \"#ffffff\" /* Palette.backgroundColor */],\n                    [1, \"#e6e6e6\" /* Palette.neutralColor10 */]\n                ]\n            },\n            /** @ignore-option */\n            from: -Number.MAX_VALUE, // Corrected to axis min\n            /**\n             * The inner radius of the pane background. Can be either numeric\n             * (pixels) or a percentage string.\n             *\n             * @type    {number|string}\n             * @since   2.3.0\n             * @product highcharts\n             */\n            innerRadius: 0,\n            /** @ignore-option */\n            to: Number.MAX_VALUE, // Corrected to axis max\n            /**\n             * The outer radius of the circular pane background. Can be either\n             * numeric (pixels) or a percentage string.\n             *\n             * @type     {number|string}\n             * @since    2.3.0\n             * @product  highcharts\n             */\n            outerRadius: '105%'\n        };\n        /**\n         * The pane serves as a container for axes and backgrounds for circular\n         * gauges and polar charts.\n         *\n         * @type         {*|Array<*>}\n         * @since        2.3.0\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent pane\n         */\n        const pane = {\n            /**\n             * The end angle of the polar X axis or gauge value axis, given in\n             * degrees where 0 is north. Defaults to [startAngle](#pane.startAngle)\n             * + 360.\n             *\n             * @sample {highcharts} highcharts/demo/gauge-vu-meter/\n             *         VU-meter with custom start and end angle\n             *\n             * @type      {number}\n             * @since     2.3.0\n             * @product   highcharts\n             * @apioption pane.endAngle\n             */\n            /**\n             * The center of a polar chart or angular gauge, given as an array\n             * of [x, y] positions. Positions can be given as integers that\n             * transform to pixels, or as percentages of the plot area size.\n             *\n             * @sample {highcharts} highcharts/demo/gauge-vu-meter/\n             *         Two gauges with different center\n             *\n             * @type    {Array<string|number>}\n             * @default [\"50%\", \"50%\"]\n             * @since   2.3.0\n             * @product highcharts\n             */\n            center: ['50%', '50%'],\n            /**\n             * The size of the pane, either as a number defining pixels, or a\n             * percentage defining a percentage of the available plot area (the\n             * smallest of the plot height or plot width).\n             *\n             * @sample {highcharts} highcharts/demo/gauge-vu-meter/\n             *         Smaller size\n             *\n             * @type    {number|string}\n             * @product highcharts\n             */\n            size: '85%',\n            /**\n             * The inner size of the pane, either as a number defining pixels, or a\n             * percentage defining a percentage of the pane's size.\n             *\n             * @sample {highcharts} highcharts/series-polar/column-inverted-inner\n             *         The inner size set to 20%\n             *\n             * @type    {number|string}\n             * @product highcharts\n             */\n            innerSize: '0%',\n            /**\n             * The start angle of the polar X axis or gauge axis, given in degrees\n             * where 0 is north. Defaults to 0.\n             *\n             * @sample {highcharts} highcharts/demo/gauge-vu-meter/\n             *         VU-meter with custom start and end angle\n             *\n             * @since   2.3.0\n             * @product highcharts\n             */\n            startAngle: 0\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const PaneDefaults = {\n            pane,\n            background\n        };\n\n        return PaneDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Pane/Pane.js', [_modules['Series/CenteredUtilities.js'], _modules['Extensions/Pane/PaneComposition.js'], _modules['Extensions/Pane/PaneDefaults.js'], _modules['Core/Utilities.js']], function (CU, PaneComposition, PaneDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { extend, merge, splat } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Pane object allows options that are common to a set of X and Y axes.\n         *\n         * In the future, this can be extended to basic Highcharts and Highcharts Stock.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Pane\n         * @param {Highcharts.PaneOptions} options\n         * @param {Highcharts.Chart} chart\n         */\n        class Pane {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options, chart) {\n                this.coll = 'pane'; // Member of chart.pane\n                this.init(options, chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initialize the Pane object\n             *\n             * @private\n             * @function Highcharts.Pane#init\n             *\n             * @param {Highcharts.PaneOptions} options\n             *\n             * @param {Highcharts.Chart} chart\n             */\n            init(options, chart) {\n                this.chart = chart;\n                this.background = [];\n                chart.pane.push(this);\n                this.setOptions(options);\n            }\n            /**\n             * @private\n             * @function Highcharts.Pane#setOptions\n             *\n             * @param {Highcharts.PaneOptions} options\n             */\n            setOptions(options) {\n                // Set options. Angular charts have a default background (#3318)\n                this.options = options = merge(PaneDefaults.pane, this.chart.angular ? { background: {} } : void 0, options);\n            }\n            /**\n             * Render the pane with its backgrounds.\n             *\n             * @private\n             * @function Highcharts.Pane#render\n             */\n            render() {\n                const options = this.options, renderer = this.chart.renderer;\n                if (!this.group) {\n                    this.group = renderer.g('pane-group')\n                        .attr({ zIndex: options.zIndex || 0 })\n                        .add();\n                }\n                this.updateCenter();\n                let backgroundOption = this.options.background;\n                // Render the backgrounds\n                if (backgroundOption) {\n                    backgroundOption = splat(backgroundOption);\n                    const len = Math.max(backgroundOption.length, this.background.length || 0);\n                    for (let i = 0; i < len; i++) {\n                        // #6641 - if axis exists, chart is circular and apply\n                        // background\n                        if (backgroundOption[i] && this.axis) {\n                            this.renderBackground(merge(PaneDefaults.background, backgroundOption[i]), i);\n                        }\n                        else if (this.background[i]) {\n                            this.background[i] = this.background[i].destroy();\n                            this.background.splice(i, 1);\n                        }\n                    }\n                }\n            }\n            /**\n             * Render an individual pane background.\n             *\n             * @private\n             * @function Highcharts.Pane#renderBackground\n             *\n             * @param {Highcharts.PaneBackgroundOptions} backgroundOptions\n             *        Background options\n             *\n             * @param {number} i\n             *        The index of the background in this.backgrounds\n             */\n            renderBackground(backgroundOptions, i) {\n                const attribs = {\n                    'class': 'highcharts-pane ' + (backgroundOptions.className || '')\n                };\n                let method = 'animate';\n                if (!this.chart.styledMode) {\n                    extend(attribs, {\n                        'fill': backgroundOptions.backgroundColor,\n                        'stroke': backgroundOptions.borderColor,\n                        'stroke-width': backgroundOptions.borderWidth\n                    });\n                }\n                if (!this.background[i]) {\n                    this.background[i] = this.chart.renderer\n                        .path()\n                        .add(this.group);\n                    method = 'attr';\n                }\n                this.background[i][method]({\n                    'd': this.axis.getPlotBandPath(backgroundOptions.from, backgroundOptions.to, backgroundOptions)\n                }).attr(attribs);\n            }\n            /**\n             * Gets the center for the pane and its axis.\n             *\n             * @private\n             * @function Highcharts.Pane#updateCenter\n             * @param {Highcharts.Axis} [axis]\n             */\n            updateCenter(axis) {\n                this.center = (axis ||\n                    this.axis ||\n                    {}).center = CU.getCenter.call(this);\n            }\n            /**\n             * Destroy the pane item\n             *\n             * @ignore\n             * @private\n             * @function Highcharts.Pane#destroy\n             * /\n            destroy: function () {\n                erase(this.chart.pane, this);\n                this.background.forEach(function (background) {\n                    background.destroy();\n                });\n                this.background.length = 0;\n                this.group = this.group.destroy();\n            },\n            */\n            /**\n             * Update the pane item with new options\n             *\n             * @private\n             * @function Highcharts.Pane#update\n             * @param {Highcharts.PaneOptions} options\n             *        New pane options\n             * @param {boolean} [redraw]\n             */\n            update(options, redraw) {\n                merge(true, this.options, options);\n                this.setOptions(this.options);\n                this.render();\n                this.chart.axes.forEach(function (axis) {\n                    if (axis.pane === this) {\n                        axis.pane = null;\n                        axis.update({}, redraw);\n                    }\n                }, this);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        Pane.compose = PaneComposition.compose;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"arc\"|\"circle\"|\"solid\"} Highcharts.PaneBackgroundShapeValue\n         */\n        ''; // Keeps doclets above in JS file\n\n        return Pane;\n    });\n    _registerModule(_modules, 'Series/AreaRange/AreaRangePoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { area: { prototype: { pointClass: AreaPoint, pointClass: { prototype: areaProto } } } } = SeriesRegistry.seriesTypes;\n        const { defined, isNumber } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class AreaRangePoint extends AreaPoint {\n            /**\n             * Range series only. The high or maximum value for each data point.\n             * @name Highcharts.Point#high\n             * @type {number|undefined}\n             */\n            /**\n             * Range series only. The low or minimum value for each data point.\n             * @name Highcharts.Point#low\n             * @type {number|undefined}\n             */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            setState() {\n                const prevState = this.state, series = this.series, isPolar = series.chart.polar;\n                if (!defined(this.plotHigh)) {\n                    // Boost doesn't calculate plotHigh\n                    this.plotHigh = series.yAxis.toPixels(this.high, true);\n                }\n                if (!defined(this.plotLow)) {\n                    // Boost doesn't calculate plotLow\n                    this.plotLow = this.plotY = series.yAxis.toPixels(this.low, true);\n                }\n                series.lowerStateMarkerGraphic = series.stateMarkerGraphic;\n                series.stateMarkerGraphic = series.upperStateMarkerGraphic;\n                // Change state also for the top marker\n                this.graphic = this.graphics && this.graphics[1];\n                this.plotY = this.plotHigh;\n                if (isPolar && isNumber(this.plotHighX)) {\n                    this.plotX = this.plotHighX;\n                }\n                // Top state:\n                areaProto.setState.apply(this, arguments);\n                this.state = prevState;\n                // Now restore defaults\n                this.plotY = this.plotLow;\n                this.graphic = this.graphics && this.graphics[0];\n                if (isPolar && isNumber(this.plotLowX)) {\n                    this.plotX = this.plotLowX;\n                }\n                series.upperStateMarkerGraphic = series.stateMarkerGraphic;\n                series.stateMarkerGraphic = series.lowerStateMarkerGraphic;\n                // Lower marker is stored at stateMarkerGraphic\n                // to avoid reference duplication (#7021)\n                series.lowerStateMarkerGraphic = void 0;\n                const originalSettings = series.modifyMarkerSettings();\n                // Bottom state\n                areaProto.setState.apply(this, arguments);\n                // Restore previous state\n                series.restoreMarkerSettings(originalSettings);\n            }\n            haloPath() {\n                const isPolar = this.series.chart.polar;\n                let path = [];\n                // Bottom halo\n                this.plotY = this.plotLow;\n                if (isPolar && isNumber(this.plotLowX)) {\n                    this.plotX = this.plotLowX;\n                }\n                if (this.isInside) {\n                    path = areaProto.haloPath.apply(this, arguments);\n                }\n                // Top halo\n                this.plotY = this.plotHigh;\n                if (isPolar && isNumber(this.plotHighX)) {\n                    this.plotX = this.plotHighX;\n                }\n                if (this.isTopInside) {\n                    path = path.concat(areaProto.haloPath.apply(this, arguments));\n                }\n                return path;\n            }\n            isValid() {\n                return isNumber(this.low) && isNumber(this.high);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AreaRangePoint;\n    });\n    _registerModule(_modules, 'Series/AreaRange/AreaRangeSeries.js', [_modules['Series/AreaRange/AreaRangePoint.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AreaRangePoint, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { area: AreaSeries, area: { prototype: areaProto }, column: { prototype: columnProto } } = SeriesRegistry.seriesTypes;\n        const { addEvent, defined, extend, isArray, isNumber, pick, merge } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The area range series is a carteseian series with higher and lower values for\n         * each point along an X axis, where the area between the values is shaded.\n         *\n         * @sample {highcharts} highcharts/demo/arearange/\n         *         Area range chart\n         * @sample {highstock} stock/demo/arearange/\n         *         Area range chart\n         *\n         * @extends      plotOptions.area\n         * @product      highcharts highstock\n         * @excluding    stack, stacking\n         * @requires     highcharts-more\n         * @optionparent plotOptions.arearange\n         *\n         * @private\n         */\n        const areaRangeSeriesOptions = {\n            /**\n             * @see [fillColor](#plotOptions.arearange.fillColor)\n             * @see [fillOpacity](#plotOptions.arearange.fillOpacity)\n             *\n             * @apioption plotOptions.arearange.color\n             */\n            /**\n             * @default   low\n             * @apioption plotOptions.arearange.colorKey\n             */\n            /**\n             * @see [color](#plotOptions.arearange.color)\n             * @see [fillOpacity](#plotOptions.arearange.fillOpacity)\n             *\n             * @apioption plotOptions.arearange.fillColor\n             */\n            /**\n             * @see [color](#plotOptions.arearange.color)\n             * @see [fillColor](#plotOptions.arearange.fillColor)\n             *\n             * @default   {highcharts} 0.75\n             * @default   {highstock} 0.75\n             * @apioption plotOptions.arearange.fillOpacity\n             */\n            /**\n             * Whether to apply a drop shadow to the graph line. Since 2.3 the\n             * shadow can be an object configuration containing `color`, `offsetX`,\n             * `offsetY`, `opacity` and `width`.\n             *\n             * @type      {boolean|Highcharts.ShadowOptionsObject}\n             * @product   highcharts\n             * @apioption plotOptions.arearange.shadow\n             */\n            /**\n             * Pixel width of the arearange graph line.\n             *\n             * @since 2.3.0\n             *\n             * @private\n             */\n            lineWidth: 1,\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            tooltip: {\n                pointFormat: '<span style=\"color:{series.color}\">\\u25CF</span> ' +\n                    '{series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'\n            },\n            /**\n             * Whether the whole area or just the line should respond to mouseover\n             * tooltips and other mouse or touch events.\n             *\n             * @since 2.3.0\n             *\n             * @private\n             */\n            trackByArea: true,\n            /**\n             * Extended data labels for range series types. Range series data\n             * labels use no `x` and `y` options. Instead, they have `xLow`,\n             * `xHigh`, `yLow` and `yHigh` options to allow the higher and lower\n             * data label sets individually.\n             *\n             * @declare Highcharts.SeriesAreaRangeDataLabelsOptionsObject\n             * @exclude x, y\n             * @since   2.3.0\n             * @product highcharts highstock\n             *\n             * @private\n             */\n            dataLabels: {\n                align: void 0,\n                verticalAlign: void 0,\n                /**\n                 * X offset of the lower data labels relative to the point value.\n                 *\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 */\n                xLow: 0,\n                /**\n                 * X offset of the higher data labels relative to the point value.\n                 *\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 */\n                xHigh: 0,\n                /**\n                 * Y offset of the lower data labels relative to the point value.\n                 *\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 */\n                yLow: 0,\n                /**\n                 * Y offset of the higher data labels relative to the point value.\n                 *\n                 * @sample highcharts/plotoptions/arearange-datalabels/\n                 *         Data labels on range series\n                 */\n                yHigh: 0\n            }\n        };\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AreaRange series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.arearange\n         *\n         * @augments Highcharts.Series\n         */\n        class AreaRangeSeries extends AreaSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            toYData(point) {\n                return [point.low, point.high];\n            }\n            /**\n             * Translate a point's plotHigh from the internal angle and radius measures\n             * to true plotHigh coordinates. This is an addition of the toXY method\n             * found in Polar.js, because it runs too early for arearanges to be\n             * considered (#3419).\n             * @private\n             */\n            highToXY(point) {\n                // Find the polar plotX and plotY\n                const chart = this.chart, xy = this.xAxis.postTranslate(point.rectPlotX || 0, this.yAxis.len - (point.plotHigh || 0));\n                point.plotHighX = xy.x - chart.plotLeft;\n                point.plotHigh = xy.y - chart.plotTop;\n                point.plotLowX = point.plotX;\n            }\n            /**\n             * Extend the line series' getSegmentPath method by applying the segment\n             * path to both lower and higher values of the range.\n             * @private\n             */\n            getGraphPath(points) {\n                const highPoints = [], highAreaPoints = [], getGraphPath = areaProto.getGraphPath, options = this.options, polar = this.chart.polar, connectEnds = polar && options.connectEnds !== false, connectNulls = options.connectNulls;\n                let i, point, pointShim, step = options.step;\n                points = points || this.points;\n                // Create the top line and the top part of the area fill. The area fill\n                // compensates for null points by drawing down to the lower graph,\n                // moving across the null gap and starting again at the lower graph.\n                i = points.length;\n                while (i--) {\n                    point = points[i];\n                    // Support for polar\n                    const highAreaPoint = polar ? {\n                        plotX: point.rectPlotX,\n                        plotY: point.yBottom,\n                        doCurve: false // #5186, gaps in areasplinerange fill\n                    } : {\n                        plotX: point.plotX,\n                        plotY: point.plotY,\n                        doCurve: false // #5186, gaps in areasplinerange fill\n                    };\n                    if (!point.isNull &&\n                        !connectEnds &&\n                        !connectNulls &&\n                        (!points[i + 1] || points[i + 1].isNull)) {\n                        highAreaPoints.push(highAreaPoint);\n                    }\n                    pointShim = {\n                        polarPlotY: point.polarPlotY,\n                        rectPlotX: point.rectPlotX,\n                        yBottom: point.yBottom,\n                        // `plotHighX` is for polar charts\n                        plotX: pick(point.plotHighX, point.plotX),\n                        plotY: point.plotHigh,\n                        isNull: point.isNull\n                    };\n                    highAreaPoints.push(pointShim);\n                    highPoints.push(pointShim);\n                    if (!point.isNull &&\n                        !connectEnds &&\n                        !connectNulls &&\n                        (!points[i - 1] || points[i - 1].isNull)) {\n                        highAreaPoints.push(highAreaPoint);\n                    }\n                }\n                // Get the paths\n                const lowerPath = getGraphPath.call(this, points);\n                if (step) {\n                    if (step === true) {\n                        step = 'left';\n                    }\n                    options.step = {\n                        left: 'right',\n                        center: 'center',\n                        right: 'left'\n                    }[step]; // Swap for reading in getGraphPath\n                }\n                const higherPath = getGraphPath.call(this, highPoints);\n                const higherAreaPath = getGraphPath.call(this, highAreaPoints);\n                options.step = step;\n                // Create a line on both top and bottom of the range\n                const linePath = [].concat(lowerPath, higherPath);\n                // For the area path, we need to change the 'move' statement into\n                // 'lineTo'\n                if (!this.chart.polar &&\n                    higherAreaPath[0] &&\n                    higherAreaPath[0][0] === 'M') {\n                    // This probably doesn't work for spline\n                    higherAreaPath[0] = [\n                        'L',\n                        higherAreaPath[0][1],\n                        higherAreaPath[0][2]\n                    ];\n                }\n                this.graphPath = linePath;\n                this.areaPath = lowerPath.concat(higherAreaPath);\n                // Prepare for sideways animation\n                linePath.isArea = true;\n                linePath.xMap = lowerPath.xMap;\n                this.areaPath.xMap = lowerPath.xMap;\n                return linePath;\n            }\n            /**\n             * Extend the basic drawDataLabels method by running it for both lower and\n             * higher values.\n             * @private\n             */\n            drawDataLabels() {\n                const data = this.points, length = data.length, originalDataLabels = [], dataLabelOptions = this.options.dataLabels, inverted = this.chart.inverted;\n                let i, point, up, upperDataLabelOptions, lowerDataLabelOptions;\n                if (dataLabelOptions) {\n                    // Split into upper and lower options. If data labels is an array,\n                    // the first element is the upper label, the second is the lower.\n                    //\n                    // TODO: We want to change this and allow multiple labels for both\n                    // upper and lower values in the future - introducing some options\n                    // for which point value to use as Y for the dataLabel, so that this\n                    // could be handled in Series.drawDataLabels. This would also\n                    // improve performance since we now have to loop over all the points\n                    // multiple times to work around the data label logic.\n                    if (isArray(dataLabelOptions)) {\n                        upperDataLabelOptions = dataLabelOptions[0] || {\n                            enabled: false\n                        };\n                        lowerDataLabelOptions = dataLabelOptions[1] || {\n                            enabled: false\n                        };\n                    }\n                    else {\n                        // Make copies\n                        upperDataLabelOptions = extend({}, dataLabelOptions);\n                        upperDataLabelOptions.x = dataLabelOptions.xHigh;\n                        upperDataLabelOptions.y = dataLabelOptions.yHigh;\n                        lowerDataLabelOptions = extend({}, dataLabelOptions);\n                        lowerDataLabelOptions.x = dataLabelOptions.xLow;\n                        lowerDataLabelOptions.y = dataLabelOptions.yLow;\n                    }\n                    // Draw upper labels\n                    if (upperDataLabelOptions.enabled || this.hasDataLabels?.()) {\n                        // Set preliminary values for plotY and dataLabel\n                        // and draw the upper labels\n                        i = length;\n                        while (i--) {\n                            point = data[i];\n                            if (point) {\n                                const { plotHigh = 0, plotLow = 0 } = point;\n                                up = upperDataLabelOptions.inside ?\n                                    plotHigh < plotLow :\n                                    plotHigh > plotLow;\n                                point.y = point.high;\n                                point._plotY = point.plotY;\n                                point.plotY = plotHigh;\n                                // Store original data labels and set preliminary label\n                                // objects to be picked up in the uber method\n                                originalDataLabels[i] = point.dataLabel;\n                                point.dataLabel = point.dataLabelUpper;\n                                // Set the default offset\n                                point.below = up;\n                                if (inverted) {\n                                    if (!upperDataLabelOptions.align) {\n                                        upperDataLabelOptions.align = up ?\n                                            'right' : 'left';\n                                    }\n                                }\n                                else {\n                                    if (!upperDataLabelOptions.verticalAlign) {\n                                        upperDataLabelOptions.verticalAlign = up ?\n                                            'top' :\n                                            'bottom';\n                                    }\n                                }\n                            }\n                        }\n                        this.options.dataLabels = upperDataLabelOptions;\n                        if (areaProto.drawDataLabels) {\n                            // #1209:\n                            areaProto.drawDataLabels.apply(this, arguments);\n                        }\n                        // Reset state after the upper labels were created. Move\n                        // it to point.dataLabelUpper and reassign the originals.\n                        // We do this here to support not drawing a lower label.\n                        i = length;\n                        while (i--) {\n                            point = data[i];\n                            if (point) {\n                                point.dataLabelUpper = point.dataLabel;\n                                point.dataLabel = originalDataLabels[i];\n                                delete point.dataLabels;\n                                point.y = point.low;\n                                point.plotY = point._plotY;\n                            }\n                        }\n                    }\n                    // Draw lower labels\n                    if (lowerDataLabelOptions.enabled || this.hasDataLabels?.()) {\n                        i = length;\n                        while (i--) {\n                            point = data[i];\n                            if (point) {\n                                const { plotHigh = 0, plotLow = 0 } = point;\n                                up = lowerDataLabelOptions.inside ?\n                                    plotHigh < plotLow :\n                                    plotHigh > plotLow;\n                                // Set the default offset\n                                point.below = !up;\n                                if (inverted) {\n                                    if (!lowerDataLabelOptions.align) {\n                                        lowerDataLabelOptions.align = up ?\n                                            'left' : 'right';\n                                    }\n                                }\n                                else {\n                                    if (!lowerDataLabelOptions.verticalAlign) {\n                                        lowerDataLabelOptions.verticalAlign = up ?\n                                            'bottom' :\n                                            'top';\n                                    }\n                                }\n                            }\n                        }\n                        this.options.dataLabels = lowerDataLabelOptions;\n                        if (areaProto.drawDataLabels) {\n                            areaProto.drawDataLabels.apply(this, arguments);\n                        }\n                    }\n                    // Merge upper and lower into point.dataLabels for later destroying\n                    if (upperDataLabelOptions.enabled) {\n                        i = length;\n                        while (i--) {\n                            point = data[i];\n                            if (point) {\n                                point.dataLabels = [\n                                    point.dataLabelUpper,\n                                    point.dataLabel\n                                ].filter(function (label) {\n                                    return !!label;\n                                });\n                            }\n                        }\n                    }\n                    // Reset options\n                    this.options.dataLabels = dataLabelOptions;\n                }\n            }\n            alignDataLabel() {\n                columnProto.alignDataLabel.apply(this, arguments);\n            }\n            modifyMarkerSettings() {\n                const series = this, originalMarkerSettings = {\n                    marker: series.options.marker,\n                    symbol: series.symbol\n                };\n                if (series.options.lowMarker) {\n                    const { options: { marker, lowMarker } } = series;\n                    series.options.marker = merge(marker, lowMarker);\n                    if (lowMarker.symbol) {\n                        series.symbol = lowMarker.symbol;\n                    }\n                }\n                return originalMarkerSettings;\n            }\n            restoreMarkerSettings(originalSettings) {\n                const series = this;\n                series.options.marker = originalSettings.marker;\n                series.symbol = originalSettings.symbol;\n            }\n            drawPoints() {\n                const series = this, pointLength = series.points.length;\n                let i, point;\n                const originalSettings = series.modifyMarkerSettings();\n                // Draw bottom points\n                areaProto.drawPoints.apply(series, arguments);\n                // Restore previous state\n                series.restoreMarkerSettings(originalSettings);\n                // Prepare drawing top points\n                i = 0;\n                while (i < pointLength) {\n                    point = series.points[i];\n                    /**\n                     * Array for multiple SVG graphics representing the point in the\n                     * chart. Only used in cases where the point can not be represented\n                     * by a single graphic.\n                     *\n                     * @see Highcharts.Point#graphic\n                     *\n                     * @name Highcharts.Point#graphics\n                     * @type {Array<Highcharts.SVGElement>|undefined}\n                     */\n                    point.graphics = point.graphics || [];\n                    // Save original props to be overridden by temporary props for top\n                    // points\n                    point.origProps = {\n                        plotY: point.plotY,\n                        plotX: point.plotX,\n                        isInside: point.isInside,\n                        negative: point.negative,\n                        zone: point.zone,\n                        y: point.y\n                    };\n                    if (point.graphic || point.graphics[0]) {\n                        point.graphics[0] = point.graphic;\n                    }\n                    point.graphic = point.graphics[1];\n                    point.plotY = point.plotHigh;\n                    if (defined(point.plotHighX)) {\n                        point.plotX = point.plotHighX;\n                    }\n                    point.y = pick(point.high, point.origProps.y); // #15523\n                    point.negative = point.y < (series.options.threshold || 0);\n                    if (series.zones.length) {\n                        point.zone = point.getZone();\n                    }\n                    if (!series.chart.polar) {\n                        point.isInside = point.isTopInside = (typeof point.plotY !== 'undefined' &&\n                            point.plotY >= 0 &&\n                            point.plotY <= series.yAxis.len && // #3519\n                            point.plotX >= 0 &&\n                            point.plotX <= series.xAxis.len);\n                    }\n                    i++;\n                }\n                // Draw top points\n                areaProto.drawPoints.apply(series, arguments);\n                // Reset top points preliminary modifications\n                i = 0;\n                while (i < pointLength) {\n                    point = series.points[i];\n                    point.graphics = point.graphics || [];\n                    if (point.graphic || point.graphics[1]) {\n                        point.graphics[1] = point.graphic;\n                    }\n                    point.graphic = point.graphics[0];\n                    if (point.origProps) {\n                        extend(point, point.origProps);\n                        delete point.origProps;\n                    }\n                    i++;\n                }\n            }\n            hasMarkerChanged(options, oldOptions) {\n                const lowMarker = options.lowMarker, oldMarker = oldOptions.lowMarker || {};\n                return (lowMarker && (lowMarker.enabled === false ||\n                    oldMarker.symbol !== lowMarker.symbol || // #10870, #15946\n                    oldMarker.height !== lowMarker.height || // #16274\n                    oldMarker.width !== lowMarker.width // #16274\n                )) || super.hasMarkerChanged(options, oldOptions);\n            }\n        }\n        /**\n         *\n         *  Static Properties\n         *\n         */\n        AreaRangeSeries.defaultOptions = merge(AreaSeries.defaultOptions, areaRangeSeriesOptions);\n        addEvent(AreaRangeSeries, 'afterTranslate', function () {\n            // Set plotLow and plotHigh\n            // Rules out lollipop, but lollipop should not inherit range series in the\n            // first place\n            if (this.pointArrayMap.join(',') === 'low,high') {\n                this.points.forEach((point) => {\n                    const high = point.high, plotY = point.plotY;\n                    if (point.isNull) {\n                        point.plotY = void 0;\n                    }\n                    else {\n                        point.plotLow = plotY;\n                        // Calculate plotHigh value based on each yAxis scale (#15752)\n                        point.plotHigh = isNumber(high) ? this.yAxis.translate(this.dataModify ?\n                            this.dataModify.modifyValue(high) : high, false, true, void 0, true) : void 0;\n                        if (this.dataModify) {\n                            point.yBottom = point.plotHigh;\n                        }\n                    }\n                });\n            }\n        }, { order: 0 });\n        addEvent(AreaRangeSeries, 'afterTranslate', function () {\n            this.points.forEach((point) => {\n                // Postprocessing after the PolarComposition's afterTranslate\n                if (this.chart.polar) {\n                    this.highToXY(point);\n                    point.plotLow = point.plotY;\n                    point.tooltipPos = [\n                        ((point.plotHighX || 0) + (point.plotLowX || 0)) / 2,\n                        ((point.plotHigh || 0) + (point.plotLow || 0)) / 2\n                    ];\n                    // Put the tooltip in the middle of the range\n                }\n                else {\n                    const tooltipPos = point.pos(false, point.plotLow), posHigh = point.pos(false, point.plotHigh);\n                    if (tooltipPos && posHigh) {\n                        tooltipPos[0] = (tooltipPos[0] + posHigh[0]) / 2;\n                        tooltipPos[1] = (tooltipPos[1] + posHigh[1]) / 2;\n                    }\n                    point.tooltipPos = tooltipPos;\n                }\n            });\n        }, { order: 3 });\n        extend(AreaRangeSeries.prototype, {\n            deferTranslatePolar: true,\n            pointArrayMap: ['low', 'high'],\n            pointClass: AreaRangePoint,\n            pointValKey: 'low',\n            setStackedPoints: noop\n        });\n        SeriesRegistry.registerSeriesType('arearange', AreaRangeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AreaRangeSeries;\n    });\n    _registerModule(_modules, 'Series/AreaSplineRange/AreaSplineRangeSeries.js', [_modules['Series/AreaRange/AreaRangeSeries.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AreaRangeSeries, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { spline: { prototype: splineProto } } = SeriesRegistry.seriesTypes;\n        const { merge, extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The areasplinerange series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.areasplinerange\n         *\n         * @augments Highcharts.Series\n         */\n        class AreaSplineRangeSeries extends AreaRangeSeries {\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        AreaSplineRangeSeries.defaultOptions = merge(AreaRangeSeries.defaultOptions);\n        extend(AreaSplineRangeSeries.prototype, {\n            getPointSpline: splineProto.getPointSpline\n        });\n        SeriesRegistry.registerSeriesType('areasplinerange', AreaSplineRangeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The area spline range is a cartesian series type with higher and\n         * lower Y values along an X axis. The area inside the range is colored, and\n         * the graph outlining the area is a smoothed spline.\n         *\n         * @sample {highstock|highstock} stock/demo/areasplinerange/\n         *         Area spline range\n         *\n         * @extends   plotOptions.arearange\n         * @since     2.3.0\n         * @excluding step, boostThreshold, boostBlending\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption plotOptions.areasplinerange\n         */\n        /**\n         * @see [fillColor](#plotOptions.areasplinerange.fillColor)\n         * @see [fillOpacity](#plotOptions.areasplinerange.fillOpacity)\n         *\n         * @apioption plotOptions.areasplinerange.color\n         */\n        /**\n         * @see [color](#plotOptions.areasplinerange.color)\n         * @see [fillOpacity](#plotOptions.areasplinerange.fillOpacity)\n         *\n         * @apioption plotOptions.areasplinerange.fillColor\n         */\n        /**\n         * @see [color](#plotOptions.areasplinerange.color)\n         * @see [fillColor](#plotOptions.areasplinerange.fillColor)\n         *\n         * @default   0.75\n         * @apioption plotOptions.areasplinerange.fillOpacity\n         */\n        /**\n         * A `areasplinerange` series. If the [type](#series.areasplinerange.type)\n         * option is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.areasplinerange\n         * @excluding dataParser, dataURL, stack, step, boostThreshold, boostBlending\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.areasplinerange\n         */\n        /**\n         * @see [fillColor](#series.areasplinerange.fillColor)\n         * @see [fillOpacity](#series.areasplinerange.fillOpacity)\n         *\n         * @apioption series.areasplinerange.color\n         */\n        /**\n         * An array of data points for the series. For the `areasplinerange`\n         * series type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 3 or 2 values. In this case, the values correspond\n         *    to `x,low,high`. If the first value is a string, it is applied as the name\n         *    of the point, and the `x` value is inferred. The `x` value can also be\n         *    omitted, in which case the inner arrays should be of length 2\\. Then the\n         *    `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 0, 5],\n         *        [1, 9, 1],\n         *        [2, 5, 2]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.areasplinerange.turboThreshold), this option is\n         *    not available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        low: 5,\n         *        high: 0,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        low: 4,\n         *        high: 1,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.arearange.data\n         * @product   highcharts highstock\n         * @apioption series.areasplinerange.data\n         */\n        /**\n         * @see [color](#series.areasplinerange.color)\n         * @see [fillOpacity](#series.areasplinerange.fillOpacity)\n         *\n         * @apioption series.areasplinerange.fillColor\n         */\n        /**\n         * @see [color](#series.areasplinerange.color)\n         * @see [fillColor](#series.areasplinerange.fillColor)\n         *\n         * @default   0.75\n         * @apioption series.areasplinerange.fillOpacity\n         */\n        ''; // Adds doclets above to transpiled file\n\n        return AreaSplineRangeSeries;\n    });\n    _registerModule(_modules, 'Series/BoxPlot/BoxPlotSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A box plot is a convenient way of depicting groups of data through their\n         * five-number summaries: the smallest observation (sample minimum), lower\n         * quartile (Q1), median (Q2), upper quartile (Q3), and largest observation\n         * (sample maximum).\n         *\n         * @sample highcharts/demo/box-plot/\n         *         Box plot\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         * @sample {highcharts} highcharts/series-scatter/jitter-boxplot\n         *         Jittered scatter plot on top of a box plot\n         *\n         * @extends      plotOptions.column\n         * @excluding    borderColor, borderRadius, borderWidth, groupZPadding,\n         *               states, boostThreshold, boostBlending\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent plotOptions.boxplot\n         */\n        const BoxPlotSeriesDefaults = {\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> <b>' +\n                    '{series.name}</b><br/>' +\n                    'Maximum: {point.high}<br/>' +\n                    'Upper quartile: {point.q3}<br/>' +\n                    'Median: {point.median}<br/>' +\n                    'Lower quartile: {point.q1}<br/>' +\n                    'Minimum: {point.low}<br/>'\n            },\n            /**\n             * The length of the whiskers, the horizontal lines marking low and\n             * high values. It can be a numerical pixel value, or a percentage\n             * value of the box width. Set `0` to disable whiskers.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         True by default\n             *\n             * @type    {number|string}\n             * @since   3.0\n             * @product highcharts\n             */\n            whiskerLength: '50%',\n            /**\n             * The fill color of the box.\n             *\n             * In styled mode, the fill color can be set with the\n             * `.highcharts-boxplot-box` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #ffffff\n             * @since   3.0\n             * @product highcharts\n             */\n            fillColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The width of the line surrounding the box. If any of\n             * [stemWidth](#plotOptions.boxplot.stemWidth),\n             * [medianWidth](#plotOptions.boxplot.medianWidth)\n             * or [whiskerWidth](#plotOptions.boxplot.whiskerWidth) are `null`,\n             * the lineWidth also applies to these lines.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @since   3.0\n             * @product highcharts\n             */\n            lineWidth: 1,\n            /**\n             * The color of the median line. If `undefined`, the general series\n             * color applies.\n             *\n             * In styled mode, the median stroke width can be set with the\n             * `.highcharts-boxplot-median` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.medianColor\n             */\n            /**\n             * The pixel width of the median line. If `null`, the\n             * [lineWidth](#plotOptions.boxplot.lineWidth) is used.\n             *\n             * In styled mode, the median stroke width can be set with the\n             * `.highcharts-boxplot-median` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type    {number|null}\n             * @since   3.0\n             * @product highcharts\n             */\n            medianWidth: 2,\n            /*\n            // States are not working and are removed from docs.\n            // Refer to: #2340\n            states: {\n                hover: {\n                    brightness: -0.3\n                }\n            },\n            */\n            /**\n             * The color of the stem, the vertical line extending from the box to\n             * the whiskers. If `undefined`, the series color is used.\n             *\n             * In styled mode, the stem stroke can be set with the\n             * `.highcharts-boxplot-stem` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.stemColor\n             */\n            /**\n             * The dash style of the box.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @default   Solid\n             * @since 8.1.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.boxDashStyle\n             */\n            /**\n             * The dash style of the median.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @default   Solid\n             * @since 8.1.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.medianDashStyle\n             */\n            /**\n             * The dash style of the stem, the vertical line extending from the\n             * box to the whiskers.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @default   Solid\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.stemDashStyle\n             */\n            /**\n             * The dash style of the whiskers.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @default   Solid\n             * @since 8.1.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.whiskerDashStyle\n             */\n            /**\n             * The width of the stem, the vertical line extending from the box to\n             * the whiskers. If `undefined`, the width is inherited from the\n             * [lineWidth](#plotOptions.boxplot.lineWidth) option.\n             *\n             * In styled mode, the stem stroke width can be set with the\n             * `.highcharts-boxplot-stem` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type      {number}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.stemWidth\n             */\n            /**\n             * @default   high\n             * @apioption plotOptions.boxplot.colorKey\n             */\n            /**\n             * The color of the whiskers, the horizontal lines marking low and high\n             * values. When `undefined`, the general series color is used.\n             *\n             * In styled mode, the whisker stroke can be set with the\n             * `.highcharts-boxplot-whisker` class .\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.boxplot.whiskerColor\n             */\n            /**\n             * The line width of the whiskers, the horizontal lines marking low and\n             * high values. When `undefined`, the general\n             * [lineWidth](#plotOptions.boxplot.lineWidth) applies.\n             *\n             * In styled mode, the whisker stroke width can be set with the\n             * `.highcharts-boxplot-whisker` class.\n             *\n             * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n             *         Box plot styling\n             * @sample {highcharts} highcharts/css/boxplot/\n             *         Box plot in styled mode\n             *\n             * @since   3.0\n             * @product highcharts\n             */\n            whiskerWidth: 2\n        };\n        /**\n         * A `boxplot` series. If the [type](#series.boxplot.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.boxplot\n         * @excluding dataParser, dataURL, marker, stack, stacking, states,\n         *            boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.boxplot\n         */\n        /**\n         * An array of data points for the series. For the `boxplot` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 6 or 5 values. In this case, the values correspond\n         *    to `x,low,q1,median,q3,high`. If the first value is a string, it is\n         *    applied as the name of the point, and the `x` value is inferred. The `x`\n         *    value can also be omitted, in which case the inner arrays should be of\n         *    length 5. Then the `x` value is automatically calculated, either starting\n         *    at 0 and incremented by 1, or from `pointStart` and `pointInterval` given\n         *    in the series options.\n         *    ```js\n         *    data: [\n         *        [0, 3, 0, 10, 3, 5],\n         *        [1, 7, 8, 7, 2, 9],\n         *        [2, 6, 9, 5, 1, 3]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.boxplot.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        low: 4,\n         *        q1: 9,\n         *        median: 9,\n         *        q3: 1,\n         *        high: 10,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        low: 5,\n         *        q1: 7,\n         *        median: 3,\n         *        q3: 6,\n         *        high: 2,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number,number,number,number>|Array<(number|string),number,number,number,number,number>|*>}\n         * @extends   series.line.data\n         * @excluding marker\n         * @product   highcharts\n         * @apioption series.boxplot.data\n         */\n        /**\n         * The `high` value for each data point, signifying the highest value\n         * in the sample set. The top whisker is drawn here.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.high\n         */\n        /**\n         * The `low` value for each data point, signifying the lowest value\n         * in the sample set. The bottom whisker is drawn here.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.low\n         */\n        /**\n         * The median for each data point. This is drawn as a line through the\n         * middle area of the box.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.median\n         */\n        /**\n         * The lower quartile for each data point. This is the bottom of the\n         * box.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.q1\n         */\n        /**\n         * The higher quartile for each data point. This is the top of the box.\n         *\n         * @type      {number}\n         * @product   highcharts\n         * @apioption series.boxplot.data.q3\n         */\n        /**\n         * The dash style of the box.\n         *\n         * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n         *         Box plot styling\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         *\n         * @type      {Highcharts.DashStyleValue}\n         * @default   Solid\n         * @since 8.1.0\n         * @product   highcharts\n         * @apioption series.boxplot.data.boxDashStyle\n         */\n        /**\n         * The dash style of the median.\n         *\n         * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n         *         Box plot styling\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         *\n         * @type      {Highcharts.DashStyleValue}\n         * @default   Solid\n         * @since 8.1.0\n         * @product   highcharts\n         * @apioption series.boxplot.data.medianDashStyle\n         */\n        /**\n         * The dash style of the stem.\n         *\n         * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n         *         Box plot styling\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         *\n         * @type      {Highcharts.DashStyleValue}\n         * @default   Solid\n         * @since 8.1.0\n         * @product   highcharts\n         * @apioption series.boxplot.data.stemDashStyle\n         */\n        /**\n         * The dash style of the whiskers.\n         *\n         * @sample {highcharts} highcharts/plotoptions/box-plot-styling/\n         *         Box plot styling\n         * @sample {highcharts} highcharts/css/boxplot/\n         *         Box plot in styled mode\n         *\n         * @type      {Highcharts.DashStyleValue}\n         * @default   Solid\n         * @since 8.1.0\n         * @product   highcharts\n         * @apioption series.boxplot.data.whiskerDashStyle\n         */\n        ''; // Keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BoxPlotSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/BoxPlot/BoxPlotSeries.js', [_modules['Series/BoxPlot/BoxPlotSeriesDefaults.js'], _modules['Series/Column/ColumnSeries.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (BoxPlotSeriesDefaults, ColumnSeries, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { crisp, extend, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The boxplot series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes#boxplot\n         *\n         * @augments Highcharts.Series\n         */\n        class BoxPlotSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            // Get presentational attributes\n            pointAttribs() {\n                // No attributes should be set on point.graphic which is the group\n                return {};\n            }\n            // Translate data points from raw values x and y to plotX and plotY\n            translate() {\n                const series = this, yAxis = series.yAxis, pointArrayMap = series.pointArrayMap;\n                super.translate.apply(series);\n                // Do the translation on each point dimension\n                series.points.forEach(function (point) {\n                    pointArrayMap.forEach(function (key) {\n                        if (point[key] !== null) {\n                            point[key + 'Plot'] = yAxis.translate(point[key], 0, 1, 0, 1);\n                        }\n                    });\n                    point.plotHigh = point.highPlot; // For data label validation\n                });\n            }\n            /**\n             * Draw the data points\n             * @private\n             */\n            drawPoints() {\n                const series = this, points = series.points, options = series.options, chart = series.chart, renderer = chart.renderer, \n                // Error bar inherits this series type but doesn't do quartiles\n                doQuartiles = series.doQuartiles !== false, whiskerLength = series.options.whiskerLength;\n                let q1Plot, q3Plot, highPlot, lowPlot, medianPlot, medianPath, boxPath, graphic, width, x, right, halfWidth, pointWiskerLength;\n                for (const point of points) {\n                    graphic = point.graphic;\n                    const verb = graphic ? 'animate' : 'attr', shapeArgs = point.shapeArgs, boxAttr = {}, stemAttr = {}, whiskersAttr = {}, medianAttr = {}, color = point.color || series.color;\n                    if (typeof point.plotY !== 'undefined') {\n                        // Vector coordinates\n                        width = shapeArgs.width;\n                        x = shapeArgs.x;\n                        right = x + width;\n                        halfWidth = width / 2;\n                        q1Plot = doQuartiles ? point.q1Plot : point.lowPlot;\n                        q3Plot = doQuartiles ? point.q3Plot : point.lowPlot;\n                        highPlot = point.highPlot;\n                        lowPlot = point.lowPlot;\n                        if (!graphic) {\n                            point.graphic = graphic = renderer.g('point')\n                                .add(series.group);\n                            point.stem = renderer.path()\n                                .addClass('highcharts-boxplot-stem')\n                                .add(graphic);\n                            if (whiskerLength) {\n                                point.whiskers = renderer.path()\n                                    .addClass('highcharts-boxplot-whisker')\n                                    .add(graphic);\n                            }\n                            if (doQuartiles) {\n                                point.box = renderer.path(boxPath)\n                                    .addClass('highcharts-boxplot-box')\n                                    .add(graphic);\n                            }\n                            point.medianShape = renderer.path(medianPath)\n                                .addClass('highcharts-boxplot-median')\n                                .add(graphic);\n                        }\n                        if (!chart.styledMode) {\n                            // Stem attributes\n                            stemAttr.stroke =\n                                point.stemColor || options.stemColor || color;\n                            stemAttr['stroke-width'] = pick(point.stemWidth, options.stemWidth, options.lineWidth);\n                            stemAttr.dashstyle = (point.stemDashStyle ||\n                                options.stemDashStyle ||\n                                options.dashStyle);\n                            point.stem.attr(stemAttr);\n                            // Whiskers attributes\n                            if (whiskerLength) {\n                                whiskersAttr.stroke = (point.whiskerColor ||\n                                    options.whiskerColor ||\n                                    color);\n                                whiskersAttr['stroke-width'] = pick(point.whiskerWidth, options.whiskerWidth, options.lineWidth);\n                                whiskersAttr.dashstyle = (point.whiskerDashStyle ||\n                                    options.whiskerDashStyle ||\n                                    options.dashStyle);\n                                point.whiskers.attr(whiskersAttr);\n                            }\n                            if (doQuartiles) {\n                                boxAttr.fill = (point.fillColor ||\n                                    options.fillColor ||\n                                    color);\n                                boxAttr.stroke = options.lineColor || color;\n                                boxAttr['stroke-width'] = options.lineWidth || 0;\n                                boxAttr.dashstyle = (point.boxDashStyle ||\n                                    options.boxDashStyle ||\n                                    options.dashStyle);\n                                point.box.attr(boxAttr);\n                            }\n                            // Median attributes\n                            medianAttr.stroke = (point.medianColor ||\n                                options.medianColor ||\n                                color);\n                            medianAttr['stroke-width'] = pick(point.medianWidth, options.medianWidth, options.lineWidth);\n                            medianAttr.dashstyle = (point.medianDashStyle ||\n                                options.medianDashStyle ||\n                                options.dashStyle);\n                            point.medianShape.attr(medianAttr);\n                        }\n                        let d;\n                        // The stem\n                        const stemX = crisp((point.plotX || 0) + (series.pointXOffset || 0) +\n                            ((series.barW || 0) / 2), point.stem.strokeWidth());\n                        d = [\n                            // Stem up\n                            ['M', stemX, q3Plot],\n                            ['L', stemX, highPlot],\n                            // Stem down\n                            ['M', stemX, q1Plot],\n                            ['L', stemX, lowPlot]\n                        ];\n                        point.stem[verb]({ d });\n                        // The box\n                        if (doQuartiles) {\n                            const boxStrokeWidth = point.box.strokeWidth();\n                            q1Plot = crisp(q1Plot, boxStrokeWidth);\n                            q3Plot = crisp(q3Plot, boxStrokeWidth);\n                            x = crisp(x, boxStrokeWidth);\n                            right = crisp(right, boxStrokeWidth);\n                            d = [\n                                ['M', x, q3Plot],\n                                ['L', x, q1Plot],\n                                ['L', right, q1Plot],\n                                ['L', right, q3Plot],\n                                ['L', x, q3Plot],\n                                ['Z']\n                            ];\n                            point.box[verb]({ d });\n                        }\n                        // The whiskers\n                        if (whiskerLength) {\n                            const whiskerStrokeWidth = point.whiskers.strokeWidth();\n                            highPlot = crisp(point.highPlot, whiskerStrokeWidth);\n                            lowPlot = crisp(point.lowPlot, whiskerStrokeWidth);\n                            pointWiskerLength = (typeof whiskerLength === 'string' &&\n                                (/%$/).test(whiskerLength)) ?\n                                halfWidth * parseFloat(whiskerLength) / 100 :\n                                Number(whiskerLength) / 2;\n                            d = [\n                                // High whisker\n                                ['M', crisp(stemX - pointWiskerLength), highPlot],\n                                ['L', crisp(stemX + pointWiskerLength), highPlot],\n                                // Low whisker\n                                ['M', crisp(stemX - pointWiskerLength), lowPlot],\n                                ['L', crisp(stemX + pointWiskerLength), lowPlot]\n                            ];\n                            point.whiskers[verb]({ d });\n                        }\n                        // The median\n                        medianPlot = crisp(point.medianPlot, point.medianShape.strokeWidth());\n                        d = [\n                            ['M', x, medianPlot],\n                            ['L', right, medianPlot]\n                        ];\n                        point.medianShape[verb]({ d });\n                    }\n                }\n            }\n            // Return a plain array for speedy calculation\n            toYData(point) {\n                return [point.low, point.q1, point.median, point.q3, point.high];\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        BoxPlotSeries.defaultOptions = merge(ColumnSeries.defaultOptions, BoxPlotSeriesDefaults);\n        extend(BoxPlotSeries.prototype, {\n            // Array point configs are mapped to this\n            pointArrayMap: ['low', 'q1', 'median', 'q3', 'high'],\n            // Defines the top of the tracker\n            pointValKey: 'high',\n            // Disable data labels for box plot\n            drawDataLabels: noop,\n            setStackedPoints: noop // #3890\n        });\n        SeriesRegistry.registerSeriesType('boxplot', BoxPlotSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BoxPlotSeries;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubbleLegendDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  Author: Paweł Potaczek\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The bubble legend is an additional element in legend which\n         * presents the scale of the bubble series. Individual bubble ranges\n         * can be defined by user or calculated from series. In the case of\n         * automatically calculated ranges, a 1px margin of error is\n         * permitted.\n         *\n         * @since        7.0.0\n         * @product      highcharts highstock highmaps\n         * @requires     highcharts-more\n         * @optionparent legend.bubbleLegend\n         */\n        const BubbleLegendDefaults = {\n            /**\n             * The color of the ranges borders, can be also defined for an\n             * individual range.\n             *\n             * @sample highcharts/bubble-legend/similartoseries/\n             *         Similar look to the bubble series\n             * @sample highcharts/bubble-legend/bordercolor/\n             *         Individual bubble border color\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            borderColor: void 0,\n            /**\n             * The width of the ranges borders in pixels, can be also\n             * defined for an individual range.\n             */\n            borderWidth: 2,\n            /**\n             * An additional class name to apply to the bubble legend'\n             * circle graphical elements. This option does not replace\n             * default class names of the graphical element.\n             *\n             * @sample {highcharts} highcharts/css/bubble-legend/\n             *         Styling by CSS\n             *\n             * @type {string}\n             */\n            className: void 0,\n            /**\n             * The main color of the bubble legend. Applies to ranges, if\n             * individual color is not defined.\n             *\n             * @sample highcharts/bubble-legend/similartoseries/\n             *         Similar look to the bubble series\n             * @sample highcharts/bubble-legend/color/\n             *         Individual bubble color\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            color: void 0,\n            /**\n             * An additional class name to apply to the bubble legend's\n             * connector graphical elements. This option does not replace\n             * default class names of the graphical element.\n             *\n             * @sample {highcharts} highcharts/css/bubble-legend/\n             *         Styling by CSS\n             *\n             * @type {string}\n             */\n            connectorClassName: void 0,\n            /**\n             * The color of the connector, can be also defined\n             * for an individual range.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            connectorColor: void 0,\n            /**\n             * The length of the connectors in pixels. If labels are\n             * centered, the distance is reduced to 0.\n             *\n             * @sample highcharts/bubble-legend/connectorandlabels/\n             *         Increased connector length\n             */\n            connectorDistance: 60,\n            /**\n             * The width of the connectors in pixels.\n             *\n             * @sample highcharts/bubble-legend/connectorandlabels/\n             *         Increased connector width\n             */\n            connectorWidth: 1,\n            /**\n             * Enable or disable the bubble legend.\n             */\n            enabled: false,\n            /**\n             * Options for the bubble legend labels.\n             */\n            labels: {\n                /**\n                 * An additional class name to apply to the bubble legend\n                 * label graphical elements. This option does not replace\n                 * default class names of the graphical element.\n                 *\n                 * @sample {highcharts} highcharts/css/bubble-legend/\n                 *         Styling by CSS\n                 *\n                 * @type {string}\n                 */\n                className: void 0,\n                /**\n                 * Whether to allow data labels to overlap.\n                 */\n                allowOverlap: false,\n                /**\n                 * A format string for the bubble legend labels. Available\n                 * variables are the same as for `formatter`.\n                 *\n                 * @sample highcharts/bubble-legend/format/\n                 *         Add a unit\n                 *\n                 * @type {string}\n                 */\n                format: '',\n                /**\n                 * Available `this` properties are:\n                 *\n                 * - `this.value`: The bubble value.\n                 *\n                 * - `this.radius`: The radius of the bubble range.\n                 *\n                 * - `this.center`: The center y position of the range.\n                 *\n                 * @type {Highcharts.FormatterCallbackFunction<Highcharts.BubbleLegendFormatterContextObject>}\n                 */\n                formatter: void 0,\n                /**\n                 * The alignment of the labels compared to the bubble\n                 * legend. Can be one of `left`, `center` or `right`.\n                 *\n                 * @sample highcharts/bubble-legend/connectorandlabels/\n                 *         Labels on left\n                 *\n                 * @type {Highcharts.AlignValue}\n                 */\n                align: 'right',\n                /**\n                 * CSS styles for the labels.\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @ignore-option */\n                    fontSize: '0.9em',\n                    /** @ignore-option */\n                    color: \"#000000\" /* Palette.neutralColor100 */\n                },\n                /**\n                 * The x position offset of the label relative to the\n                 * connector.\n                 */\n                x: 0,\n                /**\n                 * The y position offset of the label relative to the\n                 * connector.\n                 */\n                y: 0\n            },\n            /**\n             * Maximum bubble legend range size. If values for ranges are\n             * not specified, the `minSize` and the `maxSize` are calculated\n             * from bubble series.\n             */\n            maxSize: 60, // Number\n            /**\n             * Minimum bubble legend range size. If values for ranges are\n             * not specified, the `minSize` and the `maxSize` are calculated\n             * from bubble series.\n             */\n            minSize: 10, // Number\n            /**\n             * The position of the bubble legend in the legend.\n             * @sample highcharts/bubble-legend/connectorandlabels/\n             *         Bubble legend as last item in legend\n             */\n            legendIndex: 0, // Number\n            /**\n             * Options for specific range. One range consists of bubble,\n             * label and connector.\n             *\n             * @sample highcharts/bubble-legend/ranges/\n             *         Manually defined ranges\n             * @sample highcharts/bubble-legend/autoranges/\n             *         Auto calculated ranges\n             *\n             * @type {Array<*>}\n             */\n            ranges: {\n                /**\n                 * Range size value, similar to bubble Z data.\n                 * @type {number}\n                 */\n                value: void 0,\n                /**\n                 * The color of the border for individual range.\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: void 0,\n                /**\n                 * The color of the bubble for individual range.\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                color: void 0,\n                /**\n                 * The color of the connector for individual range.\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                connectorColor: void 0\n            },\n            /**\n             * Whether the bubble legend range value should be represented\n             * by the area or the width of the bubble. The default, area,\n             * corresponds best to the human perception of the size of each\n             * bubble.\n             *\n             * @sample highcharts/bubble-legend/ranges/\n             *         Size by width\n             *\n             * @type {Highcharts.BubbleSizeByValue}\n             */\n            sizeBy: 'area',\n            /**\n             * When this is true, the absolute value of z determines the\n             * size of the bubble. This means that with the default\n             * zThreshold of 0, a bubble of value -1 will have the same size\n             * as a bubble of value 1, while a bubble of value 0 will have a\n             * smaller size according to minSize.\n             */\n            sizeByAbsoluteValue: false,\n            /**\n             * Define the visual z index of the bubble legend.\n             */\n            zIndex: 1,\n            /**\n             * Ranges with lower value than zThreshold are skipped.\n             */\n            zThreshold: 0\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BubbleLegendDefaults;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubbleLegendItem.js', [_modules['Core/Color/Color.js'], _modules['Core/Templating.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (Color, F, H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  Author: Paweł Potaczek\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { noop } = H;\n        const { arrayMax, arrayMin, isNumber, merge, pick, stableSort } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * BubbleLegend class.\n         *\n         * @private\n         * @class\n         * @name Highcharts.BubbleLegend\n         * @param {Highcharts.LegendBubbleLegendOptions} options\n         * Options of BubbleLegendItem.\n         *\n         * @param {Highcharts.Legend} legend\n         * Legend of item.\n         */\n        class BubbleLegendItem {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options, legend) {\n                this.setState = noop;\n                this.init(options, legend);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create basic bubbleLegend properties similar to item in legend.\n             * @private\n             */\n            init(options, legend) {\n                this.options = options;\n                this.visible = true;\n                this.chart = legend.chart;\n                this.legend = legend;\n            }\n            /**\n             * Depending on the position option, add bubbleLegend to legend items.\n             *\n             * @private\n             *\n             * @param {Array<(Highcharts.Point|Highcharts.Series)>} items\n             *        All legend items\n             */\n            addToLegend(items) {\n                // Insert bubbleLegend into legend items\n                items.splice(this.options.legendIndex, 0, this);\n            }\n            /**\n             * Calculate ranges, sizes and call the next steps of bubbleLegend\n             * creation.\n             *\n             * @private\n             *\n             * @param {Highcharts.Legend} legend\n             *        Legend instance\n             */\n            drawLegendSymbol(legend) {\n                const itemDistance = pick(legend.options.itemDistance, 20), legendItem = this.legendItem || {}, options = this.options, ranges = options.ranges, connectorDistance = options.connectorDistance;\n                let connectorSpace;\n                // Do not create bubbleLegend now if ranges or ranges values are not\n                // specified or if are empty array.\n                if (!ranges || !ranges.length || !isNumber(ranges[0].value)) {\n                    legend.options.bubbleLegend.autoRanges = true;\n                    return;\n                }\n                // Sort ranges to right render order\n                stableSort(ranges, function (a, b) {\n                    return b.value - a.value;\n                });\n                this.ranges = ranges;\n                this.setOptions();\n                this.render();\n                // Get max label size\n                const maxLabel = this.getMaxLabelSize(), radius = this.ranges[0].radius, size = radius * 2;\n                // Space for connectors and labels.\n                connectorSpace =\n                    connectorDistance - radius + maxLabel.width;\n                connectorSpace = connectorSpace > 0 ? connectorSpace : 0;\n                this.maxLabel = maxLabel;\n                this.movementX = options.labels.align === 'left' ?\n                    connectorSpace : 0;\n                legendItem.labelWidth = size + connectorSpace + itemDistance;\n                legendItem.labelHeight = size + maxLabel.height / 2;\n            }\n            /**\n             * Set style options for each bubbleLegend range.\n             * @private\n             */\n            setOptions() {\n                const ranges = this.ranges, options = this.options, series = this.chart.series[options.seriesIndex], baseline = this.legend.baseline, bubbleAttribs = {\n                    zIndex: options.zIndex,\n                    'stroke-width': options.borderWidth\n                }, connectorAttribs = {\n                    zIndex: options.zIndex,\n                    'stroke-width': options.connectorWidth\n                }, labelAttribs = {\n                    align: (this.legend.options.rtl ||\n                        options.labels.align === 'left') ? 'right' : 'left',\n                    zIndex: options.zIndex\n                }, fillOpacity = series.options.marker.fillOpacity, styledMode = this.chart.styledMode;\n                // Allow to parts of styles be used individually for range\n                ranges.forEach(function (range, i) {\n                    if (!styledMode) {\n                        bubbleAttribs.stroke = pick(range.borderColor, options.borderColor, series.color);\n                        bubbleAttribs.fill = pick(range.color, options.color, fillOpacity !== 1 ?\n                            color(series.color).setOpacity(fillOpacity)\n                                .get('rgba') :\n                            series.color);\n                        connectorAttribs.stroke = pick(range.connectorColor, options.connectorColor, series.color);\n                    }\n                    // Set options needed for rendering each range\n                    ranges[i].radius = this.getRangeRadius(range.value);\n                    ranges[i] = merge(ranges[i], {\n                        center: (ranges[0].radius - ranges[i].radius +\n                            baseline)\n                    });\n                    if (!styledMode) {\n                        merge(true, ranges[i], {\n                            bubbleAttribs: merge(bubbleAttribs),\n                            connectorAttribs: merge(connectorAttribs),\n                            labelAttribs: labelAttribs\n                        });\n                    }\n                }, this);\n            }\n            /**\n             * Calculate radius for each bubble range,\n             * used code from BubbleSeries.js 'getRadius' method.\n             *\n             * @private\n             *\n             * @param {number} value\n             *        Range value\n             *\n             * @return {number|null}\n             *         Radius for one range\n             */\n            getRangeRadius(value) {\n                const options = this.options, seriesIndex = this.options.seriesIndex, bubbleSeries = this.chart.series[seriesIndex], zMax = options.ranges[0].value, zMin = options.ranges[options.ranges.length - 1].value, minSize = options.minSize, maxSize = options.maxSize;\n                return bubbleSeries.getRadius.call(this, zMin, zMax, minSize, maxSize, value);\n            }\n            /**\n             * Render the legendItem group.\n             * @private\n             */\n            render() {\n                const legendItem = this.legendItem || {}, renderer = this.chart.renderer, zThreshold = this.options.zThreshold;\n                if (!this.symbols) {\n                    this.symbols = {\n                        connectors: [],\n                        bubbleItems: [],\n                        labels: []\n                    };\n                }\n                // Nesting SVG groups to enable handleOverflow\n                legendItem.symbol = renderer.g('bubble-legend');\n                legendItem.label = renderer.g('bubble-legend-item')\n                    .css(this.legend.itemStyle || {});\n                // To enable default 'hideOverlappingLabels' method\n                legendItem.symbol.translateX = 0;\n                legendItem.symbol.translateY = 0;\n                // To use handleOverflow method\n                legendItem.symbol.add(legendItem.label);\n                legendItem.label.add(legendItem.group);\n                for (const range of this.ranges) {\n                    if (range.value >= zThreshold) {\n                        this.renderRange(range);\n                    }\n                }\n                this.hideOverlappingLabels();\n            }\n            /**\n             * Render one range, consisting of bubble symbol, connector and label.\n             *\n             * @private\n             *\n             * @param {Highcharts.LegendBubbleLegendRangesOptions} range\n             *        Range options\n             */\n            renderRange(range) {\n                const mainRange = this.ranges[0], legend = this.legend, options = this.options, labelsOptions = options.labels, chart = this.chart, bubbleSeries = chart.series[options.seriesIndex], renderer = chart.renderer, symbols = this.symbols, labels = symbols.labels, elementCenter = range.center, absoluteRadius = Math.abs(range.radius), connectorDistance = options.connectorDistance || 0, labelsAlign = labelsOptions.align, rtl = legend.options.rtl, borderWidth = options.borderWidth, connectorWidth = options.connectorWidth, posX = mainRange.radius || 0, posY = elementCenter - absoluteRadius -\n                    borderWidth / 2 + connectorWidth / 2, crispMovement = (posY % 1 ? 1 : 0.5) -\n                    (connectorWidth % 2 ? 0 : 0.5), styledMode = renderer.styledMode;\n                let connectorLength = rtl || labelsAlign === 'left' ?\n                    -connectorDistance : connectorDistance;\n                // Set options for centered labels\n                if (labelsAlign === 'center') {\n                    connectorLength = 0; // Do not use connector\n                    options.connectorDistance = 0;\n                    range.labelAttribs.align = 'center';\n                }\n                // Render bubble symbol\n                symbols.bubbleItems.push(renderer\n                    .circle(posX, elementCenter + crispMovement, absoluteRadius)\n                    .attr(styledMode ? {} : range.bubbleAttribs)\n                    .addClass((styledMode ?\n                    'highcharts-color-' +\n                        bubbleSeries.colorIndex + ' ' :\n                    '') +\n                    'highcharts-bubble-legend-symbol ' +\n                    (options.className || '')).add(this.legendItem.symbol));\n                // Render connector\n                symbols.connectors.push(renderer\n                    .path(renderer.crispLine([\n                    ['M', posX, posY],\n                    ['L', posX + connectorLength, posY]\n                ], options.connectorWidth))\n                    .attr((styledMode ? {} : range.connectorAttribs))\n                    .addClass((styledMode ?\n                    'highcharts-color-' +\n                        this.options.seriesIndex + ' ' : '') +\n                    'highcharts-bubble-legend-connectors ' +\n                    (options.connectorClassName || '')).add(this.legendItem.symbol));\n                // Render label\n                const label = renderer\n                    .text(this.formatLabel(range))\n                    .attr((styledMode ? {} : range.labelAttribs))\n                    .css(styledMode ? {} : labelsOptions.style)\n                    .addClass('highcharts-bubble-legend-labels ' +\n                    (options.labels.className || '')).add(this.legendItem.symbol);\n                // Now that the label is added we can read the bounding box and\n                // vertically align\n                const position = {\n                    x: posX + connectorLength + options.labels.x,\n                    y: posY + options.labels.y + label.getBBox().height * 0.4\n                };\n                label.attr(position);\n                labels.push(label);\n                // To enable default 'hideOverlappingLabels' method\n                label.placed = true;\n                label.alignAttr = position;\n            }\n            /**\n             * Get the label which takes up the most space.\n             * @private\n             */\n            getMaxLabelSize() {\n                const labels = this.symbols.labels;\n                let maxLabel, labelSize;\n                labels.forEach(function (label) {\n                    labelSize = label.getBBox(true);\n                    if (maxLabel) {\n                        maxLabel = labelSize.width > maxLabel.width ?\n                            labelSize : maxLabel;\n                    }\n                    else {\n                        maxLabel = labelSize;\n                    }\n                });\n                return maxLabel || {};\n            }\n            /**\n             * Get formatted label for range.\n             *\n             * @private\n             *\n             * @param {Highcharts.LegendBubbleLegendRangesOptions} range\n             *        Range options\n             *\n             * @return {string}\n             *         Range label text\n             */\n            formatLabel(range) {\n                const options = this.options, formatter = options.labels.formatter, format = options.labels.format;\n                const { numberFormatter } = this.chart;\n                return format ? F.format(format, range) :\n                    formatter ? formatter.call(range) :\n                        numberFormatter(range.value, 1);\n            }\n            /**\n             * By using default chart 'hideOverlappingLabels' method, hide or show\n             * labels and connectors.\n             * @private\n             */\n            hideOverlappingLabels() {\n                const chart = this.chart, allowOverlap = this.options.labels.allowOverlap, symbols = this.symbols;\n                if (!allowOverlap && symbols) {\n                    chart.hideOverlappingLabels(symbols.labels);\n                    // Hide or show connectors\n                    symbols.labels.forEach(function (label, index) {\n                        if (!label.newOpacity) {\n                            symbols.connectors[index].hide();\n                        }\n                        else if (label.newOpacity !== label.oldOpacity) {\n                            symbols.connectors[index].show();\n                        }\n                    });\n                }\n            }\n            /**\n             * Calculate ranges from created series.\n             *\n             * @private\n             *\n             * @return {Array<Highcharts.LegendBubbleLegendRangesOptions>}\n             *         Array of range objects\n             */\n            getRanges() {\n                const bubbleLegend = this.legend.bubbleLegend, series = bubbleLegend.chart.series, rangesOptions = bubbleLegend.options.ranges;\n                let ranges, zData, minZ = Number.MAX_VALUE, maxZ = -Number.MAX_VALUE;\n                series.forEach(function (s) {\n                    // Find the min and max Z, like in bubble series\n                    if (s.isBubble && !s.ignoreSeries) {\n                        zData = s.zData.filter(isNumber);\n                        if (zData.length) {\n                            minZ = pick(s.options.zMin, Math.min(minZ, Math.max(arrayMin(zData), s.options.displayNegative === false ?\n                                s.options.zThreshold :\n                                -Number.MAX_VALUE)));\n                            maxZ = pick(s.options.zMax, Math.max(maxZ, arrayMax(zData)));\n                        }\n                    }\n                });\n                // Set values for ranges\n                if (minZ === maxZ) {\n                    // Only one range if min and max values are the same.\n                    ranges = [{ value: maxZ }];\n                }\n                else {\n                    ranges = [\n                        { value: minZ },\n                        { value: (minZ + maxZ) / 2 },\n                        { value: maxZ, autoRanges: true }\n                    ];\n                }\n                // Prevent reverse order of ranges after redraw\n                if (rangesOptions.length && rangesOptions[0].radius) {\n                    ranges.reverse();\n                }\n                // Merge ranges values with user options\n                ranges.forEach(function (range, i) {\n                    if (rangesOptions && rangesOptions[i]) {\n                        ranges[i] = merge(rangesOptions[i], range);\n                    }\n                });\n                return ranges;\n            }\n            /**\n             * Calculate bubble legend sizes from rendered series.\n             *\n             * @private\n             *\n             * @return {Array<number,number>}\n             *         Calculated min and max bubble sizes\n             */\n            predictBubbleSizes() {\n                const chart = this.chart, legendOptions = chart.legend.options, floating = legendOptions.floating, horizontal = legendOptions.layout === 'horizontal', lastLineHeight = horizontal ? chart.legend.lastLineHeight : 0, plotSizeX = chart.plotSizeX, plotSizeY = chart.plotSizeY, bubbleSeries = chart.series[this.options.seriesIndex], pxSizes = bubbleSeries.getPxExtremes(), minSize = Math.ceil(pxSizes.minPxSize), maxPxSize = Math.ceil(pxSizes.maxPxSize), plotSize = Math.min(plotSizeY, plotSizeX);\n                let calculatedSize, maxSize = bubbleSeries.options.maxSize;\n                // Calculate predicted max size of bubble\n                if (floating || !(/%$/.test(maxSize))) {\n                    calculatedSize = maxPxSize;\n                }\n                else {\n                    maxSize = parseFloat(maxSize);\n                    calculatedSize = ((plotSize + lastLineHeight) * maxSize / 100) /\n                        (maxSize / 100 + 1);\n                    // Get maxPxSize from bubble series if calculated bubble legend\n                    // size will not affect to bubbles series.\n                    if ((horizontal && plotSizeY - calculatedSize >=\n                        plotSizeX) || (!horizontal && plotSizeX -\n                        calculatedSize >= plotSizeY)) {\n                        calculatedSize = maxPxSize;\n                    }\n                }\n                return [minSize, Math.ceil(calculatedSize)];\n            }\n            /**\n             * Correct ranges with calculated sizes.\n             * @private\n             */\n            updateRanges(min, max) {\n                const bubbleLegendOptions = this.legend.options.bubbleLegend;\n                bubbleLegendOptions.minSize = min;\n                bubbleLegendOptions.maxSize = max;\n                bubbleLegendOptions.ranges = this.getRanges();\n            }\n            /**\n             * Because of the possibility of creating another legend line, predicted\n             * bubble legend sizes may differ by a few pixels, so it is necessary to\n             * correct them.\n             * @private\n             */\n            correctSizes() {\n                const legend = this.legend, chart = this.chart, bubbleSeries = chart.series[this.options.seriesIndex], pxSizes = bubbleSeries.getPxExtremes(), bubbleSeriesSize = pxSizes.maxPxSize, bubbleLegendSize = this.options.maxSize;\n                if (Math.abs(Math.ceil(bubbleSeriesSize) - bubbleLegendSize) >\n                    1) {\n                    this.updateRanges(this.options.minSize, pxSizes.maxPxSize);\n                    legend.render();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @interface Highcharts.BubbleLegendFormatterContextObject\n         */ /**\n        * The center y position of the range.\n        * @name Highcharts.BubbleLegendFormatterContextObject#center\n        * @type {number}\n        */ /**\n        * The radius of the bubble range.\n        * @name Highcharts.BubbleLegendFormatterContextObject#radius\n        * @type {number}\n        */ /**\n        * The bubble value.\n        * @name Highcharts.BubbleLegendFormatterContextObject#value\n        * @type {number}\n        */\n        ''; // Detach doclets above\n\n        return BubbleLegendItem;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubbleLegendComposition.js', [_modules['Series/Bubble/BubbleLegendDefaults.js'], _modules['Series/Bubble/BubbleLegendItem.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (BubbleLegendDefaults, BubbleLegendItem, D, H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  Author: Paweł Potaczek\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setOptions } = D;\n        const { composed } = H;\n        const { addEvent, objectEach, pushUnique, wrap } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * If ranges are not specified, determine ranges from rendered bubble series\n         * and render legend again.\n         */\n        function chartDrawChartBox(proceed, options, callback) {\n            const chart = this, legend = chart.legend, bubbleSeries = getVisibleBubbleSeriesIndex(chart) >= 0;\n            let bubbleLegendOptions, bubbleSizes, legendItem;\n            if (legend && legend.options.enabled && legend.bubbleLegend &&\n                legend.options.bubbleLegend.autoRanges && bubbleSeries) {\n                bubbleLegendOptions = legend.bubbleLegend.options;\n                bubbleSizes = legend.bubbleLegend.predictBubbleSizes();\n                legend.bubbleLegend.updateRanges(bubbleSizes[0], bubbleSizes[1]);\n                // Disable animation on init\n                if (!bubbleLegendOptions.placed) {\n                    legend.group.placed = false;\n                    legend.allItems.forEach((item) => {\n                        legendItem = item.legendItem || {};\n                        if (legendItem.group) {\n                            legendItem.group.translateY = void 0;\n                        }\n                    });\n                }\n                // Create legend with bubbleLegend\n                legend.render();\n                // Calculate margins after first rendering the bubble legend\n                if (!bubbleLegendOptions.placed) {\n                    chart.getMargins();\n                    chart.axes.forEach(function (axis) {\n                        if (axis.visible) { // #11448\n                            axis.render();\n                        }\n                        if (!bubbleLegendOptions.placed) {\n                            axis.setScale();\n                            axis.updateNames();\n                            // Disable axis animation on init\n                            objectEach(axis.ticks, function (tick) {\n                                tick.isNew = true;\n                                tick.isNewLabel = true;\n                            });\n                        }\n                    });\n                    chart.getMargins();\n                }\n                bubbleLegendOptions.placed = true;\n                // Call default 'drawChartBox' method.\n                proceed.call(chart, options, callback);\n                // Check bubble legend sizes and correct them if necessary.\n                legend.bubbleLegend.correctSizes();\n                // Correct items positions with different dimensions in legend.\n                retranslateItems(legend, getLinesHeights(legend));\n            }\n            else {\n                proceed.call(chart, options, callback);\n                // Allow color change on static bubble legend after click on legend\n                if (legend && legend.options.enabled && legend.bubbleLegend) {\n                    legend.render();\n                    retranslateItems(legend, getLinesHeights(legend));\n                }\n            }\n        }\n        /**\n         * Compose classes for use with Bubble series.\n         * @private\n         *\n         * @param {Highcharts.Chart} ChartClass\n         * Core chart class to use with Bubble series.\n         *\n         * @param {Highcharts.Legend} LegendClass\n         * Core legend class to use with Bubble series.\n         */\n        function compose(ChartClass, LegendClass) {\n            if (pushUnique(composed, 'Series.BubbleLegend')) {\n                setOptions({\n                    // Set default bubble legend options\n                    legend: {\n                        bubbleLegend: BubbleLegendDefaults\n                    }\n                });\n                wrap(ChartClass.prototype, 'drawChartBox', chartDrawChartBox);\n                addEvent(LegendClass, 'afterGetAllItems', onLegendAfterGetAllItems);\n                addEvent(LegendClass, 'itemClick', onLegendItemClick);\n            }\n        }\n        /**\n         * Check if there is at least one visible bubble series.\n         *\n         * @private\n         * @function getVisibleBubbleSeriesIndex\n         * @param {Highcharts.Chart} chart\n         * Chart to check.\n         * @return {number}\n         * First visible bubble series index\n         */\n        function getVisibleBubbleSeriesIndex(chart) {\n            const series = chart.series;\n            let i = 0;\n            while (i < series.length) {\n                if (series[i] &&\n                    series[i].isBubble &&\n                    series[i].visible &&\n                    series[i].zData.length) {\n                    return i;\n                }\n                i++;\n            }\n            return -1;\n        }\n        /**\n         * Calculate height for each row in legend.\n         *\n         * @private\n         * @function getLinesHeights\n         *\n         * @param {Highcharts.Legend} legend\n         * Legend to calculate from.\n         *\n         * @return {Array<Highcharts.Dictionary<number>>}\n         * Informations about line height and items amount\n         */\n        function getLinesHeights(legend) {\n            const items = legend.allItems, lines = [], length = items.length;\n            let lastLine, legendItem, legendItem2, i = 0, j = 0;\n            for (i = 0; i < length; i++) {\n                legendItem = items[i].legendItem || {};\n                legendItem2 = (items[i + 1] || {}).legendItem || {};\n                if (legendItem.labelHeight) {\n                    // For bubbleLegend\n                    items[i].itemHeight = legendItem.labelHeight;\n                }\n                if ( // Line break\n                items[i] === items[length - 1] ||\n                    legendItem.y !== legendItem2.y) {\n                    lines.push({ height: 0 });\n                    lastLine = lines[lines.length - 1];\n                    // Find the highest item in line\n                    for (j; j <= i; j++) {\n                        if (items[j].itemHeight > lastLine.height) {\n                            lastLine.height = items[j].itemHeight;\n                        }\n                    }\n                    lastLine.step = i;\n                }\n            }\n            return lines;\n        }\n        /**\n         * Start the bubble legend creation process.\n         */\n        function onLegendAfterGetAllItems(e) {\n            const legend = this, bubbleLegend = legend.bubbleLegend, legendOptions = legend.options, options = legendOptions.bubbleLegend, bubbleSeriesIndex = getVisibleBubbleSeriesIndex(legend.chart);\n            // Remove unnecessary element\n            if (bubbleLegend && bubbleLegend.ranges && bubbleLegend.ranges.length) {\n                // Allow change the way of calculating ranges in update\n                if (options.ranges.length) {\n                    options.autoRanges =\n                        !!options.ranges[0].autoRanges;\n                }\n                // Update bubbleLegend dimensions in each redraw\n                legend.destroyItem(bubbleLegend);\n            }\n            // Create bubble legend\n            if (bubbleSeriesIndex >= 0 &&\n                legendOptions.enabled &&\n                options.enabled) {\n                options.seriesIndex = bubbleSeriesIndex;\n                legend.bubbleLegend = new BubbleLegendItem(options, legend);\n                legend.bubbleLegend.addToLegend(e.allItems);\n            }\n        }\n        /**\n         * Toggle bubble legend depending on the visible status of bubble series.\n         */\n        function onLegendItemClick(e) {\n            // #14080 don't fire this code if click function is prevented\n            if (e.defaultPrevented) {\n                return false;\n            }\n            const legend = this, series = e.legendItem, chart = legend.chart, visible = series.visible;\n            let status;\n            if (legend && legend.bubbleLegend) {\n                // Temporary correct 'visible' property\n                series.visible = !visible;\n                // Save future status for getRanges method\n                series.ignoreSeries = visible;\n                // Check if at lest one bubble series is visible\n                status = getVisibleBubbleSeriesIndex(chart) >= 0;\n                // Hide bubble legend if all bubble series are disabled\n                if (legend.bubbleLegend.visible !== status) {\n                    // Show or hide bubble legend\n                    legend.update({\n                        bubbleLegend: { enabled: status }\n                    });\n                    legend.bubbleLegend.visible = status; // Restore default status\n                }\n                series.visible = visible;\n            }\n        }\n        /**\n         * Correct legend items translation in case of different elements heights.\n         *\n         * @private\n         * @function Highcharts.Legend#retranslateItems\n         *\n         * @param {Highcharts.Legend} legend\n         * Legend to translate in.\n         *\n         * @param {Array<Highcharts.Dictionary<number>>} lines\n         * Informations about line height and items amount\n         */\n        function retranslateItems(legend, lines) {\n            const items = legend.allItems, rtl = legend.options.rtl;\n            let orgTranslateX, orgTranslateY, movementX, legendItem, actualLine = 0;\n            items.forEach((item, index) => {\n                legendItem = item.legendItem || {};\n                if (!legendItem.group) {\n                    return;\n                }\n                orgTranslateX = legendItem.group.translateX || 0;\n                orgTranslateY = legendItem.y || 0;\n                movementX = item.movementX;\n                if (movementX || (rtl && item.ranges)) {\n                    movementX = rtl ?\n                        orgTranslateX - item.options.maxSize / 2 :\n                        orgTranslateX + movementX;\n                    legendItem.group.attr({ translateX: movementX });\n                }\n                if (index > lines[actualLine].step) {\n                    actualLine++;\n                }\n                legendItem.group.attr({\n                    translateY: Math.round(orgTranslateY + lines[actualLine].height / 2)\n                });\n                legendItem.y = orgTranslateY + lines[actualLine].height / 2;\n            });\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const BubbleLegendComposition = {\n            compose\n        };\n\n        return BubbleLegendComposition;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubblePoint.js', [_modules['Core/Series/Point.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (Point, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { scatter: { prototype: { pointClass: ScatterPoint } } } } = SeriesRegistry;\n        const { extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class BubblePoint extends ScatterPoint {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            haloPath(size) {\n                const computedSize = (size && this.marker ?\n                    this.marker.radius ||\n                        0 :\n                    0) + size;\n                if (this.series.chart.inverted) {\n                    const pos = this.pos() || [0, 0], { xAxis, yAxis, chart } = this.series;\n                    return chart.renderer.symbols.circle(xAxis.len - pos[1] - computedSize, yAxis.len - pos[0] - computedSize, computedSize * 2, computedSize * 2);\n                }\n                return Point.prototype.haloPath.call(this, \n                // #6067\n                computedSize);\n            }\n        }\n        /* *\n         *\n         *  Class Prototype\n         *\n         * */\n        extend(BubblePoint.prototype, {\n            ttBelow: false\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BubblePoint;\n    });\n    _registerModule(_modules, 'Series/Bubble/BubbleSeries.js', [_modules['Series/Bubble/BubbleLegendComposition.js'], _modules['Series/Bubble/BubblePoint.js'], _modules['Core/Color/Color.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (BubbleLegendComposition, BubblePoint, Color, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { composed, noop } = H;\n        const { series: Series, seriesTypes: { column: { prototype: columnProto }, scatter: ScatterSeries } } = SeriesRegistry;\n        const { addEvent, arrayMax, arrayMin, clamp, extend, isNumber, merge, pick, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Add logic to pad each axis with the amount of pixels necessary to avoid the\n         * bubbles to overflow.\n         */\n        function onAxisFoundExtremes() {\n            const axisLength = this.len, { coll, isXAxis, min } = this, dataKey = isXAxis ? 'xData' : 'yData', range = (this.max || 0) - (min || 0);\n            let pxMin = 0, pxMax = axisLength, transA = axisLength / range, hasActiveSeries;\n            if (coll !== 'xAxis' && coll !== 'yAxis') {\n                return;\n            }\n            // Handle padding on the second pass, or on redraw\n            this.series.forEach((series) => {\n                if (series.bubblePadding && series.reserveSpace()) {\n                    // Correction for #1673\n                    this.allowZoomOutside = true;\n                    hasActiveSeries = true;\n                    const data = series[dataKey];\n                    if (isXAxis) {\n                        (series.onPoint || series).getRadii(0, 0, series);\n                        if (series.onPoint) {\n                            series.radii = series.onPoint.radii;\n                        }\n                    }\n                    if (range > 0) {\n                        let i = data.length;\n                        while (i--) {\n                            if (isNumber(data[i]) &&\n                                this.dataMin <= data[i] &&\n                                data[i] <= this.max) {\n                                const radius = series.radii && series.radii[i] || 0;\n                                pxMin = Math.min(((data[i] - min) * transA) - radius, pxMin);\n                                pxMax = Math.max(((data[i] - min) * transA) + radius, pxMax);\n                            }\n                        }\n                    }\n                }\n            });\n            // Apply the padding to the min and max properties\n            if (hasActiveSeries && range > 0 && !this.logarithmic) {\n                pxMax -= axisLength;\n                transA *= (axisLength +\n                    Math.max(0, pxMin) - // #8901\n                    Math.min(pxMax, axisLength)) / axisLength;\n                [\n                    ['min', 'userMin', pxMin],\n                    ['max', 'userMax', pxMax]\n                ].forEach((keys) => {\n                    if (typeof pick(this.options[keys[0]], this[keys[1]]) === 'undefined') {\n                        this[keys[0]] += keys[2] / transA;\n                    }\n                });\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class BubbleSeries extends ScatterSeries {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, LegendClass) {\n                BubbleLegendComposition.compose(ChartClass, LegendClass);\n                if (pushUnique(composed, 'Series.Bubble')) {\n                    addEvent(AxisClass, 'foundExtremes', onAxisFoundExtremes);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Perform animation on the bubbles\n             * @private\n             */\n            animate(init) {\n                if (!init &&\n                    this.points.length < this.options.animationLimit // #8099\n                ) {\n                    this.points.forEach(function (point) {\n                        const { graphic, plotX = 0, plotY = 0 } = point;\n                        if (graphic && graphic.width) { // URL symbols don't have width\n                            // Start values\n                            if (!this.hasRendered) {\n                                graphic.attr({\n                                    x: plotX,\n                                    y: plotY,\n                                    width: 1,\n                                    height: 1\n                                });\n                            }\n                            graphic.animate(this.markerAttribs(point), this.options.animation);\n                        }\n                    }, this);\n                }\n            }\n            /**\n             * Get the radius for each point based on the minSize, maxSize and each\n             * point's Z value. This must be done prior to Series.translate because\n             * the axis needs to add padding in accordance with the point sizes.\n             * @private\n             */\n            getRadii() {\n                const zData = this.zData, yData = this.yData, radii = [];\n                let len, i, value, zExtremes = this.chart.bubbleZExtremes;\n                const { minPxSize, maxPxSize } = this.getPxExtremes();\n                // Get the collective Z extremes of all bubblish series. The chart-level\n                // `bubbleZExtremes` are only computed once, and reset on `updatedData`\n                // in any member series.\n                if (!zExtremes) {\n                    let zMin = Number.MAX_VALUE;\n                    let zMax = -Number.MAX_VALUE;\n                    let valid;\n                    this.chart.series.forEach((otherSeries) => {\n                        if (otherSeries.bubblePadding && otherSeries.reserveSpace()) {\n                            const zExtremes = (otherSeries.onPoint || otherSeries).getZExtremes();\n                            if (zExtremes) {\n                                // Changed '||' to 'pick' because min or max can be 0.\n                                // #17280\n                                zMin = Math.min(pick(zMin, zExtremes.zMin), zExtremes.zMin);\n                                zMax = Math.max(pick(zMax, zExtremes.zMax), zExtremes.zMax);\n                                valid = true;\n                            }\n                        }\n                    });\n                    if (valid) {\n                        zExtremes = { zMin, zMax };\n                        this.chart.bubbleZExtremes = zExtremes;\n                    }\n                    else {\n                        zExtremes = { zMin: 0, zMax: 0 };\n                    }\n                }\n                // Set the shape type and arguments to be picked up in drawPoints\n                for (i = 0, len = zData.length; i < len; i++) {\n                    value = zData[i];\n                    // Separate method to get individual radius for bubbleLegend\n                    radii.push(this.getRadius(zExtremes.zMin, zExtremes.zMax, minPxSize, maxPxSize, value, yData && yData[i]));\n                }\n                this.radii = radii;\n            }\n            /**\n             * Get the individual radius for one point.\n             * @private\n             */\n            getRadius(zMin, zMax, minSize, maxSize, value, yValue) {\n                const options = this.options, sizeByArea = options.sizeBy !== 'width', zThreshold = options.zThreshold;\n                let zRange = zMax - zMin, pos = 0.5;\n                // #8608 - bubble should be visible when z is undefined\n                if (yValue === null || value === null) {\n                    return null;\n                }\n                if (isNumber(value)) {\n                    // When sizing by threshold, the absolute value of z determines\n                    // the size of the bubble.\n                    if (options.sizeByAbsoluteValue) {\n                        value = Math.abs(value - zThreshold);\n                        zMax = zRange = Math.max(zMax - zThreshold, Math.abs(zMin - zThreshold));\n                        zMin = 0;\n                    }\n                    // Issue #4419 - if value is less than zMin, push a radius that's\n                    // always smaller than the minimum size\n                    if (value < zMin) {\n                        return minSize / 2 - 1;\n                    }\n                    // Relative size, a number between 0 and 1\n                    if (zRange > 0) {\n                        pos = (value - zMin) / zRange;\n                    }\n                }\n                if (sizeByArea && pos >= 0) {\n                    pos = Math.sqrt(pos);\n                }\n                return Math.ceil(minSize + pos * (maxSize - minSize)) / 2;\n            }\n            /**\n             * Define hasData function for non-cartesian series.\n             * Returns true if the series has points at all.\n             * @private\n             */\n            hasData() {\n                return !!this.processedXData.length; // != 0\n            }\n            /**\n             * @private\n             */\n            markerAttribs(point, state) {\n                const attr = super.markerAttribs(point, state), { height = 0, width = 0 } = attr;\n                // Bubble needs a specific `markerAttribs` override because the markers\n                // are rendered into the potentially inverted `series.group`. Unlike\n                // regular markers, which are rendered into the `markerGroup` (#21125).\n                return this.chart.inverted ? extend(attr, {\n                    x: (point.plotX || 0) - width / 2,\n                    y: (point.plotY || 0) - height / 2\n                }) : attr;\n            }\n            /**\n             * @private\n             */\n            pointAttribs(point, state) {\n                const markerOptions = this.options.marker, fillOpacity = markerOptions.fillOpacity, attr = Series.prototype.pointAttribs.call(this, point, state);\n                if (fillOpacity !== 1) {\n                    attr.fill = color(attr.fill)\n                        .setOpacity(fillOpacity)\n                        .get('rgba');\n                }\n                return attr;\n            }\n            /**\n             * Extend the base translate method to handle bubble size\n             * @private\n             */\n            translate() {\n                // Run the parent method\n                super.translate.call(this);\n                this.getRadii();\n                this.translateBubble();\n            }\n            translateBubble() {\n                const { data, options, radii } = this, { minPxSize } = this.getPxExtremes();\n                // Set the shape type and arguments to be picked up in drawPoints\n                let i = data.length;\n                while (i--) {\n                    const point = data[i], radius = radii ? radii[i] : 0; // #1737\n                    // Negative points means negative z values (#9728)\n                    if (this.zoneAxis === 'z') {\n                        point.negative = (point.z || 0) < (options.zThreshold || 0);\n                    }\n                    if (isNumber(radius) && radius >= minPxSize / 2) {\n                        // Shape arguments\n                        point.marker = extend(point.marker, {\n                            radius,\n                            width: 2 * radius,\n                            height: 2 * radius\n                        });\n                        // Alignment box for the data label\n                        point.dlBox = {\n                            x: point.plotX - radius,\n                            y: point.plotY - radius,\n                            width: 2 * radius,\n                            height: 2 * radius\n                        };\n                    }\n                    else { // Below zThreshold\n                        // #1691\n                        point.shapeArgs = point.plotY = point.dlBox = void 0;\n                        point.isInside = false; // #17281\n                    }\n                }\n            }\n            getPxExtremes() {\n                const smallestSize = Math.min(this.chart.plotWidth, this.chart.plotHeight);\n                const getPxSize = (length) => {\n                    let isPercent;\n                    if (typeof length === 'string') {\n                        isPercent = /%$/.test(length);\n                        length = parseInt(length, 10);\n                    }\n                    return isPercent ? smallestSize * length / 100 : length;\n                };\n                const minPxSize = getPxSize(pick(this.options.minSize, 8));\n                // Prioritize min size if conflict to make sure bubbles are\n                // always visible. #5873\n                const maxPxSize = Math.max(getPxSize(pick(this.options.maxSize, '20%')), minPxSize);\n                return { minPxSize, maxPxSize };\n            }\n            getZExtremes() {\n                const options = this.options, zData = (this.zData || []).filter(isNumber);\n                if (zData.length) {\n                    const zMin = pick(options.zMin, clamp(arrayMin(zData), options.displayNegative === false ?\n                        (options.zThreshold || 0) :\n                        -Number.MAX_VALUE, Number.MAX_VALUE));\n                    const zMax = pick(options.zMax, arrayMax(zData));\n                    if (isNumber(zMin) && isNumber(zMax)) {\n                        return { zMin, zMax };\n                    }\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * A bubble series is a three dimensional series type where each point\n         * renders an X, Y and Z value. Each points is drawn as a bubble where the\n         * position along the X and Y axes mark the X and Y values, and the size of\n         * the bubble relates to the Z value.\n         *\n         * @sample {highcharts} highcharts/demo/bubble/\n         *         Bubble chart\n         *\n         * @extends      plotOptions.scatter\n         * @excluding    cluster\n         * @product      highcharts highstock\n         * @requires     highcharts-more\n         * @optionparent plotOptions.bubble\n         */\n        BubbleSeries.defaultOptions = merge(ScatterSeries.defaultOptions, {\n            dataLabels: {\n                formatter: function () {\n                    const { numberFormatter } = this.series.chart;\n                    const { z } = this.point;\n                    return isNumber(z) ? numberFormatter(z, -1) : '';\n                },\n                inside: true,\n                verticalAlign: 'middle'\n            },\n            /**\n             * If there are more points in the series than the `animationLimit`, the\n             * animation won't run. Animation affects overall performance and\n             * doesn't work well with heavy data series.\n             *\n             * @since 6.1.0\n             */\n            animationLimit: 250,\n            /**\n             * Whether to display negative sized bubbles. The threshold is given\n             * by the [zThreshold](#plotOptions.bubble.zThreshold) option, and negative\n             * bubbles can be visualized by setting\n             * [negativeColor](#plotOptions.bubble.negativeColor).\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-negative/\n             *         Negative bubbles\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     3.0\n             * @apioption plotOptions.bubble.displayNegative\n             */\n            /**\n             * @extends   plotOptions.series.marker\n             * @excluding enabled, enabledThreshold, height, radius, width\n             */\n            marker: {\n                lineColor: null, // Inherit from series.color\n                lineWidth: 1,\n                /**\n                 * The fill opacity of the bubble markers.\n                 */\n                fillOpacity: 0.5,\n                /**\n                 * In bubble charts, the radius is overridden and determined based\n                 * on the point's data value.\n                 *\n                 * @ignore-option\n                 */\n                radius: null,\n                states: {\n                    hover: {\n                        radiusPlus: 0\n                    }\n                },\n                /**\n                 * A predefined shape or symbol for the marker. Possible values are\n                 * \"circle\", \"square\", \"diamond\", \"triangle\" and \"triangle-down\".\n                 *\n                 * Additionally, the URL to a graphic can be given on the form\n                 * `url(graphic.png)`. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export\n                 * server.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                 * used by its method name, as shown in the demo.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/bubble-symbol/\n                 *         Bubble chart with various symbols\n                 * @sample {highcharts} highcharts/plotoptions/series-marker-symbol/\n                 *         General chart with predefined, graphic and custom markers\n                 *\n                 * @type  {Highcharts.SymbolKeyValue|string}\n                 * @since 5.0.11\n                 */\n                symbol: 'circle'\n            },\n            /**\n             * Minimum bubble size. Bubbles will automatically size between the\n             * `minSize` and `maxSize` to reflect the `z` value of each bubble.\n             * Can be either pixels (when no unit is given), or a percentage of\n             * the smallest one of the plot width and height.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-size/\n             *         Bubble size\n             *\n             * @type    {number|string}\n             * @since   3.0\n             * @product highcharts highstock\n             */\n            minSize: 8,\n            /**\n             * Maximum bubble size. Bubbles will automatically size between the\n             * `minSize` and `maxSize` to reflect the `z` value of each bubble.\n             * Can be either pixels (when no unit is given), or a percentage of\n             * the smallest one of the plot width and height.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-size/\n             *         Bubble size\n             *\n             * @type    {number|string}\n             * @since   3.0\n             * @product highcharts highstock\n             */\n            maxSize: '20%',\n            /**\n             * When a point's Z value is below the\n             * [zThreshold](#plotOptions.bubble.zThreshold)\n             * setting, this color is used.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-negative/\n             *         Negative bubbles\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.bubble.negativeColor\n             */\n            /**\n             * Whether the bubble's value should be represented by the area or the\n             * width of the bubble. The default, `area`, corresponds best to the\n             * human perception of the size of each bubble.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-sizeby/\n             *         Comparison of area and size\n             *\n             * @type       {Highcharts.BubbleSizeByValue}\n             * @default    area\n             * @since      3.0.7\n             * @apioption  plotOptions.bubble.sizeBy\n             */\n            /**\n             * When this is true, the absolute value of z determines the size of\n             * the bubble. This means that with the default `zThreshold` of 0, a\n             * bubble of value -1 will have the same size as a bubble of value 1,\n             * while a bubble of value 0 will have a smaller size according to\n             * `minSize`.\n             *\n             * @sample    {highcharts} highcharts/plotoptions/bubble-sizebyabsolutevalue/\n             *            Size by absolute value, various thresholds\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     4.1.9\n             * @product   highcharts\n             * @apioption plotOptions.bubble.sizeByAbsoluteValue\n             */\n            /**\n             * When this is true, the series will not cause the Y axis to cross\n             * the zero plane (or [threshold](#plotOptions.series.threshold) option)\n             * unless the data actually crosses the plane.\n             *\n             * For example, if `softThreshold` is `false`, a series of 0, 1, 2,\n             * 3 will make the Y axis show negative values according to the\n             * `minPadding` option. If `softThreshold` is `true`, the Y axis starts\n             * at 0.\n             *\n             * @since   4.1.9\n             * @product highcharts\n             */\n            softThreshold: false,\n            states: {\n                hover: {\n                    halo: {\n                        size: 5\n                    }\n                }\n            },\n            tooltip: {\n                pointFormat: '({point.x}, {point.y}), Size: {point.z}'\n            },\n            turboThreshold: 0,\n            /**\n             * The minimum for the Z value range. Defaults to the highest Z value\n             * in the data.\n             *\n             * @see [zMin](#plotOptions.bubble.zMin)\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-zmin-zmax/\n             *         Z has a possible range of 0-100\n             *\n             * @type      {number}\n             * @since     4.0.3\n             * @product   highcharts\n             * @apioption plotOptions.bubble.zMax\n             */\n            /**\n             * @default   z\n             * @apioption plotOptions.bubble.colorKey\n             */\n            /**\n             * The minimum for the Z value range. Defaults to the lowest Z value\n             * in the data.\n             *\n             * @see [zMax](#plotOptions.bubble.zMax)\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-zmin-zmax/\n             *         Z has a possible range of 0-100\n             *\n             * @type      {number}\n             * @since     4.0.3\n             * @product   highcharts\n             * @apioption plotOptions.bubble.zMin\n             */\n            /**\n             * When [displayNegative](#plotOptions.bubble.displayNegative) is `false`,\n             * bubbles with lower Z values are skipped. When `displayNegative`\n             * is `true` and a [negativeColor](#plotOptions.bubble.negativeColor)\n             * is given, points with lower Z is colored.\n             *\n             * @sample {highcharts} highcharts/plotoptions/bubble-negative/\n             *         Negative bubbles\n             *\n             * @since   3.0\n             * @product highcharts\n             */\n            zThreshold: 0,\n            zoneAxis: 'z'\n        });\n        extend(BubbleSeries.prototype, {\n            alignDataLabel: columnProto.alignDataLabel,\n            applyZones: noop,\n            bubblePadding: true,\n            isBubble: true,\n            pointArrayMap: ['y', 'z'],\n            pointClass: BubblePoint,\n            parallelArrays: ['x', 'y', 'z'],\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            specialGroup: 'group', // To allow clipping (#6296)\n            zoneAxis: 'z'\n        });\n        // On updated data in any series, delete the chart-level Z extremes cache\n        addEvent(BubbleSeries, 'updatedData', (e) => {\n            delete e.target.chart.bubbleZExtremes;\n        });\n        // After removing series, delete the chart-level Z extremes cache, #17502.\n        addEvent(BubbleSeries, 'remove', (e) => {\n            delete e.target.chart.bubbleZExtremes;\n        });\n        SeriesRegistry.registerSeriesType('bubble', BubbleSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"area\"|\"width\"} Highcharts.BubbleSizeByValue\n         */\n        ''; // Detach doclets above\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `bubble` series. If the [type](#series.bubble.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.bubble\n         * @excluding dataParser, dataURL, stack\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.bubble\n         */\n        /**\n         * An array of data points for the series. For the `bubble` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 3 or 2 values. In this case, the values correspond\n         *    to `x,y,z`. If the first value is a string, it is applied as the name of\n         *    the point, and the `x` value is inferred. The `x` value can also be\n         *    omitted, in which case the inner arrays should be of length 2\\. Then the\n         *    `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 1, 2],\n         *        [1, 5, 5],\n         *        [2, 0, 2]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.bubble.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        y: 1,\n         *        z: 1,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        y: 5,\n         *        z: 4,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.line.data\n         * @product   highcharts\n         * @apioption series.bubble.data\n         */\n        /**\n         * @extends     series.line.data.marker\n         * @excluding   enabledThreshold, height, radius, width\n         * @product     highcharts\n         * @apioption   series.bubble.data.marker\n         */\n        /**\n         * The size value for each bubble. The bubbles' diameters are computed\n         * based on the `z`, and controlled by series options like `minSize`,\n         * `maxSize`, `sizeBy`, `zMin` and `zMax`.\n         *\n         * @type      {number|null}\n         * @product   highcharts\n         * @apioption series.bubble.data.z\n         */\n        /**\n         * @excluding enabled, enabledThreshold, height, radius, width\n         * @apioption series.bubble.marker\n         */\n        ''; // Adds doclets above to transpiled file\n\n        return BubbleSeries;\n    });\n    _registerModule(_modules, 'Series/ColumnRange/ColumnRangePoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { column: { prototype: { pointClass: { prototype: columnProto } } }, arearange: { prototype: { pointClass: AreaRangePoint } } } } = SeriesRegistry;\n        const { extend, isNumber } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class ColumnRangePoint extends AreaRangePoint {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            isValid() {\n                return isNumber(this.low);\n            }\n        }\n        extend(ColumnRangePoint.prototype, {\n            setState: columnProto.setState\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnRangePoint;\n    });\n    _registerModule(_modules, 'Series/ColumnRange/ColumnRangeSeries.js', [_modules['Series/ColumnRange/ColumnRangePoint.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ColumnRangePoint, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { seriesTypes: { arearange: AreaRangeSeries, column: ColumnSeries, column: { prototype: columnProto } } } = SeriesRegistry;\n        const { addEvent, clamp, extend, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The column range is a cartesian series type with higher and lower\n         * Y values along an X axis. To display horizontal bars, set\n         * [chart.inverted](#chart.inverted) to `true`.\n         *\n         * @sample {highcharts|highstock} highcharts/demo/columnrange/\n         *         Inverted column range\n         *\n         * @extends      plotOptions.column\n         * @since        2.3.0\n         * @excluding    negativeColor, stacking, softThreshold, threshold\n         * @product      highcharts highstock\n         * @requires     highcharts-more\n         * @optionparent plotOptions.columnrange\n         */\n        const columnRangeOptions = {\n            borderRadius: {\n                where: 'all'\n            },\n            /**\n             * Extended data labels for range series types. Range series data labels\n             * have no `x` and `y` options. Instead, they have `xLow`, `xHigh`,\n             * `yLow` and `yHigh` options to allow the higher and lower data label\n             * sets individually.\n             *\n             * @declare   Highcharts.SeriesAreaRangeDataLabelsOptionsObject\n             * @extends   plotOptions.arearange.dataLabels\n             * @since     2.3.0\n             * @product   highcharts highstock\n             * @apioption plotOptions.columnrange.dataLabels\n             */\n            pointRange: null,\n            legendSymbol: 'rectangle',\n            /** @ignore-option */\n            marker: null,\n            states: {\n                hover: {\n                    /** @ignore-option */\n                    halo: false\n                }\n            }\n        };\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ColumnRangeSeries class\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.columnrange\n         *\n         * @augments Highcharts.Series\n         */\n        class ColumnRangeSeries extends AreaRangeSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            setOptions() {\n                // #14359 Prevent side-effect from stacking.\n                merge(true, arguments[0], { stacking: void 0 });\n                return AreaRangeSeries.prototype.setOptions.apply(this, arguments);\n            }\n            // Overrides from modules that may be loaded after this module\n            // @todo move to compositions\n            translate() {\n                return columnProto.translate.apply(this);\n            }\n            // Public crispCol(): BBoxObject {\n            //     return columnProto.crispCol.apply(this, arguments as any);\n            // }\n            // public drawPoints(): void {\n            //     return columnProto.drawPoints.apply(this, arguments as any);\n            // }\n            // public drawTracker(): void {\n            //     return columnProto.drawTracker.apply(this, arguments as any);\n            // }\n            // public getColumnMetrics(): ColumnMetricsObject {\n            //     return columnProto.getColumnMetrics.apply(this, arguments as any);\n            // }\n            pointAttribs() {\n                return columnProto.pointAttribs.apply(this, arguments);\n            }\n            // Public adjustForMissingColumns(): number {\n            //     return columnProto.adjustForMissingColumns.apply(this, arguments);\n            // }\n            // public animate(): void {\n            //     return columnProto.animate.apply(this, arguments as any);\n            // }\n            translate3dPoints() {\n                return columnProto.translate3dPoints.apply(this, arguments);\n            }\n            translate3dShapes() {\n                return columnProto.translate3dShapes.apply(this, arguments);\n            }\n            afterColumnTranslate() {\n                /**\n                 * Translate data points from raw values x and y to plotX and plotY\n                 * @private\n                 */\n                const yAxis = this.yAxis, xAxis = this.xAxis, startAngleRad = xAxis.startAngleRad, chart = this.chart, isRadial = this.xAxis.isRadial, safeDistance = Math.max(chart.chartWidth, chart.chartHeight) + 999;\n                let height, heightDifference, start, y;\n                // eslint-disable-next-line valid-jsdoc\n                /**\n                 * Don't draw too far outside plot area (#6835)\n                 * @private\n                 */\n                function safeBounds(pixelPos) {\n                    return clamp(pixelPos, -safeDistance, safeDistance);\n                }\n                // Set plotLow and plotHigh\n                this.points.forEach((point) => {\n                    const shapeArgs = point.shapeArgs || {}, minPointLength = this.options.minPointLength, plotY = point.plotY, plotHigh = yAxis.translate(point.high, 0, 1, 0, 1);\n                    if (isNumber(plotHigh) && isNumber(plotY)) {\n                        point.plotHigh = safeBounds(plotHigh);\n                        point.plotLow = safeBounds(plotY);\n                        // Adjust shape\n                        y = point.plotHigh;\n                        height = pick(point.rectPlotY, point.plotY) - point.plotHigh;\n                        // Adjust for minPointLength\n                        if (Math.abs(height) < minPointLength) {\n                            heightDifference = (minPointLength - height);\n                            height += heightDifference;\n                            y -= heightDifference / 2;\n                            // Adjust for negative ranges or reversed Y axis (#1457)\n                        }\n                        else if (height < 0) {\n                            height *= -1;\n                            y -= height;\n                        }\n                        if (isRadial && this.polar) {\n                            start = point.barX + startAngleRad;\n                            point.shapeType = 'arc';\n                            point.shapeArgs = this.polar.arc(y + height, y, start, start + point.pointWidth);\n                        }\n                        else {\n                            shapeArgs.height = height;\n                            shapeArgs.y = y;\n                            const { x = 0, width = 0 } = shapeArgs;\n                            // #17912, aligning column range points\n                            // merge if shapeArgs contains more properties e.g. for 3d\n                            point.shapeArgs = merge(point.shapeArgs, this.crispCol(x, y, width, height));\n                            point.tooltipPos = chart.inverted ?\n                                [\n                                    yAxis.len + yAxis.pos - chart.plotLeft - y -\n                                        height / 2,\n                                    xAxis.len + xAxis.pos - chart.plotTop - x -\n                                        width / 2,\n                                    height\n                                ] : [\n                                xAxis.left - chart.plotLeft + x + width / 2,\n                                yAxis.pos - chart.plotTop + y + height / 2,\n                                height\n                            ]; // Don't inherit from column tooltip position - #3372\n                        }\n                    }\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        ColumnRangeSeries.defaultOptions = merge(ColumnSeries.defaultOptions, AreaRangeSeries.defaultOptions, columnRangeOptions);\n        addEvent(ColumnRangeSeries, 'afterColumnTranslate', function () {\n            ColumnRangeSeries.prototype.afterColumnTranslate.apply(this);\n        }, { order: 5 });\n        extend(ColumnRangeSeries.prototype, {\n            directTouch: true,\n            pointClass: ColumnRangePoint,\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            adjustForMissingColumns: columnProto.adjustForMissingColumns,\n            animate: columnProto.animate,\n            crispCol: columnProto.crispCol,\n            drawGraph: noop,\n            drawPoints: columnProto.drawPoints,\n            getSymbol: noop,\n            drawTracker: columnProto.drawTracker,\n            getColumnMetrics: columnProto.getColumnMetrics\n        });\n        SeriesRegistry.registerSeriesType('columnrange', ColumnRangeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `columnrange` series. If the [type](#series.columnrange.type)\n         * option is not specified, it is inherited from\n         * [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.columnrange\n         * @excluding dataParser, dataURL, stack, stacking\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.columnrange\n         */\n        /**\n         * An array of data points for the series. For the `columnrange` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 3 or 2 values. In this case, the values correspond\n         *    to `x,low,high`. If the first value is a string, it is applied as the name\n         *    of the point, and the `x` value is inferred. The `x` value can also be\n         *    omitted, in which case the inner arrays should be of length 2\\. Then the\n         *    `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 4, 2],\n         *        [1, 2, 1],\n         *        [2, 9, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.columnrange.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        low: 0,\n         *        high: 4,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        low: 5,\n         *        high: 3,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding marker\n         * @product   highcharts highstock\n         * @apioption series.columnrange.data\n         */\n        /**\n         * @extends   series.columnrange.dataLabels\n         * @product   highcharts highstock\n         * @apioption series.columnrange.data.dataLabels\n         */\n        /**\n         * @excluding halo, lineWidth, lineWidthPlus, marker\n         * @product   highcharts highstock\n         * @apioption series.columnrange.states.hover\n         */\n        /**\n         * @excluding halo, lineWidth, lineWidthPlus, marker\n         * @product   highcharts highstock\n         * @apioption series.columnrange.states.select\n         */\n        ''; // Adds doclets above into transpiled\n\n        return ColumnRangeSeries;\n    });\n    _registerModule(_modules, 'Series/ColumnPyramid/ColumnPyramidSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Column pyramid series display one pyramid per value along an X axis.\n         * To display horizontal pyramids, set [chart.inverted](#chart.inverted) to\n         * `true`.\n         *\n         * @sample {highcharts|highstock} highcharts/demo/column-pyramid/\n         *         Column pyramid\n         * @sample {highcharts|highstock} highcharts/plotoptions/columnpyramid-stacked/\n         *         Column pyramid stacked\n         * @sample {highcharts|highstock} highcharts/plotoptions/columnpyramid-inverted/\n         *         Column pyramid inverted\n         *\n         * @extends      plotOptions.column\n         * @since        7.0.0\n         * @product      highcharts highstock\n         * @excluding    boostThreshold, borderRadius, crisp, depth, edgeColor,\n         *               edgeWidth, groupZPadding, negativeColor, softThreshold,\n         *               threshold, zoneAxis, zones, boostBlending\n         * @requires     highcharts-more\n         * @optionparent plotOptions.columnpyramid\n         */\n        const ColumnPyramidSeriesDefaults = {};\n        /**\n         * A `columnpyramid` series. If the [type](#series.columnpyramid.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.columnpyramid\n         * @excluding connectEnds, connectNulls, dashStyle, dataParser, dataURL,\n         *            gapSize, gapUnit, linecap, lineWidth, marker, step,\n         *            boostThreshold, boostBlending\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.columnpyramid\n         */\n        /**\n         * @excluding halo, lineWidth, lineWidthPlus, marker\n         * @product   highcharts highstock\n         * @apioption series.columnpyramid.states.hover\n         */\n        /**\n         * @excluding halo, lineWidth, lineWidthPlus, marker\n         * @product   highcharts highstock\n         * @apioption series.columnpyramid.states.select\n         */\n        /**\n         * An array of data points for the series. For the `columnpyramid` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. The `x` values will be automatically\n         *    calculated, either starting at 0 and incremented by 1, or from\n         *    `pointStart` and `pointInterval` given in the series options. If the axis\n         *    has categories, these will be used. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of arrays with 2 values. In this case, the values correspond to\n         *    `x,y`. If the first value is a string, it is applied as the name of the\n         *    point, and the `x` value is inferred.\n         *    ```js\n         *    data: [\n         *        [0, 6],\n         *        [1, 2],\n         *        [2, 6]\n         *    ]\n         *    ```\n         *\n         * 3. An array of objects with named values. The objects are point configuration\n         *    objects as seen below. If the total number of data points exceeds the\n         *    series' [turboThreshold](#series.columnpyramid.turboThreshold), this\n         *    option is not available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        y: 9,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        y: 6,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n         * @extends   series.line.data\n         * @excluding marker\n         * @product   highcharts highstock\n         * @apioption series.columnpyramid.data\n         */\n        ''; // Keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnPyramidSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/ColumnPyramid/ColumnPyramidSeries.js', [_modules['Series/ColumnPyramid/ColumnPyramidSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ColumnPyramidSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { clamp, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ColumnPyramidSeries class\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.columnpyramid\n         *\n         * @augments Highcharts.Series\n         */\n        class ColumnPyramidSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Overrides the column translate method\n             * @private\n             */\n            translate() {\n                const series = this, chart = series.chart, options = series.options, dense = series.dense =\n                    series.closestPointRange * series.xAxis.transA < 2, borderWidth = series.borderWidth = pick(options.borderWidth, dense ? 0 : 1 // #3635\n                ), yAxis = series.yAxis, threshold = options.threshold, minPointLength = pick(options.minPointLength, 5), metrics = series.getColumnMetrics(), pointWidth = metrics.width, pointXOffset = series.pointXOffset = metrics.offset;\n                let translatedThreshold = series.translatedThreshold =\n                    yAxis.getThreshold(threshold), \n                // Postprocessed for border width\n                seriesBarW = series.barW =\n                    Math.max(pointWidth, 1 + 2 * borderWidth);\n                if (chart.inverted) {\n                    translatedThreshold -= 0.5; // #3355\n                }\n                // When the pointPadding is 0,\n                // we want the pyramids to be packed tightly,\n                // so we allow individual pyramids to have individual sizes.\n                // When pointPadding is greater,\n                // we strive for equal-width columns (#2694).\n                if (options.pointPadding) {\n                    seriesBarW = Math.ceil(seriesBarW);\n                }\n                super.translate();\n                // Record the new values\n                for (const point of series.points) {\n                    const yBottom = pick(point.yBottom, translatedThreshold), safeDistance = 999 + Math.abs(yBottom), plotY = clamp(point.plotY, -safeDistance, yAxis.len + safeDistance), \n                    // Don't draw too far outside plot area\n                    // (#1303, #2241, #4264)\n                    barW = seriesBarW / 2, barY = Math.min(plotY, yBottom), barH = Math.max(plotY, yBottom) - barY;\n                    let barX = point.plotX + pointXOffset, stackTotal, stackHeight, topXwidth, bottomXwidth, invBarPos, x1, x2, x3, x4, y1, y2;\n                    // Adjust for null or missing points\n                    if (options.centerInCategory) {\n                        barX = series.adjustForMissingColumns(barX, pointWidth, point, metrics);\n                    }\n                    point.barX = barX;\n                    point.pointWidth = pointWidth;\n                    // Fix the tooltip on center of grouped pyramids\n                    // (#1216, #424, #3648)\n                    point.tooltipPos = chart.inverted ?\n                        [\n                            yAxis.len + yAxis.pos - chart.plotLeft - plotY,\n                            series.xAxis.len - barX - barW,\n                            barH\n                        ] :\n                        [\n                            barX + barW,\n                            plotY + yAxis.pos - chart.plotTop,\n                            barH\n                        ];\n                    stackTotal =\n                        threshold + (point.total || point.y);\n                    // Overwrite stacktotal (always 100 / -100)\n                    if (options.stacking === 'percent') {\n                        stackTotal =\n                            threshold + (point.y < 0) ?\n                                -100 :\n                                100;\n                    }\n                    // Get the highest point (if stack, extract from total)\n                    const topPointY = yAxis.toPixels((stackTotal), true);\n                    // Calculate height of stack (in pixels)\n                    stackHeight =\n                        chart.plotHeight - topPointY -\n                            (chart.plotHeight - translatedThreshold);\n                    // `topXwidth` and `bottomXwidth` = width of lines from the center\n                    // calculated from tanges proportion. Cannot be a NaN #12514.\n                    topXwidth = stackHeight ?\n                        (barW * (barY - topPointY)) / stackHeight : 0;\n                    // Like topXwidth, but with height of point\n                    bottomXwidth = stackHeight ?\n                        (barW * (barY + barH - topPointY)) / stackHeight :\n                        0;\n                    /*\n                            /\\\n                           /  \\\n                    x1,y1,------ x2,y1\n                        /       \\\n                       -----------\n                    x4,y2        x3,y2\n                    */\n                    x1 = barX - topXwidth + barW;\n                    x2 = barX + topXwidth + barW;\n                    x3 = barX + bottomXwidth + barW;\n                    x4 = barX - bottomXwidth + barW;\n                    y1 = barY - minPointLength;\n                    y2 = barY + barH;\n                    if (point.y < 0) {\n                        y1 = barY;\n                        y2 = barY + barH + minPointLength;\n                    }\n                    // Inverted chart\n                    if (chart.inverted) {\n                        invBarPos = yAxis.width - barY;\n                        stackHeight =\n                            topPointY - (yAxis.width - translatedThreshold);\n                        // Proportion tanges\n                        topXwidth = (barW *\n                            (topPointY - invBarPos)) / stackHeight;\n                        bottomXwidth = (barW *\n                            (topPointY - (invBarPos - barH))) / stackHeight;\n                        x1 = barX + barW + topXwidth; // Top bottom\n                        x2 = x1 - 2 * topXwidth; // Top top\n                        x3 = barX - bottomXwidth + barW; // Bottom top\n                        x4 = barX + bottomXwidth + barW; // Bottom bottom\n                        y1 = barY;\n                        y2 = barY + barH - minPointLength;\n                        if (point.y < 0) {\n                            y2 = barY + barH + minPointLength;\n                        }\n                    }\n                    // Register shape type and arguments to be used in drawPoints\n                    point.shapeType = 'path';\n                    point.shapeArgs = {\n                        x: x1,\n                        y: y1,\n                        width: x2 - x1,\n                        height: barH,\n                        // Path of pyramid\n                        d: [\n                            ['M', x1, y1],\n                            ['L', x2, y1],\n                            ['L', x3, y2],\n                            ['L', x4, y2],\n                            ['Z']\n                        ]\n                    };\n                }\n            }\n        }\n        /* *\n         *\n         *  Static properties\n         *\n         * */\n        ColumnPyramidSeries.defaultOptions = merge(ColumnSeries.defaultOptions, ColumnPyramidSeriesDefaults);\n        SeriesRegistry.registerSeriesType('columnpyramid', ColumnPyramidSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColumnPyramidSeries;\n    });\n    _registerModule(_modules, 'Series/ErrorBar/ErrorBarSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Error bars are a graphical representation of the variability of data and\n         * are used on graphs to indicate the error, or uncertainty in a reported\n         * measurement.\n         *\n         * @sample highcharts/demo/error-bar/\n         *         Error bars on a column series\n         * @sample highcharts/series-errorbar/on-scatter/\n         *         Error bars on a scatter series\n         * @sample highcharts/series-errorbar/datalabels/\n         *         Error bars with data labels\n         *\n         * @extends      plotOptions.boxplot\n         * @excluding    boostBlending, boostThreshold\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent plotOptions.errorbar\n         */\n        const ErrorBarSeriesDefaults = {\n            /**\n             * The main color of the bars. This can be overridden by\n             * [stemColor](#plotOptions.errorbar.stemColor) and\n             * [whiskerColor](#plotOptions.errorbar.whiskerColor) individually.\n             *\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #000000\n             * @since   3.0\n             * @product highcharts\n             */\n            color: \"#000000\" /* Palette.neutralColor100 */,\n            grouping: false,\n            /**\n             * The parent series of the error bar. The default value links it to\n             * the previous series. Otherwise, use the id of the parent series.\n             *\n             * @since   3.0\n             * @product highcharts\n             */\n            linkedTo: ':previous',\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> {series.name}: <b>{point.low}</b> - <b>{point.high}</b><br/>'\n            },\n            /**\n             * The line width of the whiskers, the horizontal lines marking\n             * low and high values. When `null`, the general\n             * [lineWidth](#plotOptions.errorbar.lineWidth) applies.\n             *\n             * @sample {highcharts} highcharts/plotoptions/error-bar-styling/\n             *         Error bar styling\n             *\n             * @type    {number}\n             * @since   3.0\n             * @product highcharts\n             */\n            whiskerWidth: null\n        };\n        /**\n         * A `errorbar` series. If the [type](#series.errorbar.type) option\n         * is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.errorbar\n         * @excluding dataParser, dataURL, stack, stacking, boostThreshold,\n         *            boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.errorbar\n         */\n        /**\n         * An array of data points for the series. For the `errorbar` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 3 or 2 values. In this case, the values correspond\n         *    to `x,low,high`. If the first value is a string, it is applied as the name\n         *    of the point, and the `x` value is inferred. The `x` value can also be\n         *    omitted, in which case the inner arrays should be of length 2\\. Then the\n         *    `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 10, 2],\n         *        [1, 1, 8],\n         *        [2, 4, 5]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.errorbar.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        low: 0,\n         *        high: 0,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        low: 5,\n         *        high: 5,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number>|Array<(number|string),number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding dataLabels, drilldown, marker, states\n         * @product   highcharts\n         * @apioption series.errorbar.data\n         */\n        ''; // Adds doclets above to transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ErrorBarSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/ErrorBar/ErrorBarSeries.js', [_modules['Series/BoxPlot/BoxPlotSeries.js'], _modules['Series/Column/ColumnSeries.js'], _modules['Series/ErrorBar/ErrorBarSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (BoxPlotSeries, ColumnSeries, ErrorBarSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { arearange: AreaRangeSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, merge, extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Errorbar series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.errorbar\n         *\n         * @augments Highcharts.Series\n         */\n        class ErrorBarSeries extends BoxPlotSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getColumnMetrics() {\n                const series = this;\n                // Get the width and X offset, either on top of the linked series\n                // column or standalone\n                return ((series.linkedParent && series.linkedParent.columnMetrics) ||\n                    ColumnSeries.prototype.getColumnMetrics.call(series));\n            }\n            drawDataLabels() {\n                const series = this, valKey = series.pointValKey;\n                if (AreaRangeSeries) {\n                    AreaRangeSeries.prototype.drawDataLabels.call(series);\n                    // Arearange drawDataLabels does not reset point.y to high,\n                    // but to low after drawing (#4133)\n                    for (const point of series.points) {\n                        point.y = point[valKey];\n                    }\n                }\n            }\n            toYData(point) {\n                // Return a plain array for speedy calculation\n                return [point.low, point.high];\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        ErrorBarSeries.defaultOptions = merge(BoxPlotSeries.defaultOptions, ErrorBarSeriesDefaults);\n        addEvent(ErrorBarSeries, 'afterTranslate', function () {\n            for (const point of this.points) {\n                point.plotLow = point.plotY;\n            }\n        }, { order: 0 });\n        extend(ErrorBarSeries.prototype, {\n            pointArrayMap: ['low', 'high'], // Array point configs are mapped to this\n            pointValKey: 'high', // Defines the top of the tracker\n            doQuartiles: false\n        });\n        SeriesRegistry.registerSeriesType('errorbar', ErrorBarSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ErrorBarSeries;\n    });\n    _registerModule(_modules, 'Series/Gauge/GaugePoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: { pointClass: Point } } } = SeriesRegistry;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class GaugePoint extends Point {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Don't do any hover colors or anything\n             * @private\n             */\n            setState(state) {\n                this.state = state;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GaugePoint;\n    });\n    _registerModule(_modules, 'Series/Gauge/GaugeSeries.js', [_modules['Series/Gauge/GaugePoint.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (GaugePoint, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { series: Series, seriesTypes: { column: ColumnSeries } } = SeriesRegistry;\n        const { clamp, isNumber, extend, merge, pick, pInt, defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         *\n         * The `gauge` series type\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.map\n         *\n         * @augments Highcharts.Series\n         */\n        class GaugeSeries extends Series {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Calculate paths etc\n             * @private\n             */\n            translate() {\n                const series = this, yAxis = series.yAxis, options = series.options, center = yAxis.center;\n                series.generatePoints();\n                series.points.forEach((point) => {\n                    const dialOptions = merge(options.dial, point.dial), radius = (pInt(dialOptions.radius) * center[2]) / 200, baseLength = (pInt(dialOptions.baseLength) * radius) / 100, rearLength = (pInt(dialOptions.rearLength) * radius) / 100, baseWidth = dialOptions.baseWidth, topWidth = dialOptions.topWidth;\n                    let overshoot = options.overshoot, rotation = yAxis.startAngleRad + yAxis.translate(point.y, void 0, void 0, void 0, true);\n                    // Handle the wrap and overshoot options\n                    if (isNumber(overshoot) || options.wrap === false) {\n                        overshoot = isNumber(overshoot) ?\n                            (overshoot / 180 * Math.PI) : 0;\n                        rotation = clamp(rotation, yAxis.startAngleRad - overshoot, yAxis.endAngleRad + overshoot);\n                    }\n                    rotation = rotation * 180 / Math.PI;\n                    point.shapeType = 'path';\n                    const d = dialOptions.path || [\n                        ['M', -rearLength, -baseWidth / 2],\n                        ['L', baseLength, -baseWidth / 2],\n                        ['L', radius, -topWidth / 2],\n                        ['L', radius, topWidth / 2],\n                        ['L', baseLength, baseWidth / 2],\n                        ['L', -rearLength, baseWidth / 2],\n                        ['Z']\n                    ];\n                    point.shapeArgs = {\n                        d,\n                        translateX: center[0],\n                        translateY: center[1],\n                        rotation: rotation\n                    };\n                    // Positions for data label\n                    point.plotX = center[0];\n                    point.plotY = center[1];\n                    if (defined(point.y) && yAxis.max - yAxis.min) {\n                        point.percentage =\n                            (point.y - yAxis.min) / (yAxis.max - yAxis.min) * 100;\n                    }\n                });\n            }\n            /**\n             * Draw the points where each point is one needle\n             * @private\n             */\n            drawPoints() {\n                const series = this, chart = series.chart, center = series.yAxis.center, pivot = series.pivot, options = series.options, pivotOptions = options.pivot, renderer = chart.renderer;\n                series.points.forEach((point) => {\n                    const graphic = point.graphic, shapeArgs = point.shapeArgs, d = shapeArgs.d, dialOptions = merge(options.dial, point.dial); // #1233\n                    if (graphic) {\n                        graphic.animate(shapeArgs);\n                        shapeArgs.d = d; // Animate alters it\n                    }\n                    else {\n                        point.graphic =\n                            renderer[point.shapeType](shapeArgs)\n                                .addClass('highcharts-dial')\n                                .add(series.group);\n                    }\n                    // Presentational attributes\n                    if (!chart.styledMode) {\n                        point.graphic[graphic ? 'animate' : 'attr']({\n                            stroke: dialOptions.borderColor,\n                            'stroke-width': dialOptions.borderWidth,\n                            fill: dialOptions.backgroundColor\n                        });\n                    }\n                });\n                // Add or move the pivot\n                if (pivot) {\n                    pivot.animate({\n                        translateX: center[0],\n                        translateY: center[1]\n                    });\n                }\n                else if (pivotOptions) {\n                    series.pivot =\n                        renderer.circle(0, 0, pivotOptions.radius)\n                            .attr({\n                            zIndex: 2\n                        })\n                            .addClass('highcharts-pivot')\n                            .translate(center[0], center[1])\n                            .add(series.group);\n                    // Presentational attributes\n                    if (!chart.styledMode) {\n                        series.pivot.attr({\n                            fill: pivotOptions.backgroundColor,\n                            stroke: pivotOptions.borderColor,\n                            'stroke-width': pivotOptions.borderWidth\n                        });\n                    }\n                }\n            }\n            /**\n             * Animate the arrow up from startAngle\n             * @private\n             */\n            animate(init) {\n                const series = this;\n                if (!init) {\n                    series.points.forEach((point) => {\n                        const graphic = point.graphic;\n                        if (graphic) {\n                            // Start value\n                            graphic.attr({\n                                rotation: series.yAxis.startAngleRad * 180 / Math.PI\n                            });\n                            // Animate\n                            graphic.animate({\n                                rotation: point.shapeArgs.rotation\n                            }, series.options.animation);\n                        }\n                    });\n                }\n            }\n            /**\n             * @private\n             */\n            render() {\n                this.group = this.plotGroup('group', 'series', this.visible ? 'inherit' : 'hidden', this.options.zIndex, this.chart.seriesGroup);\n                Series.prototype.render.call(this);\n                this.group.clip(this.chart.clipRect);\n            }\n            /**\n             * Extend the basic setData method by running processData and generatePoints\n             * immediately, in order to access the points from the legend.\n             * @private\n             */\n            setData(data, redraw) {\n                Series.prototype.setData.call(this, data, false);\n                this.processData();\n                this.generatePoints();\n                if (pick(redraw, true)) {\n                    this.chart.redraw();\n                }\n            }\n            /**\n             * Define hasData function for non-cartesian series.\n             * Returns true if the series has points at all.\n             * @private\n             */\n            hasData() {\n                return !!this.points.length; // != 0\n            }\n        }\n        /* *\n         *\n         *  Static properties\n         *\n         * */\n        /**\n         * Gauges are circular plots displaying one or more values with a dial\n         * pointing to values along the perimeter.\n         *\n         * @sample highcharts/demo/gauge-speedometer/\n         *         Gauge chart\n         *\n         * @extends      plotOptions.line\n         * @excluding    animationLimit, boostThreshold, colorAxis, colorKey,\n         *               connectEnds, connectNulls, cropThreshold, dashStyle,\n         *               dragDrop, findNearestPointBy, getExtremesFromAll, marker,\n         *               negativeColor, pointPlacement, shadow, softThreshold,\n         *               stacking, states, step, threshold, turboThreshold, xAxis,\n         *               zoneAxis, zones, dataSorting, boostBlending\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent plotOptions.gauge\n         */\n        GaugeSeries.defaultOptions = merge(Series.defaultOptions, {\n            /**\n             * When this option is `true`, the dial will wrap around the axes.\n             * For instance, in a full-range gauge going from 0 to 360, a value\n             * of 400 will point to 40\\. When `wrap` is `false`, the dial stops\n             * at 360.\n             *\n             * @see [overshoot](#plotOptions.gauge.overshoot)\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.gauge.wrap\n             */\n            /**\n             * Data labels for the gauge. For gauges, the data labels are\n             * enabled by default and shown in a bordered box below the point.\n             *\n             * @since   2.3.0\n             * @product highcharts\n             */\n            dataLabels: {\n                borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                borderRadius: 3,\n                borderWidth: 1,\n                crop: false,\n                defer: false,\n                enabled: true,\n                verticalAlign: 'top',\n                y: 15,\n                zIndex: 2\n            },\n            /**\n             * Options for the dial or arrow pointer of the gauge.\n             *\n             * In styled mode, the dial is styled with the\n             * `.highcharts-gauge-series .highcharts-dial` rule.\n             *\n             * @sample {highcharts} highcharts/css/gauge/\n             *         Styled mode\n             *\n             * @type    {*}\n             * @since   2.3.0\n             * @product highcharts\n             */\n            dial: {\n                /**\n                 * The background or fill color of the gauge's dial.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #000000\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.backgroundColor\n                 */\n                backgroundColor: \"#000000\" /* Palette.neutralColor100 */,\n                /**\n                 * The length of the dial's base part, relative to the total\n                 * radius or length of the dial.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {string}\n                 * @default   70%\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.baseLength\n                 */\n                baseLength: '70%',\n                /**\n                 * The pixel width of the base of the gauge dial. The base is\n                 * the part closest to the pivot, defined by baseLength.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   3\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.baseWidth\n                 */\n                baseWidth: 3,\n                /**\n                 * The border color or stroke of the gauge's dial. By default,\n                 * the borderWidth is 0, so this must be set in addition to a\n                 * custom border color.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #cccccc\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.borderColor\n                 */\n                borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                /**\n                 * The width of the gauge dial border in pixels.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.borderWidth\n                 */\n                borderWidth: 0,\n                /**\n                 * An array with an SVG path for the custom dial.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-path/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {Highcharts.SVGPathArray}\n                 * @since 10.2.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.path\n                 */\n                /**\n                 * The radius or length of the dial, in percentages relative to\n                 * the radius of the gauge itself.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {string}\n                 * @default   80%\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.radius\n                 */\n                radius: '80%',\n                /**\n                 * The length of the dial's rear end, the part that extends out\n                 * on the other side of the pivot. Relative to the dial's\n                 * length.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {string}\n                 * @default   10%\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.rearLength\n                 */\n                rearLength: '10%',\n                /**\n                 * The width of the top of the dial, closest to the perimeter.\n                 * The pivot narrows in from the base to the top.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-dial/\n                 *         Dial options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   1\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.dial.topWidth\n                 */\n                topWidth: 1\n            },\n            /**\n             * Allow the dial to overshoot the end of the perimeter axis by\n             * this many degrees. Say if the gauge axis goes from 0 to 60, a\n             * value of 100, or 1000, will show 5 degrees beyond the end of the\n             * axis when this option is set to 5.\n             *\n             * @see [wrap](#plotOptions.gauge.wrap)\n             *\n             * @sample {highcharts} highcharts/plotoptions/gauge-overshoot/\n             *         Allow 5 degrees overshoot\n             *\n             * @type      {number}\n             * @since     3.0.10\n             * @product   highcharts\n             * @apioption plotOptions.gauge.overshoot\n             */\n            /**\n             * Options for the pivot or the center point of the gauge.\n             *\n             * In styled mode, the pivot is styled with the\n             * `.highcharts-gauge-series .highcharts-pivot` rule.\n             *\n             * @sample {highcharts} highcharts/css/gauge/\n             *         Styled mode\n             *\n             * @type    {*}\n             * @since   2.3.0\n             * @product highcharts\n             */\n            pivot: {\n                /**\n                 * The pixel radius of the pivot.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-pivot/\n                 *         Pivot options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   5\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.pivot.radius\n                 */\n                radius: 5,\n                /**\n                 * The border or stroke width of the pivot.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-pivot/\n                 *         Pivot options demonstrated\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.pivot.borderWidth\n                 */\n                borderWidth: 0,\n                /**\n                 * The border or stroke color of the pivot. In able to change\n                 * this, the borderWidth must also be set to something other\n                 * than the default 0.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-pivot/\n                 *         Pivot options demonstrated\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #cccccc\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.pivot.borderColor\n                 */\n                borderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                /**\n                 * The background color or fill of the pivot.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/gauge-pivot/\n                 *         Pivot options demonstrated\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @default   #000000\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.gauge.pivot.backgroundColor\n                 */\n                backgroundColor: \"#000000\" /* Palette.neutralColor100 */\n            },\n            tooltip: {\n                headerFormat: ''\n            },\n            /**\n             * Whether to display this particular series or series type in the\n             * legend. Defaults to false for gauge series.\n             *\n             * @since   2.3.0\n             * @product highcharts\n             */\n            showInLegend: false\n            // Prototype members\n        });\n        extend(GaugeSeries.prototype, {\n            // `chart.angular` will be set to true when a gauge series is present, and\n            // this will be used on the axes\n            angular: true,\n            directTouch: true, // #5063\n            drawGraph: noop,\n            drawTracker: ColumnSeries.prototype.drawTracker,\n            fixedBox: true,\n            forceDL: true,\n            noSharedTooltip: true,\n            pointClass: GaugePoint,\n            trackerGroups: ['group', 'dataLabelsGroup']\n        });\n        SeriesRegistry.registerSeriesType('gauge', GaugeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API options\n         *\n         * */\n        /**\n         * A `gauge` series. If the [type](#series.gauge.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.gauge\n         * @excluding animationLimit, boostThreshold, connectEnds, connectNulls,\n         *            cropThreshold, dashStyle, dataParser, dataURL, findNearestPointBy,\n         *            getExtremesFromAll, marker, negativeColor, pointPlacement, shadow,\n         *            softThreshold, stack, stacking, states, step, threshold,\n         *            turboThreshold, zoneAxis, zones, dataSorting, boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.gauge\n         */\n        /**\n         * An array of data points for the series. For the `gauge` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.gauge.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        y: 6,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        y: 8,\n         *        name: \"Point1\",\n         *       color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * The typical gauge only contains a single data value.\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|null|*>}\n         * @extends   series.line.data\n         * @excluding drilldown, marker, x\n         * @product   highcharts\n         * @apioption series.gauge.data\n         */\n        ''; // Adds the doclets above in the transpiled file\n\n        return GaugeSeries;\n    });\n    _registerModule(_modules, 'Series/DragNodesComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (pushUnique(composed, 'DragNodes')) {\n                addEvent(ChartClass, 'load', onChartLoad);\n            }\n        }\n        /**\n         * Draggable mode:\n         * @private\n         */\n        function onChartLoad() {\n            const chart = this;\n            let mousedownUnbinder, mousemoveUnbinder, mouseupUnbinder;\n            if (chart.container) {\n                mousedownUnbinder = addEvent(chart.container, 'mousedown', (event) => {\n                    const point = chart.hoverPoint;\n                    if (point &&\n                        point.series &&\n                        point.series.hasDraggableNodes &&\n                        point.series.options.draggable) {\n                        point.series.onMouseDown(point, event);\n                        mousemoveUnbinder = addEvent(chart.container, 'mousemove', (e) => (point &&\n                            point.series &&\n                            point.series.onMouseMove(point, e)));\n                        mouseupUnbinder = addEvent(chart.container.ownerDocument, 'mouseup', (e) => {\n                            mousemoveUnbinder();\n                            mouseupUnbinder();\n                            return point &&\n                                point.series &&\n                                point.series.onMouseUp(point, e);\n                        });\n                    }\n                });\n            }\n            addEvent(chart, 'destroy', function () {\n                mousedownUnbinder();\n            });\n        }\n        /**\n         * Mouse down action, initializing drag&drop mode.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that event occurred.\n         * @param {Highcharts.PointerEventObject} event\n         *        Browser event, before normalization.\n         */\n        function onMouseDown(point, event) {\n            const normalizedEvent = this.chart.pointer?.normalize(event) || event;\n            point.fixedPosition = {\n                chartX: normalizedEvent.chartX,\n                chartY: normalizedEvent.chartY,\n                plotX: point.plotX,\n                plotY: point.plotY\n            };\n            point.inDragMode = true;\n        }\n        /**\n         * Mouse move action during drag&drop.\n         *\n         * @private\n         *\n         * @param {Highcharts.Point} point\n         *        The point that event occurred.\n         * @param {global.Event} event\n         *        Browser event, before normalization.\n         */\n        function onMouseMove(point, event) {\n            if (point.fixedPosition && point.inDragMode) {\n                const series = this, chart = series.chart, normalizedEvent = chart.pointer?.normalize(event) || event, diffX = point.fixedPosition.chartX - normalizedEvent.chartX, diffY = point.fixedPosition.chartY - normalizedEvent.chartY, graphLayoutsLookup = chart.graphLayoutsLookup;\n                let newPlotX, newPlotY;\n                // At least 5px to apply change (avoids simple click):\n                if (Math.abs(diffX) > 5 || Math.abs(diffY) > 5) {\n                    newPlotX = point.fixedPosition.plotX - diffX;\n                    newPlotY = point.fixedPosition.plotY - diffY;\n                    if (chart.isInsidePlot(newPlotX, newPlotY)) {\n                        point.plotX = newPlotX;\n                        point.plotY = newPlotY;\n                        point.hasDragged = true;\n                        this.redrawHalo(point);\n                        graphLayoutsLookup.forEach((layout) => {\n                            layout.restartSimulation();\n                        });\n                    }\n                }\n            }\n        }\n        /**\n         * Mouse up action, finalizing drag&drop.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that event occurred.\n         */\n        function onMouseUp(point) {\n            if (point.fixedPosition) {\n                if (point.hasDragged) {\n                    if (this.layout.enableSimulation) {\n                        this.layout.start();\n                    }\n                    else {\n                        this.chart.redraw();\n                    }\n                }\n                point.inDragMode = point.hasDragged = false;\n                if (!this.options.fixedDraggable) {\n                    delete point.fixedPosition;\n                }\n            }\n        }\n        /**\n         * Redraw halo on mousemove during the drag&drop action.\n         *\n         * @private\n         * @param {Highcharts.Point} point\n         *        The point that should show halo.\n         */\n        function redrawHalo(point) {\n            if (point && this.halo) {\n                this.halo.attr({\n                    d: point.haloPath(this.options.states.hover.halo.size)\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DragNodesComposition = {\n            compose,\n            onMouseDown,\n            onMouseMove,\n            onMouseUp,\n            redrawHalo\n        };\n\n        return DragNodesComposition;\n    });\n    _registerModule(_modules, 'Series/GraphLayoutComposition.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (A, H, U) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setAnimation } = A;\n        const { composed } = H;\n        const { addEvent, pushUnique } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const integrations = {};\n        const layouts = {};\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (pushUnique(composed, 'GraphLayout')) {\n                addEvent(ChartClass, 'afterPrint', onChartAfterPrint);\n                addEvent(ChartClass, 'beforePrint', onChartBeforePrint);\n                addEvent(ChartClass, 'predraw', onChartPredraw);\n                addEvent(ChartClass, 'render', onChartRender);\n            }\n        }\n        /**\n         * Re-enable simulation after print.\n         * @private\n         */\n        function onChartAfterPrint() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach((layout) => {\n                    // Return to default simulation\n                    layout.updateSimulation();\n                });\n                this.redraw();\n            }\n        }\n        /**\n         * Disable simulation before print if enabled.\n         * @private\n         */\n        function onChartBeforePrint() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach((layout) => {\n                    layout.updateSimulation(false);\n                });\n                this.redraw();\n            }\n        }\n        /**\n         * Clear previous layouts.\n         * @private\n         */\n        function onChartPredraw() {\n            if (this.graphLayoutsLookup) {\n                this.graphLayoutsLookup.forEach((layout) => {\n                    layout.stop();\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRender() {\n            let systemsStable, afterRender = false;\n            const layoutStep = (layout) => {\n                if (layout.maxIterations-- &&\n                    isFinite(layout.temperature) &&\n                    !layout.isStable() &&\n                    !layout.enableSimulation) {\n                    // Hook similar to build-in addEvent, but instead of\n                    // creating whole events logic, use just a function.\n                    // It's faster which is important for rAF code.\n                    // Used e.g. in packed-bubble series for bubble radius\n                    // calculations\n                    if (layout.beforeStep) {\n                        layout.beforeStep();\n                    }\n                    layout.step();\n                    systemsStable = false;\n                    afterRender = true;\n                }\n            };\n            if (this.graphLayoutsLookup) {\n                setAnimation(false, this);\n                // Start simulation\n                this.graphLayoutsLookup.forEach((layout) => layout.start());\n                // Just one sync step, to run different layouts similar to\n                // async mode.\n                while (!systemsStable) {\n                    systemsStable = true;\n                    this.graphLayoutsLookup.forEach(layoutStep);\n                }\n                if (afterRender) {\n                    this.series.forEach((series) => {\n                        if (series && series.layout) {\n                            series.render();\n                        }\n                    });\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const GraphLayoutComposition = {\n            compose,\n            integrations,\n            layouts\n        };\n\n        return GraphLayoutComposition;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubblePoint.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Series/Point.js'], _modules['Core/Series/SeriesRegistry.js']], function (Chart, Point, SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Grzegorz Blachlinski, Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { bubble: { prototype: { pointClass: BubblePoint } } } } = SeriesRegistry;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class PackedBubblePoint extends BubblePoint {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Destroy point.\n             * Then remove point from the layout.\n             * @private\n             */\n            destroy() {\n                if (this.series?.layout) {\n                    this.series.layout.removeElementFromCollection(this, this.series.layout.nodes);\n                }\n                return Point.prototype.destroy.apply(this, arguments);\n            }\n            firePointEvent() {\n                const series = this.series, seriesOptions = series.options;\n                if (this.isParentNode && seriesOptions.parentNode) {\n                    const temp = seriesOptions.allowPointSelect;\n                    seriesOptions.allowPointSelect = (seriesOptions.parentNode.allowPointSelect);\n                    Point.prototype.firePointEvent.apply(this, arguments);\n                    seriesOptions.allowPointSelect = temp;\n                }\n                else {\n                    Point.prototype.firePointEvent.apply(this, arguments);\n                }\n            }\n            select() {\n                const point = this, series = this.series, chart = series.chart;\n                if (point.isParentNode) {\n                    chart.getSelectedPoints = chart.getSelectedParentNodes;\n                    Point.prototype.select.apply(this, arguments);\n                    chart.getSelectedPoints = Chart.prototype.getSelectedPoints;\n                }\n                else {\n                    Point.prototype.select.apply(this, arguments);\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PackedBubblePoint;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubbleSeriesDefaults.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { isNumber } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * A packed bubble series is a two dimensional series type, where each point\n         * renders a value in X, Y position. Each point is drawn as a bubble\n         * where the bubbles don't overlap with each other and the radius\n         * of the bubble relates to the value.\n         *\n         * @sample highcharts/demo/packed-bubble/\n         *         Packed bubble chart\n         * @sample highcharts/demo/packed-bubble-split/\n         *         Split packed bubble chart\n         *\n         * @extends      plotOptions.bubble\n         * @excluding    connectEnds, connectNulls, cropThreshold, dragDrop, jitter,\n         *               keys, pointPlacement, sizeByAbsoluteValue, step, xAxis,\n         *               yAxis, zMax, zMin, dataSorting, boostThreshold,\n         *               boostBlending\n         * @product      highcharts\n         * @since        7.0.0\n         * @requires     highcharts-more\n         * @optionparent plotOptions.packedbubble\n         *\n         * @private\n         */\n        const PackedBubbleSeriesDefaults = {\n            /**\n             * Minimum bubble size. Bubbles will automatically size between the\n             * `minSize` and `maxSize` to reflect the value of each bubble.\n             * Can be either pixels (when no unit is given), or a percentage of\n             * the smallest one of the plot width and height, divided by the square\n             * root of total number of points.\n             *\n             * @sample highcharts/plotoptions/bubble-size/\n             *         Bubble size\n             *\n             * @type {number|string}\n             *\n             * @private\n             */\n            minSize: '10%',\n            /**\n             * Maximum bubble size. Bubbles will automatically size between the\n             * `minSize` and `maxSize` to reflect the value of each bubble.\n             * Can be either pixels (when no unit is given), or a percentage of\n             * the smallest one of the plot width and height, divided by the square\n             * root of total number of points.\n             *\n             * @sample highcharts/plotoptions/bubble-size/\n             *         Bubble size\n             *\n             * @type {number|string}\n             *\n             * @private\n             */\n            maxSize: '50%',\n            sizeBy: 'area',\n            zoneAxis: 'y',\n            crisp: false,\n            tooltip: {\n                pointFormat: 'Value: {point.value}'\n            },\n            /**\n             * Flag to determine if nodes are draggable or not. Available for\n             * graph with useSimulation set to true only.\n             *\n             * @since 7.1.0\n             *\n             * @private\n             */\n            draggable: true,\n            /**\n             * An option is giving a possibility to choose between using simulation\n             * for calculating bubble positions. These reflects in both animation\n             * and final position of bubbles. Simulation is also adding options to\n             * the series graph based on used layout. In case of big data sets, with\n             * any performance issues, it is possible to disable animation and pack\n             * bubble in a simple circular way.\n             *\n             * @sample highcharts/series-packedbubble/spiral/\n             *         useSimulation set to false\n             *\n             * @since 7.1.0\n             *\n             * @private\n             */\n            useSimulation: true,\n            /**\n             * Series options for parent nodes.\n             *\n             * @since 8.1.1\n             *\n             * @private\n             */\n            parentNode: {\n                /**\n                 * Allow this series' parent nodes to be selected\n                 * by clicking on the graph.\n                 *\n                 * @since 8.1.1\n                 */\n                allowPointSelect: false\n            },\n            /**\n             *\n             * @declare Highcharts.SeriesPackedBubbleDataLabelsOptionsObject\n             *\n             * @private\n             */\n            dataLabels: {\n                /**\n                 * The\n                 * [format string](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * specifying what to show for _node_ in the networkgraph. In v7.0\n                 * defaults to `{key}`, since v7.1 defaults to `undefined` and\n                 * `formatter` is used instead.\n                 *\n                 * @type      {string}\n                 * @since     7.0.0\n                 * @apioption plotOptions.packedbubble.dataLabels.format\n                 */\n                // eslint-disable-next-line valid-jsdoc\n                /**\n                 * Callback JavaScript function to format the data label for a node.\n                 * Note that if a `format` is defined, the format takes precedence\n                 * and the formatter is ignored.\n                 *\n                 * @type  {Highcharts.SeriesPackedBubbleDataLabelsFormatterCallbackFunction}\n                 * @since 7.0.0\n                 */\n                formatter: function () {\n                    const { numberFormatter } = this.series.chart;\n                    const { value } = this.point;\n                    return isNumber(value) ? numberFormatter(value, -1) : '';\n                },\n                /**\n                 * @type      {string}\n                 * @since     7.1.0\n                 * @apioption plotOptions.packedbubble.dataLabels.parentNodeFormat\n                 */\n                // eslint-disable-next-line valid-jsdoc\n                /**\n                 * @type  {Highcharts.SeriesPackedBubbleDataLabelsFormatterCallbackFunction}\n                 * @since 7.1.0\n                 */\n                parentNodeFormatter: function () {\n                    return this.name;\n                },\n                /**\n                 * @sample {highcharts} highcharts/series-packedbubble/packed-dashboard\n                 *         Dashboard with dataLabels on parentNodes\n                 *\n                 * @declare Highcharts.SeriesPackedBubbleDataLabelsTextPathOptionsObject\n                 * @since   7.1.0\n                 */\n                parentNodeTextPath: {\n                    /**\n                     * Presentation attributes for the text path.\n                     *\n                     * @type      {Highcharts.SVGAttributes}\n                     * @since     7.1.0\n                     * @apioption plotOptions.packedbubble.dataLabels.attributes\n                     */\n                    /**\n                     * Enable or disable `textPath` option for link's or marker's\n                     * data labels.\n                     *\n                     * @since 7.1.0\n                     */\n                    enabled: true\n                },\n                /**\n                 * Options for a _node_ label text which should follow marker's\n                 * shape.\n                 *\n                 * **Note:** Only SVG-based renderer supports this option.\n                 *\n                 * @extends   plotOptions.series.dataLabels.textPath\n                 * @apioption plotOptions.packedbubble.dataLabels.textPath\n                 */\n                padding: 0,\n                style: {\n                    transition: 'opacity 2000ms'\n                }\n            },\n            /**\n             * Options for layout algorithm when simulation is enabled. Inside there\n             * are options to change the speed, padding, initial bubbles positions\n             * and more.\n             *\n             * @extends   plotOptions.networkgraph.layoutAlgorithm\n             * @excluding approximation, attractiveForce, repulsiveForce, theta\n             * @since     7.1.0\n             *\n             * @private\n             */\n            layoutAlgorithm: {\n                /**\n                 * Initial layout algorithm for positioning nodes. Can be one of\n                 * the built-in options (\"circle\", \"random\") or a function where\n                 * positions should be set on each node (`this.nodes`) as\n                 * `node.plotX` and `node.plotY`.\n                 *\n                 * @sample highcharts/series-networkgraph/initial-positions/\n                 *         Initial positions with callback\n                 *\n                 * @type {\"circle\"|\"random\"|Function}\n                 */\n                initialPositions: 'circle',\n                /**\n                 * @sample highcharts/series-packedbubble/initial-radius/\n                 *         Initial radius set to 200\n                 *\n                 * @extends   plotOptions.networkgraph.layoutAlgorithm.initialPositionRadius\n                 * @excluding states\n                 */\n                initialPositionRadius: 20,\n                /**\n                 * The distance between two bubbles, when the algorithm starts to\n                 * treat two bubbles as overlapping. The `bubblePadding` is also the\n                 * expected distance between all the bubbles on simulation end.\n                 */\n                bubblePadding: 5,\n                /**\n                 * Whether bubbles should interact with their parentNode to keep\n                 * them inside.\n                 */\n                parentNodeLimit: false,\n                /**\n                 * Whether series should interact with each other or not. When\n                 * `parentNodeLimit` is set to true, thi option should be set to\n                 * false to avoid sticking points in wrong series parentNode.\n                 */\n                seriesInteraction: true,\n                /**\n                 * In case of split series, this option allows user to drag and\n                 * drop points between series, for changing point related series.\n                 *\n                 * @sample highcharts/series-packedbubble/packed-dashboard/\n                 *         Example of drag'n drop bubbles for bubble kanban\n                 */\n                dragBetweenSeries: false,\n                /**\n                 * Layout algorithm options for parent nodes.\n                 *\n                 * @extends   plotOptions.networkgraph.layoutAlgorithm\n                 * @excluding approximation, attractiveForce, enableSimulation,\n                 *            repulsiveForce, theta\n                 */\n                parentNodeOptions: {\n                    maxIterations: 400,\n                    gravitationalConstant: 0.03,\n                    maxSpeed: 50,\n                    initialPositionRadius: 100,\n                    seriesInteraction: true,\n                    /**\n                     * Styling options for parentNodes markers. Similar to\n                     * line.marker options.\n                     *\n                     * @sample highcharts/series-packedbubble/parentnode-style/\n                     *         Bubble size\n                     *\n                     * @extends   plotOptions.series.marker\n                     * @excluding states\n                     */\n                    marker: {\n                        fillColor: null,\n                        fillOpacity: 1,\n                        lineWidth: null,\n                        lineColor: null,\n                        symbol: 'circle'\n                    }\n                },\n                enableSimulation: true,\n                /**\n                 * Type of the algorithm used when positioning bubbles.\n                 * @ignore-option\n                 */\n                type: 'packedbubble',\n                /**\n                 * Integration type. Integration determines how forces are applied\n                 * on particles. The `packedbubble` integration is based on\n                 * the networkgraph `verlet` integration, where the new position\n                 * is based on a previous position without velocity:\n                 * `newPosition += previousPosition - newPosition`.\n                 *\n                 * @sample highcharts/series-networkgraph/forces/\n                 *\n                 * @ignore-option\n                 */\n                integration: 'packedbubble',\n                maxIterations: 1000,\n                /**\n                 * Whether to split series into individual groups or to mix all\n                 * series together.\n                 *\n                 * @since   7.1.0\n                 * @default false\n                 */\n                splitSeries: false,\n                /**\n                 * Max speed that node can get in one iteration. In terms of\n                 * simulation, it's a maximum translation (in pixels) that a node\n                 * can move (in both, x and y, dimensions). While `friction` is\n                 * applied on all nodes, max speed is applied only for nodes that\n                 * move very fast, for example small or disconnected ones.\n                 *\n                 * @see [layoutAlgorithm.integration](#series.networkgraph.layoutAlgorithm.integration)\n                 *\n                 * @see [layoutAlgorithm.friction](#series.networkgraph.layoutAlgorithm.friction)\n                 */\n                maxSpeed: 5,\n                gravitationalConstant: 0.01,\n                friction: -0.981\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A `packedbubble` series. If the [type](#series.packedbubble.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @type      {Object}\n         * @extends   series,plotOptions.packedbubble\n         * @excluding cropThreshold, dataParser, dataSorting, dataURL, dragDrop, stack,\n         *            boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.packedbubble\n         */\n        /**\n         * An array of data points for the series. For the `packedbubble` series type,\n         * points can be given in the following ways:\n         *\n         * 1.  An array of `values`.\n         *\n         *  ```js\n         *     data: [5, 1, 20]\n         *  ```\n         *\n         * 2.  An array of objects with named values. The objects are point\n         * configuration objects as seen below. If the total number of data points\n         * exceeds the series' [turboThreshold](#series.packedbubble.turboThreshold),\n         * this option is not available.\n         *\n         *  ```js\n         *     data: [{\n         *         value: 1,\n         *         name: \"Point2\",\n         *         color: \"#00FF00\"\n         *     }, {\n         *         value: 5,\n         *         name: \"Point1\",\n         *         color: \"#FF00FF\"\n         *     }]\n         *  ```\n         *\n         * @type      {Array<Object|Array>}\n         * @extends   series.line.data\n         * @excluding marker, x, y\n         * @sample    {highcharts} highcharts/series/data-array-of-objects/\n         *            Config objects\n         * @product   highcharts\n         * @apioption series.packedbubble.data\n         */\n        /**\n         * @type      {Highcharts.SeriesPackedBubbleDataLabelsOptionsObject|Array<Highcharts.SeriesPackedBubbleDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.packedbubble.data.dataLabels\n         */\n        /**\n         * @excluding enabled,enabledThreshold,height,radius,width\n         * @product   highcharts\n         * @apioption series.packedbubble.marker\n         */\n        ''; // Adds doclets above to transpiled file\n\n        return PackedBubbleSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/VerletIntegration.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Attractive force.\n         *\n         * In Verlet integration, force is applied on a node immediately to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         * @param {Highcharts.Point} link\n         *        Link that connects two nodes\n         * @param {number} force\n         *        Force calculated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function attractive(link, force, distanceXY) {\n            const massFactor = link.getMass(), translatedX = -distanceXY.x * force * this.diffTemperature, translatedY = -distanceXY.y * force * this.diffTemperature;\n            if (!link.fromNode.fixedPosition) {\n                link.fromNode.plotX -=\n                    translatedX * massFactor.fromNode / link.fromNode.degree;\n                link.fromNode.plotY -=\n                    translatedY * massFactor.fromNode / link.fromNode.degree;\n            }\n            if (!link.toNode.fixedPosition) {\n                link.toNode.plotX +=\n                    translatedX * massFactor.toNode / link.toNode.degree;\n                link.toNode.plotY +=\n                    translatedY * massFactor.toNode / link.toNode.degree;\n            }\n        }\n        /**\n         * Attractive force function. Can be replaced by API's\n         * `layoutAlgorithm.attractiveForce`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function attractiveForceFunction(d, k) {\n            // Used in API:\n            return (k - d) / d;\n        }\n        /**\n         * Barycenter force. Calculate and applys barycenter forces on the\n         * nodes. Making them closer to the center of their barycenter point.\n         *\n         * In Verlet integration, force is applied on a node immediately to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         */\n        function barycenter() {\n            const gravitationalConstant = this.options.gravitationalConstant || 0, xFactor = (this.barycenter.xFactor -\n                (this.box.left + this.box.width) / 2) * gravitationalConstant, yFactor = (this.barycenter.yFactor -\n                (this.box.top + this.box.height) / 2) * gravitationalConstant;\n            this.nodes.forEach(function (node) {\n                if (!node.fixedPosition) {\n                    node.plotX -=\n                        xFactor / node.mass / node.degree;\n                    node.plotY -=\n                        yFactor / node.mass / node.degree;\n                }\n            });\n        }\n        /**\n         * Estiamte the best possible distance between two nodes, making graph\n         * readable.\n         * @private\n         */\n        function getK(layout) {\n            return Math.pow(layout.box.width * layout.box.height / layout.nodes.length, 0.5);\n        }\n        /**\n         * Integration method.\n         *\n         * In Verlet integration, forces are applied on node immediately to it's\n         * `plotX` and `plotY` position.\n         *\n         * Verlet without velocity:\n         *\n         *    x(n+1) = 2 * x(n) - x(n-1) + A(T) * deltaT ^ 2\n         *\n         * where:\n         *     - x(n+1) - new position\n         *     - x(n) - current position\n         *     - x(n-1) - previous position\n         *\n         * Assuming A(t) = 0 (no acceleration) and (deltaT = 1) we get:\n         *\n         *     x(n+1) = x(n) + (x(n) - x(n-1))\n         *\n         * where:\n         *     - (x(n) - x(n-1)) - position change\n         *\n         * TO DO:\n         * Consider Verlet with velocity to support additional\n         * forces. Or even Time-Corrected Verlet by Jonathan\n         * \"lonesock\" Dummer\n         *\n         * @private\n         * @param {Highcharts.NetworkgraphLayout} layout layout object\n         * @param {Highcharts.Point} node node that should be translated\n         */\n        function integrate(layout, node) {\n            const friction = -layout.options.friction, maxSpeed = layout.options.maxSpeed, prevX = node.prevX, prevY = node.prevY, \n            // Apply friction:\n            frictionX = ((node.plotX + node.dispX -\n                prevX) * friction), frictionY = ((node.plotY + node.dispY -\n                prevY) * friction), abs = Math.abs, signX = abs(frictionX) / (frictionX || 1), // Need to deal with 0\n            signY = abs(frictionY) / (frictionY || 1), \n            // Apply max speed:\n            diffX = signX * Math.min(maxSpeed, Math.abs(frictionX)), diffY = signY * Math.min(maxSpeed, Math.abs(frictionY));\n            // Store for the next iteration:\n            node.prevX = node.plotX + node.dispX;\n            node.prevY = node.plotY + node.dispY;\n            // Update positions:\n            node.plotX += diffX;\n            node.plotY += diffY;\n            node.temperature = layout.vectorLength({\n                x: diffX,\n                y: diffY\n            });\n        }\n        /**\n         * Repulsive force.\n         *\n         * In Verlet integration, force is applied on a node immediately to it's\n         * `plotX` and `plotY` position.\n         *\n         * @private\n         * @param {Highcharts.Point} node\n         *        Node that should be translated by force.\n         * @param {number} force\n         *        Force calculated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function repulsive(node, force, distanceXY) {\n            const factor = force * this.diffTemperature / node.mass / node.degree;\n            if (!node.fixedPosition) {\n                node.plotX += distanceXY.x * factor;\n                node.plotY += distanceXY.y * factor;\n            }\n        }\n        /**\n         * Repulsive force function. Can be replaced by API's\n         * `layoutAlgorithm.repulsiveForce`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function repulsiveForceFunction(d, k) {\n            // Used in API:\n            return (k - d) / d * (k > d ? 1 : 0); // Force only for close nodes\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const VerletIntegration = {\n            attractive,\n            attractiveForceFunction,\n            barycenter,\n            getK,\n            integrate,\n            repulsive,\n            repulsiveForceFunction\n        };\n\n        return VerletIntegration;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubbleIntegration.js', [_modules['Core/Globals.js'], _modules['Series/Networkgraph/VerletIntegration.js']], function (H, VerletIntegration) {\n        /* *\n         *\n         *  (c) 2010-2024 Grzegorz Blachlinski, Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function barycenter() {\n            const layout = this, gravitationalConstant = layout.options.gravitationalConstant, box = layout.box, nodes = layout.nodes;\n            let centerX, centerY;\n            for (const node of nodes) {\n                if (layout.options.splitSeries && !node.isParentNode) {\n                    centerX = node.series.parentNode.plotX;\n                    centerY = node.series.parentNode.plotY;\n                }\n                else {\n                    centerX = box.width / 2;\n                    centerY = box.height / 2;\n                }\n                if (!node.fixedPosition) {\n                    node.plotX -=\n                        (node.plotX - centerX) *\n                            gravitationalConstant /\n                            (node.mass * Math.sqrt(nodes.length));\n                    node.plotY -=\n                        (node.plotY - centerY) *\n                            gravitationalConstant /\n                            (node.mass * Math.sqrt(nodes.length));\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function repulsive(node, force, distanceXY, repNode) {\n            const factor = (force * this.diffTemperature / node.mass /\n                node.degree), x = distanceXY.x * factor, y = distanceXY.y * factor;\n            if (!node.fixedPosition) {\n                node.plotX += x;\n                node.plotY += y;\n            }\n            if (!repNode.fixedPosition) {\n                repNode.plotX -= x;\n                repNode.plotY -= y;\n            }\n        }\n        /**\n         * @private\n         */\n        function repulsiveForceFunction(d, k, node, repNode) {\n            return Math.min(d, (node.marker.radius +\n                repNode.marker.radius) / 2);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const PackedBubbleIntegration = {\n            barycenter,\n            getK: noop,\n            integrate: VerletIntegration.integrate,\n            repulsive,\n            repulsiveForceFunction\n        };\n\n        return PackedBubbleIntegration;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/EulerIntegration.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Attractive force.\n         *\n         * In Euler integration, force is stored in a node, not changing it's\n         * position. Later, in `integrate()` forces are applied on nodes.\n         *\n         * @private\n         * @param {Highcharts.Point} link\n         *        Link that connects two nodes\n         * @param {number} force\n         *        Force calculated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         * @param {number} distanceR\n             */\n        function attractive(link, force, distanceXY, distanceR) {\n            const massFactor = link.getMass(), translatedX = (distanceXY.x / distanceR) * force, translatedY = (distanceXY.y / distanceR) * force;\n            if (!link.fromNode.fixedPosition) {\n                link.fromNode.dispX -=\n                    translatedX * massFactor.fromNode / link.fromNode.degree;\n                link.fromNode.dispY -=\n                    translatedY * massFactor.fromNode / link.fromNode.degree;\n            }\n            if (!link.toNode.fixedPosition) {\n                link.toNode.dispX +=\n                    translatedX * massFactor.toNode / link.toNode.degree;\n                link.toNode.dispY +=\n                    translatedY * massFactor.toNode / link.toNode.degree;\n            }\n        }\n        /**\n         * Attractive force function. Can be replaced by API's\n         * `layoutAlgorithm.attractiveForce`\n         *\n         * Other forces that can be used:\n         *\n         * basic, not recommended:\n         *    `function (d, k) { return d / k }`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function attractiveForceFunction(d, k) {\n            return d * d / k;\n        }\n        /**\n         * Barycenter force. Calculate and applys barycenter forces on the\n         * nodes. Making them closer to the center of their barycenter point.\n         *\n         * In Euler integration, force is stored in a node, not changing it's\n         * position. Later, in `integrate()` forces are applied on nodes.\n         *\n         * @private\n         */\n        function barycenter() {\n            const gravitationalConstant = this.options.gravitationalConstant, xFactor = this.barycenter.xFactor, yFactor = this.barycenter.yFactor;\n            this.nodes.forEach(function (node) {\n                if (!node.fixedPosition) {\n                    const degree = node.getDegree(), phi = degree * (1 + degree / 2);\n                    node.dispX += ((xFactor - node.plotX) *\n                        gravitationalConstant *\n                        phi / node.degree);\n                    node.dispY += ((yFactor - node.plotY) *\n                        gravitationalConstant *\n                        phi / node.degree);\n                }\n            });\n        }\n        /**\n         * Estimate the best possible distance between two nodes, making graph\n         * readable.\n         * @private\n         */\n        function getK(layout) {\n            return Math.pow(layout.box.width * layout.box.height / layout.nodes.length, 0.3);\n        }\n        /**\n         * Integration method.\n         *\n         * In Euler integration, force were stored in a node, not changing it's\n         * position. Now, in the integrator method, we apply changes.\n         *\n         * Euler:\n         *\n         * Basic form: `x(n+1) = x(n) + v(n)`\n         *\n         * With Rengoild-Fruchterman we get:\n         * `x(n+1) = x(n) + v(n) / length(v(n)) * min(v(n), temperature(n))`\n         * where:\n         * - `x(n+1)`: next position\n         * - `x(n)`: current position\n         * - `v(n)`: velocity (comes from net force)\n         * - `temperature(n)`: current temperature\n         *\n         * Known issues:\n         * Oscillations when force vector has the same magnitude but opposite\n         * direction in the next step. Potentially solved by decreasing force by\n         * `v * (1 / node.degree)`\n         *\n         * Note:\n         * Actually `min(v(n), temperature(n))` replaces simulated annealing.\n         *\n         * @private\n         * @param {Highcharts.NetworkgraphLayout} layout\n         *        Layout object\n         * @param {Highcharts.Point} node\n         *        Node that should be translated\n         */\n        function integrate(layout, node) {\n            node.dispX +=\n                node.dispX * layout.options.friction;\n            node.dispY +=\n                node.dispY * layout.options.friction;\n            const distanceR = node.temperature = layout.vectorLength({\n                x: node.dispX,\n                y: node.dispY\n            });\n            if (distanceR !== 0) {\n                node.plotX += (node.dispX / distanceR *\n                    Math.min(Math.abs(node.dispX), layout.temperature));\n                node.plotY += (node.dispY / distanceR *\n                    Math.min(Math.abs(node.dispY), layout.temperature));\n            }\n        }\n        /**\n         * Repulsive force.\n         *\n         * @private\n         * @param {Highcharts.Point} node\n         *        Node that should be translated by force.\n         * @param {number} force\n         *        Force calculated in `repulsiveForceFunction`\n         * @param {Highcharts.PositionObject} distanceXY\n         *        Distance between two nodes e.g. `{x, y}`\n         */\n        function repulsive(node, force, distanceXY, distanceR) {\n            node.dispX +=\n                (distanceXY.x / distanceR) * force / node.degree;\n            node.dispY +=\n                (distanceXY.y / distanceR) * force / node.degree;\n        }\n        /**\n         * Repulsive force function. Can be replaced by API's\n         * `layoutAlgorithm.repulsiveForce`.\n         *\n         * Other forces that can be used:\n         *\n         * basic, not recommended:\n         *    `function (d, k) { return k / d }`\n         *\n         * standard:\n         *    `function (d, k) { return k * k / d }`\n         *\n         * grid-variant:\n         *    `function (d, k) { return k * k / d * (2 * k - d > 0 ? 1 : 0) }`\n         *\n         * @private\n         * @param {number} d current distance between two nodes\n         * @param {number} k expected distance between two nodes\n         * @return {number} force\n         */\n        function repulsiveForceFunction(d, k) {\n            return k * k / d;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const EulerIntegration = {\n            attractive,\n            attractiveForceFunction,\n            barycenter,\n            getK,\n            integrate,\n            repulsive,\n            repulsiveForceFunction\n        };\n\n        return EulerIntegration;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/QuadTreeNode.js', [], function () {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The QuadTree node class. Used in Networkgraph chart as a base for Barnes-Hut\n         * approximation.\n         *\n         * @private\n         * @class\n         * @name Highcharts.QuadTreeNode\n         *\n         * @param {Highcharts.Dictionary<number>} box\n         *        Available space for the node\n         */\n        class QuadTreeNode {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(box) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * Read only. If QuadTreeNode is an external node, Point is stored in\n                 * `this.body`.\n                 *\n                 * @name Highcharts.QuadTreeNode#body\n                 * @type {boolean|Highcharts.Point}\n                 */\n                this.body = false;\n                /**\n                 * Read only. Internal nodes when created are empty to reserve the\n                 * space. If Point is added to this QuadTreeNode, QuadTreeNode is no\n                 * longer empty.\n                 *\n                 * @name Highcharts.QuadTreeNode#isEmpty\n                 * @type {boolean}\n                 */\n                this.isEmpty = false;\n                /**\n                 * Read only. Flag to determine if QuadTreeNode is internal (and has\n                 * subnodes with mass and central position) or external (bound to\n                 * Point).\n                 *\n                 * @name Highcharts.QuadTreeNode#isInternal\n                 * @type {boolean}\n                 */\n                this.isInternal = false;\n                /**\n                 * Read only. Array of subnodes. Empty if QuadTreeNode has just one\n                 * Point. When added another Point to this QuadTreeNode, array is\n                 * filled with four subnodes.\n                 *\n                 * @name Highcharts.QuadTreeNode#nodes\n                 * @type {Array<Highcharts.QuadTreeNode>}\n                 */\n                this.nodes = [];\n                /**\n                 * Read only. The available space for node.\n                 *\n                 * @name Highcharts.QuadTreeNode#box\n                 * @type {Highcharts.Dictionary<number>}\n                 */\n                this.box = box;\n                /**\n                 * Read only. The minium of width and height values.\n                 *\n                 * @name Highcharts.QuadTreeNode#boxSize\n                 * @type {number}\n                 */\n                this.boxSize = Math.min(box.width, box.height);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * When inserting another node into the box, that already hove one node,\n             * divide the available space into another four quadrants.\n             *\n             * Indexes of quadrants are:\n             * ```\n             * -------------               -------------\n             * |           |               |     |     |\n             * |           |               |  0  |  1  |\n             * |           |   divide()    |     |     |\n             * |     1     | ----------->  -------------\n             * |           |               |     |     |\n             * |           |               |  3  |  2  |\n             * |           |               |     |     |\n             * -------------               -------------\n             * ```\n             */\n            divideBox() {\n                const halfWidth = this.box.width / 2, halfHeight = this.box.height / 2;\n                // Top left\n                this.nodes[0] = new QuadTreeNode({\n                    left: this.box.left,\n                    top: this.box.top,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Top right\n                this.nodes[1] = new QuadTreeNode({\n                    left: this.box.left + halfWidth,\n                    top: this.box.top,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Bottom right\n                this.nodes[2] = new QuadTreeNode({\n                    left: this.box.left + halfWidth,\n                    top: this.box.top + halfHeight,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n                // Bottom left\n                this.nodes[3] = new QuadTreeNode({\n                    left: this.box.left,\n                    top: this.box.top + halfHeight,\n                    width: halfWidth,\n                    height: halfHeight\n                });\n            }\n            /**\n             * Determine which of the quadrants should be used when placing node in\n             * the QuadTree. Returned index is always in range `< 0 , 3 >`.\n             * @private\n             */\n            getBoxPosition(point) {\n                const left = point.plotX < this.box.left + this.box.width / 2, top = point.plotY < this.box.top + this.box.height / 2;\n                let index;\n                if (left) {\n                    if (top) {\n                        // Top left\n                        index = 0;\n                    }\n                    else {\n                        // Bottom left\n                        index = 3;\n                    }\n                }\n                else {\n                    if (top) {\n                        // Top right\n                        index = 1;\n                    }\n                    else {\n                        // Bottom right\n                        index = 2;\n                    }\n                }\n                return index;\n            }\n            /**\n             * Insert recursively point(node) into the QuadTree. If the given\n             * quadrant is already occupied, divide it into smaller quadrants.\n             *\n             * @param {Highcharts.Point} point\n             *        Point/node to be inserted\n             * @param {number} depth\n             *        Max depth of the QuadTree\n             */\n            insert(point, depth) {\n                let newQuadTreeNode;\n                if (this.isInternal) {\n                    // Internal node:\n                    this.nodes[this.getBoxPosition(point)].insert(point, depth - 1);\n                }\n                else {\n                    this.isEmpty = false;\n                    if (!this.body) {\n                        // First body in a quadrant:\n                        this.isInternal = false;\n                        this.body = point;\n                    }\n                    else {\n                        if (depth) {\n                            // Every other body in a quadrant:\n                            this.isInternal = true;\n                            this.divideBox();\n                            // Reinsert main body only once:\n                            if (this.body !== true) {\n                                this.nodes[this.getBoxPosition(this.body)]\n                                    .insert(this.body, depth - 1);\n                                this.body = true;\n                            }\n                            // Add second body:\n                            this.nodes[this.getBoxPosition(point)]\n                                .insert(point, depth - 1);\n                        }\n                        else {\n                            // We are below max allowed depth. That means either:\n                            // - really huge number of points\n                            // - falling two points into exactly the same position\n                            // In this case, create another node in the QuadTree.\n                            //\n                            // Alternatively we could add some noise to the\n                            // position, but that could result in different\n                            // rendered chart in exporting.\n                            newQuadTreeNode = new QuadTreeNode({\n                                top: point.plotX || NaN,\n                                left: point.plotY || NaN,\n                                // Width/height below 1px\n                                width: 0.1,\n                                height: 0.1\n                            });\n                            newQuadTreeNode.body = point;\n                            newQuadTreeNode.isInternal = false;\n                            this.nodes.push(newQuadTreeNode);\n                        }\n                    }\n                }\n            }\n            /**\n             * Each quad node requires it's mass and center position. That mass and\n             * position is used to imitate real node in the layout by approximation.\n             */\n            updateMassAndCenter() {\n                let mass = 0, plotX = 0, plotY = 0;\n                if (this.isInternal) {\n                    // Calculate weightened mass of the quad node:\n                    for (const pointMass of this.nodes) {\n                        if (!pointMass.isEmpty) {\n                            mass += pointMass.mass;\n                            plotX += pointMass.plotX * pointMass.mass;\n                            plotY += pointMass.plotY * pointMass.mass;\n                        }\n                    }\n                    plotX /= mass;\n                    plotY /= mass;\n                }\n                else if (this.body) {\n                    // Just one node, use coordinates directly:\n                    mass = this.body.mass;\n                    plotX = this.body.plotX;\n                    plotY = this.body.plotY;\n                }\n                // Store details:\n                this.mass = mass;\n                this.plotX = plotX;\n                this.plotY = plotY;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return QuadTreeNode;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/QuadTree.js', [_modules['Series/Networkgraph/QuadTreeNode.js']], function (QuadTreeNode) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The QuadTree class. Used in Networkgraph chart as a base for Barnes-Hut\n         * approximation.\n         *\n         * @private\n         * @class\n         * @name Highcharts.QuadTree\n         *\n         * @param {number} x\n         *        Left position of the plotting area\n         * @param {number} y\n         *        Top position of the plotting area\n         * @param {number} width\n         *        Width of the plotting area\n         * @param {number} height\n         *        Height of the plotting area\n         */\n        class QuadTree {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(x, y, width, height) {\n                // Boundary rectangle:\n                this.box = {\n                    left: x,\n                    top: y,\n                    width: width,\n                    height: height\n                };\n                this.maxDepth = 25;\n                this.root = new QuadTreeNode(this.box);\n                this.root.isInternal = true;\n                this.root.isRoot = true;\n                this.root.divideBox();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Calculate mass of the each QuadNode in the tree.\n             */\n            calculateMassAndCenter() {\n                this.visitNodeRecursive(null, null, function (node) {\n                    node.updateMassAndCenter();\n                });\n            }\n            /**\n             * Insert nodes into the QuadTree\n             *\n             * @param {Array<Highcharts.Point>} points\n             *        Points as nodes\n             */\n            insertNodes(points) {\n                for (const point of points) {\n                    this.root.insert(point, this.maxDepth);\n                }\n            }\n            /**\n             * Depth first treversal (DFS). Using `before` and `after` callbacks,\n             * we can get two results: preorder and postorder traversals, reminder:\n             *\n             * ```\n             *     (a)\n             *     / \\\n             *   (b) (c)\n             *   / \\\n             * (d) (e)\n             * ```\n             *\n             * DFS (preorder): `a -> b -> d -> e -> c`\n             *\n             * DFS (postorder): `d -> e -> b -> c -> a`\n             *\n             * @param {Highcharts.QuadTreeNode|null} node\n             *        QuadTree node\n             * @param {Function} [beforeCallback]\n             *        Function to be called before visiting children nodes.\n             * @param {Function} [afterCallback]\n             *        Function to be called after visiting children nodes.\n             */\n            visitNodeRecursive(node, beforeCallback, afterCallback) {\n                let goFurther;\n                if (!node) {\n                    node = this.root;\n                }\n                if (node === this.root && beforeCallback) {\n                    goFurther = beforeCallback(node);\n                }\n                if (goFurther === false) {\n                    return;\n                }\n                for (const qtNode of node.nodes) {\n                    if (qtNode.isInternal) {\n                        if (beforeCallback) {\n                            goFurther = beforeCallback(qtNode);\n                        }\n                        if (goFurther === false) {\n                            continue;\n                        }\n                        this.visitNodeRecursive(qtNode, beforeCallback, afterCallback);\n                    }\n                    else if (qtNode.body) {\n                        if (beforeCallback) {\n                            beforeCallback(qtNode.body);\n                        }\n                    }\n                    if (afterCallback) {\n                        afterCallback(qtNode);\n                    }\n                }\n                if (node === this.root && afterCallback) {\n                    afterCallback(node);\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return QuadTree;\n    });\n    _registerModule(_modules, 'Series/Networkgraph/ReingoldFruchtermanLayout.js', [_modules['Series/Networkgraph/EulerIntegration.js'], _modules['Core/Globals.js'], _modules['Series/GraphLayoutComposition.js'], _modules['Series/Networkgraph/QuadTree.js'], _modules['Core/Utilities.js'], _modules['Series/Networkgraph/VerletIntegration.js']], function (EulerIntegration, H, GraphLayout, QuadTree, U, VerletIntegration) {\n        /* *\n         *\n         *  Networkgraph series\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { win } = H;\n        const { clamp, defined, isFunction, fireEvent, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Reingold-Fruchterman algorithm from\n         * \"Graph Drawing by Force-directed Placement\" paper.\n         * @private\n         */\n        class ReingoldFruchtermanLayout {\n            constructor() {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                this.box = {};\n                this.currentStep = 0;\n                this.initialRendering = true;\n                this.links = [];\n                this.nodes = [];\n                this.series = [];\n                this.simulation = false;\n            }\n            static compose(ChartClass) {\n                GraphLayout.compose(ChartClass);\n                GraphLayout.integrations.euler = EulerIntegration;\n                GraphLayout.integrations.verlet = VerletIntegration;\n                GraphLayout.layouts['reingold-fruchterman'] =\n                    ReingoldFruchtermanLayout;\n            }\n            init(options) {\n                this.options = options;\n                this.nodes = [];\n                this.links = [];\n                this.series = [];\n                this.box = {\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                };\n                this.setInitialRendering(true);\n                this.integration =\n                    GraphLayout.integrations[options.integration];\n                this.enableSimulation = options.enableSimulation;\n                this.attractiveForce = pick(options.attractiveForce, this.integration.attractiveForceFunction);\n                this.repulsiveForce = pick(options.repulsiveForce, this.integration.repulsiveForceFunction);\n                this.approximation = options.approximation;\n            }\n            updateSimulation(enable) {\n                this.enableSimulation = pick(enable, this.options.enableSimulation);\n            }\n            start() {\n                const layout = this, series = this.series, options = this.options;\n                layout.currentStep = 0;\n                layout.forces = series[0] && series[0].forces || [];\n                layout.chart = series[0] && series[0].chart;\n                if (layout.initialRendering) {\n                    layout.initPositions();\n                    // Render elements in initial positions:\n                    series.forEach(function (s) {\n                        s.finishedAnimating = true; // #13169\n                        s.render();\n                    });\n                }\n                layout.setK();\n                layout.resetSimulation(options);\n                if (layout.enableSimulation) {\n                    layout.step();\n                }\n            }\n            step() {\n                const anyLayout = this, allSeries = this.series;\n                // Algorithm:\n                this.currentStep++;\n                if (this.approximation === 'barnes-hut') {\n                    this.createQuadTree();\n                    this.quadTree.calculateMassAndCenter();\n                }\n                for (const forceName of this.forces || []) {\n                    anyLayout[forceName + 'Forces'](this.temperature);\n                }\n                // Limit to the plotting area and cool down:\n                this.applyLimits();\n                // Cool down the system:\n                this.temperature = this.coolDown(this.startTemperature, this.diffTemperature, this.currentStep);\n                this.prevSystemTemperature = this.systemTemperature;\n                this.systemTemperature = this.getSystemTemperature();\n                if (this.enableSimulation) {\n                    for (const series of allSeries) {\n                        // Chart could be destroyed during the simulation\n                        if (series.chart) {\n                            series.render();\n                        }\n                    }\n                    if (this.maxIterations-- &&\n                        isFinite(this.temperature) &&\n                        !this.isStable()) {\n                        if (this.simulation) {\n                            win.cancelAnimationFrame(this.simulation);\n                        }\n                        this.simulation = win.requestAnimationFrame(() => this.step());\n                    }\n                    else {\n                        this.simulation = false;\n                        this.series.forEach((s) => {\n                            fireEvent(s, 'afterSimulation');\n                        });\n                    }\n                }\n            }\n            stop() {\n                if (this.simulation) {\n                    win.cancelAnimationFrame(this.simulation);\n                }\n            }\n            setArea(x, y, w, h) {\n                this.box = {\n                    left: x,\n                    top: y,\n                    width: w,\n                    height: h\n                };\n            }\n            setK() {\n                // Optimal distance between nodes,\n                // available space around the node:\n                this.k = this.options.linkLength || this.integration.getK(this);\n            }\n            addElementsToCollection(elements, collection) {\n                for (const element of elements) {\n                    if (collection.indexOf(element) === -1) {\n                        collection.push(element);\n                    }\n                }\n            }\n            removeElementFromCollection(element, collection) {\n                const index = collection.indexOf(element);\n                if (index !== -1) {\n                    collection.splice(index, 1);\n                }\n            }\n            clear() {\n                this.nodes.length = 0;\n                this.links.length = 0;\n                this.series.length = 0;\n                this.resetSimulation();\n            }\n            resetSimulation() {\n                this.forcedStop = false;\n                this.systemTemperature = 0;\n                this.setMaxIterations();\n                this.setTemperature();\n                this.setDiffTemperature();\n            }\n            restartSimulation() {\n                if (!this.simulation) {\n                    // When dragging nodes, we don't need to calculate\n                    // initial positions and rendering nodes:\n                    this.setInitialRendering(false);\n                    // Start new simulation:\n                    if (!this.enableSimulation) {\n                        // Run only one iteration to speed things up:\n                        this.setMaxIterations(1);\n                    }\n                    else {\n                        this.start();\n                    }\n                    if (this.chart) {\n                        this.chart.redraw();\n                    }\n                    // Restore defaults:\n                    this.setInitialRendering(true);\n                }\n                else {\n                    // Extend current simulation:\n                    this.resetSimulation();\n                }\n            }\n            setMaxIterations(maxIterations) {\n                this.maxIterations = pick(maxIterations, this.options.maxIterations);\n            }\n            setTemperature() {\n                this.temperature = this.startTemperature =\n                    Math.sqrt(this.nodes.length);\n            }\n            setDiffTemperature() {\n                this.diffTemperature = this.startTemperature /\n                    (this.options.maxIterations + 1);\n            }\n            setInitialRendering(enable) {\n                this.initialRendering = enable;\n            }\n            createQuadTree() {\n                this.quadTree = new QuadTree(this.box.left, this.box.top, this.box.width, this.box.height);\n                this.quadTree.insertNodes(this.nodes);\n            }\n            initPositions() {\n                const initialPositions = this.options.initialPositions;\n                if (isFunction(initialPositions)) {\n                    initialPositions.call(this);\n                    for (const node of this.nodes) {\n                        if (!defined(node.prevX)) {\n                            node.prevX = node.plotX;\n                        }\n                        if (!defined(node.prevY)) {\n                            node.prevY = node.plotY;\n                        }\n                        node.dispX = 0;\n                        node.dispY = 0;\n                    }\n                }\n                else if (initialPositions === 'circle') {\n                    this.setCircularPositions();\n                }\n                else {\n                    this.setRandomPositions();\n                }\n            }\n            setCircularPositions() {\n                const box = this.box, nodes = this.nodes, nodesLength = nodes.length + 1, angle = 2 * Math.PI / nodesLength, rootNodes = nodes.filter(function (node) {\n                    return node.linksTo.length === 0;\n                }), visitedNodes = {}, radius = this.options.initialPositionRadius, addToNodes = (node) => {\n                    for (const link of node.linksFrom || []) {\n                        if (!visitedNodes[link.toNode.id]) {\n                            visitedNodes[link.toNode.id] = true;\n                            sortedNodes.push(link.toNode);\n                            addToNodes(link.toNode);\n                        }\n                    }\n                };\n                let sortedNodes = [];\n                // Start with identified root nodes an sort the nodes by their\n                // hierarchy. In trees, this ensures that branches don't cross\n                // eachother.\n                for (const rootNode of rootNodes) {\n                    sortedNodes.push(rootNode);\n                    addToNodes(rootNode);\n                }\n                // Cyclic tree, no root node found\n                if (!sortedNodes.length) {\n                    sortedNodes = nodes;\n                    // Dangling, cyclic trees\n                }\n                else {\n                    for (const node of nodes) {\n                        if (sortedNodes.indexOf(node) === -1) {\n                            sortedNodes.push(node);\n                        }\n                    }\n                }\n                let node;\n                // Initial positions are laid out along a small circle, appearing\n                // as a cluster in the middle\n                for (let i = 0, iEnd = sortedNodes.length; i < iEnd; ++i) {\n                    node = sortedNodes[i];\n                    node.plotX = node.prevX = pick(node.plotX, box.width / 2 + radius * Math.cos(i * angle));\n                    node.plotY = node.prevY = pick(node.plotY, box.height / 2 + radius * Math.sin(i * angle));\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            }\n            setRandomPositions() {\n                const box = this.box, nodes = this.nodes, nodesLength = nodes.length + 1, \n                /**\n                 * Return a repeatable, quasi-random number based on an integer\n                 * input. For the initial positions\n                 * @private\n                 */\n                unrandom = (n) => {\n                    let rand = n * n / Math.PI;\n                    rand = rand - Math.floor(rand);\n                    return rand;\n                };\n                let node;\n                // Initial positions:\n                for (let i = 0, iEnd = nodes.length; i < iEnd; ++i) {\n                    node = nodes[i];\n                    node.plotX = node.prevX = pick(node.plotX, box.width * unrandom(i));\n                    node.plotY = node.prevY = pick(node.plotY, box.height * unrandom(nodesLength + i));\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            }\n            force(name, ...args) {\n                this.integration[name].apply(this, args);\n            }\n            barycenterForces() {\n                this.getBarycenter();\n                this.force('barycenter');\n            }\n            getBarycenter() {\n                let systemMass = 0, cx = 0, cy = 0;\n                for (const node of this.nodes) {\n                    cx += node.plotX * node.mass;\n                    cy += node.plotY * node.mass;\n                    systemMass += node.mass;\n                }\n                this.barycenter = {\n                    x: cx,\n                    y: cy,\n                    xFactor: cx / systemMass,\n                    yFactor: cy / systemMass\n                };\n                return this.barycenter;\n            }\n            barnesHutApproximation(node, quadNode) {\n                const distanceXY = this.getDistXY(node, quadNode), distanceR = this.vectorLength(distanceXY);\n                let goDeeper, force;\n                if (node !== quadNode && distanceR !== 0) {\n                    if (quadNode.isInternal) {\n                        // Internal node:\n                        if (quadNode.boxSize / distanceR <\n                            this.options.theta &&\n                            distanceR !== 0) {\n                            // Treat as an external node:\n                            force = this.repulsiveForce(distanceR, this.k);\n                            this.force('repulsive', node, force * quadNode.mass, distanceXY, distanceR);\n                            goDeeper = false;\n                        }\n                        else {\n                            // Go deeper:\n                            goDeeper = true;\n                        }\n                    }\n                    else {\n                        // External node, direct force:\n                        force = this.repulsiveForce(distanceR, this.k);\n                        this.force('repulsive', node, force * quadNode.mass, distanceXY, distanceR);\n                    }\n                }\n                return goDeeper;\n            }\n            repulsiveForces() {\n                if (this.approximation === 'barnes-hut') {\n                    for (const node of this.nodes) {\n                        this.quadTree.visitNodeRecursive(null, (quadNode) => (this.barnesHutApproximation(node, quadNode)));\n                    }\n                }\n                else {\n                    let force, distanceR, distanceXY;\n                    for (const node of this.nodes) {\n                        for (const repNode of this.nodes) {\n                            if (\n                            // Node cannot repulse itself:\n                            node !== repNode &&\n                                // Only close nodes affect each other:\n                                // layout.getDistR(node, repNode) < 2 * k &&\n                                // Not dragged:\n                                !node.fixedPosition) {\n                                distanceXY = this.getDistXY(node, repNode);\n                                distanceR = this.vectorLength(distanceXY);\n                                if (distanceR !== 0) {\n                                    force = this.repulsiveForce(distanceR, this.k);\n                                    this.force('repulsive', node, force * repNode.mass, distanceXY, distanceR);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            attractiveForces() {\n                let distanceXY, distanceR, force;\n                for (const link of this.links) {\n                    if (link.fromNode && link.toNode) {\n                        distanceXY = this.getDistXY(link.fromNode, link.toNode);\n                        distanceR = this.vectorLength(distanceXY);\n                        if (distanceR !== 0) {\n                            force = this.attractiveForce(distanceR, this.k);\n                            this.force('attractive', link, force, distanceXY, distanceR);\n                        }\n                    }\n                }\n            }\n            applyLimits() {\n                const nodes = this.nodes;\n                for (const node of nodes) {\n                    if (node.fixedPosition) {\n                        continue;\n                    }\n                    this.integration.integrate(this, node);\n                    this.applyLimitBox(node, this.box);\n                    // Reset displacement:\n                    node.dispX = 0;\n                    node.dispY = 0;\n                }\n            }\n            /**\n             * External box that nodes should fall. When hitting an edge, node\n             * should stop or bounce.\n             * @private\n             */\n            applyLimitBox(node, box) {\n                const radius = node.radius;\n                /*\n                TO DO: Consider elastic collision instead of stopping.\n                o' means end position when hitting plotting area edge:\n\n                - \"inelastic\":\n                o\n                    \\\n                ______\n                |  o'\n                |   \\\n                |    \\\n\n                - \"elastic\"/\"bounced\":\n                o\n                    \\\n                ______\n                |  ^\n                | / \\\n                |o'  \\\n\n                Euler sample:\n                if (plotX < 0) {\n                    plotX = 0;\n                    dispX *= -1;\n                }\n\n                if (plotX > box.width) {\n                    plotX = box.width;\n                    dispX *= -1;\n                }\n\n                */\n                // Limit X-coordinates:\n                node.plotX = clamp(node.plotX, box.left + radius, box.width - radius);\n                // Limit Y-coordinates:\n                node.plotY = clamp(node.plotY, box.top + radius, box.height - radius);\n            }\n            /**\n             * From \"A comparison of simulated annealing cooling strategies\" by\n             * Nourani and Andresen work.\n             * @private\n             */\n            coolDown(temperature, temperatureStep, currentStep) {\n                // Logarithmic:\n                /*\n                return Math.sqrt(this.nodes.length) -\n                    Math.log(\n                        currentStep * layout.diffTemperature\n                    );\n                */\n                // Exponential:\n                /*\n                let alpha = 0.1;\n                layout.temperature = Math.sqrt(layout.nodes.length) *\n                    Math.pow(alpha, layout.diffTemperature);\n                */\n                // Linear:\n                return temperature - temperatureStep * currentStep;\n            }\n            isStable() {\n                return Math.abs(this.systemTemperature -\n                    this.prevSystemTemperature) < 0.00001 || this.temperature <= 0;\n            }\n            getSystemTemperature() {\n                let value = 0;\n                for (const node of this.nodes) {\n                    value += node.temperature;\n                }\n                return value;\n            }\n            vectorLength(vector) {\n                return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n            }\n            getDistR(nodeA, nodeB) {\n                const distance = this.getDistXY(nodeA, nodeB);\n                return this.vectorLength(distance);\n            }\n            getDistXY(nodeA, nodeB) {\n                const xDist = nodeA.plotX - nodeB.plotX, yDist = nodeA.plotY - nodeB.plotY;\n                return {\n                    x: xDist,\n                    y: yDist,\n                    absX: Math.abs(xDist),\n                    absY: Math.abs(yDist)\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ReingoldFruchtermanLayout;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubbleLayout.js', [_modules['Series/GraphLayoutComposition.js'], _modules['Series/PackedBubble/PackedBubbleIntegration.js'], _modules['Series/Networkgraph/ReingoldFruchtermanLayout.js'], _modules['Core/Utilities.js']], function (GraphLayout, PackedBubbleIntegration, ReingoldFruchtermanLayout, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Grzegorz Blachlinski, Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function chartGetSelectedParentNodes() {\n            const allSeries = this.series, selectedParentsNodes = [];\n            allSeries.forEach((series) => {\n                if (series.parentNode && series.parentNode.selected) {\n                    selectedParentsNodes.push(series.parentNode);\n                }\n            });\n            return selectedParentsNodes;\n        }\n        /**\n         * Remove accumulated data points to redistribute all of them again\n         * (i.e after hiding series by legend)\n         * @private\n         */\n        function onChartBeforeRedraw() {\n            if (this.allDataPoints) {\n                delete this.allDataPoints;\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class PackedBubbleLayout extends ReingoldFruchtermanLayout {\n            constructor() {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                super(...arguments);\n                this.index = NaN;\n                this.nodes = [];\n                this.series = [];\n            }\n            static compose(ChartClass) {\n                ReingoldFruchtermanLayout.compose(ChartClass);\n                GraphLayout.integrations.packedbubble = PackedBubbleIntegration;\n                GraphLayout.layouts.packedbubble = PackedBubbleLayout;\n                const chartProto = ChartClass.prototype;\n                if (!chartProto.getSelectedParentNodes) {\n                    addEvent(ChartClass, 'beforeRedraw', onChartBeforeRedraw);\n                    chartProto.getSelectedParentNodes = chartGetSelectedParentNodes;\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            beforeStep() {\n                if (this.options.marker) {\n                    this.series.forEach((series) => {\n                        if (series) {\n                            series.calculateParentRadius();\n                        }\n                    });\n                }\n            }\n            // #14439, new stable check.\n            isStable() {\n                const tempDiff = Math.abs(this.prevSystemTemperature -\n                    this.systemTemperature);\n                const upScaledTemperature = 10 * this.systemTemperature /\n                    Math.sqrt(this.nodes.length);\n                return Math.abs(upScaledTemperature) < 1 &&\n                    tempDiff < 0.00001 ||\n                    this.temperature <= 0;\n            }\n            setCircularPositions() {\n                const layout = this, box = layout.box, nodes = layout.nodes, nodesLength = nodes.length + 1, angle = 2 * Math.PI / nodesLength, radius = layout.options.initialPositionRadius;\n                let centerX, centerY, index = 0;\n                for (const node of nodes) {\n                    if (layout.options.splitSeries &&\n                        !node.isParentNode) {\n                        centerX = node.series.parentNode.plotX;\n                        centerY = node.series.parentNode.plotY;\n                    }\n                    else {\n                        centerX = box.width / 2;\n                        centerY = box.height / 2;\n                    }\n                    node.plotX = node.prevX = pick(node.plotX, centerX +\n                        radius * Math.cos(node.index || index * angle));\n                    node.plotY = node.prevY = pick(node.plotY, centerY +\n                        radius * Math.sin(node.index || index * angle));\n                    node.dispX = 0;\n                    node.dispY = 0;\n                    index++;\n                }\n            }\n            repulsiveForces() {\n                const layout = this, bubblePadding = layout.options.bubblePadding, nodes = layout.nodes;\n                let force, distanceR, distanceXY;\n                nodes.forEach((node) => {\n                    node.degree = node.mass;\n                    node.neighbours = 0;\n                    nodes.forEach((repNode) => {\n                        force = 0;\n                        if (\n                        // Node cannot repulse itself:\n                        node !== repNode &&\n                            // Only close nodes affect each other:\n                            // Not dragged:\n                            !node.fixedPosition &&\n                            (layout.options.seriesInteraction ||\n                                node.series === repNode.series)) {\n                            distanceXY = layout.getDistXY(node, repNode);\n                            distanceR = (layout.vectorLength(distanceXY) -\n                                (node.marker.radius +\n                                    repNode.marker.radius +\n                                    bubblePadding));\n                            // TODO padding configurable\n                            if (distanceR < 0) {\n                                node.degree += 0.01;\n                                node.neighbours++;\n                                force = layout.repulsiveForce(-distanceR / Math.sqrt(node.neighbours), layout.k, node, repNode);\n                            }\n                            layout.force('repulsive', node, force * repNode.mass, distanceXY, repNode, distanceR);\n                        }\n                    });\n                });\n            }\n            applyLimitBox(node, box) {\n                const layout = this, factor = 0.01;\n                let distanceXY, distanceR;\n                // `parentNodeLimit` should be used together with seriesInteraction:\n                // false\n                if (layout.options.splitSeries &&\n                    !node.isParentNode &&\n                    layout.options.parentNodeLimit) {\n                    distanceXY = layout.getDistXY(node, node.series.parentNode);\n                    distanceR = (node.series.parentNodeRadius -\n                        node.marker.radius -\n                        layout.vectorLength(distanceXY));\n                    if (distanceR < 0 &&\n                        distanceR > -2 * node.marker.radius) {\n                        node.plotX -= distanceXY.x * factor;\n                        node.plotY -= distanceXY.y * factor;\n                    }\n                }\n                super.applyLimitBox(node, box);\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        GraphLayout.layouts.packedbubble = PackedBubbleLayout;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PackedBubbleLayout;\n    });\n    _registerModule(_modules, 'Series/SimulationSeriesUtilities.js', [_modules['Core/Utilities.js'], _modules['Core/Animation/AnimationUtilities.js']], function (U, A) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { merge, syncTimeout } = U;\n        const { animObject } = A;\n        /**\n         * Create a setTimeout for the first drawDataLabels()\n         * based on the dataLabels.animation.defer value\n         * for series which have enabled simulation.\n         * @private\n         */\n        function initDataLabelsDefer() {\n            const dlOptions = this.options.dataLabels;\n            // Method drawDataLabels() fires for the first time after\n            // dataLabels.animation.defer time unless\n            // the dataLabels.animation = false or dataLabels.defer = false\n            // or if the simulation is disabled\n            if (!dlOptions?.defer ||\n                !this.options.layoutAlgorithm?.enableSimulation) {\n                this.deferDataLabels = false;\n            }\n            else {\n                syncTimeout(() => {\n                    this.deferDataLabels = false;\n                }, dlOptions ? animObject(dlOptions.animation).defer : 0);\n            }\n        }\n        /**\n         * Initialize the SVG group for the DataLabels with correct opacities\n         * and correct styles so that the animation for the series that have\n         * simulation enabled works fine.\n         * @private\n         */\n        function initDataLabels() {\n            const series = this, dlOptions = series.options.dataLabels;\n            if (!series.dataLabelsGroup) {\n                const dataLabelsGroup = this.initDataLabelsGroup();\n                // Apply the dataLabels.style not only to the\n                // individual dataLabels but also to the entire group\n                if (!series.chart.styledMode && dlOptions?.style) {\n                    dataLabelsGroup.css(dlOptions.style);\n                }\n                // Initialize the opacity of the group to 0 (start of animation)\n                dataLabelsGroup.attr({ opacity: 0 });\n                if (series.visible) { // #2597, #3023, #3024\n                    dataLabelsGroup.show();\n                }\n                return dataLabelsGroup;\n            }\n            // Place it on first and subsequent (redraw) calls\n            series.dataLabelsGroup.attr(merge({ opacity: 1 }, this.getPlotBox('data-labels')));\n            return series.dataLabelsGroup;\n        }\n        const DataLabelsDeferUtils = {\n            initDataLabels,\n            initDataLabelsDefer\n        };\n\n        return DataLabelsDeferUtils;\n    });\n    _registerModule(_modules, 'Extensions/TextPath.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  Highcharts module with textPath functionality.\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { deg2rad } = H;\n        const { addEvent, merge, uniqueKey, defined, extend } = U;\n        /**\n         * Set a text path for a `text` or `label` element, allowing the text to\n         * flow along a path.\n         *\n         * In order to unset the path for an existing element, call `setTextPath`\n         * with `{ enabled: false }` as the second argument.\n         *\n         * Text path support is not bundled into `highcharts.js`, and requires the\n         * `modules/textpath.js` file. However, it is included in the script files of\n         * those series types that use it by default\n         *\n         * @sample highcharts/members/renderer-textpath/ Text path demonstrated\n         *\n         * @function Highcharts.SVGElement#setTextPath\n         *\n         * @param {Highcharts.SVGElement|undefined} path\n         *        Path to follow. If undefined, it allows changing options for the\n         *        existing path.\n         *\n         * @param {Highcharts.DataLabelsTextPathOptionsObject} textPathOptions\n         *        Options.\n         *\n         * @return {Highcharts.SVGElement} Returns the SVGElement for chaining.\n         */\n        function setTextPath(path, textPathOptions) {\n            // Defaults\n            textPathOptions = merge(true, {\n                enabled: true,\n                attributes: {\n                    dy: -5,\n                    startOffset: '50%',\n                    textAnchor: 'middle'\n                }\n            }, textPathOptions);\n            const url = this.renderer.url, textWrapper = this.text || this, textPath = textWrapper.textPath, { attributes, enabled } = textPathOptions;\n            path = path || (textPath && textPath.path);\n            // Remove previously added event\n            if (textPath) {\n                textPath.undo();\n            }\n            if (path && enabled) {\n                const undo = addEvent(textWrapper, 'afterModifyTree', (e) => {\n                    if (path && enabled) {\n                        // Set ID for the path\n                        let textPathId = path.attr('id');\n                        if (!textPathId) {\n                            path.attr('id', textPathId = uniqueKey());\n                        }\n                        // Set attributes for the <text>\n                        const textAttribs = {\n                            // `dx`/`dy` options must by set on <text> (parent), the\n                            // rest should be set on <textPath>\n                            x: 0,\n                            y: 0\n                        };\n                        if (defined(attributes.dx)) {\n                            textAttribs.dx = attributes.dx;\n                            delete attributes.dx;\n                        }\n                        if (defined(attributes.dy)) {\n                            textAttribs.dy = attributes.dy;\n                            delete attributes.dy;\n                        }\n                        textWrapper.attr(textAttribs);\n                        // Handle label properties\n                        this.attr({ transform: '' });\n                        if (this.box) {\n                            this.box = this.box.destroy();\n                        }\n                        // Wrap the nodes in a textPath\n                        const children = e.nodes.slice(0);\n                        e.nodes.length = 0;\n                        e.nodes[0] = {\n                            tagName: 'textPath',\n                            attributes: extend(attributes, {\n                                'text-anchor': attributes.textAnchor,\n                                href: `${url}#${textPathId}`\n                            }),\n                            children\n                        };\n                    }\n                });\n                // Set the reference\n                textWrapper.textPath = { path, undo };\n            }\n            else {\n                textWrapper.attr({ dx: 0, dy: 0 });\n                delete textWrapper.textPath;\n            }\n            if (this.added) {\n                // Rebuild text after added\n                textWrapper.textCache = '';\n                this.renderer.buildText(textWrapper);\n            }\n            return this;\n        }\n        /**\n         * Attach a polygon to a bounding box if the element contains a textPath.\n         *\n         * @function Highcharts.SVGElement#setPolygon\n         *\n         * @param {any} event\n         *        An event containing a bounding box object\n         *\n         * @return {Highcharts.BBoxObject} Returns the bounding box object.\n         */\n        function setPolygon(event) {\n            const bBox = event.bBox, tp = this.element?.querySelector('textPath');\n            if (tp) {\n                const polygon = [], { b, h } = this.renderer.fontMetrics(this.element), descender = h - b, lineCleanerRegex = new RegExp('(<tspan>|' +\n                    '<tspan(?!\\\\sclass=\"highcharts-br\")[^>]*>|' +\n                    '<\\\\/tspan>)', 'g'), lines = tp\n                    .innerHTML\n                    .replace(lineCleanerRegex, '')\n                    .split(/<tspan class=\"highcharts-br\"[^>]*>/), numOfLines = lines.length;\n                // Calculate top and bottom coordinates for\n                // either the start or the end of a single\n                // character, and append it to the polygon.\n                const appendTopAndBottom = (charIndex, positionOfChar) => {\n                    const { x, y } = positionOfChar, rotation = (tp.getRotationOfChar(charIndex) - 90) * deg2rad, cosRot = Math.cos(rotation), sinRot = Math.sin(rotation);\n                    return [\n                        [\n                            x - descender * cosRot,\n                            y - descender * sinRot\n                        ],\n                        [\n                            x + b * cosRot,\n                            y + b * sinRot\n                        ]\n                    ];\n                };\n                for (let i = 0, lineIndex = 0; lineIndex < numOfLines; lineIndex++) {\n                    const line = lines[lineIndex], lineLen = line.length;\n                    for (let lineCharIndex = 0; lineCharIndex < lineLen; lineCharIndex += 5) {\n                        try {\n                            const srcCharIndex = (i +\n                                lineCharIndex +\n                                lineIndex), [lower, upper] = appendTopAndBottom(srcCharIndex, tp.getStartPositionOfChar(srcCharIndex));\n                            if (lineCharIndex === 0) {\n                                polygon.push(upper);\n                                polygon.push(lower);\n                            }\n                            else {\n                                if (lineIndex === 0) {\n                                    polygon.unshift(upper);\n                                }\n                                if (lineIndex === numOfLines - 1) {\n                                    polygon.push(lower);\n                                }\n                            }\n                        }\n                        catch (e) {\n                            // Safari fails on getStartPositionOfChar even if the\n                            // character is within the `textContent.length`\n                            break;\n                        }\n                    }\n                    i += lineLen - 1;\n                    try {\n                        const srcCharIndex = i + lineIndex, charPos = tp.getEndPositionOfChar(srcCharIndex), [lower, upper] = appendTopAndBottom(srcCharIndex, charPos);\n                        polygon.unshift(upper);\n                        polygon.unshift(lower);\n                    }\n                    catch (e) {\n                        // Safari fails on getStartPositionOfChar even if the character\n                        // is within the `textContent.length`\n                        break;\n                    }\n                }\n                // Close it\n                if (polygon.length) {\n                    polygon.push(polygon[0].slice());\n                }\n                bBox.polygon = polygon;\n            }\n            return bBox;\n        }\n        /**\n         * Draw text along a textPath for a dataLabel.\n         *\n         * @function Highcharts.SVGElement#setTextPath\n         *\n         * @param {any} event\n         *        An event containing label options\n         *\n         * @return {void}\n         */\n        function drawTextPath(event) {\n            const labelOptions = event.labelOptions, point = event.point, textPathOptions = (labelOptions[point.formatPrefix + 'TextPath'] ||\n                labelOptions.textPath);\n            if (textPathOptions && !labelOptions.useHTML) {\n                this.setTextPath(point.getDataLabelPath?.(this) || point.graphic, textPathOptions);\n                if (point.dataLabelPath &&\n                    !textPathOptions.enabled) {\n                    // Clean the DOM\n                    point.dataLabelPath = (point.dataLabelPath.destroy());\n                }\n            }\n        }\n        function compose(SVGElementClass) {\n            addEvent(SVGElementClass, 'afterGetBBox', setPolygon);\n            addEvent(SVGElementClass, 'beforeAddingDataLabel', drawTextPath);\n            const svgElementProto = SVGElementClass.prototype;\n            if (!svgElementProto.setTextPath) {\n                svgElementProto.setTextPath = setTextPath;\n            }\n        }\n        const TextPath = {\n            compose\n        };\n\n        return TextPath;\n    });\n    _registerModule(_modules, 'Series/PackedBubble/PackedBubbleSeries.js', [_modules['Core/Color/Color.js'], _modules['Series/DragNodesComposition.js'], _modules['Series/GraphLayoutComposition.js'], _modules['Core/Globals.js'], _modules['Series/PackedBubble/PackedBubblePoint.js'], _modules['Series/PackedBubble/PackedBubbleSeriesDefaults.js'], _modules['Series/PackedBubble/PackedBubbleLayout.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/SimulationSeriesUtilities.js'], _modules['Core/Utilities.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Extensions/TextPath.js']], function (Color, DragNodesComposition, GraphLayout, H, PackedBubblePoint, PackedBubbleSeriesDefaults, PackedBubbleLayout, SeriesRegistry, D, U, SVGElement, TextPath) {\n        /* *\n         *\n         *  (c) 2010-2024 Grzegorz Blachlinski, Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { noop } = H;\n        const { series: { prototype: seriesProto }, seriesTypes: { bubble: BubbleSeries } } = SeriesRegistry;\n        const { initDataLabels, initDataLabelsDefer } = D;\n        const { addEvent, clamp, defined, extend, fireEvent, isArray, isNumber, merge, pick } = U;\n        TextPath.compose(SVGElement);\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.packedbubble\n         *\n         * @extends Highcharts.Series\n         */\n        class PackedBubbleSeries extends BubbleSeries {\n            constructor() {\n                /* *\n                 *\n                 *  Static Properties\n                 *\n                 * */\n                super(...arguments);\n                this.parentNodeMass = 0;\n                this.deferDataLabels = true;\n                /* eslint-enable valid-jsdoc */\n            }\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, LegendClass) {\n                BubbleSeries.compose(AxisClass, ChartClass, LegendClass);\n                DragNodesComposition.compose(ChartClass);\n                PackedBubbleLayout.compose(ChartClass);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Create a single array of all points from all series\n             * @private\n             */\n            accumulateAllPoints() {\n                const chart = this.chart, allDataPoints = [];\n                let yData;\n                for (const series of chart.series) {\n                    if (series.is('packedbubble') && // #13574\n                        series.reserveSpace()) {\n                        yData = series.yData || [];\n                        // Add data to array only if series is visible\n                        for (let j = 0; j < yData.length; j++) {\n                            allDataPoints.push([\n                                null, null,\n                                yData[j],\n                                series.index,\n                                j,\n                                {\n                                    id: j,\n                                    marker: {\n                                        radius: 0\n                                    }\n                                }\n                            ]);\n                        }\n                    }\n                }\n                return allDataPoints;\n            }\n            /**\n             * Adding the basic layout to series points.\n             * @private\n             */\n            addLayout() {\n                const layoutOptions = this.options.layoutAlgorithm =\n                    this.options.layoutAlgorithm || {}, layoutType = layoutOptions.type || 'packedbubble', chartOptions = this.chart.options.chart;\n                let graphLayoutsStorage = this.chart.graphLayoutsStorage, graphLayoutsLookup = this.chart.graphLayoutsLookup, layout;\n                if (!graphLayoutsStorage) {\n                    this.chart.graphLayoutsStorage = graphLayoutsStorage = {};\n                    this.chart.graphLayoutsLookup = graphLayoutsLookup = [];\n                }\n                layout = graphLayoutsStorage[layoutType];\n                if (!layout) {\n                    layoutOptions.enableSimulation =\n                        !defined(chartOptions.forExport) ?\n                            layoutOptions.enableSimulation :\n                            !chartOptions.forExport;\n                    graphLayoutsStorage[layoutType] = layout =\n                        new GraphLayout.layouts[layoutType]();\n                    layout.init(layoutOptions);\n                    graphLayoutsLookup.splice(layout.index, 0, layout);\n                }\n                this.layout = layout;\n                this.points.forEach((node) => {\n                    node.mass = 2;\n                    node.degree = 1;\n                    node.collisionNmb = 1;\n                });\n                layout.setArea(0, 0, this.chart.plotWidth, this.chart.plotHeight);\n                layout.addElementsToCollection([this], layout.series);\n                layout.addElementsToCollection(this.points, layout.nodes);\n            }\n            /**\n             * Function responsible for adding series layout, used for parent nodes.\n             * @private\n             */\n            addSeriesLayout() {\n                const layoutOptions = this.options.layoutAlgorithm =\n                    this.options.layoutAlgorithm || {}, layoutType = (layoutOptions.type || 'packedbubble'), graphLayoutsStorage = this.chart.graphLayoutsStorage, graphLayoutsLookup = this.chart.graphLayoutsLookup, parentNodeOptions = merge(layoutOptions, layoutOptions.parentNodeOptions, {\n                    enableSimulation: this.layout.options.enableSimulation\n                });\n                let seriesLayout = graphLayoutsStorage[layoutType + '-series'];\n                if (!seriesLayout) {\n                    graphLayoutsStorage[layoutType + '-series'] = seriesLayout =\n                        new GraphLayout.layouts[layoutType]();\n                    seriesLayout.init(parentNodeOptions);\n                    graphLayoutsLookup.splice(seriesLayout.index, 0, seriesLayout);\n                }\n                this.parentNodeLayout = seriesLayout;\n                this.createParentNodes();\n            }\n            /**\n             * The function responsible for calculating the parent node radius\n             * based on the total surface of inside-bubbles and the group BBox\n             * @private\n             */\n            calculateParentRadius() {\n                const bBox = this.seriesBox(), parentPadding = 20, minParentRadius = 20;\n                this.parentNodeRadius = clamp(Math.sqrt(2 * this.parentNodeMass / Math.PI) + parentPadding, minParentRadius, bBox ?\n                    Math.max(Math.sqrt(Math.pow(bBox.width, 2) +\n                        Math.pow(bBox.height, 2)) / 2 + parentPadding, minParentRadius) :\n                    Math.sqrt(2 * this.parentNodeMass / Math.PI) + parentPadding);\n                if (this.parentNode) {\n                    this.parentNode.marker.radius =\n                        this.parentNode.radius = this.parentNodeRadius;\n                }\n            }\n            /**\n             * Calculate min and max bubble value for radius calculation.\n             * @private\n             */\n            calculateZExtremes() {\n                const chart = this.chart, allSeries = chart.series;\n                let zMin = this.options.zMin, zMax = this.options.zMax, valMin = Infinity, valMax = -Infinity;\n                if (zMin && zMax) {\n                    return [zMin, zMax];\n                }\n                // It is needed to deal with null\n                // and undefined values\n                allSeries.forEach((series) => {\n                    series.yData.forEach((y) => {\n                        if (defined(y)) {\n                            if (y > valMax) {\n                                valMax = y;\n                            }\n                            if (y < valMin) {\n                                valMin = y;\n                            }\n                        }\n                    });\n                });\n                zMin = pick(zMin, valMin);\n                zMax = pick(zMax, valMax);\n                return [zMin, zMax];\n            }\n            /**\n             * Check if two bubbles overlaps.\n             * @private\n             */\n            checkOverlap(bubble1, bubble2) {\n                const diffX = bubble1[0] - bubble2[0], // Diff of X center values\n                diffY = bubble1[1] - bubble2[1], // Diff of Y center values\n                sumRad = bubble1[2] + bubble2[2]; // Sum of bubble radius\n                return (Math.sqrt(diffX * diffX + diffY * diffY) -\n                    Math.abs(sumRad)) < -0.001;\n            }\n            /**\n             * Creating parent nodes for split series, in which all the bubbles\n             * are rendered.\n             * @private\n             */\n            createParentNodes() {\n                const PackedBubblePoint = this.pointClass, chart = this.chart, parentNodeLayout = this.parentNodeLayout, layoutOptions = this.layout.options;\n                let nodeAdded, parentNode = this.parentNode, parentMarkerOptions = {\n                    radius: this.parentNodeRadius,\n                    lineColor: this.color,\n                    fillColor: color(this.color).brighten(0.4).get()\n                };\n                if (layoutOptions.parentNodeOptions) {\n                    parentMarkerOptions = merge(layoutOptions.parentNodeOptions.marker || {}, parentMarkerOptions);\n                }\n                this.parentNodeMass = 0;\n                this.points.forEach((p) => {\n                    this.parentNodeMass +=\n                        Math.PI * Math.pow(p.marker.radius, 2);\n                });\n                this.calculateParentRadius();\n                parentNodeLayout.nodes\n                    .forEach((node) => {\n                    if (node.seriesIndex === this.index) {\n                        nodeAdded = true;\n                    }\n                });\n                parentNodeLayout.setArea(0, 0, chart.plotWidth, chart.plotHeight);\n                if (!nodeAdded) {\n                    if (!parentNode) {\n                        parentNode = new PackedBubblePoint(this, {\n                            mass: this.parentNodeRadius / 2,\n                            marker: parentMarkerOptions,\n                            dataLabels: {\n                                inside: false\n                            },\n                            states: {\n                                normal: {\n                                    marker: parentMarkerOptions\n                                },\n                                hover: {\n                                    marker: parentMarkerOptions\n                                }\n                            },\n                            dataLabelOnNull: true,\n                            degree: this.parentNodeRadius,\n                            isParentNode: true,\n                            seriesIndex: this.index\n                        });\n                    }\n                    if (this.parentNode) {\n                        parentNode.plotX = this.parentNode.plotX;\n                        parentNode.plotY = this.parentNode.plotY;\n                    }\n                    this.parentNode = parentNode;\n                    parentNodeLayout.addElementsToCollection([this], parentNodeLayout.series);\n                    parentNodeLayout.addElementsToCollection([parentNode], parentNodeLayout.nodes);\n                }\n            }\n            /**\n             * Function responsible for adding all the layouts to the chart.\n             * @private\n             */\n            deferLayout() {\n                // TODO split layouts to independent methods\n                const layoutOptions = this.options.layoutAlgorithm;\n                if (!this.visible) {\n                    return;\n                }\n                // Layout is using nodes for position calculation\n                this.addLayout();\n                if (layoutOptions.splitSeries) {\n                    this.addSeriesLayout();\n                }\n            }\n            destroy() {\n                // Remove the series from all layouts series collections #11469\n                if (this.chart.graphLayoutsLookup) {\n                    this.chart.graphLayoutsLookup.forEach((layout) => {\n                        layout.removeElementFromCollection(this, layout.series);\n                    }, this);\n                }\n                if (this.parentNode &&\n                    this.parentNodeLayout) {\n                    this.parentNodeLayout.removeElementFromCollection(this.parentNode, this.parentNodeLayout.nodes);\n                    if (this.parentNode.dataLabel) {\n                        this.parentNode.dataLabel =\n                            this.parentNode.dataLabel.destroy();\n                    }\n                }\n                seriesProto.destroy.apply(this, arguments);\n            }\n            /**\n             * Packedbubble has two separate collections of nodes if split, render\n             * dataLabels for both sets:\n             * @private\n             */\n            drawDataLabels() {\n                // We defer drawing the dataLabels\n                // until dataLabels.animation.defer time passes\n                if (this.deferDataLabels) {\n                    return;\n                }\n                seriesProto.drawDataLabels.call(this, this.points);\n                // Render parentNode labels:\n                if (this.parentNode) {\n                    this.parentNode.formatPrefix = 'parentNode';\n                    seriesProto.drawDataLabels.call(this, [this.parentNode]);\n                }\n            }\n            /**\n             * Create Background/Parent Nodes for split series.\n             * @private\n             */\n            drawGraph() {\n                // If the series is not using layout, don't add parent nodes\n                if (!this.layout || !this.layout.options.splitSeries) {\n                    return;\n                }\n                const chart = this.chart, nodeMarker = this.layout.options.parentNodeOptions.marker, parentOptions = {\n                    fill: (nodeMarker.fillColor ||\n                        color(this.color).brighten(0.4).get()),\n                    opacity: nodeMarker.fillOpacity,\n                    stroke: nodeMarker.lineColor || this.color,\n                    'stroke-width': pick(nodeMarker.lineWidth, this.options.lineWidth)\n                };\n                let parentAttribs = {};\n                // Create the group for parent Nodes if doesn't exist\n                // If exists it will only be adjusted to the updated plot size (#12063)\n                this.parentNodesGroup = this.plotGroup('parentNodesGroup', 'parentNode', this.visible ? 'inherit' : 'hidden', 0.1, chart.seriesGroup);\n                this.group?.attr({\n                    zIndex: 2\n                });\n                this.calculateParentRadius();\n                if (this.parentNode &&\n                    defined(this.parentNode.plotX) &&\n                    defined(this.parentNode.plotY) &&\n                    defined(this.parentNodeRadius)) {\n                    parentAttribs = merge({\n                        x: this.parentNode.plotX -\n                            this.parentNodeRadius,\n                        y: this.parentNode.plotY -\n                            this.parentNodeRadius,\n                        width: this.parentNodeRadius * 2,\n                        height: this.parentNodeRadius * 2\n                    }, parentOptions);\n                    if (!this.parentNode.graphic) {\n                        this.graph = this.parentNode.graphic =\n                            chart.renderer.symbol(parentOptions.symbol)\n                                .add(this.parentNodesGroup);\n                    }\n                    this.parentNode.graphic.attr(parentAttribs);\n                }\n            }\n            drawTracker() {\n                const parentNode = this.parentNode;\n                // Chart = series.chart,\n                // pointer = chart.pointer,\n                // onMouseOver = function (e: PointerEvent): void {\n                //     const point = pointer.getPointFromEvent(e);\n                //     // undefined on graph in scatterchart\n                //     if (typeof point !== 'undefined') {\n                //         pointer.isDirectTouch = true;\n                //         point.onMouseOver(e);\n                //     }\n                // };\n                let dataLabels;\n                super.drawTracker();\n                // Add reference to the point\n                if (parentNode) {\n                    dataLabels = (isArray(parentNode.dataLabels) ?\n                        parentNode.dataLabels :\n                        (parentNode.dataLabel ? [parentNode.dataLabel] : []));\n                    if (parentNode.graphic) {\n                        parentNode.graphic.element.point = parentNode;\n                    }\n                    dataLabels.forEach((dataLabel) => {\n                        (dataLabel.div || dataLabel.element).point = parentNode;\n                    });\n                }\n            }\n            /**\n             * Calculate radius of bubbles in series.\n             * @private\n             */\n            getPointRadius() {\n                const chart = this.chart, plotWidth = chart.plotWidth, plotHeight = chart.plotHeight, seriesOptions = this.options, useSimulation = seriesOptions.useSimulation, smallestSize = Math.min(plotWidth, plotHeight), extremes = {}, radii = [], allDataPoints = chart.allDataPoints || [], allDataPointsLength = allDataPoints.length;\n                let minSize, maxSize, value, radius;\n                ['minSize', 'maxSize'].forEach((prop) => {\n                    const length = parseInt(seriesOptions[prop], 10), isPercent = /%$/.test(seriesOptions[prop]);\n                    extremes[prop] = isPercent ?\n                        smallestSize * length / 100 :\n                        length * Math.sqrt(allDataPointsLength);\n                });\n                chart.minRadius = minSize = extremes.minSize /\n                    Math.sqrt(allDataPointsLength);\n                chart.maxRadius = maxSize = extremes.maxSize /\n                    Math.sqrt(allDataPointsLength);\n                const zExtremes = useSimulation ?\n                    this.calculateZExtremes() :\n                    [minSize, maxSize];\n                allDataPoints.forEach((point, i) => {\n                    value = useSimulation ?\n                        clamp(point[2], zExtremes[0], zExtremes[1]) :\n                        point[2];\n                    radius = this.getRadius(zExtremes[0], zExtremes[1], minSize, maxSize, value);\n                    if (radius === 0) {\n                        radius = null;\n                    }\n                    allDataPoints[i][2] = radius;\n                    radii.push(radius);\n                });\n                this.radii = radii;\n            }\n            init() {\n                seriesProto.init.apply(this, arguments);\n                initDataLabelsDefer.call(this);\n                /* eslint-disable no-invalid-this */\n                // When one series is modified, the others need to be recomputed\n                this.eventsToUnbind.push(addEvent(this, 'updatedData', function () {\n                    this.chart.series.forEach((s) => {\n                        if (s.type === this.type) {\n                            s.isDirty = true;\n                        }\n                    }, this);\n                }));\n                /* eslint-enable no-invalid-this */\n                return this;\n            }\n            /**\n             * Mouse up action, finalizing drag&drop.\n             * @private\n             * @param {Highcharts.Point} point The point that event occurred.\n             */\n            onMouseUp(dnPoint) {\n                const point = dnPoint;\n                if (point.fixedPosition && !point.removed) {\n                    const layout = this.layout, parentNodeLayout = this.parentNodeLayout;\n                    let distanceXY, distanceR;\n                    if (parentNodeLayout && layout.options.dragBetweenSeries) {\n                        parentNodeLayout.nodes.forEach((node) => {\n                            if (point && point.marker &&\n                                node !== point.series.parentNode) {\n                                distanceXY = layout.getDistXY(point, node);\n                                distanceR = (layout.vectorLength(distanceXY) -\n                                    node.marker.radius -\n                                    point.marker.radius);\n                                if (distanceR < 0) {\n                                    node.series.addPoint(merge(point.options, {\n                                        plotX: point.plotX,\n                                        plotY: point.plotY\n                                    }), false);\n                                    layout.removeElementFromCollection(point, layout.nodes);\n                                    point.remove();\n                                }\n                            }\n                        });\n                    }\n                    DragNodesComposition.onMouseUp.apply(this, arguments);\n                }\n            }\n            /**\n             * This is the main function responsible\n             * for positioning all of the bubbles\n             * allDataPoints - bubble array, in format [pixel x value,\n             * pixel y value, radius,\n             * related series index, related point index]\n             * @private\n             * @param {Array<Highcharts.PackedBubbleData>} allDataPoints All points from all series\n             * @return {Array<Highcharts.PackedBubbleData>} Positions of all bubbles\n             */\n            placeBubbles(allDataPoints) {\n                const checkOverlap = this.checkOverlap, positionBubble = this.positionBubble, bubblePos = [];\n                let stage = 1, j = 0, k = 0, calculatedBubble, arr = [], i;\n                // Sort all points\n                const sortedArr = allDataPoints.sort((a, b) => b[2] - a[2]);\n                if (sortedArr.length) {\n                    // Create first bubble in the middle of the chart\n                    bubblePos.push([\n                        [\n                            0, // Starting in 0,0 coordinates\n                            0,\n                            sortedArr[0][2], // Radius\n                            sortedArr[0][3], // Series index\n                            sortedArr[0][4]\n                        ] // Point index\n                    ]); // 0 level bubble\n                    if (sortedArr.length > 1) {\n                        bubblePos.push([\n                            [\n                                0,\n                                (0 - sortedArr[1][2] -\n                                    sortedArr[0][2]),\n                                // Move bubble above first one\n                                sortedArr[1][2],\n                                sortedArr[1][3],\n                                sortedArr[1][4]\n                            ]\n                        ]); // 1 level 1st bubble\n                        // first two already positioned so starting from 2\n                        for (i = 2; i < sortedArr.length; i++) {\n                            sortedArr[i][2] = sortedArr[i][2] || 1;\n                            // In case if radius is calculated as 0.\n                            calculatedBubble = positionBubble(bubblePos[stage][j], bubblePos[stage - 1][k], sortedArr[i]); // Calculate initial bubble position\n                            if (checkOverlap(calculatedBubble, bubblePos[stage][0])) {\n                                /* If new bubble is overlapping with first bubble\n                                    * in current level (stage)\n                                    */\n                                bubblePos.push([]);\n                                k = 0;\n                                /* Reset index of bubble, used for\n                                    * positioning the bubbles around it,\n                                    * we are starting from first bubble in next\n                                    * stage because we are changing level to higher\n                                    */\n                                bubblePos[stage + 1].push(positionBubble(bubblePos[stage][j], bubblePos[stage][0], sortedArr[i]));\n                                // (last bubble, 1. from curr stage, new bubble)\n                                stage++; // The new level is created, above current\n                                j = 0; // Set the index of bubble in curr level to 0\n                            }\n                            else if (stage > 1 &&\n                                bubblePos[stage - 1][k + 1] &&\n                                checkOverlap(calculatedBubble, bubblePos[stage - 1][k + 1])) {\n                                /* If new bubble is overlapping with one of the prev\n                                    * stage bubbles, it means that - bubble, used for\n                                    * positioning the bubbles around it has changed\n                                    * so we need to recalculate it\n                                    */\n                                k++;\n                                bubblePos[stage].push(positionBubble(bubblePos[stage][j], bubblePos[stage - 1][k], sortedArr[i]));\n                                // (last bubble, prev stage bubble, new bubble)\n                                j++;\n                            }\n                            else { // Simply add calculated bubble\n                                j++;\n                                bubblePos[stage].push(calculatedBubble);\n                            }\n                        }\n                    }\n                    this.chart.stages = bubblePos;\n                    // It may not be necessary but adding it just in case -\n                    // it is containing all of the bubble levels\n                    this.chart.rawPositions =\n                        []\n                            .concat.apply([], bubblePos);\n                    // Bubble positions merged into one array\n                    this.resizeRadius();\n                    arr = this.chart.rawPositions;\n                }\n                return arr;\n            }\n            /**\n             * Function that checks for a parentMarker and sets the correct opacity.\n             * @private\n             * @param {Highcharts.Pack} point\n             * Candidate point for opacity correction.\n             * @param {string} [state]\n             * The point state, can be either `hover`, `select` or 'normal'. If\n             * undefined, normal state is assumed.\n             *\n             * @return {Highcharts.SVGAttributes}\n             * The presentational attributes to be set on the point.\n             */\n            pointAttribs(point, state) {\n                const options = this.options, hasParentMarker = point && point.isParentNode;\n                let markerOptions = options.marker;\n                if (hasParentMarker &&\n                    options.layoutAlgorithm &&\n                    options.layoutAlgorithm.parentNodeOptions) {\n                    markerOptions = options.layoutAlgorithm.parentNodeOptions.marker;\n                }\n                const fillOpacity = markerOptions.fillOpacity, attr = seriesProto.pointAttribs.call(this, point, state);\n                if (fillOpacity !== 1) {\n                    attr['fill-opacity'] = fillOpacity;\n                }\n                return attr;\n            }\n            /**\n             * Function that is adding one bubble based on positions and sizes of\n             * two other bubbles, lastBubble is the last added bubble, newOrigin is\n             * the bubble for positioning new bubbles. nextBubble is the currently\n             * added bubble for which we are calculating positions\n             * @private\n             * @param {Array<number>} lastBubble The closest last bubble\n             * @param {Array<number>} newOrigin New bubble\n             * @param {Array<number>} nextBubble The closest next bubble\n             * @return {Array<number>} Bubble with correct positions\n             */\n            positionBubble(lastBubble, newOrigin, nextBubble) {\n                const sqrt = Math.sqrt, asin = Math.asin, acos = Math.acos, pow = Math.pow, abs = Math.abs, distance = sqrt(// Dist between lastBubble and newOrigin\n                pow((lastBubble[0] - newOrigin[0]), 2) +\n                    pow((lastBubble[1] - newOrigin[1]), 2)), alfa = acos(\n                // From cosinus theorem: alfa is an angle used for\n                // calculating correct position\n                (pow(distance, 2) +\n                    pow(nextBubble[2] + newOrigin[2], 2) -\n                    pow(nextBubble[2] + lastBubble[2], 2)) / (2 * (nextBubble[2] + newOrigin[2]) * distance)), beta = asin(// From sinus theorem.\n                abs(lastBubble[0] - newOrigin[0]) /\n                    distance), \n                // Providing helping variables, related to angle between\n                // lastBubble and newOrigin\n                gamma = (lastBubble[1] - newOrigin[1]) < 0 ? 0 : Math.PI, \n                // If new origin y is smaller than last bubble y value\n                // (2 and 3 quarter),\n                // add Math.PI to final angle\n                delta = (lastBubble[0] - newOrigin[0]) *\n                    (lastBubble[1] - newOrigin[1]) < 0 ?\n                    1 : -1, // (1st and 3rd quarter)\n                finalAngle = gamma + alfa + beta * delta, cosA = Math.cos(finalAngle), sinA = Math.sin(finalAngle), posX = newOrigin[0] + (newOrigin[2] + nextBubble[2]) * sinA, \n                // Center of new origin + (radius1 + radius2) * sinus A\n                posY = newOrigin[1] - (newOrigin[2] + nextBubble[2]) * cosA;\n                return [\n                    posX,\n                    posY,\n                    nextBubble[2],\n                    nextBubble[3],\n                    nextBubble[4]\n                ]; // The same as described before\n            }\n            render() {\n                const dataLabels = [];\n                seriesProto.render.apply(this, arguments);\n                // #10823 - dataLabels should stay visible\n                // when enabled allowOverlap.\n                if (!this.options.dataLabels.allowOverlap) {\n                    this.data.forEach((point) => {\n                        if (isArray(point.dataLabels)) {\n                            point.dataLabels.forEach((dataLabel) => {\n                                dataLabels.push(dataLabel);\n                            });\n                        }\n                    });\n                    // Only hide overlapping dataLabels for layouts that\n                    // use simulation. Spiral packedbubble don't need\n                    // additional dataLabel hiding on every simulation step\n                    if (this.options.useSimulation) {\n                        this.chart.hideOverlappingLabels(dataLabels);\n                    }\n                }\n            }\n            /**\n             * The function responsible for resizing the bubble radius.\n             * In shortcut: it is taking the initially\n             * calculated positions of bubbles. Then it is calculating the min max\n             * of both dimensions, creating something in shape of bBox.\n             * The comparison of bBox and the size of plotArea\n             * (later it may be also the size set by customer) is giving the\n             * value how to recalculate the radius so it will match the size\n             * @private\n             */\n            resizeRadius() {\n                const chart = this.chart, positions = chart.rawPositions, min = Math.min, max = Math.max, plotLeft = chart.plotLeft, plotTop = chart.plotTop, chartHeight = chart.plotHeight, chartWidth = chart.plotWidth;\n                let minX, maxX, minY, maxY, radius;\n                minX = minY = Number.POSITIVE_INFINITY; // Set initial values\n                maxX = maxY = Number.NEGATIVE_INFINITY;\n                for (const position of positions) {\n                    radius = position[2];\n                    minX = min(minX, position[0] - radius);\n                    // (x center-radius) is the min x value used by specific bubble\n                    maxX = max(maxX, position[0] + radius);\n                    minY = min(minY, position[1] - radius);\n                    maxY = max(maxY, position[1] + radius);\n                }\n                const bBox = [maxX - minX, maxY - minY], spaceRatio = [\n                    (chartWidth - plotLeft) / bBox[0],\n                    (chartHeight - plotTop) / bBox[1]\n                ], smallerDimension = min.apply([], spaceRatio);\n                if (Math.abs(smallerDimension - 1) > 1e-10) {\n                    // If bBox is considered not the same width as possible size\n                    for (const position of positions) {\n                        position[2] *= smallerDimension;\n                    }\n                    this.placeBubbles(positions);\n                }\n                else {\n                    /** If no radius recalculation is needed, we need to position\n                     * the whole bubbles in center of chart plotarea\n                     * for this, we are adding two parameters,\n                     * diffY and diffX, that are related to differences\n                     * between the initial center and the bounding box\n                     */\n                    chart.diffY = chartHeight / 2 +\n                        plotTop - minY - (maxY - minY) / 2;\n                    chart.diffX = chartWidth / 2 +\n                        plotLeft - minX - (maxX - minX) / 2;\n                }\n            }\n            /**\n             * The function responsible for calculating series bubble' s bBox.\n             * Needed because of exporting failure when useSimulation\n             * is set to false\n             * @private\n             */\n            seriesBox() {\n                const chart = this.chart, data = this.data, max = Math.max, min = Math.min, bBox = [\n                    chart.plotLeft,\n                    chart.plotLeft + chart.plotWidth,\n                    chart.plotTop,\n                    chart.plotTop + chart.plotHeight\n                ];\n                let radius;\n                data.forEach((p) => {\n                    if (defined(p.plotX) &&\n                        defined(p.plotY) &&\n                        p.marker.radius) {\n                        radius = p.marker.radius;\n                        bBox[0] = min(bBox[0], p.plotX - radius);\n                        bBox[1] = max(bBox[1], p.plotX + radius);\n                        bBox[2] = min(bBox[2], p.plotY - radius);\n                        bBox[3] = max(bBox[3], p.plotY + radius);\n                    }\n                });\n                return isNumber(bBox.width / bBox.height) ?\n                    bBox :\n                    null;\n            }\n            /**\n             * Needed because of z-indexing issue if point is added in series.group\n             * @private\n             */\n            setVisible() {\n                const series = this;\n                seriesProto.setVisible.apply(series, arguments);\n                if (series.parentNodeLayout && series.graph) {\n                    if (series.visible) {\n                        series.graph.show();\n                        if (series.parentNode.dataLabel) {\n                            series.parentNode.dataLabel.show();\n                        }\n                    }\n                    else {\n                        series.graph.hide();\n                        series.parentNodeLayout.removeElementFromCollection(series.parentNode, series.parentNodeLayout.nodes);\n                        if (series.parentNode.dataLabel) {\n                            series.parentNode.dataLabel.hide();\n                        }\n                    }\n                }\n                else if (series.layout) {\n                    if (series.visible) {\n                        series.layout.addElementsToCollection(series.points, series.layout.nodes);\n                    }\n                    else {\n                        series.points.forEach((node) => {\n                            series.layout.removeElementFromCollection(node, series.layout.nodes);\n                        });\n                    }\n                }\n            }\n            /**\n             * Extend the base translate method to handle bubble size,\n             * and correct positioning them.\n             * @private\n             */\n            translate() {\n                const chart = this.chart, data = this.data, index = this.index, useSimulation = this.options.useSimulation;\n                let point, radius, positions;\n                this.processedXData = this.xData;\n                this.generatePoints();\n                // Merged data is an array with all of the data from all series\n                if (!defined(chart.allDataPoints)) {\n                    chart.allDataPoints = this.accumulateAllPoints();\n                    // Calculate radius for all added data\n                    this.getPointRadius();\n                }\n                // After getting initial radius, calculate bubble positions\n                if (useSimulation) {\n                    positions = chart.allDataPoints;\n                }\n                else {\n                    positions = this.placeBubbles(chart.allDataPoints);\n                    this.options.draggable = false;\n                }\n                // Set the shape and arguments to be picked up in drawPoints\n                for (const position of positions) {\n                    if (position[3] === index) {\n                        // Update the series points with the val from positions\n                        // array\n                        point = data[position[4]];\n                        radius = pick(position[2], void 0);\n                        if (!useSimulation) {\n                            point.plotX = (position[0] - chart.plotLeft +\n                                chart.diffX);\n                            point.plotY = (position[1] - chart.plotTop +\n                                chart.diffY);\n                        }\n                        if (isNumber(radius)) {\n                            point.marker = extend(point.marker, {\n                                radius,\n                                width: 2 * radius,\n                                height: 2 * radius\n                            });\n                            point.radius = radius;\n                        }\n                    }\n                }\n                if (useSimulation) {\n                    this.deferLayout();\n                }\n                fireEvent(this, 'afterTranslate');\n            }\n        }\n        PackedBubbleSeries.defaultOptions = merge(BubbleSeries.defaultOptions, PackedBubbleSeriesDefaults);\n        extend(PackedBubbleSeries.prototype, {\n            pointClass: PackedBubblePoint,\n            axisTypes: [],\n            directTouch: true,\n            forces: ['barycenter', 'repulsive'],\n            hasDraggableNodes: true,\n            invertible: false,\n            isCartesian: false,\n            noSharedTooltip: true,\n            pointArrayMap: ['value'],\n            pointValKey: 'value',\n            requireSorting: false,\n            trackerGroups: ['group', 'dataLabelsGroup', 'parentNodesGroup'],\n            initDataLabels: initDataLabels,\n            alignDataLabel: seriesProto.alignDataLabel,\n            indexateNodes: noop,\n            onMouseDown: DragNodesComposition.onMouseDown,\n            onMouseMove: DragNodesComposition.onMouseMove,\n            redrawHalo: DragNodesComposition.redrawHalo,\n            searchPoint: noop // Solving #12287\n        });\n        SeriesRegistry.registerSeriesType('packedbubble', PackedBubbleSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Formatter callback function.\n         *\n         * @callback Highcharts.SeriesPackedBubbleDataLabelsFormatterCallbackFunction\n         *\n         * @param {Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject} this\n         *        Data label context to format\n         *\n         * @return {string}\n         *         Formatted data label text\n         */\n        /**\n         * Context for the formatter function.\n         *\n         * @interface Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject\n         * @extends Highcharts.PointLabelObject\n         * @since 7.0.0\n         */ /**\n        * The color of the node.\n        * @name Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject#color\n        * @type {Highcharts.ColorString}\n        * @since 7.0.0\n        */ /**\n        * The point (node) object. The node name, if defined, is available through\n        * `this.point.name`. Arrays: `this.point.linksFrom` and `this.point.linksTo`\n        * contains all nodes connected to this point.\n        * @name Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject#point\n        * @type {Highcharts.Point}\n        * @since 7.0.0\n        */ /**\n        * The ID of the node.\n        * @name Highcharts.SeriesPackedBubbleDataLabelsFormatterContextObject#key\n        * @type {string}\n        * @since 7.0.0\n        */\n        ''; // Detach doclets above\n\n        return PackedBubbleSeries;\n    });\n    _registerModule(_modules, 'Series/Polygon/PolygonSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A polygon series can be used to draw any freeform shape in the cartesian\n         * coordinate system. A fill is applied with the `color` option, and\n         * stroke is applied through `lineWidth` and `lineColor` options.\n         *\n         * @sample {highcharts} highcharts/demo/polygon/\n         *         Polygon\n         * @sample {highstock} highcharts/demo/polygon/\n         *         Polygon\n         *\n         * @extends      plotOptions.scatter\n         * @since        4.1.0\n         * @excluding    jitter, softThreshold, threshold, cluster, boostThreshold,\n         *               boostBlending\n         * @product      highcharts highstock\n         * @requires     highcharts-more\n         * @optionparent plotOptions.polygon\n         */\n        const PolygonSeriesDefaults = {\n            marker: {\n                enabled: false,\n                states: {\n                    hover: {\n                        enabled: false\n                    }\n                }\n            },\n            stickyTracking: false,\n            tooltip: {\n                followPointer: true,\n                pointFormat: ''\n            },\n            trackByArea: true,\n            legendSymbol: 'rectangle'\n        };\n        /**\n         * A `polygon` series. If the [type](#series.polygon.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.polygon\n         * @excluding dataParser, dataURL, stack, boostThreshold, boostBlending\n         * @product   highcharts highstock\n         * @requires  highcharts-more\n         * @apioption series.polygon\n         */\n        /**\n         * An array of data points for the series. For the `polygon` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. The `x` values will be automatically\n         *    calculated, either starting at 0 and incremented by 1, or from\n         *    `pointStart` and `pointInterval` given in the series options. If the axis\n         *    has categories, these will be used. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of arrays with 2 values. In this case, the values correspond to\n         *    `x,y`. If the first value is a string, it is applied as the name of the\n         *    point, and the `x` value is inferred.\n         *    ```js\n         *    data: [\n         *        [0, 10],\n         *        [1, 3],\n         *        [2, 1]\n         *    ]\n         *    ```\n         *\n         * 3. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.polygon.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        y: 1,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        y: 8,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n         * @extends   series.line.data\n         * @product   highcharts highstock\n         * @apioption series.polygon.data\n         */\n        ''; // Keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PolygonSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Polygon/PolygonSeries.js', [_modules['Core/Globals.js'], _modules['Series/Polygon/PolygonSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (H, PolygonSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { area: AreaSeries, line: LineSeries, scatter: ScatterSeries } = SeriesRegistry.seriesTypes;\n        const { extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class PolygonSeries extends ScatterSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getGraphPath() {\n                const graphPath = LineSeries.prototype.getGraphPath.call(this);\n                let i = graphPath.length + 1;\n                // Close all segments\n                while (i--) {\n                    if ((i === graphPath.length || graphPath[i][0] === 'M') && i > 0) {\n                        graphPath.splice(i, 0, ['Z']);\n                    }\n                }\n                this.areaPath = graphPath;\n                return graphPath;\n            }\n            drawGraph() {\n                // Hack into the fill logic in area.drawGraph\n                this.options.fillColor = this.color;\n                AreaSeries.prototype.drawGraph.call(this);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        PolygonSeries.defaultOptions = merge(ScatterSeries.defaultOptions, PolygonSeriesDefaults);\n        extend(PolygonSeries.prototype, {\n            type: 'polygon',\n            drawTracker: LineSeries.prototype.drawTracker,\n            setStackedPoints: noop // No stacking points on polygons (#5310)\n        });\n        SeriesRegistry.registerSeriesType('polygon', PolygonSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PolygonSeries;\n    });\n    _registerModule(_modules, 'Core/Axis/RadialAxisDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  Extension for radial axes\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /**\n             * Circular axis around the perimeter of a polar chart.\n             * @private\n             */\n        const defaultCircularOptions = {\n            gridLineWidth: 1, // Spokes\n            labels: {\n                align: void 0, // Auto\n                x: 0,\n                y: void 0, // Auto\n                style: {\n                    textOverflow: 'none' // Wrap lines by default (#7248)\n                }\n            },\n            maxPadding: 0,\n            minPadding: 0,\n            showLastLabel: false,\n            tickLength: 0\n        };\n        /**\n         * The default options extend defaultYAxisOptions.\n         * @private\n         */\n        const defaultRadialGaugeOptions = {\n            endOnTick: false,\n            gridLineWidth: 0,\n            labels: {\n                align: 'center',\n                distance: -25,\n                x: 0,\n                y: void 0 // Auto\n            },\n            lineWidth: 1,\n            minorGridLineWidth: 0,\n            minorTickInterval: 'auto',\n            minorTickLength: 10,\n            minorTickPosition: 'inside',\n            minorTickWidth: 1,\n            startOnTick: false,\n            tickLength: 10,\n            tickPixelInterval: 100,\n            tickPosition: 'inside',\n            tickWidth: 2,\n            title: {\n                rotation: 0,\n                text: ''\n            },\n            zIndex: 2 // Behind dials, points in the series group\n        };\n        /**\n         * Radial axis, like a spoke in a polar chart.\n         * @private\n         */\n        const defaultRadialOptions = {\n            /**\n             * In a polar chart, this is the angle of the Y axis in degrees, where\n             * 0 is up and 90 is right. The angle determines the position of the\n             * axis line and the labels, though the coordinate system is unaffected.\n             * Since v8.0.0 this option is also applicable for X axis (inverted\n             * polar).\n             *\n             * @sample {highcharts} highcharts/xaxis/angle/\n             *         Custom X axis' angle on inverted polar chart\n             * @sample {highcharts} highcharts/yaxis/angle/\n             *         Dual axis polar chart\n             *\n             * @type      {number}\n             * @default   0\n             * @since     4.2.7\n             * @product   highcharts\n             * @apioption xAxis.angle\n             */\n            /**\n             * Polar charts only. Whether the grid lines should draw as a polygon\n             * with straight lines between categories, or as circles. Can be either\n             * `circle` or `polygon`. Since v8.0.0 this option is also applicable\n             * for X axis (inverted polar).\n             *\n             * @sample {highcharts} highcharts/demo/polar-spider/\n             *         Polygon grid lines\n             * @sample {highcharts} highcharts/xaxis/gridlineinterpolation/\n             *         Circle and polygon on inverted polar\n             * @sample {highcharts} highcharts/yaxis/gridlineinterpolation/\n             *         Circle and polygon\n             *\n             * @type       {string}\n             * @product    highcharts\n             * @validvalue [\"circle\", \"polygon\"]\n             * @apioption  xAxis.gridLineInterpolation\n             */\n            gridLineInterpolation: 'circle',\n            gridLineWidth: 1,\n            labels: {\n                align: 'right',\n                padding: 5,\n                x: -3,\n                y: -2\n            },\n            showLastLabel: false,\n            title: {\n                x: 4,\n                text: null,\n                rotation: 90\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RadialAxisDefaults = {\n            circular: defaultCircularOptions,\n            radial: defaultRadialOptions,\n            radialGauge: defaultRadialGaugeOptions\n        };\n\n        return RadialAxisDefaults;\n    });\n    _registerModule(_modules, 'Core/Axis/RadialAxis.js', [_modules['Core/Axis/RadialAxisDefaults.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (RadialAxisDefaults, D, H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { composed, noop } = H;\n        const { addEvent, correctFloat, defined, extend, fireEvent, isObject, merge, pick, pushUnique, relativeLength, wrap } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var RadialAxis;\n        (function (RadialAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            RadialAxis.radialDefaultOptions = merge(RadialAxisDefaults);\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * In case of auto connect, add one closestPointRange to the max value\n             * right before tickPositions are computed, so that ticks will extend\n             * passed the real max.\n             * @private\n             */\n            function beforeSetTickPositions() {\n                // If autoConnect is true, polygonal grid lines are connected, and\n                // one closestPointRange is added to the X axis to prevent the last\n                // point from overlapping the first.\n                this.autoConnect = (this.isCircular &&\n                    typeof pick(this.userMax, this.options.max) === 'undefined' &&\n                    correctFloat(this.endAngleRad - this.startAngleRad) ===\n                        correctFloat(2 * Math.PI));\n                // This will lead to add an extra tick to xAxis in order to display\n                // a correct range on inverted polar\n                if (!this.isCircular && this.chart.inverted) {\n                    this.max++;\n                }\n                if (this.autoConnect) {\n                    this.max += ((this.categories && 1) ||\n                        this.pointRange ||\n                        this.closestPointRange ||\n                        0); // #1197, #2260\n                }\n            }\n            /**\n             * Augments methods for the value axis.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} AxisClass\n             * Axis class to extend.\n             *\n             * @param {Highcharts.Tick} TickClass\n             * Tick class to use.\n             *\n             * @return {Highcharts.Axis}\n             * Axis composition.\n             */\n            function compose(AxisClass, TickClass) {\n                if (pushUnique(composed, 'Axis.Radial')) {\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'autoLabelAlign', onAxisAutoLabelAlign);\n                    addEvent(AxisClass, 'destroy', onAxisDestroy);\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'initialAxisTranslation', onAxisInitialAxisTranslation);\n                    addEvent(TickClass, 'afterGetLabelPosition', onTickAfterGetLabelPosition);\n                    addEvent(TickClass, 'afterGetPosition', onTickAfterGetPosition);\n                    addEvent(H, 'setOptions', onGlobalSetOptions);\n                    wrap(TickClass.prototype, 'getMarkPath', wrapTickGetMarkPath);\n                }\n                return AxisClass;\n            }\n            RadialAxis.compose = compose;\n            /**\n             * Attach and return collecting function for labels in radial axis for\n             * anti-collision.\n             *\n             * @private\n             */\n            function createLabelCollector() {\n                return () => {\n                    if (this.isRadial &&\n                        this.tickPositions &&\n                        // Undocumented option for now, but working\n                        this.options.labels &&\n                        this.options.labels.allowOverlap !== true) {\n                        return this.tickPositions\n                            .map((pos) => this.ticks[pos] && this.ticks[pos].label)\n                            .filter((label) => Boolean(label));\n                    }\n                };\n            }\n            /**\n             * Creates an empty collector function.\n             * @private\n             */\n            function createLabelCollectorHidden() {\n                return noop;\n            }\n            /**\n             * Find the correct end values of crosshair in polar.\n             * @private\n             */\n            function getCrosshairPosition(options, x1, y1) {\n                const center = this.pane.center;\n                let value = options.value, shapeArgs, end, x2, y2;\n                if (this.isCircular) {\n                    if (!defined(value)) {\n                        // When the snap is set to false\n                        x2 = options.chartX || 0;\n                        y2 = options.chartY || 0;\n                        value = this.translate(Math.atan2(y2 - y1, x2 - x1) - this.startAngleRad, true);\n                    }\n                    else if (options.point) {\n                        // When the snap is set to true\n                        shapeArgs = options.point.shapeArgs || {};\n                        if (shapeArgs.start) {\n                            // Find a true value of the point based on the\n                            // angle\n                            value = this.chart.inverted ?\n                                this.translate(options.point.rectPlotY, true) :\n                                options.point.x;\n                        }\n                    }\n                    end = this.getPosition(value);\n                    x2 = end.x;\n                    y2 = end.y;\n                }\n                else {\n                    if (!defined(value)) {\n                        x2 = options.chartX;\n                        y2 = options.chartY;\n                    }\n                    if (defined(x2) && defined(y2)) {\n                        // Calculate radius of non-circular axis' crosshair\n                        y1 = center[1] + this.chart.plotTop;\n                        value = this.translate(Math.min(Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)), center[2] / 2) - center[3] / 2, true);\n                    }\n                }\n                return [value, x2 || 0, y2 || 0];\n            }\n            /**\n             * Get the path for the axis line. This method is also referenced in the\n             * getPlotLinePath method.\n             *\n             * @private\n             * @param {number} _lineWidth\n             * Line width is not used.\n             * @param {number} [radius]\n             * Radius of radial path.\n             * @param {number} [innerRadius]\n             * Inner radius of radial path.\n             */\n            function getLinePath(_lineWidth, radius, innerRadius) {\n                const center = this.pane.center, chart = this.chart, left = this.left || 0, top = this.top || 0;\n                let end, r = pick(radius, center[2] / 2 - this.offset), path;\n                if (typeof innerRadius === 'undefined') {\n                    innerRadius = this.horiz ? 0 : this.center && -this.center[3] / 2;\n                }\n                // In case when innerSize of pane is set, it must be included\n                if (innerRadius) {\n                    r += innerRadius;\n                }\n                if (this.isCircular || typeof radius !== 'undefined') {\n                    path = this.chart.renderer.symbols.arc(left + center[0], top + center[1], r, r, {\n                        start: this.startAngleRad,\n                        end: this.endAngleRad,\n                        open: true,\n                        innerR: 0\n                    });\n                    // Bounds used to position the plotLine label next to the line\n                    // (#7117)\n                    path.xBounds = [left + center[0]];\n                    path.yBounds = [top + center[1] - r];\n                }\n                else {\n                    end = this.postTranslate(this.angleRad, r);\n                    path = [\n                        [\n                            'M',\n                            this.center[0] + chart.plotLeft,\n                            this.center[1] + chart.plotTop\n                        ],\n                        ['L', end.x, end.y]\n                    ];\n                }\n                return path;\n            }\n            /**\n             * Wrap the getOffset method to return zero offset for title or labels\n             * in a radial axis.\n             */\n            function getOffset() {\n                const axisProto = this.constructor.prototype;\n                // Call the Axis prototype method (the method we're in now is on the\n                // instance)\n                axisProto.getOffset.call(this);\n                // Title or label offsets are not counted\n                this.chart.axisOffset[this.side] = 0;\n            }\n            /**\n             * Find the path for plot bands along the radial axis.\n             *\n             * @private\n             */\n            function getPlotBandPath(from, to, options) {\n                const chart = this.chart, radiusToPixels = (radius) => {\n                    if (typeof radius === 'string') {\n                        let r = parseInt(radius, 10);\n                        if (percentRegex.test(radius)) {\n                            r = (r * fullRadius) / 100;\n                        }\n                        return r;\n                    }\n                    return radius;\n                }, center = this.center, startAngleRad = this.startAngleRad, fullRadius = center[2] / 2, offset = Math.min(this.offset, 0), left = this.left || 0, top = this.top || 0, percentRegex = /%$/, isCircular = this.isCircular; // X axis in a polar chart\n                let start, end, angle, xOnPerimeter, open, path, outerRadius = pick(radiusToPixels(options.outerRadius), fullRadius), innerRadius = radiusToPixels(options.innerRadius), thickness = pick(radiusToPixels(options.thickness), 10);\n                // Polygonal plot bands\n                if (this.options.gridLineInterpolation === 'polygon') {\n                    path = this.getPlotLinePath({ value: from }).concat(this.getPlotLinePath({ value: to, reverse: true }));\n                    // Circular grid bands\n                }\n                else {\n                    // Keep within bounds\n                    from = Math.max(from, this.min);\n                    to = Math.min(to, this.max);\n                    const transFrom = this.translate(from), transTo = this.translate(to);\n                    // Plot bands on Y axis (radial axis) - inner and outer\n                    // radius depend on to and from\n                    if (!isCircular) {\n                        outerRadius = transFrom || 0;\n                        innerRadius = transTo || 0;\n                    }\n                    // Handle full circle\n                    if (options.shape === 'circle' || !isCircular) {\n                        start = -Math.PI / 2;\n                        end = Math.PI * 1.5;\n                        open = true;\n                    }\n                    else {\n                        start = startAngleRad + (transFrom || 0);\n                        end = startAngleRad + (transTo || 0);\n                    }\n                    outerRadius -= offset; // #5283\n                    thickness -= offset; // #5283\n                    path = chart.renderer.symbols.arc(left + center[0], top + center[1], outerRadius, outerRadius, {\n                        // Math is for reversed yAxis (#3606)\n                        start: Math.min(start, end),\n                        end: Math.max(start, end),\n                        innerR: pick(innerRadius, outerRadius - thickness),\n                        open,\n                        borderRadius: options.borderRadius\n                    });\n                    // Provide positioning boxes for the label (#6406)\n                    if (isCircular) {\n                        angle = (end + start) / 2;\n                        xOnPerimeter = (left +\n                            center[0] +\n                            (center[2] / 2) * Math.cos(angle));\n                        path.xBounds = angle > -Math.PI / 2 && angle < Math.PI / 2 ?\n                            // Right hemisphere\n                            [xOnPerimeter, chart.plotWidth] :\n                            // Left hemisphere\n                            [0, xOnPerimeter];\n                        path.yBounds = [\n                            top + center[1] + (center[2] / 2) * Math.sin(angle)\n                        ];\n                        // Shift up or down to get the label clear of the perimeter\n                        path.yBounds[0] += ((angle > -Math.PI && angle < 0) ||\n                            (angle > Math.PI)) ? -10 : 10;\n                    }\n                }\n                return path;\n            }\n            /**\n             * Find the path for plot lines perpendicular to the radial axis.\n             */\n            function getPlotLinePath(options) {\n                const center = this.pane.center, chart = this.chart, inverted = chart.inverted, reverse = options.reverse, background = this.pane.options.background ?\n                    (this.pane.options.background[0] ||\n                        this.pane.options.background) :\n                    {}, innerRadius = background.innerRadius || '0%', outerRadius = background.outerRadius || '100%', x1 = center[0] + chart.plotLeft, y1 = center[1] + chart.plotTop, height = this.height, isCrosshair = options.isCrosshair, paneInnerR = center[3] / 2;\n                let value = options.value, innerRatio, distance, a, b, otherAxis, xy, tickPositions, crossPos, path;\n                const end = this.getPosition(value);\n                let x2 = end.x, y2 = end.y;\n                // Crosshair logic\n                if (isCrosshair) {\n                    // Find crosshair's position and perform destructuring\n                    // assignment\n                    crossPos = this.getCrosshairPosition(options, x1, y1);\n                    value = crossPos[0];\n                    x2 = crossPos[1];\n                    y2 = crossPos[2];\n                }\n                // Spokes\n                if (this.isCircular) {\n                    distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n                    a = (typeof innerRadius === 'string') ?\n                        relativeLength(innerRadius, 1) :\n                        (innerRadius / distance);\n                    b = (typeof outerRadius === 'string') ?\n                        relativeLength(outerRadius, 1) :\n                        (outerRadius / distance);\n                    // To ensure that gridlines won't be displayed in area\n                    // defined by innerSize in case of custom radiuses of pane's\n                    // background\n                    if (center && paneInnerR) {\n                        innerRatio = paneInnerR / distance;\n                        if (a < innerRatio) {\n                            a = innerRatio;\n                        }\n                        if (b < innerRatio) {\n                            b = innerRatio;\n                        }\n                    }\n                    path = [\n                        ['M', x1 + a * (x2 - x1), y1 - a * (y1 - y2)],\n                        ['L', x2 - (1 - b) * (x2 - x1), y2 + (1 - b) * (y1 - y2)]\n                    ];\n                    // Concentric circles\n                }\n                else {\n                    // Pick the right values depending if it is grid line or\n                    // crosshair\n                    value = this.translate(value);\n                    // This is required in case when xAxis is non-circular to\n                    // prevent grid lines (or crosshairs, if enabled) from\n                    // rendering above the center after they supposed to be\n                    // displayed below the center point\n                    if (value) {\n                        if (value < 0 || value > height) {\n                            value = 0;\n                        }\n                    }\n                    if (this.options.gridLineInterpolation === 'circle') {\n                        // A value of 0 is in the center, so it won't be\n                        // visible, but draw it anyway for update and animation\n                        // (#2366)\n                        path = this.getLinePath(0, value, paneInnerR);\n                        // Concentric polygons\n                    }\n                    else {\n                        path = [];\n                        // Find the other axis (a circular one) in the same pane\n                        chart[inverted ? 'yAxis' : 'xAxis'].forEach((a) => {\n                            if (a.pane === this.pane) {\n                                otherAxis = a;\n                            }\n                        });\n                        if (otherAxis) {\n                            tickPositions = otherAxis.tickPositions;\n                            if (otherAxis.autoConnect) {\n                                tickPositions =\n                                    tickPositions.concat([tickPositions[0]]);\n                            }\n                            // Reverse the positions for concatenation of polygonal\n                            // plot bands\n                            if (reverse) {\n                                tickPositions = tickPositions.slice().reverse();\n                            }\n                            if (value) {\n                                value += paneInnerR;\n                            }\n                            for (let i = 0; i < tickPositions.length; i++) {\n                                xy = otherAxis.getPosition(tickPositions[i], value);\n                                path.push(i ? ['L', xy.x, xy.y] : ['M', xy.x, xy.y]);\n                            }\n                        }\n                    }\n                }\n                return path;\n            }\n            /**\n             * Returns the x, y coordinate of a point given by a value and a pixel\n             * distance from center.\n             *\n             * @private\n             * @param {number} value\n             * Point value.\n             * @param {number} [length]\n             * Distance from center.\n             */\n            function getPosition(value, length) {\n                const translatedVal = this.translate(value);\n                return this.postTranslate(this.isCircular ? translatedVal : this.angleRad, // #2848\n                // In case when translatedVal is negative, the 0 value must be\n                // used instead, in order to deal with lines and labels that\n                // fall out of the visible range near the center of a pane\n                pick(this.isCircular ?\n                    length :\n                    (translatedVal < 0 ? 0 : translatedVal), this.center[2] / 2) - this.offset);\n            }\n            /**\n             * Find the position for the axis title, by default inside the gauge.\n             */\n            function getTitlePosition() {\n                const center = this.center, chart = this.chart, titleOptions = this.options.title;\n                return {\n                    x: chart.plotLeft + center[0] + (titleOptions.x || 0),\n                    y: (chart.plotTop +\n                        center[1] -\n                        ({\n                            high: 0.5,\n                            middle: 0.25,\n                            low: 0\n                        }[titleOptions.align] *\n                            center[2]) +\n                        (titleOptions.y || 0))\n                };\n            }\n            /**\n             * Modify radial axis.\n             * @private\n             *\n             * @param {Highcharts.Axis} radialAxis\n             * Radial axis to modify.\n             */\n            function modify(axis) {\n                axis.beforeSetTickPositions = beforeSetTickPositions;\n                axis.createLabelCollector = createLabelCollector;\n                axis.getCrosshairPosition = getCrosshairPosition;\n                axis.getLinePath = getLinePath;\n                axis.getOffset = getOffset;\n                axis.getPlotBandPath = getPlotBandPath;\n                axis.getPlotLinePath = getPlotLinePath;\n                axis.getPosition = getPosition;\n                axis.getTitlePosition = getTitlePosition;\n                axis.postTranslate = postTranslate;\n                axis.setAxisSize = setAxisSize;\n                axis.setAxisTranslation = setAxisTranslation;\n                axis.setOptions = setOptions;\n            }\n            /**\n             * Modify radial axis as hidden.\n             * @private\n             *\n             * @param {Highcharts.Axis} radialAxis\n             * Radial axis to modify.\n             */\n            function modifyAsHidden(radialAxis) {\n                radialAxis.isHidden = true;\n                radialAxis.createLabelCollector = createLabelCollectorHidden;\n                radialAxis.getOffset = noop;\n                radialAxis.redraw = renderHidden;\n                radialAxis.render = renderHidden;\n                radialAxis.setScale = noop;\n                radialAxis.setCategories = noop;\n                radialAxis.setTitle = noop;\n            }\n            /**\n             * Finalize modification of axis instance with radial logic.\n             */\n            function onAxisAfterInit() {\n                const chart = this.chart, options = this.options, isHidden = chart.angular && this.isXAxis, pane = this.pane, paneOptions = pane && pane.options;\n                if (!isHidden && pane && (chart.angular || chart.polar)) {\n                    const fullCircle = Math.PI * 2, \n                    // Start and end angle options are given in degrees relative to\n                    // top, while internal computations are in radians relative to\n                    // right (like SVG).\n                    start = (pick(paneOptions.startAngle, 0) - 90) * Math.PI / 180, end = (pick(paneOptions.endAngle, pick(paneOptions.startAngle, 0) + 360) - 90) * Math.PI / 180;\n                    // Y axis in polar charts\n                    this.angleRad = (options.angle || 0) * Math.PI / 180;\n                    // Gauges\n                    this.startAngleRad = start;\n                    this.endAngleRad = end;\n                    this.offset = options.offset || 0;\n                    // Normalize Start and End to <0, 2*PI> range\n                    // (in degrees: <0,360>)\n                    let normalizedStart = (start % fullCircle + fullCircle) %\n                        fullCircle, normalizedEnd = (end % fullCircle + fullCircle) % fullCircle;\n                    // Move normalized angles to <-PI, PI> range (<-180, 180>)\n                    // to match values returned by Math.atan2()\n                    if (normalizedStart > Math.PI) {\n                        normalizedStart -= fullCircle;\n                    }\n                    if (normalizedEnd > Math.PI) {\n                        normalizedEnd -= fullCircle;\n                    }\n                    this.normalizedStartAngleRad = normalizedStart;\n                    this.normalizedEndAngleRad = normalizedEnd;\n                }\n            }\n            /**\n             * Wrap auto label align to avoid setting axis-wide rotation on radial axes.\n             * (#4920)\n             */\n            function onAxisAutoLabelAlign(e) {\n                if (this.isRadial) {\n                    e.align = void 0;\n                    e.preventDefault();\n                }\n            }\n            /**\n             * Remove label collector function on axis remove/update.\n             */\n            function onAxisDestroy() {\n                if (this.chart &&\n                    this.chart.labelCollectors) {\n                    const index = (this.labelCollector ?\n                        this.chart.labelCollectors.indexOf(this.labelCollector) :\n                        -1);\n                    if (index >= 0) {\n                        this.chart.labelCollectors.splice(index, 1);\n                    }\n                }\n            }\n            /**\n             * Modify axis instance with radial logic before common axis init.\n             */\n            function onAxisInit(e) {\n                const chart = this.chart, angular = chart.angular, polar = chart.polar, isX = this.isXAxis, coll = this.coll, isHidden = angular && isX, paneIndex = e.userOptions.pane || 0, pane = this.pane = chart.pane && chart.pane[paneIndex];\n                let isCircular;\n                // Prevent changes for colorAxis\n                if (coll === 'colorAxis') {\n                    this.isRadial = false;\n                    return;\n                }\n                // Before prototype.init\n                if (angular) {\n                    if (isHidden) {\n                        modifyAsHidden(this);\n                    }\n                    else {\n                        modify(this);\n                    }\n                    isCircular = !isX;\n                }\n                else if (polar) {\n                    modify(this);\n                    // Check which axis is circular\n                    isCircular = this.horiz;\n                }\n                // Disable certain features on angular and polar axes\n                if (angular || polar) {\n                    this.isRadial = true;\n                    if (!this.labelCollector) {\n                        this.labelCollector = this.createLabelCollector();\n                    }\n                    if (this.labelCollector) {\n                        // Prevent overlapping axis labels (#9761)\n                        chart.labelCollectors.push(this.labelCollector);\n                    }\n                }\n                else {\n                    this.isRadial = false;\n                }\n                // A pointer back to this axis to borrow geometry\n                if (pane && isCircular) {\n                    pane.axis = this;\n                }\n                this.isCircular = isCircular;\n            }\n            /**\n             * Prepare axis translation.\n             */\n            function onAxisInitialAxisTranslation() {\n                if (this.isRadial) {\n                    this.beforeSetTickPositions();\n                }\n            }\n            /**\n             * Find the center position of the label based on the distance option.\n             */\n            function onTickAfterGetLabelPosition(e) {\n                const label = this.label;\n                if (!label) {\n                    return;\n                }\n                const axis = this.axis, labelBBox = label.getBBox(), labelOptions = axis.options.labels, angle = ((axis.translate(this.pos) + axis.startAngleRad +\n                    Math.PI / 2) / Math.PI * 180) % 360, correctAngle = Math.round(angle), labelYPosCorrection = !defined(labelOptions.y) ? -labelBBox.height * 0.3 : 0;\n                let optionsY = labelOptions.y, ret, centerSlot = 20, // 20 degrees to each side at the top and bottom\n                align = labelOptions.align, labelDir = 'end', // Direction of the label 'start' or 'end'\n                reducedAngle1 = correctAngle < 0 ?\n                    correctAngle + 360 : correctAngle, reducedAngle2 = reducedAngle1, translateY = 0, translateX = 0;\n                if (axis.isRadial) { // Both X and Y axes in a polar chart\n                    ret = axis.getPosition(this.pos, (axis.center[2] / 2) +\n                        relativeLength(pick(labelOptions.distance, -25), axis.center[2] / 2, -axis.center[2] / 2));\n                    // Automatically rotated\n                    if (labelOptions.rotation === 'auto') {\n                        label.attr({\n                            rotation: angle\n                        });\n                        // Vertically centered\n                    }\n                    else if (!defined(optionsY)) {\n                        optionsY = (axis.chart.renderer.fontMetrics(label).b -\n                            labelBBox.height / 2);\n                    }\n                    // Automatic alignment\n                    if (!defined(align)) {\n                        if (axis.isCircular) { // Y axis\n                            if (labelBBox.width >\n                                axis.len * axis.tickInterval / (axis.max - axis.min)) { // #3506\n                                centerSlot = 0;\n                            }\n                            if (angle > centerSlot && angle < 180 - centerSlot) {\n                                align = 'left'; // Right hemisphere\n                            }\n                            else if (angle > 180 + centerSlot &&\n                                angle < 360 - centerSlot) {\n                                align = 'right'; // Left hemisphere\n                            }\n                            else {\n                                align = 'center'; // Top or bottom\n                            }\n                        }\n                        else {\n                            align = 'center';\n                        }\n                        label.attr({\n                            align: align\n                        });\n                    }\n                    // Auto alignment for solid-gauges with two labels (#10635)\n                    if (align === 'auto' &&\n                        axis.tickPositions.length === 2 &&\n                        axis.isCircular) {\n                        // Angles reduced to 0 - 90 or 180 - 270\n                        if (reducedAngle1 > 90 && reducedAngle1 < 180) {\n                            reducedAngle1 = 180 - reducedAngle1;\n                        }\n                        else if (reducedAngle1 > 270 && reducedAngle1 <= 360) {\n                            reducedAngle1 = 540 - reducedAngle1;\n                        }\n                        // Angles reduced to 0 - 180\n                        if (reducedAngle2 > 180 && reducedAngle2 <= 360) {\n                            reducedAngle2 = 360 - reducedAngle2;\n                        }\n                        if ((axis.pane.options.startAngle === correctAngle) ||\n                            (axis.pane.options.startAngle === correctAngle + 360) ||\n                            (axis.pane.options.startAngle === correctAngle - 360)) {\n                            labelDir = 'start';\n                        }\n                        if ((correctAngle >= -90 && correctAngle <= 90) ||\n                            (correctAngle >= -360 && correctAngle <= -270) ||\n                            (correctAngle >= 270 && correctAngle <= 360)) {\n                            align = (labelDir === 'start') ? 'right' : 'left';\n                        }\n                        else {\n                            align = (labelDir === 'start') ? 'left' : 'right';\n                        }\n                        // For angles between (90 + n * 180) +- 20\n                        if (reducedAngle2 > 70 && reducedAngle2 < 110) {\n                            align = 'center';\n                        }\n                        // Auto Y translation\n                        if (reducedAngle1 < 15 ||\n                            (reducedAngle1 >= 180 && reducedAngle1 < 195)) {\n                            translateY = labelBBox.height * 0.3;\n                        }\n                        else if (reducedAngle1 >= 15 && reducedAngle1 <= 35) {\n                            translateY = labelDir === 'start' ?\n                                0 : labelBBox.height * 0.75;\n                        }\n                        else if (reducedAngle1 >= 195 && reducedAngle1 <= 215) {\n                            translateY = labelDir === 'start' ?\n                                labelBBox.height * 0.75 : 0;\n                        }\n                        else if (reducedAngle1 > 35 && reducedAngle1 <= 90) {\n                            translateY = labelDir === 'start' ?\n                                -labelBBox.height * 0.25 : labelBBox.height;\n                        }\n                        else if (reducedAngle1 > 215 && reducedAngle1 <= 270) {\n                            translateY = labelDir === 'start' ?\n                                labelBBox.height : -labelBBox.height * 0.25;\n                        }\n                        // Auto X translation\n                        if (reducedAngle2 < 15) {\n                            translateX = labelDir === 'start' ?\n                                -labelBBox.height * 0.15 : labelBBox.height * 0.15;\n                        }\n                        else if (reducedAngle2 > 165 && reducedAngle2 <= 180) {\n                            translateX = labelDir === 'start' ?\n                                labelBBox.height * 0.15 : -labelBBox.height * 0.15;\n                        }\n                        label.attr({ align: align });\n                        label.translate(translateX, translateY + labelYPosCorrection);\n                    }\n                    e.pos.x = ret.x + (labelOptions.x || 0);\n                    e.pos.y = ret.y + (optionsY || 0);\n                }\n            }\n            /**\n             * Add special cases within the Tick class' methods for radial axes.\n             */\n            function onTickAfterGetPosition(e) {\n                if (this.axis.getPosition) {\n                    extend(e.pos, this.axis.getPosition(this.pos));\n                }\n            }\n            /**\n             * Update default options for radial axes from setOptions method.\n             */\n            function onGlobalSetOptions({ options }) {\n                if (options.xAxis) {\n                    merge(true, RadialAxis.radialDefaultOptions.circular, options.xAxis);\n                }\n                if (options.yAxis) {\n                    merge(true, RadialAxis.radialDefaultOptions.radialGauge, options.yAxis);\n                }\n            }\n            /**\n             * Translate from intermediate plotX (angle), plotY (axis.len - radius)\n             * to final chart coordinates.\n             *\n             * @private\n             * @param {number} angle\n             * Translation angle.\n             * @param {number} radius\n             * Translation radius.\n             */\n            function postTranslate(angle, radius) {\n                const chart = this.chart, center = this.center;\n                angle = this.startAngleRad + angle;\n                return {\n                    x: chart.plotLeft + center[0] + Math.cos(angle) * radius,\n                    y: chart.plotTop + center[1] + Math.sin(angle) * radius\n                };\n            }\n            /**\n             * Prevent setting Y axis dirty.\n             */\n            function renderHidden() {\n                this.isDirty = false;\n            }\n            /**\n             * Override the setAxisSize method to use the arc's circumference as\n             * length. This allows tickPixelInterval to apply to pixel lengths along\n             * the perimeter.\n             * @private\n             */\n            function setAxisSize() {\n                const axisProto = this.constructor.prototype;\n                let center, start;\n                axisProto.setAxisSize.call(this);\n                if (this.isRadial) {\n                    // Set the center array\n                    this.pane.updateCenter(this);\n                    // In case when the innerSize is set in a polar chart, the axis'\n                    // center cannot be a reference to pane's center\n                    center = this.center = this.pane.center.slice();\n                    // The sector is used in Axis.translate to compute the\n                    // translation of reversed axis points (#2570)\n                    if (this.isCircular) {\n                        this.sector = this.endAngleRad - this.startAngleRad;\n                    }\n                    else {\n                        // When the pane's startAngle or the axis' angle is set then\n                        // new x and y values for vertical axis' center must be\n                        // calculated\n                        start = this.postTranslate(this.angleRad, center[3] / 2);\n                        center[0] = start.x - this.chart.plotLeft;\n                        center[1] = start.y - this.chart.plotTop;\n                    }\n                    // Axis len is used to lay out the ticks\n                    this.len = this.width = this.height =\n                        (center[2] - center[3]) * pick(this.sector, 1) / 2;\n                }\n            }\n            /**\n             * Override setAxisTranslation by setting the translation to the\n             * difference in rotation. This allows the translate method to return\n             * angle for any given value.\n             *\n             * @private\n             */\n            function setAxisTranslation() {\n                const axisProto = this.constructor.prototype;\n                // Call uber method\n                axisProto.setAxisTranslation.call(this);\n                // Set transA and minPixelPadding\n                if (this.center) { // It's not defined the first time\n                    if (this.isCircular) {\n                        this.transA = (this.endAngleRad - this.startAngleRad) /\n                            ((this.max - this.min) || 1);\n                    }\n                    else {\n                        // The transA here is the length of the axis, so in case\n                        // of inner radius, the length must be decreased by it\n                        this.transA = ((this.center[2] - this.center[3]) / 2) /\n                            ((this.max - this.min) || 1);\n                    }\n                    if (this.isXAxis) {\n                        this.minPixelPadding = this.transA * this.minPointOffset;\n                    }\n                    else {\n                        // This is a workaround for regression #2593, but categories\n                        // still don't position correctly.\n                        this.minPixelPadding = 0;\n                    }\n                }\n            }\n            /**\n             * Merge and set options.\n             */\n            function setOptions(userOptions) {\n                const { coll } = this;\n                const { angular, inverted, polar } = this.chart;\n                let defaultPolarOptions = {};\n                if (angular) {\n                    if (!this.isXAxis) {\n                        defaultPolarOptions = merge(defaultOptions.yAxis, RadialAxis.radialDefaultOptions.radialGauge);\n                    }\n                }\n                else if (polar) {\n                    defaultPolarOptions = this.horiz ?\n                        merge(defaultOptions.xAxis, RadialAxis.radialDefaultOptions.circular) :\n                        merge(coll === 'xAxis' ?\n                            defaultOptions.xAxis :\n                            defaultOptions.yAxis, RadialAxis.radialDefaultOptions.radial);\n                }\n                if (inverted && coll === 'yAxis') {\n                    defaultPolarOptions.stackLabels = isObject(defaultOptions.yAxis, true) ? defaultOptions.yAxis.stackLabels : {};\n                    defaultPolarOptions.reversedStacks = true;\n                }\n                const options = this.options = merge(defaultPolarOptions, userOptions);\n                // Make sure the plotBands array is instantiated for each Axis\n                // (#2649)\n                if (!options.plotBands) {\n                    options.plotBands = [];\n                }\n                fireEvent(this, 'afterSetOptions');\n            }\n            /**\n             * Wrap the getMarkPath function to return the path of the radial marker.\n             */\n            function wrapTickGetMarkPath(proceed, x, y, tickLength, tickWidth, horiz, renderer) {\n                const axis = this.axis;\n                let endPoint, ret;\n                if (axis.isRadial) {\n                    endPoint = axis.getPosition(this.pos, axis.center[2] / 2 + tickLength);\n                    ret = [\n                        'M',\n                        x,\n                        y,\n                        'L',\n                        endPoint.x,\n                        endPoint.y\n                    ];\n                }\n                else {\n                    ret = proceed.call(this, x, y, tickLength, tickWidth, horiz, renderer);\n                }\n                return ret;\n            }\n            /* eslint-enable valid-jsdoc */\n        })(RadialAxis || (RadialAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RadialAxis;\n    });\n    _registerModule(_modules, 'Series/PolarComposition.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Extensions/Pane/Pane.js'], _modules['Core/Axis/RadialAxis.js'], _modules['Core/Utilities.js']], function (A, H, Series, Pane, RadialAxis, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { animObject } = A;\n        const { composed } = H;\n        const { addEvent, defined, find, isNumber, merge, pick, pushUnique, relativeLength, splat, uniqueKey, wrap } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function clipCircle(renderer, x, y, r, innerR) {\n            const id = uniqueKey(), clipPath = renderer.createElement('clipPath').attr({\n                id: id\n            }).add(renderer.defs), wrapper = innerR ?\n                renderer.arc(x, y, r, innerR, 0, 2 * Math.PI).add(clipPath) :\n                renderer.circle(x, y, r).add(clipPath);\n            wrapper.id = id;\n            wrapper.clipPath = clipPath;\n            return wrapper;\n        }\n        /**\n         * Find correct align and vertical align based on an angle in polar chart\n         * @private\n         */\n        function findAlignments(angle, options) {\n            let align, verticalAlign;\n            if (options.align === null) {\n                if (angle > 20 && angle < 160) {\n                    align = 'left'; // Right hemisphere\n                }\n                else if (angle > 200 && angle < 340) {\n                    align = 'right'; // Left hemisphere\n                }\n                else {\n                    align = 'center'; // Top or bottom\n                }\n                options.align = align;\n            }\n            if (options.verticalAlign === null) {\n                if (angle < 45 || angle > 315) {\n                    verticalAlign = 'bottom'; // Top part\n                }\n                else if (angle > 135 && angle < 225) {\n                    verticalAlign = 'top'; // Bottom part\n                }\n                else {\n                    verticalAlign = 'middle'; // Left or right\n                }\n                options.verticalAlign = verticalAlign;\n            }\n            return options;\n        }\n        /**\n         * #6212 Calculate connectors for spline series in polar chart.\n         * @private\n         * @param {boolean} calculateNeighbours\n         *        Check if connectors should be calculated for neighbour points as\n         *        well allows short recurrence\n         */\n        function getConnectors(segment, index, calculateNeighbours, connectEnds) {\n            const smoothing = 1.5, denom = smoothing + 1, addedNumber = connectEnds ? 1 : 0;\n            let i, leftContX, leftContY, rightContX, rightContY, jointAngle;\n            // Calculate final index of points depending on the initial index value.\n            // Because of calculating neighbours, index may be outside segment\n            // array.\n            if (index >= 0 && index <= segment.length - 1) {\n                i = index;\n            }\n            else if (index < 0) {\n                i = segment.length - 1 + index;\n            }\n            else {\n                i = 0;\n            }\n            // 1 means control points midway between points, 2 means 1/3 from\n            // the point, 3 is 1/4 etc;\n            const prevPointInd = ((i - 1 < 0) ? segment.length - (1 + addedNumber) : i - 1), nextPointInd = (i + 1 > segment.length - 1) ? addedNumber : i + 1, previousPoint = segment[prevPointInd], nextPoint = segment[nextPointInd], previousX = previousPoint.plotX, previousY = previousPoint.plotY, nextX = nextPoint.plotX, nextY = nextPoint.plotY, plotX = segment[i].plotX, // Actual point\n            plotY = segment[i].plotY;\n            leftContX = (smoothing * plotX + previousX) / denom;\n            leftContY = (smoothing * plotY + previousY) / denom;\n            rightContX = (smoothing * plotX + nextX) / denom;\n            rightContY = (smoothing * plotY + nextY) / denom;\n            // Distance left control point\n            const dLControlPoint = Math.sqrt(Math.pow(leftContX - plotX, 2) + Math.pow(leftContY - plotY, 2)), dRControlPoint = Math.sqrt(Math.pow(rightContX - plotX, 2) + Math.pow(rightContY - plotY, 2)), leftContAngle = Math.atan2(leftContY - plotY, leftContX - plotX), rightContAngle = Math.atan2(rightContY - plotY, rightContX - plotX);\n            jointAngle = (Math.PI / 2) + ((leftContAngle + rightContAngle) / 2);\n            // Ensure the right direction, jointAngle should be in the same quadrant\n            // as leftContAngle\n            if (Math.abs(leftContAngle - jointAngle) > Math.PI / 2) {\n                jointAngle -= Math.PI;\n            }\n            // Find the corrected control points for a spline straight through the\n            // point\n            leftContX = plotX + Math.cos(jointAngle) * dLControlPoint;\n            leftContY = plotY + Math.sin(jointAngle) * dLControlPoint;\n            rightContX = plotX + Math.cos(Math.PI + jointAngle) * dRControlPoint;\n            rightContY = plotY + Math.sin(Math.PI + jointAngle) * dRControlPoint;\n            // Push current point's connectors into returned object\n            const ret = {\n                rightContX: rightContX,\n                rightContY: rightContY,\n                leftContX: leftContX,\n                leftContY: leftContY,\n                plotX: plotX,\n                plotY: plotY\n            };\n            // Calculate connectors for previous and next point and push them inside\n            // returned object\n            if (calculateNeighbours) {\n                ret.prevPointCont = getConnectors(segment, prevPointInd, false, connectEnds);\n            }\n            return ret;\n        }\n        /**\n         *\n         */\n        function onChartAfterDrawChartBox() {\n            (this.pane || []).forEach((pane) => {\n                pane.render();\n            });\n        }\n        /**\n         * If polar has polygonal grid lines, force start and endOnTick on radial axis\n         * @private\n         */\n        function onChartAfterInit(event) {\n            const xAxis = event.args[0].xAxis, yAxis = event.args[0].yAxis, chart = event.args[0].chart;\n            if (xAxis && yAxis) {\n                if (yAxis.gridLineInterpolation === 'polygon') {\n                    xAxis.startOnTick = true;\n                    xAxis.endOnTick = true;\n                }\n                else if (xAxis.gridLineInterpolation === 'polygon' &&\n                    chart.inverted) {\n                    yAxis.startOnTick = true;\n                    yAxis.endOnTick = true;\n                }\n            }\n        }\n        /**\n         *\n         */\n        function onChartGetAxes() {\n            if (!this.pane) {\n                this.pane = [];\n            }\n            this.options.pane = splat(this.options.pane);\n            this.options.pane.forEach((paneOptions) => {\n                new Pane(// eslint-disable-line no-new\n                paneOptions, this);\n            }, this);\n        }\n        /**\n         * Get selection dimensions\n         * @private\n         */\n        function onPointerGetSelectionBox(event) {\n            const marker = event.args.marker, xAxis = this.chart.xAxis[0], yAxis = this.chart.yAxis[0], inverted = this.chart.inverted, radialAxis = inverted ? yAxis : xAxis, linearAxis = inverted ? xAxis : yAxis;\n            if (this.chart.polar) {\n                event.preventDefault();\n                const start = (marker.attr ? marker.attr('start') : marker.start) - radialAxis.startAngleRad, r = (marker.attr ? marker.attr('r') : marker.r), end = (marker.attr ? marker.attr('end') : marker.end) - radialAxis.startAngleRad, innerR = (marker.attr ? marker.attr('innerR') : marker.innerR);\n                event.result.x = start + radialAxis.pos;\n                event.result.width = end - start;\n                // `innerR` goes from pane's center but `toValue` computes values from\n                // top\n                event.result.y = linearAxis.len + linearAxis.pos - r;\n                event.result.height = r - innerR;\n            }\n        }\n        /**\n         * Get attrs for Polar selection marker\n         * @private\n         */\n        function onPointerGetSelectionMarkerAttrs(event) {\n            const chart = this.chart;\n            if (chart.polar && chart.hoverPane && chart.hoverPane.axis) {\n                event.preventDefault();\n                const center = chart.hoverPane.center, mouseDownX = chart.mouseDownX || 0, mouseDownY = chart.mouseDownY || 0, chartY = event.args.chartY, chartX = event.args.chartX, fullCircle = Math.PI * 2, startAngleRad = chart.hoverPane.axis.startAngleRad, endAngleRad = chart.hoverPane.axis.endAngleRad, linearAxis = chart.inverted ? chart.xAxis[0] : chart.yAxis[0], attrs = {};\n                let shapeType = 'arc';\n                attrs.x = center[0] + chart.plotLeft;\n                attrs.y = center[1] + chart.plotTop;\n                // Adjust the width of the selection marker\n                if (this.zoomHor) {\n                    const paneRadRange = startAngleRad > 0 ?\n                        endAngleRad - startAngleRad :\n                        Math.abs(startAngleRad) + Math.abs(endAngleRad);\n                    let startAngle = Math.atan2(mouseDownY - chart.plotTop - center[1], mouseDownX - chart.plotLeft - center[0]) - startAngleRad, endAngle = Math.atan2(chartY - chart.plotTop - center[1], chartX - chart.plotLeft - center[0]) - startAngleRad;\n                    attrs.r = center[2] / 2;\n                    attrs.innerR = center[3] / 2;\n                    if (startAngle <= 0) {\n                        startAngle += fullCircle;\n                    }\n                    if (endAngle <= 0) {\n                        endAngle += fullCircle;\n                    }\n                    if (endAngle < startAngle) {\n                        // Swapping angles\n                        endAngle = [startAngle, startAngle = endAngle][0];\n                    }\n                    // If pane is not a full circle we need to let users zoom to the min\n                    // We do this by swapping angles after pointer crosses\n                    // middle angle (swapAngle) of the missing slice of the pane\n                    if (paneRadRange < fullCircle) {\n                        const swapAngle = endAngleRad + (fullCircle - paneRadRange) / 2;\n                        if (startAngleRad + endAngle > swapAngle) {\n                            endAngle = startAngle;\n                            startAngle = startAngleRad <= 0 ? startAngleRad : 0;\n                        }\n                    }\n                    const start = attrs.start =\n                        Math.max(startAngle + startAngleRad, startAngleRad), end = attrs.end =\n                        Math.min(endAngle + startAngleRad, endAngleRad);\n                    // Adjust the selection shape for polygon grid lines\n                    if (linearAxis.options.gridLineInterpolation === 'polygon') {\n                        const radialAxis = chart.hoverPane.axis, min = start - radialAxis.startAngleRad + radialAxis.pos, max = end - start;\n                        let path = linearAxis.getPlotLinePath({\n                            value: linearAxis.max\n                        }), pathStart = radialAxis.toValue(min), pathEnd = radialAxis.toValue(min + max);\n                        if (pathStart < radialAxis.getExtremes().min) {\n                            const { min, max } = radialAxis.getExtremes();\n                            pathStart = max - (min - pathStart);\n                        }\n                        if (pathEnd < radialAxis.getExtremes().min) {\n                            const { min, max } = radialAxis.getExtremes();\n                            pathEnd = max - (min - pathEnd);\n                        }\n                        if (pathEnd < pathStart) {\n                            // Swapping angles\n                            pathEnd = [pathStart, pathStart = pathEnd][0];\n                        }\n                        // Get trimmed path\n                        path = trimPath(path, pathStart, pathEnd, radialAxis);\n                        // Add center to the path\n                        path.push([\n                            'L', center[0] + chart.plotLeft,\n                            chart.plotTop + center[1]\n                        ]);\n                        attrs.d = path;\n                        shapeType = 'path';\n                    }\n                }\n                // Adjust the height of the selection marker\n                if (this.zoomVert) {\n                    const linearAxis = chart.inverted ? chart.xAxis[0] : chart.yAxis[0];\n                    let innerR = Math.sqrt(Math.pow(mouseDownX - chart.plotLeft - center[0], 2) +\n                        Math.pow(mouseDownY - chart.plotTop - center[1], 2)), r = Math.sqrt(Math.pow(chartX - chart.plotLeft - center[0], 2) +\n                        Math.pow(chartY - chart.plotTop - center[1], 2));\n                    if (r < innerR) {\n                        // Swapping angles\n                        innerR = [r, r = innerR][0];\n                    }\n                    if (r > center[2] / 2) {\n                        r = center[2] / 2;\n                    }\n                    if (innerR < center[3] / 2) {\n                        innerR = center[3] / 2;\n                    }\n                    if (!this.zoomHor) {\n                        attrs.start = startAngleRad;\n                        attrs.end = endAngleRad;\n                    }\n                    attrs.r = r;\n                    attrs.innerR = innerR;\n                    if (linearAxis.options.gridLineInterpolation === 'polygon') {\n                        const end = linearAxis.toValue(linearAxis.len + linearAxis.pos - innerR), start = linearAxis.toValue(linearAxis.len + linearAxis.pos - r), path = linearAxis.getPlotLinePath({\n                            value: start\n                        }).concat(linearAxis.getPlotLinePath({\n                            value: end,\n                            reverse: true\n                        }));\n                        attrs.d = path;\n                        shapeType = 'path';\n                    }\n                }\n                if (this.zoomHor &&\n                    this.zoomVert &&\n                    linearAxis.options.gridLineInterpolation === 'polygon') {\n                    const radialAxis = chart.hoverPane.axis, start = attrs.start || 0, end = attrs.end || 0, min = start - radialAxis.startAngleRad + radialAxis.pos, max = end - start, pathStart = radialAxis.toValue(min), pathEnd = radialAxis.toValue(min + max);\n                    // Trim path\n                    if (attrs.d instanceof Array) {\n                        let innerPath = attrs.d.slice(0, attrs.d.length / 2), outerPath = attrs.d.slice(attrs.d.length / 2, attrs.d.length);\n                        outerPath = [...outerPath].reverse();\n                        const radialAxis = chart.hoverPane.axis;\n                        innerPath = trimPath(innerPath, pathStart, pathEnd, radialAxis);\n                        outerPath = trimPath(outerPath, pathStart, pathEnd, radialAxis);\n                        if (outerPath) {\n                            (outerPath[0][0]) = 'L';\n                        }\n                        outerPath = [...outerPath].reverse();\n                        attrs.d = innerPath.concat(outerPath);\n                        shapeType = 'path';\n                    }\n                }\n                event.attrs = attrs;\n                event.shapeType = shapeType;\n            }\n        }\n        /**\n         * @private\n         */\n        function onSeriesAfterInit() {\n            const chart = this.chart;\n            if (chart.polar) {\n                this.polar = new PolarAdditions(this);\n                // Add flags that identifies radial inverted series\n                if (chart.inverted) {\n                    this.isRadialSeries = true;\n                    if (this.is('column')) {\n                        this.isRadialBar = true;\n                    }\n                }\n            }\n        }\n        /**\n         * Extend translate. The plotX and plotY values are computed as if the polar\n         * chart were a cartesian plane, where plotX denotes the angle in radians\n         * and (yAxis.len - plotY) is the pixel distance from center.\n         * @private\n         */\n        function onSeriesAfterTranslate() {\n            if (this.chart.polar && this.xAxis) {\n                const series = this, { xAxis, yAxis } = series, chart = series.chart;\n                // Prepare k-d-tree handling. It searches by angle (clientX) in\n                // case of shared tooltip, and by two dimensional distance in case\n                // of non-shared.\n                series.kdByAngle = chart.tooltip && chart.tooltip.shared;\n                if (series.kdByAngle || chart.inverted) {\n                    series.searchPoint = searchPointByAngleOrInverted;\n                }\n                else {\n                    series.options.findNearestPointBy = 'xy';\n                }\n                const points = series.points;\n                let i = points.length;\n                while (i--) {\n                    // Translate plotX, plotY from angle and radius to true plot\n                    // coordinates\n                    if (!series.is('column') && !series.is('columnrange')) {\n                        series.polar.toXY(points[i]);\n                    }\n                    // Treat points below Y axis min as null (#10082)\n                    if (!chart.hasParallelCoordinates &&\n                        !series.yAxis.reversed) {\n                        if (pick(points[i].y, Number.MIN_VALUE) < yAxis.min ||\n                            points[i].x < xAxis.min ||\n                            points[i].x > xAxis.max) {\n                            // Destroy markers\n                            points[i].isNull = true;\n                            // Destroy column's graphic\n                            points[i].plotY = NaN;\n                        }\n                        else {\n                            // Restore isNull flag\n                            points[i].isNull =\n                                points[i].isValid && !points[i].isValid();\n                        }\n                    }\n                }\n                // Perform clip after render\n                if (!this.hasClipCircleSetter) {\n                    this.hasClipCircleSetter = !!series.eventsToUnbind.push(addEvent(series, 'afterRender', function () {\n                        let circ;\n                        if (chart.polar && this.options.clip !== false) {\n                            // For clipping purposes there is a need for\n                            // coordinates from the absolute center\n                            circ = this.yAxis.pane.center;\n                            if (!this.clipCircle) {\n                                this.clipCircle = clipCircle(chart.renderer, circ[0], circ[1], circ[2] / 2, circ[3] / 2);\n                            }\n                            else {\n                                this.clipCircle.animate({\n                                    x: circ[0],\n                                    y: circ[1],\n                                    r: circ[2] / 2,\n                                    innerR: circ[3] / 2\n                                });\n                            }\n                            this.group.clip(this.clipCircle);\n                            this.setClip = H.noop;\n                        }\n                    }));\n                }\n            }\n        }\n        /**\n         * Search a k-d tree by the point angle (used for shared tooltips in polar) or\n         * the inverted point.\n         * charts\n         * @private\n         */\n        function searchPointByAngleOrInverted(e) {\n            const series = this, chart = series.chart, xAxis = series.xAxis, yAxis = series.yAxis, center = xAxis.pane && xAxis.pane.center, plotX = e.chartX - (center && center[0] || 0) - chart.plotLeft, plotY = e.chartY - (center && center[1] || 0) - chart.plotTop;\n            const searchKDTreePoint = chart.inverted ? {\n                clientX: e.chartX - yAxis.pos,\n                plotY: e.chartY - xAxis.pos\n            } : {\n                clientX: 180 + (Math.atan2(plotX, plotY) * (-180 / Math.PI))\n            };\n            return series.searchKDTree(searchKDTreePoint);\n        }\n        /**\n         * Trim polygonal path\n         * @private\n         */\n        function trimPath(path, start, end, radialAxis) {\n            const tickInterval = radialAxis.tickInterval, ticks = radialAxis.tickPositions;\n            let lastTick = find(ticks, (tick) => tick >= end), firstTick = find([...ticks].reverse(), (tick) => tick <= start);\n            if (!defined(lastTick)) {\n                lastTick = ticks[ticks.length - 1];\n            }\n            if (!defined(firstTick)) {\n                firstTick = ticks[0];\n                lastTick += tickInterval;\n                path[0][0] = 'L';\n                // To do: figure out why -3 or -2\n                path.unshift(path[path.length - 3]);\n            }\n            path = path.slice(ticks.indexOf(firstTick), ticks.indexOf(lastTick) + 1);\n            path[0][0] = 'M';\n            return path;\n        }\n        /**\n         * Extend chart.get to also search in panes. Used internally in\n         * responsiveness and chart.update.\n         * @private\n         */\n        function wrapChartGet(proceed, id) {\n            return find(this.pane || [], (pane) => (\n            // @todo remove id or define id type:\n            pane.options.id === id)) || proceed.call(this, id);\n        }\n        /**\n         * Align column data labels outside the columns. #1199.\n         * @private\n         */\n        function wrapColumnSeriesAlignDataLabel(proceed, point, dataLabel, options, alignTo, isNew) {\n            const chart = this.chart, inside = pick(options.inside, !!this.options.stacking);\n            let angle, shapeArgs, labelPos;\n            if (chart.polar) {\n                angle = point.rectPlotX / Math.PI * 180;\n                if (!chart.inverted) {\n                    // Align nicely outside the perimeter of the columns\n                    options = findAlignments(angle, options);\n                }\n                else { // Required corrections for data labels of inverted bars\n                    // The plotX and plotY are correctly set therefore they\n                    // don't need to be swapped (inverted argument is false)\n                    this.forceDL = chart.isInsidePlot(point.plotX, point.plotY);\n                    // Checks if labels should be positioned inside\n                    if (inside && point.shapeArgs) {\n                        shapeArgs = point.shapeArgs;\n                        // Calculates pixel positions for a data label to be\n                        // inside\n                        labelPos =\n                            this.yAxis.postTranslate(\n                            // Angle\n                            ((shapeArgs.start || 0) + (shapeArgs.end || 0)) / 2 -\n                                this\n                                    .xAxis.startAngleRad, \n                            // Radius\n                            point.barX +\n                                point.pointWidth / 2);\n                        alignTo = merge(alignTo, {\n                            x: labelPos.x - chart.plotLeft,\n                            y: labelPos.y - chart.plotTop\n                        });\n                    }\n                    else if (point.tooltipPos) {\n                        alignTo = merge(alignTo, {\n                            x: point.tooltipPos[0],\n                            y: point.tooltipPos[1]\n                        });\n                    }\n                    options.align = pick(options.align, 'center');\n                    options.verticalAlign =\n                        pick(options.verticalAlign, 'middle');\n                }\n                Series.prototype.alignDataLabel.call(this, point, dataLabel, options, alignTo, isNew);\n                // Hide label of a point (only inverted) that is outside the\n                // visible y range\n                if (this.isRadialBar && point.shapeArgs &&\n                    point.shapeArgs.start === point.shapeArgs.end) {\n                    dataLabel.hide();\n                }\n                else {\n                    dataLabel.show();\n                }\n            }\n            else {\n                proceed.call(this, point, dataLabel, options, alignTo, isNew);\n            }\n        }\n        /**\n         * Extend the column prototype's translate method\n         * @private\n         */\n        function onAfterColumnTranslate() {\n            const series = this, options = series.options, stacking = options.stacking, chart = series.chart, xAxis = series.xAxis, yAxis = series.yAxis, reversed = yAxis.reversed, center = yAxis.center, startAngleRad = xAxis.startAngleRad, endAngleRad = xAxis.endAngleRad, visibleRange = endAngleRad - startAngleRad;\n            let threshold = options.threshold, thresholdAngleRad = 0, points, point, i, yMin, yMax, start = 0, end = 0, tooltipPos, pointX, pointY, stackValues, stack, barX, innerR, r;\n            // Postprocess plot coordinates\n            if (xAxis.isRadial) {\n                points = series.points;\n                i = points.length;\n                yMin = yAxis.translate(yAxis.min);\n                yMax = yAxis.translate(yAxis.max);\n                threshold = options.threshold || 0;\n                if (chart.inverted) {\n                    // Finding a correct threshold\n                    if (isNumber(threshold)) {\n                        thresholdAngleRad = yAxis.translate(threshold);\n                        // Checks if threshold is outside the visible range\n                        if (defined(thresholdAngleRad)) {\n                            if (thresholdAngleRad < 0) {\n                                thresholdAngleRad = 0;\n                            }\n                            else if (thresholdAngleRad > visibleRange) {\n                                thresholdAngleRad = visibleRange;\n                            }\n                            // Adding start angle offset\n                            series.translatedThreshold =\n                                thresholdAngleRad + startAngleRad;\n                        }\n                    }\n                }\n                while (i--) {\n                    point = points[i];\n                    barX = point.barX;\n                    pointX = point.x;\n                    pointY = point.y;\n                    point.shapeType = 'arc';\n                    if (chart.inverted) {\n                        point.plotY = yAxis.translate(pointY);\n                        if (stacking && yAxis.stacking) {\n                            stack = yAxis.stacking.stacks[(pointY < 0 ? '-' : '') +\n                                series.stackKey];\n                            if (series.visible && stack && stack[pointX]) {\n                                if (!point.isNull) {\n                                    stackValues = stack[pointX].points[series.getStackIndicator(void 0, pointX, series.index).key];\n                                    // Translating to radial values\n                                    start = yAxis.translate(stackValues[0]);\n                                    end = yAxis.translate(stackValues[1]);\n                                    // If starting point is beyond the\n                                    // range, set it to 0\n                                    if (defined(start)) {\n                                        start = U.clamp(start, 0, visibleRange);\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            // Initial start and end angles for radial bar\n                            start = thresholdAngleRad;\n                            end = point.plotY;\n                        }\n                        if (start > end) {\n                            // Swapping start and end\n                            end = [start, start = end][0];\n                        }\n                        // Prevent from rendering point outside the\n                        // acceptable circular range\n                        if (!reversed) {\n                            if (start < yMin) {\n                                start = yMin;\n                            }\n                            else if (end > yMax) {\n                                end = yMax;\n                            }\n                            else if (end < yMin || start > yMax) {\n                                start = end = 0;\n                            }\n                        }\n                        else {\n                            if (end > yMin) {\n                                end = yMin;\n                            }\n                            else if (start < yMax) {\n                                start = yMax;\n                            }\n                            else if (start > yMin || end < yMax) {\n                                start = end = visibleRange;\n                            }\n                        }\n                        if (yAxis.min > yAxis.max) {\n                            start = end = reversed ? visibleRange : 0;\n                        }\n                        start += startAngleRad;\n                        end += startAngleRad;\n                        if (center) {\n                            point.barX = barX += center[3] / 2;\n                        }\n                        // In case when radius, inner radius or both are negative, a\n                        // point is rendered but partially or as a center point\n                        innerR = Math.max(barX, 0);\n                        r = Math.max(barX + point.pointWidth, 0);\n                        // Handle border radius\n                        const brOption = options.borderRadius, brValue = typeof brOption === 'object' ?\n                            brOption.radius : brOption, borderRadius = relativeLength(brValue || 0, r - innerR);\n                        point.shapeArgs = {\n                            x: center[0],\n                            y: center[1],\n                            r,\n                            innerR,\n                            start,\n                            end,\n                            borderRadius\n                        };\n                        // Fade out the points if not inside the polar \"plot area\"\n                        point.opacity = start === end ? 0 : void 0;\n                        // A correct value for stacked or not fully visible\n                        // point\n                        point.plotY = (defined(series.translatedThreshold) &&\n                            (start < series.translatedThreshold ? start : end)) -\n                            startAngleRad;\n                        // Non-inverted polar columns\n                    }\n                    else {\n                        start = barX + startAngleRad;\n                        point.shapeArgs = series.polar.arc(point.yBottom, point.plotY, start, start + point.pointWidth);\n                        // Disallow border radius on polar columns for now. It would\n                        // take some refactoring to work with the `scope` and the\n                        // `where` options. Those options would require that only\n                        // individual corners be rounded, in practice individual calls\n                        // to applyBorderRadius from the extended `arc` function. That\n                        // would be a viable solution, though it would not be perfect\n                        // until we implemented rounding that included the lower points\n                        // in the stack, like we have for cartesian column.\n                        point.shapeArgs.borderRadius = 0;\n                    }\n                    // Provided a correct coordinates for the tooltip\n                    series.polar.toXY(point);\n                    if (chart.inverted) {\n                        tooltipPos = yAxis.postTranslate(point.rectPlotY, barX + point.pointWidth / 2);\n                        point.tooltipPos = [\n                            tooltipPos.x - chart.plotLeft,\n                            tooltipPos.y - chart.plotTop\n                        ];\n                    }\n                    else {\n                        point.tooltipPos = [point.plotX, point.plotY];\n                    }\n                    if (center) {\n                        point.ttBelow = point.plotY > center[1];\n                    }\n                }\n            }\n        }\n        /**\n         * Extend getSegmentPath to allow connecting ends across 0 to provide a\n         * closed circle in line-like series.\n         * @private\n         */\n        function wrapLineSeriesGetGraphPath(proceed, points) {\n            const series = this;\n            let firstValid, popLastPoint;\n            // Connect the path\n            if (this.chart.polar) {\n                points = points || this.points;\n                // Append first valid point in order to connect the ends\n                for (let i = 0; i < points.length; i++) {\n                    if (!points[i].isNull) {\n                        firstValid = i;\n                        break;\n                    }\n                }\n                /**\n                 * Polar charts only. Whether to connect the ends of a line series\n                 * plot across the extremes.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/line-connectends-false/\n                 *         Do not connect\n                 *\n                 * @type      {boolean}\n                 * @since     2.3.0\n                 * @product   highcharts\n                 * @apioption plotOptions.series.connectEnds\n                 */\n                if (this.options.connectEnds !== false &&\n                    typeof firstValid !== 'undefined') {\n                    this.connectEnds = true; // Re-used in splines\n                    points.splice(points.length, 0, points[firstValid]);\n                    popLastPoint = true;\n                }\n                // For area charts, pseudo points are added to the graph, now we\n                // need to translate these\n                points.forEach((point) => {\n                    if (typeof point.polarPlotY === 'undefined') {\n                        series.polar.toXY(point);\n                    }\n                });\n            }\n            // Run uber method\n            const ret = proceed.apply(this, [].slice.call(arguments, 1));\n            // #6212 points.splice method is adding points to an array. In case of\n            // areaspline getGraphPath method is used two times and in both times\n            // points are added to an array. That is why points.pop is used, to get\n            // unmodified points.\n            if (popLastPoint) {\n                points.pop();\n            }\n            return ret;\n        }\n        /**\n         * Extend getCoordinates to prepare for polar axis values\n         * @private\n         */\n        function wrapPointerGetCoordinates(proceed, e) {\n            const chart = this.chart;\n            let ret = {\n                xAxis: [],\n                yAxis: []\n            };\n            if (chart.polar) {\n                chart.axes.forEach((axis) => {\n                    // Skip colorAxis\n                    if (axis.coll === 'colorAxis') {\n                        return;\n                    }\n                    const isXAxis = axis.isXAxis, center = axis.center, x = e.chartX - center[0] - chart.plotLeft, y = e.chartY - center[1] - chart.plotTop;\n                    ret[isXAxis ? 'xAxis' : 'yAxis'].push({\n                        axis: axis,\n                        value: axis.translate(isXAxis ?\n                            Math.PI - Math.atan2(x, y) : // Angle\n                            // distance from center\n                            Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)), true)\n                    });\n                });\n            }\n            else {\n                ret = proceed.call(this, e);\n            }\n            return ret;\n        }\n        /**\n         * Prevent zooming on mobile devices\n         * @private\n         */\n        function wrapPointerPinch(proceed, e) {\n            if (this.chart.polar) {\n                return;\n            }\n            proceed.call(this, e);\n        }\n        /**\n         * Define the animate method for regular series\n         * @private\n         */\n        function wrapSeriesAnimate(proceed, init) {\n            const series = this, chart = this.chart, group = this.group, markerGroup = this.markerGroup, center = this.xAxis && this.xAxis.center, plotLeft = chart.plotLeft, plotTop = chart.plotTop;\n            let animation = this.options.animation, attribs, paneInnerR, graphic, shapeArgs, r, innerR;\n            // Specific animation for polar charts\n            if (chart.polar) {\n                if (series.isRadialBar) {\n                    if (!init) {\n                        // Run the pie animation for radial bars\n                        series.startAngleRad = pick(series.translatedThreshold, series.xAxis.startAngleRad);\n                        H.seriesTypes.pie.prototype.animate.call(series, init);\n                    }\n                }\n                else {\n                    animation = animObject(animation);\n                    // A different animation needed for column like series\n                    if (series.is('column')) {\n                        if (!init) {\n                            paneInnerR = center[3] / 2;\n                            series.points.forEach((point) => {\n                                graphic = point.graphic;\n                                shapeArgs = point.shapeArgs;\n                                r = shapeArgs && shapeArgs.r;\n                                innerR = shapeArgs && shapeArgs.innerR;\n                                if (graphic && shapeArgs) {\n                                    // Start values\n                                    graphic.attr({\n                                        r: paneInnerR,\n                                        innerR: paneInnerR\n                                    });\n                                    // Animate\n                                    graphic.animate({\n                                        r: r,\n                                        innerR: innerR\n                                    }, series.options.animation);\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        // Initialize the animation\n                        if (init) {\n                            // Scale down the group and place it in the center\n                            attribs = {\n                                translateX: center[0] + plotLeft,\n                                translateY: center[1] + plotTop,\n                                scaleX: 0.001,\n                                scaleY: 0.001\n                            };\n                            group.attr(attribs);\n                            if (markerGroup) {\n                                markerGroup.attr(attribs);\n                            }\n                            // Run the animation\n                        }\n                        else {\n                            attribs = {\n                                translateX: plotLeft,\n                                translateY: plotTop,\n                                scaleX: 1,\n                                scaleY: 1\n                            };\n                            group.animate(attribs, animation);\n                            if (markerGroup) {\n                                markerGroup.animate(attribs, animation);\n                            }\n                        }\n                    }\n                }\n                // For non-polar charts, revert to the basic animation\n            }\n            else {\n                proceed.call(this, init);\n            }\n        }\n        /**\n         * Overridden method for calculating a spline from one point to the next\n         * @private\n         */\n        function wrapSplineSeriesGetPointSpline(proceed, segment, point, i) {\n            let ret, connectors;\n            if (this.chart.polar) {\n                // `moveTo` or `lineTo`\n                if (!i) {\n                    ret = ['M', point.plotX, point.plotY];\n                }\n                else { // Curve from last point to this\n                    connectors = getConnectors(segment, i, true, this.connectEnds);\n                    const rightContX = connectors.prevPointCont &&\n                        connectors.prevPointCont.rightContX;\n                    const rightContY = connectors.prevPointCont &&\n                        connectors.prevPointCont.rightContY;\n                    ret = [\n                        'C',\n                        isNumber(rightContX) ? rightContX : connectors.plotX,\n                        isNumber(rightContY) ? rightContY : connectors.plotY,\n                        isNumber(connectors.leftContX) ?\n                            connectors.leftContX :\n                            connectors.plotX,\n                        isNumber(connectors.leftContY) ?\n                            connectors.leftContY :\n                            connectors.plotY,\n                        connectors.plotX,\n                        connectors.plotY\n                    ];\n                }\n            }\n            else {\n                ret = proceed.call(this, segment, point, i);\n            }\n            return ret;\n        }\n        /**\n         * Extend the point pos method to calculate point positions for the polar chart.\n         * @private\n         */\n        function wrapPointPos(proceed, chartCoordinates, plotY = this.plotY) {\n            if (!this.destroyed) {\n                const { plotX, series } = this, { chart } = series;\n                if (chart.polar &&\n                    isNumber(plotX) &&\n                    isNumber(plotY)) {\n                    return [\n                        plotX + (chartCoordinates ? chart.plotLeft : 0),\n                        plotY + (chartCoordinates ? chart.plotTop : 0)\n                    ];\n                }\n                return proceed.call(this, chartCoordinates, plotY);\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Extensions for polar charts. Additionally, much of the geometry required\n         * for polar charts is gathered in RadialAxes.js.\n         * @private\n         */\n        class PolarAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass, ChartClass, PointerClass, SeriesClass, TickClass, PointClass, AreaSplineRangeSeriesClass, ColumnSeriesClass, LineSeriesClass, SplineSeriesClass) {\n                Pane.compose(ChartClass, PointerClass);\n                RadialAxis.compose(AxisClass, TickClass);\n                if (pushUnique(composed, 'Polar')) {\n                    const chartProto = ChartClass.prototype, pointProto = PointClass.prototype, pointerProto = PointerClass.prototype, seriesProto = SeriesClass.prototype;\n                    addEvent(ChartClass, 'afterDrawChartBox', onChartAfterDrawChartBox);\n                    addEvent(ChartClass, 'getAxes', onChartGetAxes);\n                    addEvent(ChartClass, 'init', onChartAfterInit);\n                    wrap(chartProto, 'get', wrapChartGet);\n                    wrap(pointerProto, 'getCoordinates', wrapPointerGetCoordinates);\n                    wrap(pointerProto, 'pinch', wrapPointerPinch);\n                    addEvent(PointerClass, 'getSelectionMarkerAttrs', onPointerGetSelectionMarkerAttrs);\n                    addEvent(PointerClass, 'getSelectionBox', onPointerGetSelectionBox);\n                    addEvent(SeriesClass, 'afterInit', onSeriesAfterInit);\n                    addEvent(SeriesClass, 'afterTranslate', onSeriesAfterTranslate, { order: 2 } // Run after translation of ||-coords\n                    );\n                    addEvent(SeriesClass, 'afterColumnTranslate', onAfterColumnTranslate, { order: 4 });\n                    wrap(seriesProto, 'animate', wrapSeriesAnimate);\n                    wrap(pointProto, 'pos', wrapPointPos);\n                    if (ColumnSeriesClass) {\n                        const columnProto = ColumnSeriesClass.prototype;\n                        wrap(columnProto, 'alignDataLabel', wrapColumnSeriesAlignDataLabel);\n                        wrap(columnProto, 'animate', wrapSeriesAnimate);\n                    }\n                    if (LineSeriesClass) {\n                        const lineProto = LineSeriesClass.prototype;\n                        wrap(lineProto, 'getGraphPath', wrapLineSeriesGetGraphPath);\n                    }\n                    if (SplineSeriesClass) {\n                        const splineProto = SplineSeriesClass.prototype;\n                        wrap(splineProto, 'getPointSpline', wrapSplineSeriesGetPointSpline);\n                        if (AreaSplineRangeSeriesClass) {\n                            const areaSplineRangeProto = AreaSplineRangeSeriesClass.prototype;\n                            // #6430 Areasplinerange series use unwrapped getPointSpline\n                            // method, so we need to set this method again.\n                            areaSplineRangeProto.getPointSpline =\n                                splineProto.getPointSpline;\n                        }\n                    }\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(series) {\n                this.series = series;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            arc(low, high, start, end) {\n                const series = this.series, center = series.xAxis.center, len = series.yAxis.len, paneInnerR = center[3] / 2;\n                let r = len - high + paneInnerR, innerR = len - pick(low, len) + paneInnerR;\n                // Prevent columns from shooting through the pane's center\n                if (series.yAxis.reversed) {\n                    if (r < 0) {\n                        r = paneInnerR;\n                    }\n                    if (innerR < 0) {\n                        innerR = paneInnerR;\n                    }\n                }\n                // Return a new shapeArgs\n                return {\n                    x: center[0],\n                    y: center[1],\n                    r: r,\n                    innerR: innerR,\n                    start: start,\n                    end: end\n                };\n            }\n            /**\n             * Translate a point's plotX and plotY from the internal angle and radius\n             * measures to true plotX, plotY coordinates\n             * @private\n             */\n            toXY(point) {\n                const series = this.series, chart = series.chart, xAxis = series.xAxis, yAxis = series.yAxis, plotX = point.plotX, inverted = chart.inverted, pointY = point.y;\n                let plotY = point.plotY, radius = inverted ? plotX : yAxis.len - plotY, clientX;\n                // Corrected y position of inverted series other than column\n                if (inverted && series && !series.isRadialBar) {\n                    point.plotY = plotY =\n                        isNumber(pointY) ? yAxis.translate(pointY) : 0;\n                }\n                // Save rectangular plotX, plotY for later computation\n                point.rectPlotX = plotX;\n                point.rectPlotY = plotY;\n                if (yAxis.center) {\n                    radius += yAxis.center[3] / 2;\n                }\n                // Find the polar plotX and plotY. Avoid setting plotX and plotY to NaN\n                // when plotY is undefined (#15438)\n                if (isNumber(plotY)) {\n                    const xy = inverted ? yAxis.postTranslate(plotY, radius) :\n                        xAxis.postTranslate(plotX, radius);\n                    point.plotX = point.polarPlotX = xy.x - chart.plotLeft;\n                    point.plotY = point.polarPlotY = xy.y - chart.plotTop;\n                }\n                // If shared tooltip, record the angle in degrees in order to align X\n                // points. Otherwise, use a standard k-d tree to get the nearest point\n                // in two dimensions.\n                if (series.kdByAngle) {\n                    clientX = ((plotX / Math.PI * 180) + xAxis.pane.options.startAngle) % 360;\n                    if (clientX < 0) { // #2665\n                        clientX += 360;\n                    }\n                    point.clientX = clientX;\n                }\n                else {\n                    point.clientX = point.plotX;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PolarAdditions;\n    });\n    _registerModule(_modules, 'Core/Axis/WaterfallAxis.js', [_modules['Core/Globals.js'], _modules['Core/Axis/Stacking/StackItem.js'], _modules['Core/Utilities.js']], function (H, StackItem, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, objectEach, pushUnique } = U;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var WaterfallAxis;\n        (function (WaterfallAxis) {\n            /* *\n             *\n             *  Interfaces\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(AxisClass, ChartClass) {\n                if (pushUnique(composed, 'Axis.Waterfall')) {\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterBuildStacks', onAxisAfterBuildStacks);\n                    addEvent(AxisClass, 'afterRender', onAxisAfterRender);\n                    addEvent(ChartClass, 'beforeRedraw', onChartBeforeRedraw);\n                }\n            }\n            WaterfallAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterBuildStacks() {\n                const axis = this, stacks = axis.waterfall.stacks;\n                if (stacks) {\n                    stacks.changed = false;\n                    delete stacks.alreadyChanged;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterRender() {\n                const axis = this, stackLabelOptions = axis.options.stackLabels;\n                if (stackLabelOptions && stackLabelOptions.enabled &&\n                    axis.waterfall.stacks) {\n                    axis.waterfall.renderStackTotals();\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                const axis = this;\n                if (!axis.waterfall) {\n                    axis.waterfall = new Composition(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onChartBeforeRedraw() {\n                const axes = this.axes, series = this.series;\n                for (const serie of series) {\n                    if (serie.options.stacking) {\n                        for (const axis of axes) {\n                            if (!axis.isXAxis) {\n                                axis.waterfall.stacks.changed = true;\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            class Composition {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                constructor(axis) {\n                    this.axis = axis;\n                    this.stacks = {\n                        changed: false\n                    };\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Calls StackItem.prototype.render function that creates and renders\n                 * stack total label for each waterfall stack item.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#renderWaterfallStackTotals\n                 */\n                renderStackTotals() {\n                    const yAxis = this.axis, waterfallStacks = yAxis.waterfall.stacks, stackTotalGroup = (yAxis.stacking && yAxis.stacking.stackTotalGroup), dummyStackItem = new StackItem(yAxis, yAxis.options.stackLabels || {}, false, 0, void 0);\n                    this.dummyStackItem = dummyStackItem;\n                    // Render each waterfall stack total\n                    if (stackTotalGroup) {\n                        objectEach(waterfallStacks, (type) => {\n                            objectEach(type, (stackItem, key) => {\n                                dummyStackItem.total = stackItem.stackTotal;\n                                dummyStackItem.x = +key;\n                                if (stackItem.label) {\n                                    dummyStackItem.label = stackItem.label;\n                                }\n                                StackItem.prototype.render.call(dummyStackItem, stackTotalGroup);\n                                stackItem.label = dummyStackItem.label;\n                                delete dummyStackItem.label;\n                            });\n                        });\n                    }\n                    dummyStackItem.total = null;\n                }\n            }\n            WaterfallAxis.Composition = Composition;\n        })(WaterfallAxis || (WaterfallAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return WaterfallAxis;\n    });\n    _registerModule(_modules, 'Series/Waterfall/WaterfallPoint.js', [_modules['Series/Column/ColumnSeries.js'], _modules['Core/Series/Point.js'], _modules['Core/Utilities.js']], function (ColumnSeries, Point, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isNumber } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class WaterfallPoint extends ColumnSeries.prototype.pointClass {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getClassName() {\n                let className = Point.prototype.getClassName.call(this);\n                if (this.isSum) {\n                    className += ' highcharts-sum';\n                }\n                else if (this.isIntermediateSum) {\n                    className += ' highcharts-intermediate-sum';\n                }\n                return className;\n            }\n            // Pass the null test in ColumnSeries.translate.\n            isValid() {\n                return (isNumber(this.y) ||\n                    this.isSum ||\n                    Boolean(this.isIntermediateSum));\n            }\n        }\n        /* *\n         *\n         *  Export\n         *\n         * */\n\n        return WaterfallPoint;\n    });\n    _registerModule(_modules, 'Series/Waterfall/WaterfallSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A waterfall chart displays sequentially introduced positive or negative\n         * values in cumulative columns.\n         *\n         * @sample highcharts/demo/waterfall/\n         *         Waterfall chart\n         * @sample highcharts/plotoptions/waterfall-inverted/\n         *         Horizontal (inverted) waterfall\n         * @sample highcharts/plotoptions/waterfall-stacked/\n         *         Stacked waterfall chart\n         *\n         * @extends      plotOptions.column\n         * @excluding    boostThreshold, boostBlending\n         * @product      highcharts\n         * @requires     highcharts-more\n         * @optionparent plotOptions.waterfall\n         */\n        const WaterfallSeriesDefaults = {\n            /**\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption plotOptions.waterfall.color\n             */\n            /**\n             * The color used specifically for positive point columns. When not\n             * specified, the general series color is used.\n             *\n             * In styled mode, the waterfall colors can be set with the\n             * `.highcharts-point-negative`, `.highcharts-sum` and\n             * `.highcharts-intermediate-sum` classes.\n             *\n             * @sample {highcharts} highcharts/demo/waterfall/\n             *         Waterfall\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highcharts\n             * @apioption plotOptions.waterfall.upColor\n             */\n            dataLabels: {\n                inside: true\n            },\n            /**\n             * The width of the line connecting waterfall columns.\n             *\n             * @product highcharts\n             */\n            lineWidth: 1,\n            /**\n             * The color of the line that connects columns in a waterfall series.\n             *\n             * In styled mode, the stroke can be set with the `.highcharts-graph`\n             * class.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since   3.0\n             * @product highcharts\n             */\n            lineColor: \"#333333\" /* Palette.neutralColor80 */,\n            /**\n             * A name for the dash style to use for the line connecting the columns\n             * of the waterfall series. Possible values: Dash, DashDot, Dot,\n             * LongDash, LongDashDot, LongDashDotDot, ShortDash, ShortDashDot,\n             * ShortDashDotDot, ShortDot, Solid\n             *\n             * In styled mode, the stroke dash-array can be set with the\n             * `.highcharts-graph` class.\n             *\n             * @type    {Highcharts.DashStyleValue}\n             * @since   3.0\n             * @product highcharts\n             */\n            dashStyle: 'Dot',\n            /**\n             * The color of the border of each waterfall column.\n             *\n             * In styled mode, the border stroke can be set with the\n             * `.highcharts-point` class.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since   3.0\n             * @product highcharts\n             */\n            borderColor: \"#333333\" /* Palette.neutralColor80 */,\n            states: {\n                hover: {\n                    lineWidthPlus: 0 // #3126\n                }\n            }\n        };\n        /**\n         * A `waterfall` series. If the [type](#series.waterfall.type) option\n         * is not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.waterfall\n         * @excluding dataParser, dataURL, boostThreshold, boostBlending\n         * @product   highcharts\n         * @requires  highcharts-more\n         * @apioption series.waterfall\n         */\n        /**\n         * An array of data points for the series. For the `waterfall` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. The `x` values will be automatically\n         *    calculated, either starting at 0 and incremented by 1, or from\n         *    `pointStart` and `pointInterval` given in the series options. If the axis\n         *    has categories, these will be used. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of arrays with 2 values. In this case, the values correspond to\n         *    `x,y`. If the first value is a string, it is applied as the name of the\n         *    point, and the `x` value is inferred.\n         *    ```js\n         *    data: [\n         *        [0, 7],\n         *        [1, 8],\n         *        [2, 3]\n         *    ]\n         *    ```\n         *\n         * 3. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.waterfall.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        y: 8,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        y: 8,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|Array<(number|string),(number|null)>|null|*>}\n         * @extends   series.line.data\n         * @excluding marker\n         * @product   highcharts\n         * @apioption series.waterfall.data\n         */\n        /**\n         * When this property is true, the points acts as a summary column for\n         * the values added or subtracted since the last intermediate sum,\n         * or since the start of the series. The `y` value is ignored.\n         *\n         * @sample {highcharts} highcharts/demo/waterfall/\n         *         Waterfall\n         *\n         * @type      {boolean}\n         * @default   false\n         * @product   highcharts\n         * @apioption series.waterfall.data.isIntermediateSum\n         */\n        /**\n         * When this property is true, the point display the total sum across\n         * the entire series. The `y` value is ignored.\n         *\n         * @sample {highcharts} highcharts/demo/waterfall/\n         *         Waterfall\n         *\n         * @type      {boolean}\n         * @default   false\n         * @product   highcharts\n         * @apioption series.waterfall.data.isSum\n         */\n        ''; // Adds doclets above to transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return WaterfallSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Waterfall/WaterfallSeries.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Core/Axis/WaterfallAxis.js'], _modules['Series/Waterfall/WaterfallPoint.js'], _modules['Series/Waterfall/WaterfallSeriesDefaults.js']], function (SeriesRegistry, U, WaterfallAxis, WaterfallPoint, WaterfallSeriesDefaults) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries, line: LineSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, arrayMax, arrayMin, correctFloat, crisp, extend, isNumber, merge, objectEach, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Returns true if the key is a direct property of the object.\n         * @private\n         * @param {*} obj\n         * Object with property to test\n         * @param {string} key\n         * Property key to test\n         * @return {boolean}\n         * Whether it is a direct property\n         */\n        function ownProp(obj, key) {\n            return Object.hasOwnProperty.call(obj, key);\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Waterfall series type.\n         *\n         * @private\n         */\n        class WaterfallSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            // After generating points, set y-values for all sums.\n            generatePoints() {\n                // Parent call:\n                ColumnSeries.prototype.generatePoints.apply(this);\n                for (let i = 0, len = this.points.length; i < len; i++) {\n                    const point = this.points[i], y = this.processedYData[i];\n                    // Override point value for sums. #3710 Update point does not\n                    // propagate to sum\n                    if (isNumber(y) && (point.isIntermediateSum || point.isSum)) {\n                        point.y = correctFloat(y);\n                    }\n                }\n            }\n            // Call default processData then override yData to reflect waterfall's\n            // extremes on yAxis\n            processData(force) {\n                const series = this, options = series.options, yData = series.yData, \n                // #3710 Update point does not propagate to sum\n                points = options.data, dataLength = yData.length, threshold = options.threshold || 0;\n                let point, subSum, sum, dataMin, dataMax, y;\n                sum = subSum = dataMin = dataMax = 0;\n                for (let i = 0; i < dataLength; i++) {\n                    y = yData[i];\n                    point = points && points[i] ? points[i] : {};\n                    if (y === 'sum' || point.isSum) {\n                        yData[i] = correctFloat(sum);\n                    }\n                    else if (y === 'intermediateSum' ||\n                        point.isIntermediateSum) {\n                        yData[i] = correctFloat(subSum);\n                        subSum = 0;\n                    }\n                    else {\n                        sum += y;\n                        subSum += y;\n                    }\n                    dataMin = Math.min(sum, dataMin);\n                    dataMax = Math.max(sum, dataMax);\n                }\n                super.processData.call(this, force);\n                // Record extremes only if stacking was not set:\n                if (!options.stacking) {\n                    series.dataMin = dataMin + threshold;\n                    series.dataMax = dataMax;\n                }\n                return;\n            }\n            // Return y value or string if point is sum\n            toYData(pt) {\n                if (pt.isSum) {\n                    return 'sum';\n                }\n                if (pt.isIntermediateSum) {\n                    return 'intermediateSum';\n                }\n                return pt.y;\n            }\n            updateParallelArrays(point, i) {\n                super.updateParallelArrays.call(this, point, i);\n                // Prevent initial sums from triggering an error (#3245, #7559)\n                if (this.yData[0] === 'sum' || this.yData[0] === 'intermediateSum') {\n                    this.yData[0] = null;\n                }\n            }\n            // Postprocess mapping between options and SVG attributes\n            pointAttribs(point, state) {\n                const upColor = this.options.upColor;\n                // Set or reset up color (#3710, update to negative)\n                if (upColor && !point.options.color && isNumber(point.y)) {\n                    point.color = point.y > 0 ? upColor : void 0;\n                }\n                const attr = ColumnSeries.prototype.pointAttribs.call(this, point, state);\n                // The dashStyle option in waterfall applies to the graph, not\n                // the points\n                delete attr.dashstyle;\n                return attr;\n            }\n            // Return an empty path initially, because we need to know the stroke-width\n            // in order to set the final path.\n            getGraphPath() {\n                return [['M', 0, 0]];\n            }\n            // Draw columns' connector lines\n            getCrispPath() {\n                const // Skip points where Y is not a number (#18636)\n                data = this.data.filter((d) => isNumber(d.y)), yAxis = this.yAxis, length = data.length, graphLineWidth = this.graph?.strokeWidth() || 0, reversedXAxis = this.xAxis.reversed, reversedYAxis = this.yAxis.reversed, stacking = this.options.stacking, path = [];\n                for (let i = 1; i < length; i++) {\n                    if (!( // Skip lines that would pass over the null point (#18636)\n                    this.options.connectNulls ||\n                        isNumber(this.data[data[i].index - 1].y))) {\n                        continue;\n                    }\n                    const box = data[i].box, prevPoint = data[i - 1], prevY = prevPoint.y || 0, prevBox = data[i - 1].box;\n                    if (!box || !prevBox) {\n                        continue;\n                    }\n                    const prevStack = yAxis.waterfall.stacks[this.stackKey], isPos = prevY > 0 ? -prevBox.height : 0;\n                    if (prevStack && prevBox && box) {\n                        const prevStackX = prevStack[i - 1];\n                        // Y position of the connector is different when series are\n                        // stacked, yAxis is reversed and it also depends on point's\n                        // value\n                        let yPos;\n                        if (stacking) {\n                            const connectorThreshold = prevStackX.connectorThreshold;\n                            yPos = crisp(yAxis.translate(connectorThreshold, false, true, false, true) +\n                                (reversedYAxis ? isPos : 0), graphLineWidth);\n                        }\n                        else {\n                            yPos = crisp(prevBox.y + (prevPoint.minPointLengthOffset || 0), graphLineWidth);\n                        }\n                        path.push([\n                            'M',\n                            (prevBox.x || 0) + (reversedXAxis ?\n                                0 :\n                                (prevBox.width || 0)),\n                            yPos\n                        ], [\n                            'L',\n                            (box.x || 0) + (reversedXAxis ?\n                                (box.width || 0) :\n                                0),\n                            yPos\n                        ]);\n                    }\n                    if (prevBox &&\n                        path.length &&\n                        ((!stacking && prevY < 0 && !reversedYAxis) ||\n                            (prevY > 0 && reversedYAxis))) {\n                        const nextLast = path[path.length - 2];\n                        if (nextLast && typeof nextLast[2] === 'number') {\n                            nextLast[2] += prevBox.height || 0;\n                        }\n                        const last = path[path.length - 1];\n                        if (last && typeof last[2] === 'number') {\n                            last[2] += prevBox.height || 0;\n                        }\n                    }\n                }\n                return path;\n            }\n            // The graph is initially drawn with an empty definition, then updated with\n            // crisp rendering.\n            drawGraph() {\n                LineSeries.prototype.drawGraph.call(this);\n                if (this.graph) {\n                    this.graph.attr({\n                        d: this.getCrispPath()\n                    });\n                }\n            }\n            // Waterfall has stacking along the x-values too.\n            setStackedPoints(axis) {\n                const series = this, options = series.options, waterfallStacks = axis.waterfall?.stacks, seriesThreshold = options.threshold || 0, stackKey = series.stackKey, xData = series.xData, xLength = xData.length;\n                let stackThreshold = seriesThreshold, interSum = stackThreshold, actualStackX, totalYVal = 0, actualSum = 0, prevSum = 0, statesLen, posTotal, negTotal, xPoint, yVal, x, alreadyChanged, changed;\n                // Function responsible for calculating correct values for stackState\n                // array of each stack item. The arguments are: firstS - the value for\n                // the first state, nextS - the difference between the previous and the\n                // newest state, sInx - counter used in the for that updates each state\n                // when necessary, sOff - offset that must be added to each state when\n                // they need to be updated (if point isn't a total sum)\n                // eslint-disable-next-line require-jsdoc\n                const calculateStackState = (firstS, nextS, sInx, sOff) => {\n                    if (actualStackX) {\n                        if (!statesLen) {\n                            actualStackX.stackState[0] = firstS;\n                            statesLen = actualStackX.stackState.length;\n                        }\n                        else {\n                            for (sInx; sInx < statesLen; sInx++) {\n                                actualStackX.stackState[sInx] += sOff;\n                            }\n                        }\n                        actualStackX.stackState.push(actualStackX.stackState[statesLen - 1] + nextS);\n                    }\n                };\n                if (axis.stacking && waterfallStacks) {\n                    // Code responsible for creating stacks for waterfall series\n                    if (series.reserveSpace()) {\n                        changed = waterfallStacks.changed;\n                        alreadyChanged = waterfallStacks.alreadyChanged;\n                        // In case of a redraw, stack for each x value must be emptied\n                        // (only for the first series in a specific stack) and\n                        // recalculated once more\n                        if (alreadyChanged &&\n                            alreadyChanged.indexOf(stackKey) < 0) {\n                            changed = true;\n                        }\n                        if (!waterfallStacks[stackKey]) {\n                            waterfallStacks[stackKey] = {};\n                        }\n                        const actualStack = waterfallStacks[stackKey];\n                        if (actualStack) {\n                            for (let i = 0; i < xLength; i++) {\n                                x = xData[i];\n                                if (!actualStack[x] || changed) {\n                                    actualStack[x] = {\n                                        negTotal: 0,\n                                        posTotal: 0,\n                                        stackTotal: 0,\n                                        threshold: 0,\n                                        stateIndex: 0,\n                                        stackState: [],\n                                        label: ((changed &&\n                                            actualStack[x]) ?\n                                            actualStack[x].label :\n                                            void 0)\n                                    };\n                                }\n                                actualStackX = actualStack[x];\n                                yVal = series.yData[i];\n                                if (yVal >= 0) {\n                                    actualStackX.posTotal += yVal;\n                                }\n                                else {\n                                    actualStackX.negTotal += yVal;\n                                }\n                                // Points do not exist yet, so raw data is used\n                                xPoint = options.data[i];\n                                posTotal = actualStackX.absolutePos =\n                                    actualStackX.posTotal;\n                                negTotal = actualStackX.absoluteNeg =\n                                    actualStackX.negTotal;\n                                actualStackX.stackTotal = posTotal + negTotal;\n                                statesLen = actualStackX.stackState.length;\n                                if (xPoint && xPoint.isIntermediateSum) {\n                                    calculateStackState(prevSum, actualSum, 0, prevSum);\n                                    prevSum = actualSum;\n                                    actualSum = seriesThreshold;\n                                    // Swapping values\n                                    stackThreshold ^= interSum;\n                                    interSum ^= stackThreshold;\n                                    stackThreshold ^= interSum;\n                                }\n                                else if (xPoint && xPoint.isSum) {\n                                    calculateStackState(seriesThreshold, totalYVal, statesLen, 0);\n                                    stackThreshold = seriesThreshold;\n                                }\n                                else {\n                                    calculateStackState(stackThreshold, yVal, 0, totalYVal);\n                                    if (xPoint) {\n                                        totalYVal += yVal;\n                                        actualSum += yVal;\n                                    }\n                                }\n                                actualStackX.stateIndex++;\n                                actualStackX.threshold = stackThreshold;\n                                stackThreshold += actualStackX.stackTotal;\n                            }\n                        }\n                        waterfallStacks.changed = false;\n                        if (!waterfallStacks.alreadyChanged) {\n                            waterfallStacks.alreadyChanged = [];\n                        }\n                        waterfallStacks.alreadyChanged.push(stackKey);\n                    }\n                }\n            }\n            // Extremes for a non-stacked series are recorded in processData.\n            // In case of stacking, use Series.stackedYData to calculate extremes.\n            getExtremes() {\n                const stacking = this.options.stacking;\n                let yAxis, waterfallStacks, stackedYNeg, stackedYPos;\n                if (stacking) {\n                    yAxis = this.yAxis;\n                    waterfallStacks = yAxis.waterfall.stacks;\n                    stackedYNeg = this.stackedYNeg = [];\n                    stackedYPos = this.stackedYPos = [];\n                    // The visible y range can be different when stacking is set to\n                    // overlap and different when it's set to normal\n                    if (stacking === 'overlap') {\n                        objectEach(waterfallStacks[this.stackKey], function (stackX) {\n                            stackedYNeg.push(arrayMin(stackX.stackState));\n                            stackedYPos.push(arrayMax(stackX.stackState));\n                        });\n                    }\n                    else {\n                        objectEach(waterfallStacks[this.stackKey], function (stackX) {\n                            stackedYNeg.push(stackX.negTotal + stackX.threshold);\n                            stackedYPos.push(stackX.posTotal + stackX.threshold);\n                        });\n                    }\n                    return {\n                        dataMin: arrayMin(stackedYNeg),\n                        dataMax: arrayMax(stackedYPos)\n                    };\n                }\n                // When not stacking, data extremes have already been computed in the\n                // processData function.\n                return {\n                    dataMin: this.dataMin,\n                    dataMax: this.dataMax\n                };\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        WaterfallSeries.defaultOptions = merge(ColumnSeries.defaultOptions, WaterfallSeriesDefaults);\n        WaterfallSeries.compose = WaterfallAxis.compose;\n        extend(WaterfallSeries.prototype, {\n            pointValKey: 'y',\n            // Property needed to prevent lines between the columns from disappearing\n            // when negativeColor is used.\n            showLine: true,\n            pointClass: WaterfallPoint\n        });\n        // Translate data points from raw values\n        addEvent(WaterfallSeries, 'afterColumnTranslate', function () {\n            const series = this, { options, points, yAxis } = series, minPointLength = pick(options.minPointLength, 5), halfMinPointLength = minPointLength / 2, threshold = options.threshold || 0, stacking = options.stacking, actualStack = yAxis.waterfall.stacks[series.stackKey];\n            let previousIntermediate = threshold, previousY = threshold, y, total, yPos, hPos;\n            for (let i = 0; i < points.length; i++) {\n                const point = points[i], yValue = series.processedYData[i], shapeArgs = point.shapeArgs, box = extend({\n                    x: 0,\n                    y: 0,\n                    width: 0,\n                    height: 0\n                }, shapeArgs || {});\n                point.box = box;\n                const range = [0, yValue], pointY = point.y || 0;\n                // Code responsible for correct positions of stacked points\n                // starts here\n                if (stacking) {\n                    if (actualStack) {\n                        const actualStackX = actualStack[i];\n                        if (stacking === 'overlap') {\n                            total =\n                                actualStackX.stackState[actualStackX.stateIndex--];\n                            y = pointY >= 0 ? total : total - pointY;\n                            if (ownProp(actualStackX, 'absolutePos')) {\n                                delete actualStackX.absolutePos;\n                            }\n                            if (ownProp(actualStackX, 'absoluteNeg')) {\n                                delete actualStackX.absoluteNeg;\n                            }\n                        }\n                        else {\n                            if (pointY >= 0) {\n                                total = actualStackX.threshold +\n                                    actualStackX.posTotal;\n                                actualStackX.posTotal -= pointY;\n                                y = total;\n                            }\n                            else {\n                                total = actualStackX.threshold +\n                                    actualStackX.negTotal;\n                                actualStackX.negTotal -= pointY;\n                                y = total - pointY;\n                            }\n                            if (!actualStackX.posTotal) {\n                                if (isNumber(actualStackX.absolutePos) &&\n                                    ownProp(actualStackX, 'absolutePos')) {\n                                    actualStackX.posTotal =\n                                        actualStackX.absolutePos;\n                                    delete actualStackX.absolutePos;\n                                }\n                            }\n                            if (!actualStackX.negTotal) {\n                                if (isNumber(actualStackX.absoluteNeg) &&\n                                    ownProp(actualStackX, 'absoluteNeg')) {\n                                    actualStackX.negTotal =\n                                        actualStackX.absoluteNeg;\n                                    delete actualStackX.absoluteNeg;\n                                }\n                            }\n                        }\n                        if (!point.isSum) {\n                            // The connectorThreshold property is later used in\n                            // getCrispPath function to draw a connector line in a\n                            // correct place\n                            actualStackX.connectorThreshold =\n                                actualStackX.threshold + actualStackX.stackTotal;\n                        }\n                        if (yAxis.reversed) {\n                            yPos = (pointY >= 0) ? (y - pointY) : (y + pointY);\n                            hPos = y;\n                        }\n                        else {\n                            yPos = y;\n                            hPos = y - pointY;\n                        }\n                        point.below = yPos <= threshold;\n                        box.y = yAxis.translate(yPos, false, true, false, true);\n                        box.height = Math.abs(box.y -\n                            yAxis.translate(hPos, false, true, false, true));\n                        const dummyStackItem = yAxis.waterfall.dummyStackItem;\n                        if (dummyStackItem) {\n                            dummyStackItem.x = i;\n                            dummyStackItem.label = actualStack[i].label;\n                            dummyStackItem.setOffset(series.pointXOffset || 0, series.barW || 0, series.stackedYNeg[i], series.stackedYPos[i], void 0, this.xAxis);\n                        }\n                    }\n                }\n                else {\n                    // Up points\n                    y = Math.max(previousY, previousY + pointY) + range[0];\n                    box.y = yAxis.translate(y, false, true, false, true);\n                    // Sum points\n                    if (point.isSum) {\n                        box.y = yAxis.translate(range[1], false, true, false, true);\n                        box.height = Math.min(yAxis.translate(range[0], false, true, false, true), yAxis.len) - box.y; // #4256\n                        point.below = range[1] <= threshold;\n                    }\n                    else if (point.isIntermediateSum) {\n                        if (pointY >= 0) {\n                            yPos = range[1] + previousIntermediate;\n                            hPos = previousIntermediate;\n                        }\n                        else {\n                            yPos = previousIntermediate;\n                            hPos = range[1] + previousIntermediate;\n                        }\n                        if (yAxis.reversed) {\n                            // Swapping values\n                            yPos ^= hPos;\n                            hPos ^= yPos;\n                            yPos ^= hPos;\n                        }\n                        box.y = yAxis.translate(yPos, false, true, false, true);\n                        box.height = Math.abs(box.y -\n                            Math.min(yAxis.translate(hPos, false, true, false, true), yAxis.len));\n                        previousIntermediate += range[1];\n                        point.below = yPos <= threshold;\n                        // If it's not the sum point, update previous stack end position\n                        // and get shape height (#3886)\n                    }\n                    else {\n                        box.height = yValue > 0 ?\n                            yAxis.translate(previousY, false, true, false, true) - box.y :\n                            yAxis.translate(previousY, false, true, false, true) - yAxis.translate(previousY - yValue, false, true, false, true);\n                        previousY += yValue;\n                        point.below = previousY < threshold;\n                    }\n                    // #3952 Negative sum or intermediate sum not rendered correctly\n                    if (box.height < 0) {\n                        box.y += box.height;\n                        box.height *= -1;\n                    }\n                }\n                point.plotY = box.y;\n                point.yBottom = box.y + box.height;\n                if (box.height <= minPointLength && !point.isNull) {\n                    box.height = minPointLength;\n                    box.y -= halfMinPointLength;\n                    point.yBottom = box.y + box.height;\n                    point.plotY = box.y;\n                    if (pointY < 0) {\n                        point.minPointLengthOffset = -halfMinPointLength;\n                    }\n                    else {\n                        point.minPointLengthOffset = halfMinPointLength;\n                    }\n                }\n                else {\n                    // #8024, empty gaps in the line for null data\n                    if (point.isNull) {\n                        box.width = 0;\n                    }\n                    point.minPointLengthOffset = 0;\n                }\n                // Correct tooltip placement (#3014)\n                const tooltipY = point.plotY + (point.negative ? box.height : 0);\n                if (point.below) { // #15334\n                    point.plotY += box.height;\n                }\n                if (point.tooltipPos) {\n                    if (series.chart.inverted) {\n                        point.tooltipPos[0] = yAxis.len - tooltipY;\n                    }\n                    else {\n                        point.tooltipPos[1] = tooltipY;\n                    }\n                }\n                // Check point position after recalculation (#16788)\n                point.isInside = this.isPointInside(point);\n                // Crisp vector coordinates\n                const crispBottom = crisp(point.yBottom, series.borderWidth);\n                box.y = crisp(box.y, series.borderWidth);\n                box.height = crispBottom - box.y;\n                merge(true, point.shapeArgs, box);\n            }\n        }, { order: 2 });\n        SeriesRegistry.registerSeriesType('waterfall', WaterfallSeries);\n        /* *\n         *\n         * Export\n         *\n         * */\n\n        return WaterfallSeries;\n    });\n    _registerModule(_modules, 'masters/highcharts-more.src.js', [_modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Extensions/Pane/Pane.js'], _modules['Series/Bubble/BubbleSeries.js'], _modules['Series/PackedBubble/PackedBubbleSeries.js'], _modules['Series/PolarComposition.js'], _modules['Core/Axis/RadialAxis.js'], _modules['Series/Waterfall/WaterfallSeries.js']], function (Highcharts, SeriesRegistry, Pane, BubbleSeries, PackedBubbleSeries, PolarAdditions, RadialAxis, WaterfallSeries) {\n\n        const G = Highcharts;\n        G.RadialAxis = RadialAxis;\n        BubbleSeries.compose(G.Axis, G.Chart, G.Legend);\n        PackedBubbleSeries.compose(G.Axis, G.Chart, G.Legend);\n        Pane.compose(G.Chart, G.Pointer);\n        PolarAdditions.compose(G.Axis, G.Chart, G.Pointer, G.Series, G.Tick, G.Point, SeriesRegistry.seriesTypes.areasplinerange, SeriesRegistry.seriesTypes.column, SeriesRegistry.seriesTypes.line, SeriesRegistry.seriesTypes.spline);\n        WaterfallSeries.compose(G.Axis, G.Chart);\n\n        return G;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","U","addEvent","correctFloat","defined","pick","chartGetHoverPane","eventArgs","hoverPane","chart","pane","forEach","isInsidePane","chartX","plotLeft","chartY","plotTop","center","x","y","startAngle","endAngle","insideSlice","cx","cy","distance","Math","sqrt","pow","angle","atan2","PI","ceil","onChartAfterIsInsiderPlot","e","polar","options","inverted","isInsidePlot","some","axis","normalizedStartAngleRad","normalizedEndAngleRad","onPointerAfterGetHoverData","hoverPoint","plotX","plotY","onPointerBeforeGetHoverData","getHoverPane","filter","s","visible","shared","directTouch","enableMouseTracking","xAxis","compose","ChartClass","PointerClass","chartProto","prototype","collectionsWithUpdate","push","size","innerSize","background","shape","borderRadius","borderWidth","borderColor","backgroundColor","linearGradient","x1","y1","x2","y2","stops","from","Number","MAX_VALUE","innerRadius","to","outerRadius","CU","PaneComposition","PaneDefaults","extend","merge","splat","Pane","constructor","coll","init","setOptions","angular","render","renderer","group","g","attr","zIndex","add","updateCenter","backgroundOption","len","max","length","i","renderBackground","destroy","splice","backgroundOptions","attribs","className","method","styledMode","getPlotBandPath","getCenter","call","update","redraw","axes","SeriesRegistry","area","pointClass","AreaPoint","areaProto","seriesTypes","isNumber","setState","prevState","state","series","isPolar","plotHigh","yAxis","toPixels","high","plotLow","low","lowerStateMarkerGraphic","stateMarkerGraphic","upperStateMarkerGraphic","graphic","graphics","plotHighX","arguments","plotLowX","originalSettings","modifyMarkerSettings","restoreMarkerSettings","haloPath","isInside","isTopInside","concat","isValid","AreaRangePoint","H","noop","AreaSeries","column","columnProto","isArray","AreaRangeSeries","toYData","point","highToXY","xy","postTranslate","rectPlotX","getGraphPath","points","highPoints","highAreaPoints","connectEnds","connectNulls","pointShim","step","highAreaPoint","yBottom","doCurve","isNull","polarPlotY","lowerPath","left","right","higherPath","higherAreaPath","linePath","graphPath","areaPath","isArea","xMap","drawDataLabels","up","upperDataLabelOptions","lowerDataLabelOptions","data","originalDataLabels","dataLabelOptions","dataLabels","enabled","xHigh","yHigh","xLow","yLow","hasDataLabels","inside","_plotY","dataLabel","dataLabelUpper","below","align","verticalAlign","label","alignDataLabel","originalMarkerSettings","marker","symbol","lowMarker","drawPoints","pointLength","origProps","negative","zone","threshold","zones","getZone","hasMarkerChanged","oldOptions","oldMarker","height","width","defaultOptions","lineWidth","tooltip","pointFormat","trackByArea","pointArrayMap","join","translate","dataModify","modifyValue","order","tooltipPos","pos","posHigh","deferTranslatePolar","pointValKey","setStackedPoints","registerSeriesType","spline","splineProto","AreaSplineRangeSeries","getPointSpline","whiskerLength","fillColor","medianWidth","whiskerWidth","BoxPlotSeriesDefaults","ColumnSeries","crisp","BoxPlotSeries","pointAttribs","key","highPlot","q1Plot","q3Plot","lowPlot","medianPlot","medianPath","boxPath","halfWidth","pointWiskerLength","doQuartiles","verb","shapeArgs","boxAttr","stemAttr","whiskersAttr","medianAttr","color","d","stem","addClass","whiskers","box","medianShape","stroke","stemColor","stemWidth","dashstyle","stemDashStyle","dashStyle","whiskerColor","whiskerDashStyle","fill","lineColor","boxDashStyle","medianColor","medianDashStyle","stemX","pointXOffset","barW","strokeWidth","boxStrokeWidth","whiskerStrokeWidth","test","parseFloat","q1","median","q3","connectorClassName","connectorColor","connectorDistance","connectorWidth","labels","allowOverlap","format","formatter","style","fontSize","maxSize","minSize","legendIndex","ranges","value","sizeBy","sizeByAbsoluteValue","zThreshold","Color","F","parse","arrayMax","arrayMin","stableSort","legend","addToLegend","items","drawLegendSymbol","connectorSpace","itemDistance","legendItem","bubbleLegend","autoRanges","a","b","maxLabel","getMaxLabelSize","radius","movementX","labelWidth","labelHeight","seriesIndex","baseline","bubbleAttribs","connectorAttribs","labelAttribs","rtl","fillOpacity","range","setOpacity","get","getRangeRadius","bubbleSeries","zMax","zMin","getRadius","symbols","connectors","bubbleItems","css","itemStyle","translateX","translateY","renderRange","hideOverlappingLabels","mainRange","labelsOptions","elementCenter","absoluteRadius","abs","labelsAlign","posX","posY","crispMovement","connectorLength","circle","colorIndex","crispLine","text","formatLabel","position","getBBox","placed","alignAttr","labelSize","numberFormatter","index","newOpacity","oldOpacity","show","hide","getRanges","rangesOptions","zData","minZ","maxZ","isBubble","ignoreSeries","min","displayNegative","reverse","predictBubbleSizes","legendOptions","floating","horizontal","layout","lastLineHeight","plotSizeX","plotSizeY","pxSizes","getPxExtremes","minPxSize","maxPxSize","plotSize","calculatedSize","updateRanges","bubbleLegendOptions","correctSizes","BubbleLegendDefaults","BubbleLegendItem","D","composed","objectEach","pushUnique","wrap","chartDrawChartBox","proceed","callback","bubbleSizes","getVisibleBubbleSeriesIndex","allItems","item","getMargins","setScale","updateNames","ticks","tick","isNew","isNewLabel","retranslateItems","getLinesHeights","lines","lastLine","legendItem2","j","itemHeight","onLegendAfterGetAllItems","bubbleSeriesIndex","destroyItem","onLegendItemClick","status","defaultPrevented","orgTranslateX","orgTranslateY","actualLine","round","LegendClass","Point","scatter","ScatterPoint","BubblePoint","computedSize","ttBelow","BubbleLegendComposition","Series","ScatterSeries","clamp","onAxisFoundExtremes","axisLength","isXAxis","dataKey","pxMin","pxMax","transA","hasActiveSeries","bubblePadding","reserveSpace","allowZoomOutside","onPoint","getRadii","radii","dataMin","logarithmic","keys","BubbleSeries","AxisClass","animate","animationLimit","hasRendered","markerAttribs","animation","yData","zExtremes","bubbleZExtremes","valid","otherSeries","getZExtremes","yValue","sizeByArea","zRange","hasData","processedXData","markerOptions","translateBubble","zoneAxis","z","dlBox","smallestSize","plotWidth","plotHeight","getPxSize","isPercent","parseInt","states","hover","radiusPlus","softThreshold","halo","turboThreshold","applyZones","parallelArrays","trackerGroups","specialGroup","target","arearange","ColumnRangePoint","ColumnRangeSeries","stacking","translate3dPoints","translate3dShapes","afterColumnTranslate","heightDifference","start","startAngleRad","isRadial","safeDistance","chartWidth","chartHeight","minPointLength","rectPlotY","barX","shapeType","arc","pointWidth","crispCol","where","pointRange","legendSymbol","adjustForMissingColumns","drawGraph","getSymbol","drawTracker","getColumnMetrics","ColumnPyramidSeriesDefaults","ColumnPyramidSeries","dense","closestPointRange","metrics","offset","translatedThreshold","getThreshold","seriesBarW","pointPadding","barY","barH","stackTotal","stackHeight","topXwidth","bottomXwidth","invBarPos","x3","x4","centerInCategory","total","topPointY","grouping","linkedTo","ErrorBarSeriesDefaults","ErrorBarSeries","linkedParent","columnMetrics","valKey","GaugePoint","pInt","GaugeSeries","generatePoints","dialOptions","dial","baseLength","rearLength","baseWidth","topWidth","overshoot","rotation","endAngleRad","percentage","pivot","pivotOptions","plotGroup","seriesGroup","clip","clipRect","setData","processData","crop","defer","headerFormat","showInLegend","fixedBox","forceDL","noSharedTooltip","onChartLoad","mousedownUnbinder","mousemoveUnbinder","mouseupUnbinder","container","event","hasDraggableNodes","draggable","onMouseDown","onMouseMove","ownerDocument","onMouseUp","normalizedEvent","pointer","normalize","fixedPosition","inDragMode","newPlotX","newPlotY","diffX","diffY","graphLayoutsLookup","hasDragged","redrawHalo","restartSimulation","enableSimulation","fixedDraggable","A","setAnimation","onChartAfterPrint","updateSimulation","onChartBeforePrint","onChartPredraw","stop","onChartRender","systemsStable","afterRender","layoutStep","maxIterations","isFinite","temperature","isStable","beforeStep","integrations","layouts","Chart","bubble","removeElementFromCollection","nodes","firePointEvent","seriesOptions","isParentNode","parentNode","temp","allowPointSelect","select","getSelectedPoints","getSelectedParentNodes","useSimulation","parentNodeFormatter","name","parentNodeTextPath","padding","transition","layoutAlgorithm","initialPositions","initialPositionRadius","parentNodeLimit","seriesInteraction","dragBetweenSeries","parentNodeOptions","gravitationalConstant","maxSpeed","type","integration","splitSeries","friction","attractive","link","force","distanceXY","massFactor","getMass","translatedX","diffTemperature","translatedY","fromNode","degree","toNode","attractiveForceFunction","k","barycenter","xFactor","yFactor","top","node","mass","getK","integrate","prevX","prevY","frictionX","dispX","frictionY","dispY","signX","signY","vectorLength","repulsive","factor","repulsiveForceFunction","VerletIntegration","centerX","centerY","repNode","distanceR","getDegree","phi","QuadTreeNode","body","isEmpty","isInternal","boxSize","divideBox","halfHeight","getBoxPosition","insert","depth","newQuadTreeNode","NaN","updateMassAndCenter","pointMass","maxDepth","root","isRoot","calculateMassAndCenter","visitNodeRecursive","insertNodes","beforeCallback","afterCallback","goFurther","qtNode","EulerIntegration","GraphLayout","QuadTree","isFunction","fireEvent","ReingoldFruchtermanLayout","currentStep","initialRendering","links","simulation","euler","verlet","setInitialRendering","attractiveForce","repulsiveForce","approximation","enable","forces","initPositions","finishedAnimating","setK","resetSimulation","allSeries","forceName","createQuadTree","quadTree","anyLayout","applyLimits","coolDown","startTemperature","prevSystemTemperature","systemTemperature","getSystemTemperature","cancelAnimationFrame","requestAnimationFrame","setArea","w","h","linkLength","addElementsToCollection","elements","collection","element","indexOf","clear","forcedStop","setMaxIterations","setTemperature","setDiffTemperature","setCircularPositions","setRandomPositions","rootNodes","linksTo","visitedNodes","addToNodes","linksFrom","id","sortedNodes","rootNode","iEnd","cos","sin","nodesLength","unrandom","n","rand","floor","barycenterForces","getBarycenter","systemMass","barnesHutApproximation","quadNode","goDeeper","getDistXY","theta","repulsiveForces","attractiveForces","applyLimitBox","temperatureStep","vector","getDistR","nodeA","nodeB","xDist","yDist","absX","absY","PackedBubbleIntegration","chartGetSelectedParentNodes","selectedParentsNodes","selected","onChartBeforeRedraw","allDataPoints","PackedBubbleLayout","packedbubble","calculateParentRadius","tempDiff","neighbours","parentNodeRadius","syncTimeout","animObject","initDataLabels","dlOptions","dataLabelsGroup","initDataLabelsGroup","opacity","getPlotBox","initDataLabelsDefer","deferDataLabels","deg2rad","uniqueKey","setTextPath","textPathOptions","attributes","dy","startOffset","textAnchor","url","textWrapper","textPath","undo","textPathId","textAttribs","dx","transform","children","slice","tagName","href","added","textCache","buildText","setPolygon","bBox","tp","querySelector","polygon","fontMetrics","descender","lineCleanerRegex","RegExp","innerHTML","replace","split","numOfLines","appendTopAndBottom","charIndex","positionOfChar","getRotationOfChar","cosRot","sinRot","lineIndex","lineLen","line","lineCharIndex","srcCharIndex","lower","upper","getStartPositionOfChar","unshift","charPos","getEndPositionOfChar","drawTextPath","labelOptions","formatPrefix","useHTML","getDataLabelPath","dataLabelPath","SVGElementClass","svgElementProto","DragNodesComposition","PackedBubblePoint","PackedBubbleSeriesDefaults","SVGElement","TextPath","seriesProto","PackedBubbleSeries","parentNodeMass","accumulateAllPoints","is","addLayout","layoutOptions","layoutType","chartOptions","graphLayoutsStorage","forExport","collisionNmb","addSeriesLayout","seriesLayout","parentNodeLayout","createParentNodes","seriesBox","calculateZExtremes","valMin","Infinity","valMax","checkOverlap","bubble1","bubble2","nodeAdded","parentMarkerOptions","brighten","p","normal","dataLabelOnNull","deferLayout","nodeMarker","parentOptions","parentAttribs","parentNodesGroup","graph","div","getPointRadius","extremes","allDataPointsLength","prop","minRadius","maxRadius","eventsToUnbind","isDirty","dnPoint","removed","addPoint","remove","placeBubbles","positionBubble","bubblePos","stage","calculatedBubble","arr","sortedArr","sort","stages","rawPositions","resizeRadius","hasParentMarker","lastBubble","newOrigin","nextBubble","asin","acos","alfa","beta","finalAngle","gamma","cosA","sinA","minX","maxX","minY","maxY","positions","POSITIVE_INFINITY","NEGATIVE_INFINITY","spaceRatio","smallerDimension","setVisible","xData","axisTypes","invertible","isCartesian","requireSorting","indexateNodes","searchPoint","stickyTracking","followPointer","PolygonSeriesDefaults","LineSeries","PolygonSeries","circular","gridLineWidth","textOverflow","maxPadding","minPadding","showLastLabel","tickLength","radial","gridLineInterpolation","title","radialGauge","endOnTick","minorGridLineWidth","minorTickInterval","minorTickLength","minorTickPosition","minorTickWidth","startOnTick","tickPixelInterval","tickPosition","tickWidth","RadialAxisDefaults","RadialAxis","isObject","relativeLength","beforeSetTickPositions","autoConnect","isCircular","userMax","categories","createLabelCollector","tickPositions","map","Boolean","createLabelCollectorHidden","getCrosshairPosition","end","getPosition","getLinePath","_lineWidth","r","horiz","open","innerR","xBounds","yBounds","angleRad","getOffset","axisProto","axisOffset","side","radiusToPixels","percentRegex","fullRadius","xOnPerimeter","thickness","getPlotLinePath","transFrom","transTo","isCrosshair","paneInnerR","innerRatio","otherAxis","crossPos","translatedVal","getTitlePosition","titleOptions","middle","modify","setAxisSize","setAxisTranslation","onAxisAfterInit","isHidden","paneOptions","fullCircle","normalizedStart","normalizedEnd","onAxisAutoLabelAlign","preventDefault","onAxisDestroy","labelCollectors","labelCollector","onAxisInit","isX","paneIndex","userOptions","radialAxis","renderHidden","setCategories","setTitle","onAxisInitialAxisTranslation","onTickAfterGetLabelPosition","labelBBox","correctAngle","labelYPosCorrection","optionsY","ret","centerSlot","labelDir","reducedAngle1","reducedAngle2","tickInterval","onTickAfterGetPosition","onGlobalSetOptions","radialDefaultOptions","sector","minPixelPadding","minPointOffset","defaultPolarOptions","stackLabels","reversedStacks","plotBands","wrapTickGetMarkPath","endPoint","TickClass","find","onChartAfterDrawChartBox","onChartAfterInit","onChartGetAxes","onPointerGetSelectionBox","linearAxis","result","onPointerGetSelectionMarkerAttrs","mouseDownX","mouseDownY","attrs","zoomHor","paneRadRange","pathStart","toValue","pathEnd","getExtremes","trimPath","zoomVert","Array","innerPath","outerPath","onSeriesAfterInit","PolarAdditions","isRadialSeries","isRadialBar","onSeriesAfterTranslate","kdByAngle","searchPointByAngleOrInverted","findNearestPointBy","toXY","hasParallelCoordinates","reversed","MIN_VALUE","hasClipCircleSetter","circ","clipCircle","clipPath","createElement","defs","wrapper","setClip","searchKDTreePoint","clientX","searchKDTree","lastTick","firstTick","wrapChartGet","wrapColumnSeriesAlignDataLabel","alignTo","labelPos","onAfterColumnTranslate","visibleRange","thresholdAngleRad","yMin","yMax","pointX","pointY","stackValues","stack","stacks","stackKey","getStackIndicator","brOption","brValue","wrapLineSeriesGetGraphPath","firstValid","popLastPoint","pop","wrapPointerGetCoordinates","wrapPointerPinch","wrapSeriesAnimate","markerGroup","pie","scaleX","scaleY","wrapSplineSeriesGetPointSpline","segment","rightContX","getConnectors","calculateNeighbours","leftContX","leftContY","rightContY","jointAngle","addedNumber","prevPointInd","nextPointInd","previousPoint","nextPoint","previousX","previousY","nextX","nextY","smoothing","dLControlPoint","dRControlPoint","leftContAngle","prevPointCont","wrapPointPos","chartCoordinates","destroyed","SeriesClass","PointClass","AreaSplineRangeSeriesClass","ColumnSeriesClass","LineSeriesClass","SplineSeriesClass","pointProto","pointerProto","areaSplineRangeProto","polarPlotX","StackItem","WaterfallAxis","onAxisAfterBuildStacks","waterfall","changed","alreadyChanged","onAxisAfterRender","stackLabelOptions","renderStackTotals","Composition","serie","waterfallStacks","stackTotalGroup","dummyStackItem","stackItem","WaterfallPoint","getClassName","isSum","isIntermediateSum","lineWidthPlus","WaterfallSeriesDefaults","ownProp","Object","WaterfallSeries","processedYData","subSum","sum","dataMax","dataLength","pt","updateParallelArrays","upColor","getCrispPath","graphLineWidth","reversedXAxis","reversedYAxis","prevPoint","prevBox","prevStack","isPos","yPos","prevStackX","connectorThreshold","minPointLengthOffset","nextLast","last","seriesThreshold","xLength","stackThreshold","interSum","actualStackX","totalYVal","actualSum","prevSum","statesLen","posTotal","negTotal","xPoint","yVal","calculateStackState","firstS","nextS","sInx","sOff","stackState","actualStack","stateIndex","absolutePos","absoluteNeg","stackedYNeg","stackedYPos","stackX","showLine","halfMinPointLength","previousIntermediate","hPos","setOffset","tooltipY","isPointInside","crispBottom","G","Axis","Legend","Pointer","Tick","areasplinerange"],"mappings":"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"}