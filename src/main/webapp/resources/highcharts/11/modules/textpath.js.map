{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * (c) 2009-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/textpath-support', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/TextPath.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  Highcharts module with textPath functionality.\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { deg2rad } = H;\n        const { addEvent, merge, uniqueKey, defined, extend } = U;\n        /**\n         * Set a text path for a `text` or `label` element, allowing the text to\n         * flow along a path.\n         *\n         * In order to unset the path for an existing element, call `setTextPath`\n         * with `{ enabled: false }` as the second argument.\n         *\n         * Text path support is not bundled into `highcharts.js`, and requires the\n         * `modules/textpath.js` file. However, it is included in the script files of\n         * those series types that use it by default\n         *\n         * @sample highcharts/members/renderer-textpath/ Text path demonstrated\n         *\n         * @function Highcharts.SVGElement#setTextPath\n         *\n         * @param {Highcharts.SVGElement|undefined} path\n         *        Path to follow. If undefined, it allows changing options for the\n         *        existing path.\n         *\n         * @param {Highcharts.DataLabelsTextPathOptionsObject} textPathOptions\n         *        Options.\n         *\n         * @return {Highcharts.SVGElement} Returns the SVGElement for chaining.\n         */\n        function setTextPath(path, textPathOptions) {\n            // Defaults\n            textPathOptions = merge(true, {\n                enabled: true,\n                attributes: {\n                    dy: -5,\n                    startOffset: '50%',\n                    textAnchor: 'middle'\n                }\n            }, textPathOptions);\n            const url = this.renderer.url, textWrapper = this.text || this, textPath = textWrapper.textPath, { attributes, enabled } = textPathOptions;\n            path = path || (textPath && textPath.path);\n            // Remove previously added event\n            if (textPath) {\n                textPath.undo();\n            }\n            if (path && enabled) {\n                const undo = addEvent(textWrapper, 'afterModifyTree', (e) => {\n                    if (path && enabled) {\n                        // Set ID for the path\n                        let textPathId = path.attr('id');\n                        if (!textPathId) {\n                            path.attr('id', textPathId = uniqueKey());\n                        }\n                        // Set attributes for the <text>\n                        const textAttribs = {\n                            // `dx`/`dy` options must by set on <text> (parent), the\n                            // rest should be set on <textPath>\n                            x: 0,\n                            y: 0\n                        };\n                        if (defined(attributes.dx)) {\n                            textAttribs.dx = attributes.dx;\n                            delete attributes.dx;\n                        }\n                        if (defined(attributes.dy)) {\n                            textAttribs.dy = attributes.dy;\n                            delete attributes.dy;\n                        }\n                        textWrapper.attr(textAttribs);\n                        // Handle label properties\n                        this.attr({ transform: '' });\n                        if (this.box) {\n                            this.box = this.box.destroy();\n                        }\n                        // Wrap the nodes in a textPath\n                        const children = e.nodes.slice(0);\n                        e.nodes.length = 0;\n                        e.nodes[0] = {\n                            tagName: 'textPath',\n                            attributes: extend(attributes, {\n                                'text-anchor': attributes.textAnchor,\n                                href: `${url}#${textPathId}`\n                            }),\n                            children\n                        };\n                    }\n                });\n                // Set the reference\n                textWrapper.textPath = { path, undo };\n            }\n            else {\n                textWrapper.attr({ dx: 0, dy: 0 });\n                delete textWrapper.textPath;\n            }\n            if (this.added) {\n                // Rebuild text after added\n                textWrapper.textCache = '';\n                this.renderer.buildText(textWrapper);\n            }\n            return this;\n        }\n        /**\n         * Attach a polygon to a bounding box if the element contains a textPath.\n         *\n         * @function Highcharts.SVGElement#setPolygon\n         *\n         * @param {any} event\n         *        An event containing a bounding box object\n         *\n         * @return {Highcharts.BBoxObject} Returns the bounding box object.\n         */\n        function setPolygon(event) {\n            const bBox = event.bBox, tp = this.element?.querySelector('textPath');\n            if (tp) {\n                const polygon = [], { b, h } = this.renderer.fontMetrics(this.element), descender = h - b, lineCleanerRegex = new RegExp('(<tspan>|' +\n                    '<tspan(?!\\\\sclass=\"highcharts-br\")[^>]*>|' +\n                    '<\\\\/tspan>)', 'g'), lines = tp\n                    .innerHTML\n                    .replace(lineCleanerRegex, '')\n                    .split(/<tspan class=\"highcharts-br\"[^>]*>/), numOfLines = lines.length;\n                // Calculate top and bottom coordinates for\n                // either the start or the end of a single\n                // character, and append it to the polygon.\n                const appendTopAndBottom = (charIndex, positionOfChar) => {\n                    const { x, y } = positionOfChar, rotation = (tp.getRotationOfChar(charIndex) - 90) * deg2rad, cosRot = Math.cos(rotation), sinRot = Math.sin(rotation);\n                    return [\n                        [\n                            x - descender * cosRot,\n                            y - descender * sinRot\n                        ],\n                        [\n                            x + b * cosRot,\n                            y + b * sinRot\n                        ]\n                    ];\n                };\n                for (let i = 0, lineIndex = 0; lineIndex < numOfLines; lineIndex++) {\n                    const line = lines[lineIndex], lineLen = line.length;\n                    for (let lineCharIndex = 0; lineCharIndex < lineLen; lineCharIndex += 5) {\n                        try {\n                            const srcCharIndex = (i +\n                                lineCharIndex +\n                                lineIndex), [lower, upper] = appendTopAndBottom(srcCharIndex, tp.getStartPositionOfChar(srcCharIndex));\n                            if (lineCharIndex === 0) {\n                                polygon.push(upper);\n                                polygon.push(lower);\n                            }\n                            else {\n                                if (lineIndex === 0) {\n                                    polygon.unshift(upper);\n                                }\n                                if (lineIndex === numOfLines - 1) {\n                                    polygon.push(lower);\n                                }\n                            }\n                        }\n                        catch (e) {\n                            // Safari fails on getStartPositionOfChar even if the\n                            // character is within the `textContent.length`\n                            break;\n                        }\n                    }\n                    i += lineLen - 1;\n                    try {\n                        const srcCharIndex = i + lineIndex, charPos = tp.getEndPositionOfChar(srcCharIndex), [lower, upper] = appendTopAndBottom(srcCharIndex, charPos);\n                        polygon.unshift(upper);\n                        polygon.unshift(lower);\n                    }\n                    catch (e) {\n                        // Safari fails on getStartPositionOfChar even if the character\n                        // is within the `textContent.length`\n                        break;\n                    }\n                }\n                // Close it\n                if (polygon.length) {\n                    polygon.push(polygon[0].slice());\n                }\n                bBox.polygon = polygon;\n            }\n            return bBox;\n        }\n        /**\n         * Draw text along a textPath for a dataLabel.\n         *\n         * @function Highcharts.SVGElement#setTextPath\n         *\n         * @param {any} event\n         *        An event containing label options\n         *\n         * @return {void}\n         */\n        function drawTextPath(event) {\n            const labelOptions = event.labelOptions, point = event.point, textPathOptions = (labelOptions[point.formatPrefix + 'TextPath'] ||\n                labelOptions.textPath);\n            if (textPathOptions && !labelOptions.useHTML) {\n                this.setTextPath(point.getDataLabelPath?.(this) || point.graphic, textPathOptions);\n                if (point.dataLabelPath &&\n                    !textPathOptions.enabled) {\n                    // Clean the DOM\n                    point.dataLabelPath = (point.dataLabelPath.destroy());\n                }\n            }\n        }\n        function compose(SVGElementClass) {\n            addEvent(SVGElementClass, 'afterGetBBox', setPolygon);\n            addEvent(SVGElementClass, 'beforeAddingDataLabel', drawTextPath);\n            const svgElementProto = SVGElementClass.prototype;\n            if (!svgElementProto.setTextPath) {\n                svgElementProto.setTextPath = setTextPath;\n            }\n        }\n        const TextPath = {\n            compose\n        };\n\n        return TextPath;\n    });\n    _registerModule(_modules, 'masters/modules/textpath.src.js', [_modules['Core/Globals.js'], _modules['Extensions/TextPath.js']], function (Highcharts, TextPath) {\n\n        const G = Highcharts;\n        G.TextPath = TextPath;\n        G.TextPath.compose(G.SVGElement);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","H","U","deg2rad","addEvent","merge","uniqueKey","defined","extend","setTextPath","textPathOptions","enabled","attributes","dy","startOffset","textAnchor","url","renderer","textWrapper","text","textPath","undo","e","textPathId","attr","textAttribs","x","y","dx","transform","box","destroy","children","nodes","slice","length","tagName","href","added","textCache","buildText","setPolygon","event","bBox","tp","element","querySelector","polygon","b","h","fontMetrics","descender","lineCleanerRegex","RegExp","lines","innerHTML","replace","split","numOfLines","appendTopAndBottom","charIndex","positionOfChar","rotation","getRotationOfChar","cosRot","Math","cos","sinRot","sin","i","lineIndex","lineLen","line","lineCharIndex","srcCharIndex","lower","upper","getStartPositionOfChar","push","unshift","charPos","getEndPositionOfChar","drawTextPath","labelOptions","point","formatPrefix","useHTML","getDataLabelPath","graphic","dataLabelPath","compose","SVGElementClass","svgElementProto","prototype","TextPath","G","SVGElement"],"mappings":"CAAA;;;;;;CAMC,EACA,SAAUA,CAAO,EACV,AAAkB,UAAlB,OAAOC,QAAuBA,OAAOC,OAAO,EAC5CF,EAAQ,OAAU,CAAGA,EACrBC,OAAOC,OAAO,CAAGF,GACV,AAAkB,YAAlB,OAAOG,QAAyBA,OAAOC,GAAG,CACjDD,OAAO,sCAAuC,CAAC,aAAa,CAAE,SAAUE,CAAU,EAG9E,OAFAL,EAAQK,GACRL,EAAQK,UAAU,CAAGA,EACdL,CACX,GAEAA,EAAQ,AAAsB,aAAtB,OAAOK,WAA6BA,WAAaC,KAAAA,EAEjE,EAAE,SAAUD,CAAU,EAClB,aACA,IAAIE,EAAWF,EAAaA,EAAWE,QAAQ,CAAG,CAAC,EACnD,SAASC,EAAgBC,CAAG,CAAEC,CAAI,CAAEC,CAAI,CAAEC,CAAE,EACnCH,EAAII,cAAc,CAACH,KACpBD,CAAG,CAACC,EAAK,CAAGE,EAAGE,KAAK,CAAC,KAAMH,GAEA,YAAvB,OAAOI,aACPV,EAAWW,GAAG,CAACC,aAAa,CAAC,IAAIF,YAC7B,yBACA,CAAEG,OAAQ,CAAER,KAAMA,EAAMT,OAAQQ,CAAG,CAACC,EAAK,AAAC,CAAE,IAI5D,CACAF,EAAgBD,EAAU,yBAA0B,CAACA,CAAQ,CAAC,kBAAkB,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUY,CAAC,CAAEC,CAAC,EAY5H,GAAM,CAAEC,QAAAA,CAAO,CAAE,CAAGF,EACd,CAAEG,SAAAA,CAAQ,CAAEC,MAAAA,CAAK,CAAEC,UAAAA,CAAS,CAAEC,QAAAA,CAAO,CAAEC,OAAAA,CAAM,CAAE,CAAGN,EAyBxD,SAASO,EAAYjB,CAAI,CAAEkB,CAAe,EAEtCA,EAAkBL,EAAM,CAAA,EAAM,CAC1BM,QAAS,CAAA,EACTC,WAAY,CACRC,GAAI,GACJC,YAAa,MACbC,WAAY,QAChB,CACJ,EAAGL,GACH,IAAMM,EAAM,IAAI,CAACC,QAAQ,CAACD,GAAG,CAAEE,EAAc,IAAI,CAACC,IAAI,EAAI,IAAI,CAAEC,EAAWF,EAAYE,QAAQ,CAAE,CAAER,WAAAA,CAAU,CAAED,QAAAA,CAAO,CAAE,CAAGD,EAM3H,GALAlB,EAAOA,GAAS4B,GAAYA,EAAS5B,IAAI,CAErC4B,GACAA,EAASC,IAAI,GAEb7B,GAAQmB,EAAS,CACjB,IAAMU,EAAOjB,EAASc,EAAa,kBAAmB,AAACI,IACnD,GAAI9B,GAAQmB,EAAS,CAEjB,IAAIY,EAAa/B,EAAKgC,IAAI,CAAC,MACtBD,GACD/B,EAAKgC,IAAI,CAAC,KAAMD,EAAajB,KAGjC,IAAMmB,EAAc,CAGhBC,EAAG,EACHC,EAAG,CACP,EACIpB,EAAQK,EAAWgB,EAAE,IACrBH,EAAYG,EAAE,CAAGhB,EAAWgB,EAAE,CAC9B,OAAOhB,EAAWgB,EAAE,EAEpBrB,EAAQK,EAAWC,EAAE,IACrBY,EAAYZ,EAAE,CAAGD,EAAWC,EAAE,CAC9B,OAAOD,EAAWC,EAAE,EAExBK,EAAYM,IAAI,CAACC,GAEjB,IAAI,CAACD,IAAI,CAAC,CAAEK,UAAW,EAAG,GACtB,IAAI,CAACC,GAAG,EACR,CAAA,IAAI,CAACA,GAAG,CAAG,IAAI,CAACA,GAAG,CAACC,OAAO,EAAC,EAGhC,IAAMC,EAAWV,EAAEW,KAAK,CAACC,KAAK,CAAC,EAC/BZ,CAAAA,EAAEW,KAAK,CAACE,MAAM,CAAG,EACjBb,EAAEW,KAAK,CAAC,EAAE,CAAG,CACTG,QAAS,WACTxB,WAAYJ,EAAOI,EAAY,CAC3B,cAAeA,EAAWG,UAAU,CACpCsB,KAAM,CAAC,EAAErB,EAAI,CAAC,EAAEO,EAAW,CAAC,AAChC,GACAS,SAAAA,CACJ,CACJ,CACJ,EAEAd,CAAAA,EAAYE,QAAQ,CAAG,CAAE5B,KAAAA,EAAM6B,KAAAA,CAAK,CACxC,MAEIH,EAAYM,IAAI,CAAC,CAAEI,GAAI,EAAGf,GAAI,CAAE,GAChC,OAAOK,EAAYE,QAAQ,CAO/B,OALI,IAAI,CAACkB,KAAK,GAEVpB,EAAYqB,SAAS,CAAG,GACxB,IAAI,CAACtB,QAAQ,CAACuB,SAAS,CAACtB,IAErB,IAAI,AACf,CAWA,SAASuB,EAAWC,CAAK,EACrB,IAAMC,EAAOD,EAAMC,IAAI,CAAEC,EAAK,IAAI,CAACC,OAAO,EAAEC,cAAc,YAC1D,GAAIF,EAAI,CACJ,IAAMG,EAAU,EAAE,CAAE,CAAEC,EAAAA,CAAC,CAAEC,CAAC,CAAE,CAAG,IAAI,CAAChC,QAAQ,CAACiC,WAAW,CAAC,IAAI,CAACL,OAAO,EAAGM,EAAYF,EAAID,EAAGI,EAAmB,AAAIC,OAAO,gEAEtG,KAAMC,EAAQV,EAC5BW,SAAS,CACTC,OAAO,CAACJ,EAAkB,IAC1BK,KAAK,CAAC,sCAAuCC,EAAaJ,EAAMnB,MAAM,CAIrEwB,EAAqB,CAACC,EAAWC,KACnC,GAAM,CAAEnC,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAE,CAAGkC,EAAgBC,EAAW,AAAClB,CAAAA,EAAGmB,iBAAiB,CAACH,GAAa,EAAC,EAAKzD,EAAS6D,EAASC,KAAKC,GAAG,CAACJ,GAAWK,EAASF,KAAKG,GAAG,CAACN,GAC7I,MAAO,CACH,CACIpC,EAAIyB,EAAYa,EAChBrC,EAAIwB,EAAYgB,EACnB,CACD,CACIzC,EAAIsB,EAAIgB,EACRrC,EAAIqB,EAAImB,EACX,CACJ,AACL,EACA,IAAK,IAAIE,EAAI,EAAGC,EAAY,EAAGA,EAAYZ,EAAYY,IAAa,CAChE,IAA+BC,EAAUC,AAA5BlB,CAAK,CAACgB,EAAU,CAAiBnC,MAAM,CACpD,IAAK,IAAIsC,EAAgB,EAAGA,EAAgBF,EAASE,GAAiB,EAClE,GAAI,CACA,IAAMC,EAAgBL,EAClBI,EACAH,EAAY,CAACK,EAAOC,EAAM,CAAGjB,EAAmBe,EAAc9B,EAAGiC,sBAAsB,CAACH,GACxFD,AAAkB,CAAA,IAAlBA,GACA1B,EAAQ+B,IAAI,CAACF,GACb7B,EAAQ+B,IAAI,CAACH,KAGK,IAAdL,GACAvB,EAAQgC,OAAO,CAACH,GAEhBN,IAAcZ,EAAa,GAC3BX,EAAQ+B,IAAI,CAACH,GAGzB,CACA,MAAOrD,EAAG,CAGN,KACJ,CAEJ+C,GAAKE,EAAU,EACf,GAAI,CACA,IAAMG,EAAeL,EAAIC,EAAWU,EAAUpC,EAAGqC,oBAAoB,CAACP,GAAe,CAACC,EAAOC,EAAM,CAAGjB,EAAmBe,EAAcM,GACvIjC,EAAQgC,OAAO,CAACH,GAChB7B,EAAQgC,OAAO,CAACJ,EACpB,CACA,MAAOrD,EAAG,CAGN,KACJ,CACJ,CAEIyB,EAAQZ,MAAM,EACdY,EAAQ+B,IAAI,CAAC/B,CAAO,CAAC,EAAE,CAACb,KAAK,IAEjCS,EAAKI,OAAO,CAAGA,CACnB,CACA,OAAOJ,CACX,CAWA,SAASuC,EAAaxC,CAAK,EACvB,IAAMyC,EAAezC,EAAMyC,YAAY,CAAEC,EAAQ1C,EAAM0C,KAAK,CAAE1E,EAAmByE,CAAY,CAACC,EAAMC,YAAY,CAAG,WAAW,EAC1HF,EAAa/D,QAAQ,CACrBV,GAAmB,CAACyE,EAAaG,OAAO,GACxC,IAAI,CAAC7E,WAAW,CAAC2E,EAAMG,gBAAgB,GAAG,IAAI,GAAKH,EAAMI,OAAO,CAAE9E,GAC9D0E,EAAMK,aAAa,EACnB,CAAC/E,EAAgBC,OAAO,EAExByE,CAAAA,EAAMK,aAAa,CAAIL,EAAMK,aAAa,CAAC1D,OAAO,EAAE,EAGhE,CAaA,MAJiB,CACb2D,QATJ,SAAiBC,CAAe,EAC5BvF,EAASuF,EAAiB,eAAgBlD,GAC1CrC,EAASuF,EAAiB,wBAAyBT,GACnD,IAAMU,EAAkBD,EAAgBE,SAAS,AAC5CD,CAAAA,EAAgBnF,WAAW,EAC5BmF,CAAAA,EAAgBnF,WAAW,CAAGA,CAAU,CAEhD,CAGA,CAGJ,GACAnB,EAAgBD,EAAU,kCAAmC,CAACA,CAAQ,CAAC,kBAAkB,CAAEA,CAAQ,CAAC,yBAAyB,CAAC,CAAE,SAAUF,CAAU,CAAE2G,CAAQ,EAM1J,OAHAC,AADU5G,EACR2G,QAAQ,CAAGA,EACbC,AAFU5G,EAER2G,QAAQ,CAACJ,OAAO,CAACK,AAFT5G,EAEW6G,UAAU,EAExB7G,CACX,EACJ"}