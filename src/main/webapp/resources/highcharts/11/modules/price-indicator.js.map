{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.8 (2024-08-29)\n *\n * Advanced Highcharts Stock tools\n *\n * (c) 2010-2024 Highsoft AS\n * Author: Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/price-indicator', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/PriceIndication.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /**\n         * (c) 2009-2024 Sebastian Bochann\n         *\n         * Price indicator for Highcharts\n         *\n         * License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         */\n        const { composed } = H;\n        const { addEvent, isArray, merge, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /** @private */\n        function compose(SeriesClass) {\n            if (pushUnique(composed, 'PriceIndication')) {\n                addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n            }\n        }\n        /** @private */\n        function onSeriesAfterRender() {\n            const series = this, seriesOptions = series.options, lastVisiblePrice = seriesOptions.lastVisiblePrice, lastPrice = seriesOptions.lastPrice;\n            if ((lastVisiblePrice || lastPrice) &&\n                seriesOptions.id !== 'highcharts-navigator-series') {\n                const xAxis = series.xAxis, yAxis = series.yAxis, origOptions = yAxis.crosshair, origGraphic = yAxis.cross, origLabel = yAxis.crossLabel, points = series.points, yLength = series.yData.length, pLength = points.length, x = series.xData[series.xData.length - 1], y = series.yData[yLength - 1];\n                let yValue;\n                if (lastPrice && lastPrice.enabled) {\n                    yAxis.crosshair = yAxis.options.crosshair = seriesOptions.lastPrice;\n                    if (!series.chart.styledMode &&\n                        yAxis.crosshair &&\n                        yAxis.options.crosshair &&\n                        seriesOptions.lastPrice) {\n                        // Set the default color from the series, #14888.\n                        yAxis.crosshair.color = yAxis.options.crosshair.color =\n                            seriesOptions.lastPrice.color || series.color;\n                    }\n                    yAxis.cross = series.lastPrice;\n                    yValue = isArray(y) ? y[3] : y;\n                    if (series.lastPriceLabel) {\n                        series.lastPriceLabel.destroy();\n                    }\n                    delete yAxis.crossLabel;\n                    yAxis.drawCrosshair(null, ({\n                        x: x,\n                        y: yValue,\n                        plotX: xAxis.toPixels(x, true),\n                        plotY: yAxis.toPixels(yValue, true)\n                    }));\n                    // Save price\n                    if (series.yAxis.cross) {\n                        series.lastPrice = series.yAxis.cross;\n                        series.lastPrice.addClass('highcharts-color-' + series.colorIndex); // #15222\n                        series.lastPrice.y = yValue;\n                    }\n                    series.lastPriceLabel = yAxis.crossLabel;\n                }\n                if (lastVisiblePrice && lastVisiblePrice.enabled && pLength > 0) {\n                    yAxis.crosshair = yAxis.options.crosshair = merge({\n                        color: 'transparent' // Line invisible by default\n                    }, seriesOptions.lastVisiblePrice);\n                    yAxis.cross = series.lastVisiblePrice;\n                    const lastPoint = points[pLength - 1].isInside ?\n                        points[pLength - 1] : points[pLength - 2];\n                    if (series.lastVisiblePriceLabel) {\n                        series.lastVisiblePriceLabel.destroy();\n                    }\n                    // Set to undefined to avoid collision with\n                    // the yAxis crosshair #11480\n                    // Delete the crossLabel each time the code is invoked, #13876.\n                    delete yAxis.crossLabel;\n                    // Save price\n                    yAxis.drawCrosshair(null, lastPoint);\n                    if (yAxis.cross) {\n                        series.lastVisiblePrice = yAxis.cross;\n                        if (lastPoint && typeof lastPoint.y === 'number') {\n                            series.lastVisiblePrice.y = lastPoint.y;\n                        }\n                    }\n                    series.lastVisiblePriceLabel = yAxis.crossLabel;\n                }\n                // Restore crosshair:\n                yAxis.crosshair = yAxis.options.crosshair = origOptions;\n                yAxis.cross = origGraphic;\n                yAxis.crossLabel = origLabel;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const PriceIndication = {\n            compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The line marks the last price from visible range of points.\n         *\n         * @sample {highstock} stock/indicators/last-visible-price\n         *         Last visible price\n         *\n         * @declare   Highcharts.SeriesLastVisiblePriceOptionsObject\n         * @product   highstock\n         * @requires  modules/price-indicator\n         * @apioption plotOptions.series.lastVisiblePrice\n         */\n        /**\n         * Enable or disable the indicator.\n         *\n         * @type      {boolean}\n         * @product   highstock\n         * @default   false\n         * @apioption plotOptions.series.lastVisiblePrice.enabled\n         */\n        /**\n         * @declare   Highcharts.SeriesLastVisiblePriceLabelOptionsObject\n         * @extends   yAxis.crosshair.label\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastVisiblePrice.label\n         */\n        /**\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastVisiblePrice.label.align\n         */\n        /**\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastVisiblePrice.label.backgroundColor\n         */\n        /**\n         * The border color for the `lastVisiblePrice` label.\n         *\n         * @type      {Highcharts.ColorType}\n         * @since     7.0.0\n         * @product   highstock\n         * @apioption plotOptions.series.lastVisiblePrice.label.borderColor\n         */\n        /**\n         * The border corner radius of the `lastVisiblePrice` label.\n         *\n         * @type      {number}\n         * @default   3\n         * @since     7.0.0\n         * @product   highstock\n         * @apioption plotOptions.series.lastVisiblePrice.label.borderRadius\n        */\n        /**\n         * Flag to enable `lastVisiblePrice` label.\n         *\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     7.0\n         * @product   highstock\n         * @apioption plotOptions.series.lastVisiblePrice.label.enabled\n         */\n        /**\n         * A format string for the `lastVisiblePrice` label. Defaults to `{value}` for\n         * numeric axes and `{value:%b %d, %Y}` for datetime axes.\n         *\n         * @type      {string}\n         * @since     7.0\n         * @product   highstock\n         * @apioption plotOptions.series.lastVisiblePrice.label.format\n        */\n        /**\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastVisiblePrice.label.formatter\n         */\n        /**\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastVisiblePrice.label.padding\n         */\n        /**\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastVisiblePrice.label.shape\n         */\n        /**\n         * Text styles for the `lastVisiblePrice` label.\n         *\n         * @type      {Highcharts.CSSObject}\n         * @default   {\"color\": \"white\", \"fontWeight\": \"normal\", \"fontSize\": \"11px\", \"textAlign\": \"center\"}\n         * @since     7.0\n         * @product   highstock\n         * @apioption plotOptions.series.lastVisiblePrice.label.style\n         */\n        /**\n         * The border width for the `lastVisiblePrice` label.\n         *\n         * @type      {number}\n         * @default   0\n         * @since     7.0\n         * @product   highstock\n         * @apioption plotOptions.series.lastVisiblePrice.label.borderWidth\n        */\n        /**\n         * Padding inside the `lastVisiblePrice` label.\n         *\n         * @type      {number}\n         * @default   8\n         * @since     7.0\n         * @product   highstock\n         * @apioption plotOptions.series.lastVisiblePrice.label.padding\n         */\n        /**\n         * The line marks the last price from all points.\n         *\n         * @sample {highstock} stock/indicators/last-price\n         *         Last price\n         *\n         * @declare   Highcharts.SeriesLastPriceOptionsObject\n         * @product   highstock\n         * @requires  modules/price-indicator\n         * @apioption plotOptions.series.lastPrice\n         */\n        /**\n         * Enable or disable the indicator.\n         *\n         * @type      {boolean}\n         * @product   highstock\n         * @default   false\n         * @apioption plotOptions.series.lastPrice.enabled\n         */\n        /**\n         * @declare   Highcharts.SeriesLastPriceLabelOptionsObject\n         * @extends   yAxis.crosshair.label\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastPrice.label\n         */\n        /**\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastPrice.label.align\n         * */\n        /**\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastPrice.label.backgroundColor\n         * */\n        /**\n         * The border color of `lastPrice` label.\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastPrice.label.borderColor\n         * */\n        /**\n         * The border radius of `lastPrice` label.\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastPrice.label.borderRadius\n         * */\n        /**\n         * The border width of `lastPrice` label.\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastPrice.label.borderWidth\n         * */\n        /**\n         * Flag to enable `lastPrice` label.\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastPrice.label.enabled\n         * */\n        /**\n         * A format string for the `lastPrice` label. Defaults to `{value}` for\n         * numeric axes and `{value:%b %d, %Y}` for datetime axes.\n         *\n         * @type      {string}\n         * @since     7.0\n         * @product   highstock\n         * @apioption plotOptions.series.lastPrice.label.format\n        */\n        /**\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastPrice.label.formatter\n         */\n        /**\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastPrice.label.padding\n         */\n        /**\n         * @since     7.0.0\n         * @apioption plotOptions.series.lastPrice.label.shape\n         */\n        /**\n         * Text styles for the `lastPrice` label.\n         *\n         * @type      {Highcharts.CSSObject}\n         * @default   {\"color\": \"white\", \"fontWeight\": \"normal\", \"fontSize\": \"11px\", \"textAlign\": \"center\"}\n         * @since     7.0\n         * @product   highstock\n         * @apioption plotOptions.series.lastPrice.label.style\n         */\n        /**\n         * The border width for the `lastPrice` label.\n         *\n         * @type      {number}\n         * @default   0\n         * @since     7.0\n         * @product   highstock\n         * @apioption plotOptions.series.lastPrice.label.borderWidth\n        */\n        /**\n         * Padding inside the `lastPrice` label.\n         *\n         * @type      {number}\n         * @default   8\n         * @since     7.0\n         * @product   highstock\n         * @apioption plotOptions.series.lastPrice.label.padding\n         */\n        /**\n         * The color of the line of last price.\n         * By default, the line has the same color as the series.\n         *\n         * @type      {string}\n         * @product   highstock\n         * @apioption plotOptions.series.lastPrice.color\n         *\n         */\n        ''; // Keeps doclets above in JS file\n\n        return PriceIndication;\n    });\n    _registerModule(_modules, 'masters/modules/price-indicator.src.js', [_modules['Core/Globals.js'], _modules['Extensions/PriceIndication.js']], function (Highcharts, PriceIndication) {\n\n        const G = Highcharts;\n        PriceIndication.compose(G.Series);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","H","U","composed","addEvent","isArray","merge","pushUnique","onSeriesAfterRender","seriesOptions","series","options","lastVisiblePrice","lastPrice","id","yValue","xAxis","yAxis","origOptions","crosshair","origGraphic","cross","origLabel","crossLabel","points","yLength","yData","length","pLength","x","xData","y","enabled","chart","styledMode","color","lastPriceLabel","destroy","drawCrosshair","plotX","toPixels","plotY","addClass","colorIndex","lastPoint","isInside","lastVisiblePriceLabel","compose","SeriesClass","PriceIndication","G","Series"],"mappings":"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"}