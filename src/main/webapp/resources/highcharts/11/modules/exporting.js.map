{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * Exporting module\n *\n * (c) 2010-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/exporting', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Chart/ChartNavigationComposition.js', [], function () {\n        /**\n         *\n         *  (c) 2010-2024 PaweÅ‚ Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ChartNavigationComposition;\n        (function (ChartNavigationComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(chart) {\n                if (!chart.navigation) {\n                    chart.navigation = new Additions(chart);\n                }\n                return chart;\n            }\n            ChartNavigationComposition.compose = compose;\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Initializes `chart.navigation` object which delegates `update()` methods\n             * to all other common classes (used in exporting and navigationBindings).\n             * @private\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Constructor\n                 *\n                 * */\n                constructor(chart) {\n                    this.updates = [];\n                    this.chart = chart;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Registers an `update()` method in the `chart.navigation` object.\n                 *\n                 * @private\n                 * @param {UpdateFunction} updateFn\n                 * The `update()` method that will be called in `chart.update()`.\n                 */\n                addUpdate(updateFn) {\n                    this.chart.navigation.updates.push(updateFn);\n                }\n                /**\n                 * @private\n                 */\n                update(options, redraw) {\n                    this.updates.forEach((updateFn) => {\n                        updateFn.call(this.chart, options, redraw);\n                    });\n                }\n            }\n            ChartNavigationComposition.Additions = Additions;\n        })(ChartNavigationComposition || (ChartNavigationComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartNavigationComposition;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/ExportingDefaults.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        // Add the export related options\n        /**\n         * Options for the exporting module. For an overview on the matter, see\n         * [the docs](https://www.highcharts.com/docs/export-module/export-module-overview).\n         *\n         * @requires     modules/exporting\n         * @optionparent exporting\n         */\n        const exporting = {\n            /**\n             * Experimental setting to allow HTML inside the chart (added through\n             * the `useHTML` options), directly in the exported image. This allows\n             * you to preserve complicated HTML structures like tables or bi-directional\n             * text in exported charts.\n             *\n             * Disclaimer: The HTML is rendered in a `foreignObject` tag in the\n             * generated SVG. The official export server is based on PhantomJS,\n             * which supports this, but other SVG clients, like Batik, does not\n             * support it. This also applies to downloaded SVG that you want to\n             * open in a desktop client.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     4.1.8\n             * @apioption exporting.allowHTML\n             */\n            /**\n             * Allows the end user to sort the data table by clicking on column headers.\n             *\n             * @since 10.3.3\n             * @apioption exporting.allowTableSorting\n             */\n            allowTableSorting: true,\n            /**\n             * Additional chart options to be merged into the chart before exporting to\n             * an image format. This does not apply to printing the chart via the export\n             * menu.\n             *\n             * For example, a common use case is to add data labels to improve\n             * readability of the exported chart, or to add a printer-friendly color\n             * scheme to exported PDFs.\n             *\n             * @sample {highcharts} highcharts/exporting/chartoptions-data-labels/\n             *         Added data labels\n             * @sample {highstock} highcharts/exporting/chartoptions-data-labels/\n             *         Added data labels\n             *\n             * @type      {Highcharts.Options}\n             * @apioption exporting.chartOptions\n             */\n            /**\n             * Whether to enable the exporting module. Disabling the module will\n             * hide the context button, but API methods will still be available.\n             *\n             * @sample {highcharts} highcharts/exporting/enabled-false/\n             *         Exporting module is loaded but disabled\n             * @sample {highstock} highcharts/exporting/enabled-false/\n             *         Exporting module is loaded but disabled\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     2.0\n             * @apioption exporting.enabled\n             */\n            /**\n             * Function to call if the offline-exporting module fails to export\n             * a chart on the client side, and [fallbackToExportServer](\n             * #exporting.fallbackToExportServer) is disabled. If left undefined, an\n             * exception is thrown instead. Receives two parameters, the exporting\n             * options, and the error from the module.\n             *\n             * @see [fallbackToExportServer](#exporting.fallbackToExportServer)\n             *\n             * @type      {Highcharts.ExportingErrorCallbackFunction}\n             * @since     5.0.0\n             * @requires  modules/exporting\n             * @requires  modules/offline-exporting\n             * @apioption exporting.error\n             */\n            /**\n             * Whether or not to fall back to the export server if the offline-exporting\n             * module is unable to export the chart on the client side. This happens for\n             * certain browsers, and certain features (e.g.\n             * [allowHTML](#exporting.allowHTML)), depending on the image type exporting\n             * to. For very complex charts, it is possible that export can fail in\n             * browsers that don't support Blob objects, due to data URL length limits.\n             * It is recommended to define the [exporting.error](#exporting.error)\n             * handler if disabling fallback, in order to notify users in case export\n             * fails.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @since     4.1.8\n             * @requires  modules/exporting\n             * @requires  modules/offline-exporting\n             * @apioption exporting.fallbackToExportServer\n             */\n            /**\n             * The filename, without extension, to use for the exported chart.\n             *\n             * @sample {highcharts} highcharts/exporting/filename/\n             *         Custom file name\n             * @sample {highstock} highcharts/exporting/filename/\n             *         Custom file name\n             *\n             * @type      {string}\n             * @default   chart\n             * @since     2.0\n             * @apioption exporting.filename\n             */\n            /**\n             * Highcharts v11.2.0 and older. An object containing additional key value\n             * data for the POST form that sends the SVG to the export server. For\n             * example, a `target` can be set to make sure the generated image is\n             * received in another frame, or a custom `enctype` or `encoding` can be\n             * set.\n             *\n             * With Highcharts v11.3.0, the `fetch` API replaced the old HTML form. To\n             * modify the request, now use [fetchOptions](#exporting.fetchOptions)\n             * instead.\n             *\n             * @deprecated\n             * @type      {Highcharts.HTMLAttributes}\n             * @since     3.0.8\n             * @apioption exporting.formAttributes\n             */\n            /**\n             * Options for the fetch request used when sending the SVG to the export\n             * server.\n             *\n             * See [MDN](https://developer.mozilla.org/en-US/docs/Web/API/fetch)\n             * for more information\n             *\n             * @type {Object}\n             * @since 11.3.0\n             * @apioption exporting.fetchOptions\n             */\n            /**\n             * Path where Highcharts will look for export module dependencies to\n             * load on demand if they don't already exist on `window`. Should currently\n             * point to location of [CanVG](https://github.com/canvg/canvg) library,\n             * [jsPDF](https://github.com/parallax/jsPDF) and\n             * [svg2pdf.js](https://github.com/yWorks/svg2pdf.js), required for client\n             * side export in certain browsers.\n             *\n             * @type      {string}\n             * @default   https://code.highcharts.com/{version}/lib\n             * @since     5.0.0\n             * @apioption exporting.libURL\n             */\n            /**\n             * Analogous to [sourceWidth](#exporting.sourceWidth).\n             *\n             * @type      {number}\n             * @since     3.0\n             * @apioption exporting.sourceHeight\n             */\n            /**\n             * The width of the original chart when exported, unless an explicit\n             * [chart.width](#chart.width) is set, or a pixel width is set on the\n             * container. The width exported raster image is then multiplied by\n             * [scale](#exporting.scale).\n             *\n             * @sample {highcharts} highcharts/exporting/sourcewidth/\n             *         Source size demo\n             * @sample {highstock} highcharts/exporting/sourcewidth/\n             *         Source size demo\n             * @sample {highmaps} maps/exporting/sourcewidth/\n             *         Source size demo\n             *\n             * @type      {number}\n             * @since     3.0\n             * @apioption exporting.sourceWidth\n             */\n            /**\n             * The pixel width of charts exported to PNG or JPG. As of Highcharts\n             * 3.0, the default pixel width is a function of the [chart.width](\n             * #chart.width) or [exporting.sourceWidth](#exporting.sourceWidth) and the\n             * [exporting.scale](#exporting.scale).\n             *\n             * @sample {highcharts} highcharts/exporting/width/\n             *         Export to 200px wide images\n             * @sample {highstock} highcharts/exporting/width/\n             *         Export to 200px wide images\n             *\n             * @type      {number}\n             * @since     2.0\n             * @apioption exporting.width\n             */\n            /**\n             * Default MIME type for exporting if `chart.exportChart()` is called\n             * without specifying a `type` option. Possible values are `image/png`,\n             *  `image/jpeg`, `application/pdf` and `image/svg+xml`.\n             *\n             * @type  {Highcharts.ExportingMimeTypeValue}\n             * @since 2.0\n             */\n            type: 'image/png',\n            /**\n             * The URL for the server module converting the SVG string to an image\n             * format. By default this points to Highchart's free web service.\n             *\n             * @since 2.0\n             */\n            url: 'https://export.highcharts.com/',\n            /**\n             * Settings for a custom font for the exported PDF, when using the\n             * `offline-exporting` module. This is used for languages containing\n             * non-ASCII characters, like Chinese, Russian, Japanese etc.\n             *\n             * As described in the [jsPDF\n             * docs](https://github.com/parallax/jsPDF#use-of-unicode-characters--utf-8),\n             * the 14 standard fonts in PDF are limited to the ASCII-codepage.\n             * Therefore, in order to support other text in the exported PDF, one or\n             * more TTF font files have to be passed on to the exporting module.\n             *\n             * See more in [the\n             * docs](https://www.highcharts.com/docs/export-module/client-side-export).\n             *\n             * @sample {highcharts} highcharts/exporting/offline-download-pdffont/\n             *         Download PDF in a language containing non-Latin characters.\n             *\n             * @since 10.0.0\n             * @requires modules/offline-exporting\n             */\n            pdfFont: {\n                /**\n                 * The TTF font file for normal `font-style`. If font variations like\n                 * `bold` or `italic` are not defined, the `normal` font will be used\n                 * for those too.\n                 *\n                 * @type string|undefined\n                 */\n                normal: void 0,\n                /**\n                 * The TTF font file for bold text.\n                 *\n                 * @type string|undefined\n                 */\n                bold: void 0,\n                /**\n                 * The TTF font file for bold and italic text.\n                 *\n                 * @type string|undefined\n                 */\n                bolditalic: void 0,\n                /**\n                 * The TTF font file for italic text.\n                 *\n                 * @type string|undefined\n                 */\n                italic: void 0\n            },\n            /**\n             * When printing the chart from the menu item in the burger menu, if\n             * the on-screen chart exceeds this width, it is resized. After printing\n             * or cancelled, it is restored. The default width makes the chart\n             * fit into typical paper format. Note that this does not affect the\n             * chart when printing the web page as a whole.\n             *\n             * @since 4.2.5\n             */\n            printMaxWidth: 780,\n            /**\n             * Defines the scale or zoom factor for the exported image compared\n             * to the on-screen display. While for instance a 600px wide chart\n             * may look good on a website, it will look bad in print. The default\n             * scale of 2 makes this chart export to a 1200px PNG or JPG.\n             *\n             * @see [chart.width](#chart.width)\n             * @see [exporting.sourceWidth](#exporting.sourceWidth)\n             *\n             * @sample {highcharts} highcharts/exporting/scale/\n             *         Scale demonstrated\n             * @sample {highstock} highcharts/exporting/scale/\n             *         Scale demonstrated\n             * @sample {highmaps} maps/exporting/scale/\n             *         Scale demonstrated\n             *\n             * @since 3.0\n             */\n            scale: 2,\n            /**\n             * Options for the export related buttons, print and export. In addition\n             * to the default buttons listed here, custom buttons can be added.\n             * See [navigation.buttonOptions](#navigation.buttonOptions) for general\n             * options.\n             *\n             * @type     {Highcharts.Dictionary<*>}\n             * @requires modules/exporting\n             */\n            buttons: {\n                /**\n                 * Options for the export button.\n                 *\n                 * In styled mode, export button styles can be applied with the\n                 * `.highcharts-contextbutton` class.\n                 *\n                 * @declare  Highcharts.ExportingButtonsOptionsObject\n                 * @extends  navigation.buttonOptions\n                 * @requires modules/exporting\n                 */\n                contextButton: {\n                    /**\n                     * A click handler callback to use on the button directly instead of\n                     * the popup menu.\n                     *\n                     * @sample highcharts/exporting/buttons-contextbutton-onclick/\n                     *         Skip the menu and export the chart directly\n                     *\n                     * @type      {Function}\n                     * @since     2.0\n                     * @apioption exporting.buttons.contextButton.onclick\n                     */\n                    /**\n                     * See [navigation.buttonOptions.symbolFill](\n                     * #navigation.buttonOptions.symbolFill).\n                     *\n                     * @type      {Highcharts.ColorString}\n                     * @default   #666666\n                     * @since     2.0\n                     * @apioption exporting.buttons.contextButton.symbolFill\n                     */\n                    /**\n                     * The horizontal position of the button relative to the `align`\n                     * option.\n                     *\n                     * @type      {number}\n                     * @default   -10\n                     * @since     2.0\n                     * @apioption exporting.buttons.contextButton.x\n                     */\n                    /**\n                     * The class name of the context button.\n                     */\n                    className: 'highcharts-contextbutton',\n                    /**\n                     * The class name of the menu appearing from the button.\n                     */\n                    menuClassName: 'highcharts-contextmenu',\n                    /**\n                     * The symbol for the button. Points to a definition function in\n                     * the `Highcharts.Renderer.symbols` collection. The default\n                     * `menu` function is part of the exporting module. Possible\n                     * values are \"circle\", \"square\", \"diamond\", \"triangle\",\n                     * \"triangle-down\", \"menu\", \"menuball\" or custom shape.\n                     *\n                     * @sample highcharts/exporting/buttons-contextbutton-symbol/\n                     *         Use a circle for symbol\n                     * @sample highcharts/exporting/buttons-contextbutton-symbol-custom/\n                     *         Custom shape as symbol\n                     *\n                     * @type  {Highcharts.SymbolKeyValue|\"menu\"|\"menuball\"|string}\n                     * @since 2.0\n                     */\n                    symbol: 'menu',\n                    /**\n                     * The key to a [lang](#lang) option setting that is used for the\n                     * button's title tooltip. When the key is `contextButtonTitle`, it\n                     * refers to [lang.contextButtonTitle](#lang.contextButtonTitle)\n                     * that defaults to \"Chart context menu\".\n                     *\n                     * @since 6.1.4\n                     */\n                    titleKey: 'contextButtonTitle',\n                    /**\n                     * This option is deprecated, use\n                     * [titleKey](#exporting.buttons.contextButton.titleKey) instead.\n                     *\n                     * @deprecated\n                     * @type      {string}\n                     * @apioption exporting.buttons.contextButton._titleKey\n                     */\n                    /**\n                     * A collection of strings pointing to config options for the menu\n                     * items. The config options are defined in the\n                     * `menuItemDefinitions` option.\n                     *\n                     * By default, there is the \"View in full screen\" and \"Print\" menu\n                     * items, plus one menu item for each of the available export types.\n                     *\n                     * @sample {highcharts} highcharts/exporting/menuitemdefinitions/\n                     *         Menu item definitions\n                     * @sample {highstock} highcharts/exporting/menuitemdefinitions/\n                     *         Menu item definitions\n                     * @sample {highmaps} highcharts/exporting/menuitemdefinitions/\n                     *         Menu item definitions\n                     *\n                     * @type    {Array<string>}\n                     * @default [\"viewFullscreen\", \"printChart\", \"separator\", \"downloadPNG\", \"downloadJPEG\", \"downloadPDF\", \"downloadSVG\"]\n                     * @since   2.0\n                     */\n                    menuItems: [\n                        'viewFullscreen',\n                        'printChart',\n                        'separator',\n                        'downloadPNG',\n                        'downloadJPEG',\n                        'downloadPDF',\n                        'downloadSVG'\n                    ]\n                }\n            },\n            /**\n             * An object consisting of definitions for the menu items in the context\n             * menu. Each key value pair has a `key` that is referenced in the\n             * [menuItems](#exporting.buttons.contextButton.menuItems) setting,\n             * and a `value`, which is an object with the following properties:\n             *\n             * - **onclick:** The click handler for the menu item\n             *\n             * - **text:** The text for the menu item\n             *\n             * - **textKey:** If internationalization is required, the key to a language\n             *   string\n             *\n             * Custom text for the \"exitFullScreen\" can be set only in lang options\n             * (it is not a separate button).\n             *\n             * @sample {highcharts} highcharts/exporting/menuitemdefinitions/\n             *         Menu item definitions\n             * @sample {highstock} highcharts/exporting/menuitemdefinitions/\n             *         Menu item definitions\n             * @sample {highmaps} highcharts/exporting/menuitemdefinitions/\n             *         Menu item definitions\n             *\n             *\n             * @type    {Highcharts.Dictionary<Highcharts.ExportingMenuObject>}\n             * @default {\"viewFullscreen\": {}, \"printChart\": {}, \"separator\": {}, \"downloadPNG\": {}, \"downloadJPEG\": {}, \"downloadPDF\": {}, \"downloadSVG\": {}}\n             * @since   5.0.13\n             */\n            menuItemDefinitions: {\n                /**\n                 * @ignore\n                 */\n                viewFullscreen: {\n                    textKey: 'viewFullscreen',\n                    onclick: function () {\n                        if (this.fullscreen) {\n                            this.fullscreen.toggle();\n                        }\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                printChart: {\n                    textKey: 'printChart',\n                    onclick: function () {\n                        this.print();\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                separator: {\n                    separator: true\n                },\n                /**\n                 * @ignore\n                 */\n                downloadPNG: {\n                    textKey: 'downloadPNG',\n                    onclick: function () {\n                        this.exportChart();\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadJPEG: {\n                    textKey: 'downloadJPEG',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'image/jpeg'\n                        });\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadPDF: {\n                    textKey: 'downloadPDF',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'application/pdf'\n                        });\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadSVG: {\n                    textKey: 'downloadSVG',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'image/svg+xml'\n                        });\n                    }\n                }\n            }\n        };\n        // Add language\n        /**\n         * @optionparent lang\n         */\n        const lang = {\n            /**\n             * Exporting module only. The text for the menu item to view the chart\n             * in full screen.\n             *\n             * @since 8.0.1\n             */\n            viewFullscreen: 'View in full screen',\n            /**\n             * Exporting module only. The text for the menu item to exit the chart\n             * from full screen.\n             *\n             * @since 8.0.1\n             */\n            exitFullscreen: 'Exit from full screen',\n            /**\n             * Exporting module only. The text for the menu item to print the chart.\n             *\n             * @since    3.0.1\n             * @requires modules/exporting\n             */\n            printChart: 'Print chart',\n            /**\n             * Exporting module only. The text for the PNG download menu item.\n             *\n             * @since    2.0\n             * @requires modules/exporting\n             */\n            downloadPNG: 'Download PNG image',\n            /**\n             * Exporting module only. The text for the JPEG download menu item.\n             *\n             * @since    2.0\n             * @requires modules/exporting\n             */\n            downloadJPEG: 'Download JPEG image',\n            /**\n             * Exporting module only. The text for the PDF download menu item.\n             *\n             * @since    2.0\n             * @requires modules/exporting\n             */\n            downloadPDF: 'Download PDF document',\n            /**\n             * Exporting module only. The text for the SVG download menu item.\n             *\n             * @since    2.0\n             * @requires modules/exporting\n             */\n            downloadSVG: 'Download SVG vector image',\n            /**\n             * Exporting module menu. The tooltip title for the context menu holding\n             * print and export menu items.\n             *\n             * @since    3.0\n             * @requires modules/exporting\n             */\n            contextButtonTitle: 'Chart context menu'\n        };\n        /**\n         * A collection of options for buttons and menus appearing in the exporting\n         * module or in Stock Tools.\n         *\n         * @requires     modules/exporting\n         * @optionparent navigation\n         */\n        const navigation = {\n            /**\n             * A collection of options for buttons appearing in the exporting\n             * module.\n             *\n             * In styled mode, the buttons are styled with the\n             * `.highcharts-contextbutton` and `.highcharts-button-symbol` classes.\n             *\n             * @requires modules/exporting\n             */\n            buttonOptions: {\n                /**\n                 * Whether to enable buttons.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-enabled/\n                 *         Exporting module loaded but buttons disabled\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @since     2.0\n                 * @apioption navigation.buttonOptions.enabled\n                 */\n                /**\n                 * The pixel size of the symbol on the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                symbolSize: 14,\n                /**\n                 * The x position of the center of the symbol inside the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                symbolX: 14.5,\n                /**\n                 * The y position of the center of the symbol inside the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                symbolY: 13.5,\n                /**\n                 * Alignment for the buttons.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-align/\n                 *         Center aligned\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 2.0\n                 */\n                align: 'right',\n                /**\n                 * The pixel spacing between buttons.\n                 *\n                 * @since 2.0\n                 */\n                buttonSpacing: 3,\n                /**\n                 * Pixel height of the buttons.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                height: 28,\n                /**\n                 * A text string to add to the individual button.\n                 *\n                 * @sample highcharts/exporting/buttons-text/\n                 *         Full text button\n                 * @sample highcharts/exporting/buttons-text-usehtml/\n                 *         Icon using CSS font in text\n                 * @sample highcharts/exporting/buttons-text-symbol/\n                 *         Combined symbol and text\n                 *\n                 * @type      {string}\n                 * @default   null\n                 * @since     3.0\n                 * @apioption navigation.buttonOptions.text\n                 */\n                /**\n                 * Whether to use HTML for rendering the button. HTML allows for things\n                 * like inline CSS or image-based icons.\n                 *\n                 * @sample highcharts/exporting/buttons-text-usehtml/\n                 *         Icon using CSS font in text\n                 *\n                 * @type      boolean\n                 * @default   false\n                 * @since 10.3.0\n                 * @apioption navigation.buttonOptions.useHTML\n                 */\n                /**\n                 * The vertical offset of the button's position relative to its\n                 * `verticalAlign`.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-verticalalign/\n                 *         Buttons at lower right\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @since     2.0\n                 * @apioption navigation.buttonOptions.y\n                 */\n                /**\n                 * The vertical alignment of the buttons. Can be one of `\"top\"`,\n                 * `\"middle\"` or `\"bottom\"`.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-verticalalign/\n                 *         Buttons at lower right\n                 *\n                 * @type  {Highcharts.VerticalAlignValue}\n                 * @since 2.0\n                 */\n                verticalAlign: 'top',\n                /**\n                 * The pixel width of the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                width: 28,\n                /**\n                 * Fill color for the symbol within the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-symbolfill/\n                 *         Blue symbol stroke for one of the buttons\n                 *\n                 * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @since 2.0\n                 */\n                symbolFill: \"#666666\" /* Palette.neutralColor60 */,\n                /**\n                 * The color of the symbol's stroke or line.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-symbolstroke/\n                 *         Blue symbol stroke\n                 *\n                 * @type  {Highcharts.ColorString}\n                 * @since 2.0\n                 */\n                symbolStroke: \"#666666\" /* Palette.neutralColor60 */,\n                /**\n                 * The pixel stroke width of the symbol on the button.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-height/\n                 *         Bigger buttons\n                 *\n                 * @since 2.0\n                 */\n                symbolStrokeWidth: 3,\n                /**\n                 * A configuration object for the button theme. The object accepts\n                 * SVG properties like `stroke-width`, `stroke` and `fill`.\n                 * Tri-state button styles are supported by the `states.hover` and\n                 * `states.select` objects.\n                 *\n                 * @sample highcharts/navigation/buttonoptions-theme/\n                 *         Theming the buttons\n                 *\n                 * @requires modules/exporting\n                 *\n                 * @since 3.0\n                 */\n                theme: {\n                    /**\n                     * The default fill exists only to capture hover events.\n                     *\n                     * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     */\n                    fill: \"#ffffff\" /* Palette.backgroundColor */,\n                    /**\n                     * Padding for the button.\n                     */\n                    padding: 5,\n                    /**\n                     * Default stroke for the buttons.\n                     *\n                     * @type      {Highcharts.ColorString}\n                     */\n                    stroke: 'none',\n                    /**\n                     * Default stroke linecap for the buttons.\n                     */\n                    'stroke-linecap': 'round'\n                }\n            },\n            /**\n             * CSS styles for the popup menu appearing by default when the export\n             * icon is clicked. This menu is rendered in HTML.\n             *\n             * @see In styled mode, the menu is styled with the `.highcharts-menu`\n             *      class.\n             *\n             * @sample highcharts/navigation/menustyle/\n             *         Light gray menu background\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"background\": \"#ffffff\", \"borderRadius\": \"3px\", \"padding\": \"0.5em\"}\n             * @since   2.0\n             */\n            menuStyle: {\n                /** @ignore-option */\n                border: 'none',\n                /** @ignore-option */\n                borderRadius: '3px',\n                /** @ignore-option */\n                background: \"#ffffff\" /* Palette.backgroundColor */,\n                /** @ignore-option */\n                padding: '0.5em'\n            },\n            /**\n             * CSS styles for the individual items within the popup menu appearing\n             * by default when the export icon is clicked. The menu items are\n             * rendered in HTML. Font size defaults to `11px` on desktop and `14px`\n             * on touch devices.\n             *\n             * @see In styled mode, the menu items are styled with the\n             *      `.highcharts-menu-item` class.\n             *\n             * @sample {highcharts} highcharts/navigation/menuitemstyle/\n             *         Add a grey stripe to the left\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"padding\": \"0.5em\", \"color\": \"#333333\", \"background\": \"none\", \"borderRadius\": \"3px\", \"fontSize\": \"0.8em\", \"transition\": \"background 250ms, color 250ms\"}\n             * @since   2.0\n             */\n            menuItemStyle: {\n                /** @ignore-option */\n                background: 'none',\n                /** @ignore-option */\n                borderRadius: '3px',\n                /** @ignore-option */\n                color: \"#333333\" /* Palette.neutralColor80 */,\n                /** @ignore-option */\n                padding: '0.5em',\n                /** @ignore-option */\n                fontSize: isTouchDevice ? '0.9em' : '0.8em',\n                /** @ignore-option */\n                transition: 'background 250ms, color 250ms'\n            },\n            /**\n             * CSS styles for the hover state of the individual items within the\n             * popup menu appearing by default when the export icon is clicked. The\n             * menu items are rendered in HTML.\n             *\n             * @see In styled mode, the menu items are styled with the\n             *      `.highcharts-menu-item` class.\n             *\n             * @sample highcharts/navigation/menuitemhoverstyle/\n             *         Bold text on hover\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"background\": \"#f2f2f2\" }\n             * @since   2.0\n             */\n            menuItemHoverStyle: {\n                /** @ignore-option */\n                background: \"#f2f2f2\" /* Palette.neutralColor5 */\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ExportingDefaults = {\n            exporting,\n            lang,\n            navigation\n        };\n\n        return ExportingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/ExportingSymbols.js', [], function () {\n        /* *\n         *\n         *  Exporting module\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ExportingSymbols;\n        (function (ExportingSymbols) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const modifiedClasses = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SVGRendererClass) {\n                if (modifiedClasses.indexOf(SVGRendererClass) === -1) {\n                    modifiedClasses.push(SVGRendererClass);\n                    const symbols = SVGRendererClass.prototype.symbols;\n                    symbols.menu = menu;\n                    symbols.menuball = menuball.bind(symbols);\n                }\n            }\n            ExportingSymbols.compose = compose;\n            /**\n             * @private\n             */\n            function menu(x, y, width, height) {\n                const arr = [\n                    ['M', x, y + 2.5],\n                    ['L', x + width, y + 2.5],\n                    ['M', x, y + height / 2 + 0.5],\n                    ['L', x + width, y + height / 2 + 0.5],\n                    ['M', x, y + height - 1.5],\n                    ['L', x + width, y + height - 1.5]\n                ];\n                return arr;\n            }\n            /**\n             * @private\n             */\n            function menuball(x, y, width, height) {\n                const h = (height / 3) - 2;\n                let path = [];\n                path = path.concat(this.circle(width - h, y, h, h), this.circle(width - h, y + h + 4, h, h), this.circle(width - h, y + 2 * (h + 4), h, h));\n                return path;\n            }\n        })(ExportingSymbols || (ExportingSymbols = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ExportingSymbols;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/Fullscreen.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (AST, H, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Rafal Sebestjanski\n         *\n         *  Full screen for Highcharts\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /**\n         * The module allows user to enable display chart in full screen mode.\n         * Used in StockTools too.\n         * Based on default solutions in browsers.\n         */\n        const { composed } = H;\n        const { addEvent, fireEvent, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onChartBeforeRender() {\n            /**\n             * @name Highcharts.Chart#fullscreen\n             * @type {Highcharts.Fullscreen}\n             * @requires modules/full-screen\n             */\n            this.fullscreen = new Fullscreen(this);\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles displaying chart's container in the fullscreen mode.\n         *\n         * **Note**: Fullscreen is not supported on iPhone due to iOS limitations.\n         *\n         * @class\n         * @name Highcharts.Fullscreen\n         *\n         * @requires modules/exporting\n         */\n        class Fullscreen {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Prepares the chart class to support fullscreen.\n             *\n             * @param {typeof_Highcharts.Chart} ChartClass\n             * The chart class to decorate with fullscreen support.\n             */\n            static compose(ChartClass) {\n                if (pushUnique(composed, 'Fullscreen')) {\n                    // Initialize fullscreen\n                    addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(chart) {\n                /**\n                 * Chart managed by the fullscreen controller.\n                 * @name Highcharts.Fullscreen#chart\n                 * @type {Highcharts.Chart}\n                 */\n                this.chart = chart;\n                /**\n                 * The flag is set to `true` when the chart is displayed in\n                 * the fullscreen mode.\n                 *\n                 * @name Highcharts.Fullscreen#isOpen\n                 * @type {boolean|undefined}\n                 * @since 8.0.1\n                 */\n                this.isOpen = false;\n                const container = chart.renderTo;\n                // Hold event and methods available only for a current browser.\n                if (!this.browserProps) {\n                    if (typeof container.requestFullscreen === 'function') {\n                        this.browserProps = {\n                            fullscreenChange: 'fullscreenchange',\n                            requestFullscreen: 'requestFullscreen',\n                            exitFullscreen: 'exitFullscreen'\n                        };\n                    }\n                    else if (container.mozRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'mozfullscreenchange',\n                            requestFullscreen: 'mozRequestFullScreen',\n                            exitFullscreen: 'mozCancelFullScreen'\n                        };\n                    }\n                    else if (container.webkitRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'webkitfullscreenchange',\n                            requestFullscreen: 'webkitRequestFullScreen',\n                            exitFullscreen: 'webkitExitFullscreen'\n                        };\n                    }\n                    else if (container.msRequestFullscreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'MSFullscreenChange',\n                            requestFullscreen: 'msRequestFullscreen',\n                            exitFullscreen: 'msExitFullscreen'\n                        };\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Stops displaying the chart in fullscreen mode.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function    Highcharts.Fullscreen#close\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            close() {\n                const fullscreen = this, chart = fullscreen.chart, optionsChart = chart.options.chart;\n                fireEvent(chart, 'fullscreenClose', null, function () {\n                    // Don't fire exitFullscreen() when user exited\n                    // using 'Escape' button.\n                    if (fullscreen.isOpen &&\n                        fullscreen.browserProps &&\n                        chart.container.ownerDocument instanceof Document) {\n                        chart.container.ownerDocument[fullscreen.browserProps.exitFullscreen]();\n                    }\n                    // Unbind event as it's necessary only before exiting\n                    // from fullscreen.\n                    if (fullscreen.unbindFullscreenEvent) {\n                        fullscreen.unbindFullscreenEvent = fullscreen\n                            .unbindFullscreenEvent();\n                    }\n                    chart.setSize(fullscreen.origWidth, fullscreen.origHeight, false);\n                    fullscreen.origWidth = void 0;\n                    fullscreen.origHeight = void 0;\n                    optionsChart.width = fullscreen.origWidthOption;\n                    optionsChart.height = fullscreen.origHeightOption;\n                    fullscreen.origWidthOption = void 0;\n                    fullscreen.origHeightOption = void 0;\n                    fullscreen.isOpen = false;\n                    fullscreen.setButtonText();\n                });\n            }\n            /**\n             * Displays the chart in fullscreen mode.\n             * When fired customly by user before exporting context button is created,\n             * button's text will not be replaced - it's on the user side.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function Highcharts.Fullscreen#open\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            open() {\n                const fullscreen = this, chart = fullscreen.chart, optionsChart = chart.options.chart;\n                fireEvent(chart, 'fullscreenOpen', null, function () {\n                    if (optionsChart) {\n                        fullscreen.origWidthOption = optionsChart.width;\n                        fullscreen.origHeightOption = optionsChart.height;\n                    }\n                    fullscreen.origWidth = chart.chartWidth;\n                    fullscreen.origHeight = chart.chartHeight;\n                    // Handle exitFullscreen() method when user clicks 'Escape' button.\n                    if (fullscreen.browserProps) {\n                        const unbindChange = addEvent(chart.container.ownerDocument, // Chart's document\n                        fullscreen.browserProps.fullscreenChange, function () {\n                            // Handle lack of async of browser's\n                            // fullScreenChange event.\n                            if (fullscreen.isOpen) {\n                                fullscreen.isOpen = false;\n                                fullscreen.close();\n                            }\n                            else {\n                                chart.setSize(null, null, false);\n                                fullscreen.isOpen = true;\n                                fullscreen.setButtonText();\n                            }\n                        });\n                        const unbindDestroy = addEvent(chart, 'destroy', unbindChange);\n                        fullscreen.unbindFullscreenEvent = () => {\n                            unbindChange();\n                            unbindDestroy();\n                        };\n                        const promise = chart.renderTo[fullscreen.browserProps.requestFullscreen]();\n                        if (promise) {\n                            promise['catch'](function () {\n                                alert(// eslint-disable-line no-alert\n                                'Full screen is not supported inside a frame.');\n                            });\n                        }\n                    }\n                });\n            }\n            /**\n             * Replaces the exporting context button's text when toogling the\n             * fullscreen mode.\n             *\n             * @private\n             *\n             * @since 8.0.1\n             *\n             * @requires modules/full-screen\n             */\n            setButtonText() {\n                const chart = this.chart, exportDivElements = chart.exportDivElements, exportingOptions = chart.options.exporting, menuItems = (exportingOptions &&\n                    exportingOptions.buttons &&\n                    exportingOptions.buttons.contextButton.menuItems), lang = chart.options.lang;\n                if (exportingOptions &&\n                    exportingOptions.menuItemDefinitions &&\n                    lang &&\n                    lang.exitFullscreen &&\n                    lang.viewFullscreen &&\n                    menuItems &&\n                    exportDivElements) {\n                    const exportDivElement = exportDivElements[menuItems.indexOf('viewFullscreen')];\n                    if (exportDivElement) {\n                        AST.setElementHTML(exportDivElement, !this.isOpen ?\n                            (exportingOptions.menuItemDefinitions.viewFullscreen\n                                .text ||\n                                lang.viewFullscreen) : lang.exitFullscreen);\n                    }\n                }\n            }\n            /**\n             * Toggles displaying the chart in fullscreen mode.\n             * By default, when the exporting module is enabled, a context button with\n             * a drop down menu in the upper right corner accesses this function.\n             * Exporting module required.\n             *\n             * @since 8.0.1\n             *\n             * @sample      highcharts/members/chart-togglefullscreen/\n             *              Toggle fullscreen mode from a HTML button\n             *\n             * @function Highcharts.Fullscreen#toggle\n             * @requires    modules/full-screen\n             */\n            toggle() {\n                const fullscreen = this;\n                if (!fullscreen.isOpen) {\n                    fullscreen.open();\n                }\n                else {\n                    fullscreen.close();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Gets fired when closing the fullscreen\n         *\n         * @callback Highcharts.FullScreenfullscreenCloseCallbackFunction\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired when opening the fullscreen\n         *\n         * @callback Highcharts.FullScreenfullscreenOpenCallbackFunction\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        (''); // Keeps doclets above separated from following code\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Fires when a fullscreen is closed through the context menu item,\n         * or a fullscreen is closed on the `Escape` button click,\n         * or the `Chart.fullscreen.close` method.\n         *\n         * @sample highcharts/chart/events-fullscreen\n         *         Title size change on fullscreen open\n         *\n         * @type      {Highcharts.FullScreenfullscreenCloseCallbackFunction}\n         * @since     10.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/full-screen\n         * @apioption chart.events.fullscreenClose\n         */\n        /**\n         * Fires when a fullscreen is opened through the context menu item,\n         * or the `Chart.fullscreen.open` method.\n         *\n         * @sample highcharts/chart/events-fullscreen\n         *         Title size change on fullscreen open\n         *\n         * @type      {Highcharts.FullScreenfullscreenOpenCallbackFunction}\n         * @since     10.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/full-screen\n         * @apioption chart.events.fullscreenOpen\n         */\n        (''); // Keeps doclets above in transpiled file\n\n        return Fullscreen;\n    });\n    _registerModule(_modules, 'Core/HttpUtilities.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (G, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Christer Vasseng, Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { win } = G;\n        const { discardElement, objectEach } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Perform an Ajax call.\n         *\n         * @function Highcharts.ajax\n         *\n         * @param {Highcharts.AjaxSettingsObject} settings\n         *        The Ajax settings to use.\n         *\n         * @return {false|undefined}\n         *         Returns false, if error occurred.\n         */\n        function ajax(settings) {\n            const headers = {\n                json: 'application/json',\n                xml: 'application/xml',\n                text: 'text/plain',\n                octet: 'application/octet-stream'\n            }, r = new XMLHttpRequest();\n            /**\n             * Private error handler.\n             * @private\n             * @param {XMLHttpRequest} xhr\n             * Internal request object.\n             * @param {string|Error} err\n             * Occurred error.\n             */\n            function handleError(xhr, err) {\n                if (settings.error) {\n                    settings.error(xhr, err);\n                }\n                else {\n                    // @todo Maybe emit a highcharts error event here\n                }\n            }\n            if (!settings.url) {\n                return false;\n            }\n            r.open((settings.type || 'get').toUpperCase(), settings.url, true);\n            if (!settings.headers || !settings.headers['Content-Type']) {\n                r.setRequestHeader('Content-Type', headers[settings.dataType || 'json'] || headers.text);\n            }\n            objectEach(settings.headers, function (val, key) {\n                r.setRequestHeader(key, val);\n            });\n            if (settings.responseType) {\n                r.responseType = settings.responseType;\n            }\n            // @todo lacking timeout handling\n            r.onreadystatechange = function () {\n                let res;\n                if (r.readyState === 4) {\n                    if (r.status === 200) {\n                        if (settings.responseType !== 'blob') {\n                            res = r.responseText;\n                            if (settings.dataType === 'json') {\n                                try {\n                                    res = JSON.parse(res);\n                                }\n                                catch (e) {\n                                    if (e instanceof Error) {\n                                        return handleError(r, e);\n                                    }\n                                }\n                            }\n                        }\n                        return settings.success && settings.success(res, r);\n                    }\n                    handleError(r, r.responseText);\n                }\n            };\n            if (settings.data && typeof settings.data !== 'string') {\n                settings.data = JSON.stringify(settings.data);\n            }\n            r.send(settings.data);\n        }\n        /**\n         * Get a JSON resource over XHR, also supporting CORS without preflight.\n         *\n         * @function Highcharts.getJSON\n         * @param {string} url\n         *        The URL to load.\n         * @param {Function} success\n         *        The success callback. For error handling, use the `Highcharts.ajax`\n         *        function instead.\n         */\n        function getJSON(url, success) {\n            HttpUtilities.ajax({\n                url: url,\n                success: success,\n                dataType: 'json',\n                headers: {\n                    // Override the Content-Type to avoid preflight problems with CORS\n                    // in the Highcharts demos\n                    'Content-Type': 'text/plain'\n                }\n            });\n        }\n        /**\n         * The post utility\n         *\n         * @private\n         * @function Highcharts.post\n         *\n         * @param {string} url\n         * Post URL\n         *\n         * @param {Object} data\n         * Post data\n         *\n         * @param {RequestInit} [fetchOptions]\n         * Additional attributes for the post request\n         */\n        /**\n         *\n         */\n        function post(url, data, fetchOptions) {\n            const formData = new win.FormData();\n            // Add the data\n            objectEach(data, function (val, name) {\n                formData.append(name, val);\n            });\n            formData.append('b64', 'true');\n            const { filename, type } = data;\n            return win.fetch(url, {\n                method: 'POST',\n                body: formData,\n                ...fetchOptions\n            }).then((res) => {\n                if (res.ok) {\n                    res.text().then((text) => {\n                        const link = document.createElement('a');\n                        link.href = `data:${type};base64,${text}`;\n                        link.download = filename;\n                        link.click();\n                        discardElement(link);\n                    });\n                }\n            });\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const HttpUtilities = {\n            ajax,\n            getJSON,\n            post\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @interface Highcharts.AjaxSettingsObject\n         */ /**\n        * The payload to send.\n        *\n        * @name Highcharts.AjaxSettingsObject#data\n        * @type {string|Highcharts.Dictionary<any>|undefined}\n        */ /**\n        * The data type expected.\n        * @name Highcharts.AjaxSettingsObject#dataType\n        * @type {\"json\"|\"xml\"|\"text\"|\"octet\"|undefined}\n        */ /**\n        * Function to call on error.\n        * @name Highcharts.AjaxSettingsObject#error\n        * @type {Function|undefined}\n        */ /**\n        * The headers; keyed on header name.\n        * @name Highcharts.AjaxSettingsObject#headers\n        * @type {Highcharts.Dictionary<string>|undefined}\n        */ /**\n        * Function to call on success.\n        * @name Highcharts.AjaxSettingsObject#success\n        * @type {Function|undefined}\n        */ /**\n        * The HTTP method to use. For example GET or POST.\n        * @name Highcharts.AjaxSettingsObject#type\n        * @type {string|undefined}\n        */ /**\n        * The URL to call.\n        * @name Highcharts.AjaxSettingsObject#url\n        * @type {string}\n        */\n        (''); // Keeps doclets above in JS file\n\n        return HttpUtilities;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/Exporting.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Chart/ChartNavigationComposition.js'], _modules['Core/Defaults.js'], _modules['Extensions/Exporting/ExportingDefaults.js'], _modules['Extensions/Exporting/ExportingSymbols.js'], _modules['Extensions/Exporting/Fullscreen.js'], _modules['Core/Globals.js'], _modules['Core/HttpUtilities.js'], _modules['Core/Utilities.js']], function (AST, Chart, ChartNavigationComposition, D, ExportingDefaults, ExportingSymbols, Fullscreen, G, HU, U) {\n        /* *\n         *\n         *  Exporting module\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { doc, SVG_NS, win } = G;\n        const { addEvent, css, createElement, discardElement, extend, find, fireEvent, isObject, merge, objectEach, pick, removeEvent, uniqueKey } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var Exporting;\n        (function (Exporting) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            // These CSS properties are not inlined. Remember camelCase.\n            const inlineDenylist = [\n                /-/, // In Firefox, both hyphened and camelCased names are listed\n                /^(clipPath|cssText|d|height|width)$/, // Full words\n                /^font$/, // More specific props are set\n                /[lL]ogical(Width|Height)$/,\n                /^parentRule$/,\n                /^(cssRules|ownerRules)$/, // #19516 read-only properties\n                /perspective/,\n                /TapHighlightColor/,\n                /^transition/,\n                /^length$/, // #7700\n                /^\\d+$/ // #17538\n            ];\n            // These ones are translated to attributes rather than styles\n            const inlineToAttributes = [\n                'fill',\n                'stroke',\n                'strokeLinecap',\n                'strokeLinejoin',\n                'strokeWidth',\n                'textAnchor',\n                'x',\n                'y'\n            ];\n            Exporting.inlineAllowlist = [];\n            const unstyledElements = [\n                'clipPath',\n                'defs',\n                'desc'\n            ];\n            /* *\n             *\n             *  Variables\n             *\n             * */\n            let printingChart;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add the export button to the chart, with options.\n             *\n             * @private\n             * @function Highcharts.Chart#addButton\n             * @param {Highcharts.NavigationButtonOptions} options\n             * @requires modules/exporting\n             */\n            function addButton(options) {\n                const chart = this, renderer = chart.renderer, btnOptions = merge(chart.options.navigation.buttonOptions, options), onclick = btnOptions.onclick, menuItems = btnOptions.menuItems, symbolSize = btnOptions.symbolSize || 12;\n                let symbol;\n                if (!chart.btnCount) {\n                    chart.btnCount = 0;\n                }\n                // Keeps references to the button elements\n                if (!chart.exportDivElements) {\n                    chart.exportDivElements = [];\n                    chart.exportSVGElements = [];\n                }\n                if (btnOptions.enabled === false || !btnOptions.theme) {\n                    return;\n                }\n                const theme = chart.styledMode ? {} : btnOptions.theme;\n                let callback;\n                if (onclick) {\n                    callback = function (e) {\n                        if (e) {\n                            e.stopPropagation();\n                        }\n                        onclick.call(chart, e);\n                    };\n                }\n                else if (menuItems) {\n                    callback = function (e) {\n                        // Consistent with onclick call (#3495)\n                        if (e) {\n                            e.stopPropagation();\n                        }\n                        chart.contextMenu(button.menuClassName, menuItems, button.translateX || 0, button.translateY || 0, button.width || 0, button.height || 0, button);\n                        button.setState(2);\n                    };\n                }\n                if (btnOptions.text && btnOptions.symbol) {\n                    theme.paddingLeft = pick(theme.paddingLeft, 30);\n                }\n                else if (!btnOptions.text) {\n                    extend(theme, {\n                        width: btnOptions.width,\n                        height: btnOptions.height,\n                        padding: 0\n                    });\n                }\n                const button = renderer\n                    .button(btnOptions.text, 0, 0, callback, theme, void 0, void 0, void 0, void 0, btnOptions.useHTML)\n                    .addClass(options.className)\n                    .attr({\n                    title: pick(chart.options.lang[btnOptions._titleKey || btnOptions.titleKey], '')\n                });\n                button.menuClassName = (options.menuClassName ||\n                    'highcharts-menu-' + chart.btnCount++);\n                if (btnOptions.symbol) {\n                    symbol = renderer\n                        .symbol(btnOptions.symbol, Math.round((btnOptions.symbolX || 0) - (symbolSize / 2)), Math.round((btnOptions.symbolY || 0) - (symbolSize / 2)), symbolSize, symbolSize\n                    // If symbol is an image, scale it (#7957)\n                    , {\n                        width: symbolSize,\n                        height: symbolSize\n                    })\n                        .addClass('highcharts-button-symbol')\n                        .attr({\n                        zIndex: 1\n                    })\n                        .add(button);\n                    if (!chart.styledMode) {\n                        symbol.attr({\n                            stroke: btnOptions.symbolStroke,\n                            fill: btnOptions.symbolFill,\n                            'stroke-width': btnOptions.symbolStrokeWidth || 1\n                        });\n                    }\n                }\n                button\n                    .add(chart.exportingGroup)\n                    .align(extend(btnOptions, {\n                    width: button.width,\n                    x: pick(btnOptions.x, chart.buttonOffset) // #1654\n                }), true, 'spacingBox');\n                chart.buttonOffset += (((button.width || 0) + btnOptions.buttonSpacing) *\n                    (btnOptions.align === 'right' ? -1 : 1));\n                chart.exportSVGElements.push(button, symbol);\n            }\n            /**\n             * Clean up after printing a chart.\n             *\n             * @function Highcharts#afterPrint\n             *\n             * @private\n             *\n             * @param {Highcharts.Chart} chart\n             *        Chart that was (or suppose to be) printed\n             *\n             * @emits Highcharts.Chart#event:afterPrint\n             */\n            function afterPrint() {\n                const chart = this;\n                if (!chart.printReverseInfo) {\n                    return void 0;\n                }\n                const { childNodes, origDisplay, resetParams } = chart.printReverseInfo;\n                // Put the chart back in\n                chart.moveContainers(chart.renderTo);\n                // Restore all body content\n                [].forEach.call(childNodes, function (node, i) {\n                    if (node.nodeType === 1) {\n                        node.style.display = (origDisplay[i] || '');\n                    }\n                });\n                chart.isPrinting = false;\n                // Reset printMaxWidth\n                if (resetParams) {\n                    chart.setSize.apply(chart, resetParams);\n                }\n                delete chart.printReverseInfo;\n                printingChart = void 0;\n                fireEvent(chart, 'afterPrint');\n            }\n            /**\n             * Prepare chart and document before printing a chart.\n             *\n             * @function Highcharts#beforePrint\n             *\n             * @private\n             *\n             *\n             * @emits Highcharts.Chart#event:beforePrint\n             */\n            function beforePrint() {\n                const chart = this, body = doc.body, printMaxWidth = chart.options.exporting.printMaxWidth, printReverseInfo = {\n                    childNodes: body.childNodes,\n                    origDisplay: [],\n                    resetParams: void 0\n                };\n                chart.isPrinting = true;\n                chart.pointer?.reset(void 0, 0);\n                fireEvent(chart, 'beforePrint');\n                // Handle printMaxWidth\n                const handleMaxWidth = printMaxWidth &&\n                    chart.chartWidth > printMaxWidth;\n                if (handleMaxWidth) {\n                    printReverseInfo.resetParams = [\n                        chart.options.chart.width,\n                        void 0,\n                        false\n                    ];\n                    chart.setSize(printMaxWidth, void 0, false);\n                }\n                // Hide all body content\n                [].forEach.call(printReverseInfo.childNodes, function (node, i) {\n                    if (node.nodeType === 1) {\n                        printReverseInfo.origDisplay[i] = node.style.display;\n                        node.style.display = 'none';\n                    }\n                });\n                // Pull out the chart\n                chart.moveContainers(body);\n                // Storage details for undo action after printing\n                chart.printReverseInfo = printReverseInfo;\n            }\n            /**\n             * @private\n             */\n            function chartCallback(chart) {\n                const composition = chart;\n                composition.renderExporting();\n                addEvent(chart, 'redraw', composition.renderExporting);\n                // Destroy the export elements at chart destroy\n                addEvent(chart, 'destroy', composition.destroyExport);\n                // Uncomment this to see a button directly below the chart, for quick\n                // testing of export\n                /*\n                let button, viewImage, viewSource;\n                if (!chart.renderer.forExport) {\n                    viewImage = function () {\n                        let div = doc.createElement('div');\n                        div.innerHTML = chart.getSVGForExport();\n                        chart.renderTo.parentNode.appendChild(div);\n                    };\n\n                    viewSource = function () {\n                        let pre = doc.createElement('pre');\n                        pre.innerHTML = chart.getSVGForExport()\n                            .replace(/</g, '\\n&lt;')\n                            .replace(/>/g, '&gt;');\n                        chart.renderTo.parentNode.appendChild(pre);\n                    };\n\n                    viewImage();\n\n                    // View SVG Image\n                    button = doc.createElement('button');\n                    button.innerHTML = 'View SVG Image';\n                    chart.renderTo.parentNode.appendChild(button);\n                    button.onclick = viewImage;\n\n                    // View SVG Source\n                    button = doc.createElement('button');\n                    button.innerHTML = 'View SVG Source';\n                    chart.renderTo.parentNode.appendChild(button);\n                    button.onclick = viewSource;\n                }\n                //*/\n            }\n            /**\n             * @private\n             */\n            function compose(ChartClass, SVGRendererClass) {\n                ExportingSymbols.compose(SVGRendererClass);\n                Fullscreen.compose(ChartClass);\n                const chartProto = ChartClass.prototype;\n                if (!chartProto.exportChart) {\n                    chartProto.afterPrint = afterPrint;\n                    chartProto.exportChart = exportChart;\n                    chartProto.inlineStyles = inlineStyles;\n                    chartProto.print = print;\n                    chartProto.sanitizeSVG = sanitizeSVG;\n                    chartProto.getChartHTML = getChartHTML;\n                    chartProto.getSVG = getSVG;\n                    chartProto.getSVGForExport = getSVGForExport;\n                    chartProto.getFilename = getFilename;\n                    chartProto.moveContainers = moveContainers;\n                    chartProto.beforePrint = beforePrint;\n                    chartProto.contextMenu = contextMenu;\n                    chartProto.addButton = addButton;\n                    chartProto.destroyExport = destroyExport;\n                    chartProto.renderExporting = renderExporting;\n                    chartProto.callbacks.push(chartCallback);\n                    addEvent(ChartClass, 'init', onChartInit);\n                    if (G.isSafari) {\n                        win.matchMedia('print').addListener(function (mqlEvent) {\n                            if (!printingChart) {\n                                return void 0;\n                            }\n                            if (mqlEvent.matches) {\n                                printingChart.beforePrint();\n                            }\n                            else {\n                                printingChart.afterPrint();\n                            }\n                        });\n                    }\n                    defaultOptions.exporting = merge(ExportingDefaults.exporting, defaultOptions.exporting);\n                    defaultOptions.lang = merge(ExportingDefaults.lang, defaultOptions.lang);\n                    // Buttons and menus are collected in a separate config option set\n                    // called 'navigation'. This can be extended later to add control\n                    // buttons like zoom and pan right click menus.\n                    defaultOptions.navigation = merge(ExportingDefaults.navigation, defaultOptions.navigation);\n                }\n            }\n            Exporting.compose = compose;\n            /**\n             * Display a popup menu for choosing the export type.\n             *\n             * @private\n             * @function Highcharts.Chart#contextMenu\n             * @param {string} className\n             *        An identifier for the menu.\n             * @param {Array<string|Highcharts.ExportingMenuObject>} items\n             *        A collection with text and onclicks for the items.\n             * @param {number} x\n             *        The x position of the opener button\n             * @param {number} y\n             *        The y position of the opener button\n             * @param {number} width\n             *        The width of the opener button\n             * @param {number} height\n             *        The height of the opener button\n             * @requires modules/exporting\n             */\n            function contextMenu(className, items, x, y, width, height, button) {\n                const chart = this, navOptions = chart.options.navigation, chartWidth = chart.chartWidth, chartHeight = chart.chartHeight, cacheName = 'cache-' + className, \n                // For mouse leave detection\n                menuPadding = Math.max(width, height);\n                let innerMenu, menu = chart[cacheName];\n                // Create the menu only the first time\n                if (!menu) {\n                    // Create a HTML element above the SVG\n                    chart.exportContextMenu = chart[cacheName] = menu =\n                        createElement('div', {\n                            className: className\n                        }, {\n                            position: 'absolute',\n                            zIndex: 1000,\n                            padding: menuPadding + 'px',\n                            pointerEvents: 'auto',\n                            ...chart.renderer.style\n                        }, chart.scrollablePlotArea?.fixedDiv || chart.container);\n                    innerMenu = createElement('ul', { className: 'highcharts-menu' }, chart.styledMode ? {} : {\n                        listStyle: 'none',\n                        margin: 0,\n                        padding: 0\n                    }, menu);\n                    // Presentational CSS\n                    if (!chart.styledMode) {\n                        css(innerMenu, extend({\n                            MozBoxShadow: '3px 3px 10px #888',\n                            WebkitBoxShadow: '3px 3px 10px #888',\n                            boxShadow: '3px 3px 10px #888'\n                        }, navOptions.menuStyle));\n                    }\n                    // Hide on mouse out\n                    menu.hideMenu = function () {\n                        css(menu, { display: 'none' });\n                        if (button) {\n                            button.setState(0);\n                        }\n                        chart.openMenu = false;\n                        // #10361, #9998\n                        css(chart.renderTo, { overflow: 'hidden' });\n                        css(chart.container, { overflow: 'hidden' });\n                        U.clearTimeout(menu.hideTimer);\n                        fireEvent(chart, 'exportMenuHidden');\n                    };\n                    // Hide the menu some time after mouse leave (#1357)\n                    chart.exportEvents.push(addEvent(menu, 'mouseleave', function () {\n                        menu.hideTimer = win.setTimeout(menu.hideMenu, 500);\n                    }), addEvent(menu, 'mouseenter', function () {\n                        U.clearTimeout(menu.hideTimer);\n                    }), \n                    // Hide it on clicking or touching outside the menu (#2258,\n                    // #2335, #2407)\n                    addEvent(doc, 'mouseup', function (e) {\n                        if (!chart.pointer?.inClass(e.target, className)) {\n                            menu.hideMenu();\n                        }\n                    }), addEvent(menu, 'click', function () {\n                        if (chart.openMenu) {\n                            menu.hideMenu();\n                        }\n                    }));\n                    // Create the items\n                    items.forEach(function (item) {\n                        if (typeof item === 'string') {\n                            item = chart.options.exporting\n                                .menuItemDefinitions[item];\n                        }\n                        if (isObject(item, true)) {\n                            let element;\n                            if (item.separator) {\n                                element = createElement('hr', void 0, void 0, innerMenu);\n                            }\n                            else {\n                                // When chart initialized with the table, wrong button\n                                // text displayed, #14352.\n                                if (item.textKey === 'viewData' &&\n                                    chart.isDataTableVisible) {\n                                    item.textKey = 'hideData';\n                                }\n                                element = createElement('li', {\n                                    className: 'highcharts-menu-item',\n                                    onclick: function (e) {\n                                        if (e) { // IE7\n                                            e.stopPropagation();\n                                        }\n                                        menu.hideMenu();\n                                        if (typeof item !== 'string' && item.onclick) {\n                                            item.onclick.apply(chart, arguments);\n                                        }\n                                    }\n                                }, void 0, innerMenu);\n                                AST.setElementHTML(element, item.text ||\n                                    chart.options.lang[item.textKey]);\n                                if (!chart.styledMode) {\n                                    element.onmouseover = function () {\n                                        css(this, navOptions.menuItemHoverStyle);\n                                    };\n                                    element.onmouseout = function () {\n                                        css(this, navOptions.menuItemStyle);\n                                    };\n                                    css(element, extend({\n                                        cursor: 'pointer'\n                                    }, navOptions.menuItemStyle || {}));\n                                }\n                            }\n                            // Keep references to menu divs to be able to destroy them\n                            chart.exportDivElements.push(element);\n                        }\n                    });\n                    // Keep references to menu and innerMenu div to be able to destroy\n                    // them\n                    chart.exportDivElements.push(innerMenu, menu);\n                    chart.exportMenuWidth = menu.offsetWidth;\n                    chart.exportMenuHeight = menu.offsetHeight;\n                }\n                const menuStyle = { display: 'block' };\n                // If outside right, right align it\n                if (x + (chart.exportMenuWidth || 0) > chartWidth) {\n                    menuStyle.right = (chartWidth - x - width - menuPadding) + 'px';\n                }\n                else {\n                    menuStyle.left = (x - menuPadding) + 'px';\n                }\n                // If outside bottom, bottom align it\n                if (y + height + (chart.exportMenuHeight || 0) > chartHeight &&\n                    button.alignOptions?.verticalAlign !== 'top') {\n                    menuStyle.bottom = (chartHeight - y - menuPadding) + 'px';\n                }\n                else {\n                    menuStyle.top = (y + height - menuPadding) + 'px';\n                }\n                css(menu, menuStyle);\n                // #10361, #9998\n                css(chart.renderTo, { overflow: '' });\n                css(chart.container, { overflow: '' });\n                chart.openMenu = true;\n                fireEvent(chart, 'exportMenuShown');\n            }\n            /**\n             * Destroy the export buttons.\n             * @private\n             * @function Highcharts.Chart#destroyExport\n             * @param {global.Event} [e]\n             * @requires modules/exporting\n             */\n            function destroyExport(e) {\n                const chart = e ? e.target : this, exportSVGElements = chart.exportSVGElements, exportDivElements = chart.exportDivElements, exportEvents = chart.exportEvents;\n                let cacheName;\n                // Destroy the extra buttons added\n                if (exportSVGElements) {\n                    exportSVGElements.forEach((elem, i) => {\n                        // Destroy and null the svg elements\n                        if (elem) { // #1822\n                            elem.onclick = elem.ontouchstart = null;\n                            cacheName = 'cache-' + elem.menuClassName;\n                            if (chart[cacheName]) {\n                                delete chart[cacheName];\n                            }\n                            exportSVGElements[i] = elem.destroy();\n                        }\n                    });\n                    exportSVGElements.length = 0;\n                }\n                // Destroy the exporting group\n                if (chart.exportingGroup) {\n                    chart.exportingGroup.destroy();\n                    delete chart.exportingGroup;\n                }\n                // Destroy the divs for the menu\n                if (exportDivElements) {\n                    exportDivElements.forEach(function (elem, i) {\n                        if (elem) {\n                            // Remove the event handler\n                            U.clearTimeout(elem.hideTimer); // #5427\n                            removeEvent(elem, 'mouseleave');\n                            // Remove inline events\n                            // (chart.exportDivElements as any)[i] =\n                            exportDivElements[i] =\n                                elem.onmouseout =\n                                    elem.onmouseover =\n                                        elem.ontouchstart =\n                                            elem.onclick = null;\n                            // Destroy the div by moving to garbage bin\n                            discardElement(elem);\n                        }\n                    });\n                    exportDivElements.length = 0;\n                }\n                if (exportEvents) {\n                    exportEvents.forEach(function (unbind) {\n                        unbind();\n                    });\n                    exportEvents.length = 0;\n                }\n            }\n            /**\n             * Exporting module required. Submit an SVG version of the chart to a server\n             * along with some parameters for conversion.\n             *\n             * @sample highcharts/members/chart-exportchart/\n             *         Export with no options\n             * @sample highcharts/members/chart-exportchart-filename/\n             *         PDF type and custom filename\n             * @sample highcharts/members/chart-exportchart-custom-background/\n             *         Different chart background in export\n             * @sample stock/members/chart-exportchart/\n             *         Export with Highcharts Stock\n             *\n             * @function Highcharts.Chart#exportChart\n             *\n             * @param {Highcharts.ExportingOptions} exportingOptions\n             *        Exporting options in addition to those defined in\n             *        [exporting](https://api.highcharts.com/highcharts/exporting).\n             *\n             * @param {Highcharts.Options} chartOptions\n             *        Additional chart options for the exported chart. For example a\n             *        different background color can be added here, or `dataLabels` for\n             *        export only.\n             *\n             * @requires modules/exporting\n             */\n            function exportChart(exportingOptions, chartOptions) {\n                const svg = this.getSVGForExport(exportingOptions, chartOptions);\n                // Merge the options\n                exportingOptions = merge(this.options.exporting, exportingOptions);\n                // Do the post\n                HU.post(exportingOptions.url, {\n                    filename: exportingOptions.filename ?\n                        exportingOptions.filename.replace(/\\//g, '-') :\n                        this.getFilename(),\n                    type: exportingOptions.type,\n                    width: exportingOptions.width,\n                    scale: exportingOptions.scale,\n                    svg: svg\n                }, exportingOptions.fetchOptions);\n            }\n            /**\n             * Return the unfiltered innerHTML of the chart container. Used as hook for\n             * plugins. In styled mode, it also takes care of inlining CSS style rules.\n             *\n             * @see Chart#getSVG\n             *\n             * @function Highcharts.Chart#getChartHTML\n             *\n             * @return {string}\n             * The unfiltered SVG of the chart.\n             *\n             * @requires modules/exporting\n             */\n            function getChartHTML() {\n                if (this.styledMode) {\n                    this.inlineStyles();\n                }\n                return this.container.innerHTML;\n            }\n            /**\n             * Get the default file name used for exported charts. By default it creates\n             * a file name based on the chart title.\n             *\n             * @function Highcharts.Chart#getFilename\n             *\n             * @return {string} A file name without extension.\n             *\n             * @requires modules/exporting\n             */\n            function getFilename() {\n                const s = this.userOptions.title && this.userOptions.title.text;\n                let filename = this.options.exporting.filename;\n                if (filename) {\n                    return filename.replace(/\\//g, '-');\n                }\n                if (typeof s === 'string') {\n                    filename = s\n                        .toLowerCase()\n                        .replace(/<\\/?[^>]+(>|$)/g, '') // Strip HTML tags\n                        .replace(/[\\s_]+/g, '-')\n                        .replace(/[^a-z\\d\\-]/g, '') // Preserve only latin\n                        .replace(/^[\\-]+/g, '') // Dashes in the start\n                        .replace(/[\\-]+/g, '-') // Dashes in a row\n                        .substr(0, 24)\n                        .replace(/[\\-]+$/g, ''); // Dashes in the end;\n                }\n                if (!filename || filename.length < 5) {\n                    filename = 'chart';\n                }\n                return filename;\n            }\n            /**\n             * Return an SVG representation of the chart.\n             *\n             * @sample highcharts/members/chart-getsvg/\n             *         View the SVG from a button\n             *\n             * @function Highcharts.Chart#getSVG\n             *\n             * @param {Highcharts.Options} [chartOptions]\n             *        Additional chart options for the generated SVG representation. For\n             *        collections like `xAxis`, `yAxis` or `series`, the additional\n             *        options is either merged in to the original item of the same\n             *        `id`, or to the first item if a common id is not found.\n             *\n             * @return {string}\n             *         The SVG representation of the rendered chart.\n             *\n             * @emits Highcharts.Chart#event:getSVG\n             *\n             * @requires modules/exporting\n             */\n            function getSVG(chartOptions) {\n                const chart = this;\n                let svg, seriesOptions, \n                // Copy the options and add extra options\n                options = merge(chart.options, chartOptions);\n                // Use userOptions to make the options chain in series right (#3881)\n                options.plotOptions = merge(chart.userOptions.plotOptions, chartOptions && chartOptions.plotOptions);\n                // ... and likewise with time, avoid that undefined time properties are\n                // merged over legacy global time options\n                options.time = merge(chart.userOptions.time, chartOptions && chartOptions.time);\n                // Create a sandbox where a new chart will be generated\n                const sandbox = createElement('div', null, {\n                    position: 'absolute',\n                    top: '-9999em',\n                    width: chart.chartWidth + 'px',\n                    height: chart.chartHeight + 'px'\n                }, doc.body);\n                // Get the source size\n                const cssWidth = chart.renderTo.style.width, cssHeight = chart.renderTo.style.height, sourceWidth = options.exporting.sourceWidth ||\n                    options.chart.width ||\n                    (/px$/.test(cssWidth) && parseInt(cssWidth, 10)) ||\n                    (options.isGantt ? 800 : 600), sourceHeight = options.exporting.sourceHeight ||\n                    options.chart.height ||\n                    (/px$/.test(cssHeight) && parseInt(cssHeight, 10)) ||\n                    400;\n                // Override some options\n                extend(options.chart, {\n                    animation: false,\n                    renderTo: sandbox,\n                    forExport: true,\n                    renderer: 'SVGRenderer',\n                    width: sourceWidth,\n                    height: sourceHeight\n                });\n                options.exporting.enabled = false; // Hide buttons in print\n                delete options.data; // #3004\n                // prepare for replicating the chart\n                options.series = [];\n                chart.series.forEach(function (serie) {\n                    seriesOptions = merge(serie.userOptions, {\n                        animation: false, // Turn off animation\n                        enableMouseTracking: false,\n                        showCheckbox: false,\n                        visible: serie.visible\n                    });\n                    // Used for the navigator series that has its own option set\n                    if (!seriesOptions.isInternal) {\n                        options.series.push(seriesOptions);\n                    }\n                });\n                const colls = {};\n                chart.axes.forEach(function (axis) {\n                    // Assign an internal key to ensure a one-to-one mapping (#5924)\n                    if (!axis.userOptions.internalKey) { // #6444\n                        axis.userOptions.internalKey = uniqueKey();\n                    }\n                    if (!axis.options.isInternal) {\n                        if (!colls[axis.coll]) {\n                            colls[axis.coll] = true;\n                            options[axis.coll] = [];\n                        }\n                        options[axis.coll].push(merge(axis.userOptions, {\n                            visible: axis.visible,\n                            // Force some options that could have be set directly on\n                            // the axis while missing in the userOptions or options.\n                            type: axis.type,\n                            uniqueNames: axis.uniqueNames\n                        }));\n                    }\n                });\n                // Make sure the `colorAxis` object of the `defaultOptions` isn't used\n                // in the chart copy's user options, because a color axis should only be\n                // added when the user actually applies it.\n                options.colorAxis = chart.userOptions.colorAxis;\n                // Generate the chart copy\n                const chartCopy = new chart.constructor(options, chart.callback);\n                // Axis options and series options  (#2022, #3900, #5982)\n                if (chartOptions) {\n                    ['xAxis', 'yAxis', 'series'].forEach(function (coll) {\n                        const collOptions = {};\n                        if (chartOptions[coll]) {\n                            collOptions[coll] = chartOptions[coll];\n                            chartCopy.update(collOptions);\n                        }\n                    });\n                }\n                // Reflect axis extremes in the export (#5924)\n                chart.axes.forEach(function (axis) {\n                    const axisCopy = find(chartCopy.axes, function (copy) {\n                        return copy.options.internalKey ===\n                            axis.userOptions.internalKey;\n                    }), extremes = axis.getExtremes(), userMin = extremes.userMin, userMax = extremes.userMax;\n                    if (axisCopy &&\n                        ((typeof userMin !== 'undefined' &&\n                            userMin !== axisCopy.min) || (typeof userMax !== 'undefined' &&\n                            userMax !== axisCopy.max))) {\n                        axisCopy.setExtremes(userMin, userMax, true, false);\n                    }\n                });\n                // Get the SVG from the container's innerHTML\n                svg = chartCopy.getChartHTML();\n                fireEvent(this, 'getSVG', { chartCopy: chartCopy });\n                svg = chart.sanitizeSVG(svg, options);\n                // Free up memory\n                options = null;\n                chartCopy.destroy();\n                discardElement(sandbox);\n                return svg;\n            }\n            /**\n             * @private\n             * @function Highcharts.Chart#getSVGForExport\n             */\n            function getSVGForExport(options, chartOptions) {\n                const chartExportingOptions = this.options.exporting;\n                return this.getSVG(merge({ chart: { borderRadius: 0 } }, chartExportingOptions.chartOptions, chartOptions, {\n                    exporting: {\n                        sourceWidth: ((options && options.sourceWidth) ||\n                            chartExportingOptions.sourceWidth),\n                        sourceHeight: ((options && options.sourceHeight) ||\n                            chartExportingOptions.sourceHeight)\n                    }\n                }));\n            }\n            /**\n             * Make hyphenated property names out of camelCase\n             * @private\n             * @param {string} prop\n             * Property name in camelCase\n             * @return {string}\n             * Hyphenated property name\n             */\n            function hyphenate(prop) {\n                return prop.replace(/[A-Z]/g, function (match) {\n                    return '-' + match.toLowerCase();\n                });\n            }\n            /**\n             * Analyze inherited styles from stylesheets and add them inline\n             *\n             * @private\n             * @function Highcharts.Chart#inlineStyles\n             *\n             * @todo What are the border styles for text about? In general, text has a\n             *       lot of properties.\n             *\n             * @todo Make it work with IE9 and IE10.\n             *\n             * @requires modules/exporting\n             */\n            function inlineStyles() {\n                const denylist = inlineDenylist, allowlist = Exporting.inlineAllowlist, // For IE\n                defaultStyles = {};\n                let dummySVG;\n                // Create an iframe where we read default styles without pollution from\n                // this body\n                const iframe = doc.createElement('iframe');\n                css(iframe, {\n                    width: '1px',\n                    height: '1px',\n                    visibility: 'hidden'\n                });\n                doc.body.appendChild(iframe);\n                const iframeDoc = (iframe.contentWindow && iframe.contentWindow.document);\n                if (iframeDoc) {\n                    iframeDoc.body.appendChild(iframeDoc.createElementNS(SVG_NS, 'svg'));\n                }\n                /**\n                 * Call this on all elements and recurse to children\n                 * @private\n                 * @param {Highcharts.HTMLDOMElement} node\n                 *        Element child\n                     */\n                function recurse(node) {\n                    const filteredStyles = {};\n                    let styles, parentStyles, dummy, denylisted, allowlisted, i;\n                    /**\n                     * Check computed styles and whether they are in the allow/denylist\n                     * for styles or attributes.\n                     * @private\n                     * @param {string} val\n                     *        Style value\n                     * @param {string} prop\n                     *        Style property name\n                             */\n                    function filterStyles(val, prop) {\n                        // Check against allowlist & denylist\n                        denylisted = allowlisted = false;\n                        if (allowlist.length) {\n                            // Styled mode in IE has a allowlist instead. Exclude all\n                            // props not in this list.\n                            i = allowlist.length;\n                            while (i-- && !allowlisted) {\n                                allowlisted = allowlist[i].test(prop);\n                            }\n                            denylisted = !allowlisted;\n                        }\n                        // Explicitly remove empty transforms\n                        if (prop === 'transform' && val === 'none') {\n                            denylisted = true;\n                        }\n                        i = denylist.length;\n                        while (i-- && !denylisted) {\n                            if (prop.length > 1000 /* RegexLimits.shortLimit */) {\n                                throw new Error('Input too long');\n                            }\n                            denylisted = (denylist[i].test(prop) ||\n                                typeof val === 'function');\n                        }\n                        if (!denylisted) {\n                            // If parent node has the same style, it gets inherited, no\n                            // need to inline it. Top-level props should be diffed\n                            // against parent (#7687).\n                            if ((parentStyles[prop] !== val ||\n                                node.nodeName === 'svg') &&\n                                defaultStyles[node.nodeName][prop] !== val) {\n                                // Attributes\n                                if (!inlineToAttributes ||\n                                    inlineToAttributes.indexOf(prop) !== -1) {\n                                    if (val) {\n                                        node.setAttribute(hyphenate(prop), val);\n                                    }\n                                    // Styles\n                                }\n                                else {\n                                    filteredStyles[prop] = val;\n                                }\n                            }\n                        }\n                    }\n                    if (iframeDoc &&\n                        node.nodeType === 1 &&\n                        unstyledElements.indexOf(node.nodeName) === -1) {\n                        styles = win.getComputedStyle(node, null);\n                        parentStyles = node.nodeName === 'svg' ?\n                            {} :\n                            win.getComputedStyle(node.parentNode, null);\n                        // Get default styles from the browser so that we don't have to\n                        // add these\n                        if (!defaultStyles[node.nodeName]) {\n                            /*\n                            If (!dummySVG) {\n                                dummySVG = doc.createElementNS(H.SVG_NS, 'svg');\n                                dummySVG.setAttribute('version', '1.1');\n                                doc.body.appendChild(dummySVG);\n                            }\n                            */\n                            dummySVG = iframeDoc.getElementsByTagName('svg')[0];\n                            dummy = iframeDoc.createElementNS(node.namespaceURI, node.nodeName);\n                            dummySVG.appendChild(dummy);\n                            // Get the defaults into a standard object (simple merge\n                            // won't do)\n                            const s = win.getComputedStyle(dummy, null), defaults = {};\n                            for (const key in s) {\n                                if (key.length < 1000 /* RegexLimits.shortLimit */ &&\n                                    typeof s[key] === 'string' &&\n                                    !/^\\d+$/.test(key)) {\n                                    defaults[key] = s[key];\n                                }\n                            }\n                            defaultStyles[node.nodeName] = defaults;\n                            // Remove default fill, otherwise text disappears when\n                            // exported\n                            if (node.nodeName === 'text') {\n                                delete defaultStyles.text.fill;\n                            }\n                            dummySVG.removeChild(dummy);\n                        }\n                        // Loop through all styles and add them inline if they are ok\n                        for (const p in styles) {\n                            if (\n                            // Some browsers put lots of styles on the prototype...\n                            G.isFirefox ||\n                                G.isMS ||\n                                G.isSafari || // #16902\n                                // ... Chrome puts them on the instance\n                                Object.hasOwnProperty.call(styles, p)) {\n                                filterStyles(styles[p], p);\n                            }\n                        }\n                        // Apply styles\n                        css(node, filteredStyles);\n                        // Set default stroke width (needed at least for IE)\n                        if (node.nodeName === 'svg') {\n                            node.setAttribute('stroke-width', '1px');\n                        }\n                        if (node.nodeName === 'text') {\n                            return;\n                        }\n                        // Recurse\n                        [].forEach.call(node.children || node.childNodes, recurse);\n                    }\n                }\n                /**\n                 * Remove the dummy objects used to get defaults\n                 * @private\n                 */\n                function tearDown() {\n                    dummySVG.parentNode.removeChild(dummySVG);\n                    // Remove trash from DOM that stayed after each exporting\n                    iframe.parentNode.removeChild(iframe);\n                }\n                recurse(this.container.querySelector('svg'));\n                tearDown();\n            }\n            /**\n             * Move the chart container(s) to another div.\n             *\n             * @function Highcharts#moveContainers\n             *\n             * @private\n             *\n             * @param {Highcharts.HTMLDOMElement} moveTo\n             *        Move target\n             */\n            function moveContainers(moveTo) {\n                const { scrollablePlotArea } = this;\n                (\n                // When scrollablePlotArea is active (#9533)\n                scrollablePlotArea ?\n                    [\n                        scrollablePlotArea.fixedDiv,\n                        scrollablePlotArea.scrollingContainer\n                    ] :\n                    [this.container]).forEach(function (div) {\n                    moveTo.appendChild(div);\n                });\n            }\n            /**\n             * Add update methods to handle chart.update and chart.exporting.update and\n             * chart.navigation.update. These must be added to the chart instance rather\n             * than the Chart prototype in order to use the chart instance inside the\n             * update function.\n             * @private\n             */\n            function onChartInit() {\n                const chart = this, \n                /**\n                 * @private\n                 * @param {\"exporting\"|\"navigation\"} prop\n                 *        Property name in option root\n                 * @param {Highcharts.ExportingOptions|Highcharts.NavigationOptions} options\n                 *        Options to update\n                 * @param {boolean} [redraw=true]\n                 *        Whether to redraw\n                         */\n                update = (prop, options, redraw) => {\n                    chart.isDirtyExporting = true;\n                    merge(true, chart.options[prop], options);\n                    if (pick(redraw, true)) {\n                        chart.redraw();\n                    }\n                };\n                chart.exporting = {\n                    update: function (options, redraw) {\n                        update('exporting', options, redraw);\n                    }\n                };\n                // Register update() method for navigation. Cannot be set the same way\n                // as for exporting, because navigation options are shared with bindings\n                // which has separate update() logic.\n                ChartNavigationComposition\n                    .compose(chart).navigation\n                    .addUpdate((options, redraw) => {\n                    update('navigation', options, redraw);\n                });\n            }\n            /**\n             * Exporting module required. Clears away other elements in the page and\n             * prints the chart as it is displayed. By default, when the exporting\n             * module is enabled, a context button with a drop down menu in the upper\n             * right corner accesses this function.\n             *\n             * @sample highcharts/members/chart-print/\n             *         Print from a HTML button\n             *\n             * @function Highcharts.Chart#print\n             *\n             *\n             * @emits Highcharts.Chart#event:beforePrint\n             * @emits Highcharts.Chart#event:afterPrint\n             *\n             * @requires modules/exporting\n             */\n            function print() {\n                const chart = this;\n                if (chart.isPrinting) { // Block the button while in printing mode\n                    return;\n                }\n                printingChart = chart;\n                if (!G.isSafari) {\n                    chart.beforePrint();\n                }\n                // Give the browser time to draw WebGL content, an issue that randomly\n                // appears (at least) in Chrome ~67 on the Mac (#8708).\n                setTimeout(() => {\n                    win.focus(); // #1510\n                    win.print();\n                    // Allow the browser to prepare before reverting\n                    if (!G.isSafari) {\n                        setTimeout(() => {\n                            chart.afterPrint();\n                        }, 1000);\n                    }\n                }, 1);\n            }\n            /**\n             * Add the buttons on chart load\n             * @private\n             * @function Highcharts.Chart#renderExporting\n             * @requires modules/exporting\n             */\n            function renderExporting() {\n                const chart = this, exportingOptions = chart.options.exporting, buttons = exportingOptions.buttons, isDirty = chart.isDirtyExporting || !chart.exportSVGElements;\n                chart.buttonOffset = 0;\n                if (chart.isDirtyExporting) {\n                    chart.destroyExport();\n                }\n                if (isDirty && exportingOptions.enabled !== false) {\n                    chart.exportEvents = [];\n                    chart.exportingGroup = chart.exportingGroup ||\n                        chart.renderer.g('exporting-group').attr({\n                            zIndex: 3 // #4955, // #8392\n                        }).add();\n                    objectEach(buttons, function (button) {\n                        chart.addButton(button);\n                    });\n                    chart.isDirtyExporting = false;\n                }\n            }\n            /**\n             * Exporting module only. A collection of fixes on the produced SVG to\n             * account for expand properties, browser bugs.\n             * Returns a cleaned SVG.\n             *\n             * @private\n             * @function Highcharts.Chart#sanitizeSVG\n             * @param {string} svg\n             *        SVG code to sanitize\n             * @param {Highcharts.Options} options\n             *        Chart options to apply\n             * @return {string}\n             *         Sanitized SVG code\n             * @requires modules/exporting\n             */\n            function sanitizeSVG(svg, options) {\n                const split = svg.indexOf('</svg>') + 6;\n                let html = svg.substr(split);\n                // Remove any HTML added to the container after the SVG (#894, #9087)\n                svg = svg.substr(0, split);\n                // Move HTML into a foreignObject\n                if (options && options.exporting && options.exporting.allowHTML) {\n                    if (html) {\n                        html = '<foreignObject x=\"0\" y=\"0\" ' +\n                            'width=\"' + options.chart.width + '\" ' +\n                            'height=\"' + options.chart.height + '\">' +\n                            '<body xmlns=\"http://www.w3.org/1999/xhtml\">' +\n                            // Some tags needs to be closed in xhtml (#13726)\n                            html.replace(/(<(?:img|br).*?(?=\\>))>/g, '$1 />') +\n                            '</body>' +\n                            '</foreignObject>';\n                        svg = svg.replace('</svg>', html + '</svg>');\n                    }\n                }\n                svg = svg\n                    .replace(/zIndex=\"[^\"]+\"/g, '')\n                    .replace(/symbolName=\"[^\"]+\"/g, '')\n                    .replace(/jQuery\\d+=\"[^\"]+\"/g, '')\n                    .replace(/url\\((\"|&quot;)(.*?)(\"|&quot;)\\;?\\)/g, 'url($2)')\n                    .replace(/url\\([^#]+#/g, 'url(#')\n                    .replace(/<svg /, '<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" ')\n                    .replace(/ (NS\\d+\\:)?href=/g, ' xlink:href=') // #3567\n                    .replace(/\\n+/g, ' ')\n                    // Batik doesn't support rgba fills and strokes (#3095)\n                    .replace(/(fill|stroke)=\"rgba\\(([ \\d]+,[ \\d]+,[ \\d]+),([ \\d\\.]+)\\)\"/g, // eslint-disable-line max-len\n                '$1=\"rgb($2)\" $1-opacity=\"$3\"')\n                    // Replace HTML entities, issue #347\n                    .replace(/&nbsp;/g, '\\u00A0') // No-break space\n                    .replace(/&shy;/g, '\\u00AD'); // Soft hyphen\n                return svg;\n            }\n        })(Exporting || (Exporting = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Gets fired after a chart is printed through the context menu item or the\n         * Chart.print method.\n         *\n         * @callback Highcharts.ExportingAfterPrintCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Gets fired before a chart is printed through the context menu item or the\n         * Chart.print method.\n         *\n         * @callback Highcharts.ExportingBeforePrintCallbackFunction\n         *\n         * @param {Highcharts.Chart} this\n         *        The chart on which the event occurred.\n         *\n         * @param {global.Event} event\n         *        The event that occurred.\n         */\n        /**\n         * Function to call if the offline-exporting module fails to export a chart on\n         * the client side.\n         *\n         * @callback Highcharts.ExportingErrorCallbackFunction\n         *\n         * @param {Highcharts.ExportingOptions} options\n         *        The exporting options.\n         *\n         * @param {global.Error} err\n         *        The error from the module.\n         */\n        /**\n         * Definition for a menu item in the context menu.\n         *\n         * @interface Highcharts.ExportingMenuObject\n         */ /**\n        * The text for the menu item.\n        *\n        * @name Highcharts.ExportingMenuObject#text\n        * @type {string|undefined}\n        */ /**\n        * If internationalization is required, the key to a language string.\n        *\n        * @name Highcharts.ExportingMenuObject#textKey\n        * @type {string|undefined}\n        */ /**\n        * The click handler for the menu item.\n        *\n        * @name Highcharts.ExportingMenuObject#onclick\n        * @type {Highcharts.EventCallbackFunction<Highcharts.Chart>|undefined}\n        */ /**\n        * Indicates a separator line instead of an item.\n        *\n        * @name Highcharts.ExportingMenuObject#separator\n        * @type {boolean|undefined}\n        */\n        /**\n         * Possible MIME types for exporting.\n         *\n         * @typedef {\"image/png\"|\"image/jpeg\"|\"application/pdf\"|\"image/svg+xml\"} Highcharts.ExportingMimeTypeValue\n         */\n        (''); // Keeps doclets above in transpiled file\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Fires after a chart is printed through the context menu item or the\n         * `Chart.print` method.\n         *\n         * @sample highcharts/chart/events-beforeprint-afterprint/\n         *         Rescale the chart to print\n         *\n         * @type      {Highcharts.ExportingAfterPrintCallbackFunction}\n         * @since     4.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/exporting\n         * @apioption chart.events.afterPrint\n         */\n        /**\n         * Fires before a chart is printed through the context menu item or\n         * the `Chart.print` method.\n         *\n         * @sample highcharts/chart/events-beforeprint-afterprint/\n         *         Rescale the chart to print\n         *\n         * @type      {Highcharts.ExportingBeforePrintCallbackFunction}\n         * @since     4.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/exporting\n         * @apioption chart.events.beforePrint\n         */\n        (''); // Keeps doclets above in transpiled file\n\n        return Exporting;\n    });\n    _registerModule(_modules, 'masters/modules/exporting.src.js', [_modules['Core/Globals.js'], _modules['Extensions/Exporting/Exporting.js'], _modules['Core/HttpUtilities.js']], function (Highcharts, Exporting, HttpUtilities) {\n\n        const G = Highcharts;\n        G.HttpUtilities = G.HttpUtilities || HttpUtilities;\n        G.ajax = G.HttpUtilities.ajax;\n        G.getJSON = G.HttpUtilities.getJSON;\n        G.post = G.HttpUtilities.post;\n        Exporting.compose(G.Chart, G.Renderer);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","ChartNavigationComposition","compose","chart","navigation","Additions","constructor","updates","addUpdate","updateFn","push","update","options","redraw","forEach","call","H","isTouchDevice","exporting","allowTableSorting","type","url","pdfFont","normal","bold","bolditalic","italic","printMaxWidth","scale","buttons","contextButton","className","menuClassName","symbol","titleKey","menuItems","menuItemDefinitions","viewFullscreen","textKey","onclick","fullscreen","toggle","printChart","print","separator","downloadPNG","exportChart","downloadJPEG","downloadPDF","downloadSVG","lang","exitFullscreen","contextButtonTitle","buttonOptions","symbolSize","symbolX","symbolY","align","buttonSpacing","height","verticalAlign","width","symbolFill","symbolStroke","symbolStrokeWidth","theme","fill","padding","stroke","menuStyle","border","borderRadius","background","menuItemStyle","color","fontSize","transition","menuItemHoverStyle","ExportingSymbols","modifiedClasses","menu","x","y","menuball","h","concat","circle","SVGRendererClass","indexOf","symbols","prototype","bind","AST","U","composed","addEvent","fireEvent","pushUnique","onChartBeforeRender","Fullscreen","ChartClass","isOpen","container","renderTo","browserProps","requestFullscreen","fullscreenChange","mozRequestFullScreen","webkitRequestFullScreen","msRequestFullscreen","close","optionsChart","ownerDocument","Document","unbindFullscreenEvent","setSize","origWidth","origHeight","origWidthOption","origHeightOption","setButtonText","open","chartWidth","chartHeight","unbindChange","unbindDestroy","promise","alert","exportDivElements","exportingOptions","exportDivElement","setElementHTML","text","G","discardElement","objectEach","HttpUtilities","ajax","settings","headers","json","xml","octet","r","XMLHttpRequest","handleError","xhr","err","error","toUpperCase","setRequestHeader","dataType","val","key","responseType","onreadystatechange","res","readyState","status","responseText","JSON","parse","e","Error","success","data","stringify","send","getJSON","post","fetchOptions","formData","FormData","name","append","filename","fetch","method","body","then","ok","link","document","createElement","href","download","click","Chart","D","ExportingDefaults","HU","Exporting","defaultOptions","doc","SVG_NS","css","extend","find","isObject","merge","pick","removeEvent","uniqueKey","printingChart","inlineDenylist","inlineToAttributes","inlineAllowlist","unstyledElements","addButton","callback","renderer","btnOptions","btnCount","exportSVGElements","enabled","styledMode","stopPropagation","contextMenu","button","translateX","translateY","setState","paddingLeft","useHTML","addClass","attr","title","_titleKey","Math","round","zIndex","add","exportingGroup","buttonOffset","afterPrint","printReverseInfo","childNodes","origDisplay","resetParams","moveContainers","node","i","nodeType","style","display","isPrinting","beforePrint","pointer","reset","chartCallback","composition","renderExporting","destroyExport","items","navOptions","cacheName","menuPadding","max","innerMenu","exportContextMenu","position","pointerEvents","scrollablePlotArea","fixedDiv","listStyle","margin","MozBoxShadow","WebkitBoxShadow","boxShadow","hideMenu","openMenu","overflow","clearTimeout","hideTimer","exportEvents","setTimeout","inClass","target","item","element","isDataTableVisible","arguments","onmouseover","onmouseout","cursor","exportMenuWidth","offsetWidth","exportMenuHeight","offsetHeight","right","left","alignOptions","bottom","top","elem","ontouchstart","destroy","length","unbind","chartOptions","svg","getSVGForExport","replace","getFilename","getChartHTML","inlineStyles","innerHTML","s","userOptions","toLowerCase","substr","getSVG","seriesOptions","plotOptions","time","sandbox","cssWidth","cssHeight","sourceWidth","test","parseInt","isGantt","sourceHeight","animation","forExport","series","serie","enableMouseTracking","showCheckbox","visible","isInternal","colls","axes","axis","internalKey","coll","uniqueNames","colorAxis","chartCopy","collOptions","axisCopy","copy","extremes","getExtremes","userMin","userMax","min","setExtremes","sanitizeSVG","chartExportingOptions","dummySVG","allowlist","defaultStyles","iframe","visibility","appendChild","iframeDoc","contentWindow","createElementNS","recurse","styles","parentStyles","dummy","denylisted","allowlisted","filteredStyles","nodeName","getComputedStyle","parentNode","getElementsByTagName","namespaceURI","defaults","removeChild","p","isFirefox","isMS","isSafari","Object","filterStyles","prop","denylist","setAttribute","match","children","querySelector","moveTo","scrollingContainer","div","onChartInit","isDirtyExporting","focus","isDirty","g","split","html","allowHTML","chartProto","callbacks","matchMedia","addListener","mqlEvent","matches","Renderer"],"mappings":"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"}