{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * Sonification module\n *\n * (c) 2010-2024 Highsoft AS\n * Author: Øystein Moseng\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/sonification', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/Sonification/Options.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Øystein Moseng\n         *\n         *  Default options for sonification.\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const Options = {\n            /**\n             * Options for configuring sonification and audio charts. Requires the\n             * [sonification module](https://code.highcharts.com/modules/sonification.js)\n             * to be loaded.\n             *\n             * @sample  highcharts/demo/all-instruments\n             *          All predefined instruments\n             * @sample  highcharts/demo/audio-boxplot\n             *          Audio boxplots\n             * @sample  highcharts/demo/plotline-context\n             *          Context tracks\n             * @sample  highcharts/demo/sonification-music\n             *          Musical chart\n             *\n             * @since        11.0.0\n             * @requires     modules/sonification\n             * @optionparent sonification\n             */\n            sonification: {\n                /**\n                 * Global tracks to add to every series.\n                 *\n                 * Defined as an array of either instrument or speech tracks,\n                 * or a combination.\n                 *\n                 * @declare   Highcharts.SonificationTracksOptions\n                 * @extends   sonification.defaultSpeechOptions\n                 * @extends   sonification.defaultInstrumentOptions\n                 * @type      {Array<*>}\n                 * @apioption sonification.globalTracks\n                 */\n                /**\n                 * Rate mapping for speech tracks.\n                 *\n                 * @declare   Highcharts.SonificationTracksRateOptions\n                 * @extends   sonification.defaultSpeechOptions.mapping.rate\n                 * @apioption sonification.globalTracks.mapping.rate\n                 */\n                /**\n                 * Text mapping for speech tracks.\n                 *\n                 * @declare   Highcharts.SonificationTracksTextOptions\n                 * @extends   sonification.defaultSpeechOptions.mapping.text\n                 * @apioption sonification.globalTracks.mapping.text\n                 */\n                /**\n                 * Context tracks to add globally, an array of either instrument\n                 * tracks, speech tracks, or a mix.\n                 *\n                 * Context tracks are not tied to data points, but play at a set\n                 * interval - either based on time or on prop values.\n                 *\n                 * @sample  highcharts/demo/plotline-context\n                 *          Using contexts\n                 *\n                 * @declare   Highcharts.SonificationContextTracksOptions\n                 * @extends   sonification.globalTracks\n                 * @type      {Array<*>}\n                 * @apioption sonification.globalContextTracks\n                 */\n                /**\n                 * Set a context track to play periodically every `timeInterval`\n                 * milliseconds while the sonification is playing.\n                 *\n                 * @sample  highcharts/demo/plotline-context\n                 *          Using contexts\n                 *\n                 * @type      {number}\n                 * @apioption sonification.globalContextTracks.timeInterval\n                 */\n                /**\n                 * Set a context track to play periodically every `valueInterval`\n                 * units of a data property `valueProp` while the sonification is\n                 * playing.\n                 *\n                 * For example, setting `valueProp` to `x` and `valueInterval` to 5\n                 * will play the context track for every 5th X value.\n                 *\n                 * The context audio events will be mapped to time according to the\n                 * prop value relative to the min/max values for that prop.\n                 *\n                 * @sample  highcharts/demo/plotline-context\n                 *          Using contexts\n                 *\n                 * @type      {number}\n                 * @apioption sonification.globalContextTracks.valueInterval\n                 */\n                /**\n                 * The point property to play context for when using `valueInterval`.\n                 *\n                 * @type      {string}\n                 * @default   \"x\"\n                 * @apioption sonification.globalContextTracks.valueProp\n                 */\n                /**\n                 * How to map context events to time when using the `valueInterval`\n                 * option.\n                 *\n                 * @type      {\"linear\"|\"logarithmic\"}\n                 * @default   \"linear\"\n                 * @apioption sonification.globalContextTracks.valueMapFunction\n                 */\n                /**\n                 * Set up event handlers for the sonification\n                 *\n                 * @apioption sonification.events\n                 */\n                /**\n                 * Called on play.\n                 *\n                 * A context object is passed to the function, with properties `chart`\n                 * and `timeline`.\n                 *\n                 * @type      {Function}\n                 * @apioption sonification.events.onPlay\n                 */\n                /**\n                 * Called on pause, cancel, or if play is completed.\n                 *\n                 * A context object is passed to the function, with properties `chart`,\n                 * `timeline` and `pointsPlayed`. `pointsPlayed` is an array of `Point`\n                 * objects, referencing data points that were related to the audio\n                 * events played.\n                 *\n                 * @type      {Function}\n                 * @apioption sonification.events.onStop\n                 */\n                /**\n                 * Called when play is completed.\n                 *\n                 * A context object is passed to the function, with properties `chart`,\n                 * `timeline` and `pointsPlayed`. `pointsPlayed` is an array of `Point`\n                 * objects, referencing data points that were related to the audio\n                 * events played.\n                 *\n                 * @type      {Function}\n                 * @apioption sonification.events.onEnd\n                 */\n                /**\n                 * Called immediately when a play is requested.\n                 *\n                 * A context object is passed to the function, with properties `chart`\n                 * and `timeline`.\n                 *\n                 * @type      {Function}\n                 * @apioption sonification.events.beforePlay\n                 */\n                /**\n                 * Called before updating the sonification.\n                 *\n                 * A context object is passed to the function, with properties `chart`\n                 * and `timeline`.\n                 *\n                 * @type      {Function}\n                 * @apioption sonification.events.beforeUpdate\n                 */\n                /**\n                 * Called after updating the sonification.\n                 *\n                 * A context object is passed to the function, with properties `chart`\n                 * and `timeline`.\n                 *\n                 * @type      {Function}\n                 * @apioption sonification.events.afterUpdate\n                 */\n                /**\n                 * Called on the beginning of playing a series.\n                 *\n                 * A context object is passed to the function, with properties `series`\n                 * and `timeline`.\n                 *\n                 * @type      {Function}\n                 * @apioption sonification.events.onSeriesStart\n                 */\n                /**\n                 * Called when finished playing a series.\n                 *\n                 * A context object is passed to the function, with properties `series`\n                 * and `timeline`.\n                 *\n                 * @type      {Function}\n                 * @apioption sonification.events.onSeriesEnd\n                 */\n                /**\n                 * Called when attempting to play an adjacent point or series, and\n                 * there is none.\n                 *\n                 * By default a percussive sound is played.\n                 *\n                 * A context object is passed to the function, with properties `chart`,\n                 * `timeline`, and `attemptedNext`. `attemptedNext` is a boolean\n                 * property that is `true` if the boundary hit was from trying to play\n                 * the next series/point, and `false` if it was from trying to play the\n                 * previous.\n                 *\n                 * @type      {Function}\n                 * @apioption sonification.events.onBoundaryHit\n                 */\n                /**\n                 * Enable sonification functionality for the chart.\n                 */\n                enabled: true,\n                /**\n                 * The total duration of the sonification, in milliseconds.\n                 */\n                duration: 6000,\n                /**\n                 * The time to wait in milliseconds after each data series when playing\n                 * the series one after the other.\n                 *\n                 * @sample highcharts/sonification/chart-earcon\n                 *         Notification after series\n                 *\n                 * @see [order](#sonification.order)\n                 */\n                afterSeriesWait: 700,\n                /**\n                 * How long to wait between each recomputation of the sonification, if\n                 * the chart updates rapidly. This avoids slowing down processes like\n                 * panning. Given in milliseconds.\n                 */\n                updateInterval: 200,\n                /**\n                 * Overall/master volume for the sonification, from 0 to 1.\n                 */\n                masterVolume: 0.7,\n                /**\n                 * What order to play the data series in, either `sequential` where\n                 * the series play individually one after the other, or `simultaneous`\n                 * where the series play all at once.\n                 *\n                 * @sample highcharts/sonification/chart-simultaneous\n                 *         Simultaneous sonification\n                 *\n                 * @type  {\"sequential\"|\"simultaneous\"}\n                 */\n                order: 'sequential',\n                /**\n                 * Show tooltip as the chart plays.\n                 *\n                 * Note that if multiple tracks that play at different times try to\n                 * show the tooltip, it can be glitchy, so it is recommended in\n                 * those cases to turn this on/off for individual tracks using the\n                 * [showPlayMarker](#plotOptions.series.sonification.tracks.showPlayMarker)\n                 * option.\n                 *\n                 * @see [showCrosshair](#sonification.showCrosshair)\n                 */\n                showTooltip: true,\n                /**\n                 * Show X and Y axis crosshairs (if they exist) as the chart plays.\n                 *\n                 * Note that if multiple tracks that play at different times try to\n                 * show the crosshairs, it can be glitchy, so it is recommended in\n                 * those cases to turn this on/off for individual tracks using the\n                 * [showPlayMarker](#plotOptions.series.sonification.tracks.showPlayMarker)\n                 * option.\n                 *\n                 * @see [showTooltip](#sonification.showTooltip)\n                 * @see [crosshair](#xAxis.crosshair)\n                 */\n                showCrosshair: true,\n                /**\n                 * Options for grouping data points together when sonifying. This\n                 * allows for the visual presentation to contain more points than what\n                 * is being played. If not enabled, all visible / uncropped points are\n                 * played.\n                 *\n                 * @see [series.cropThreshold](#plotOptions.series.cropThreshold)\n                 */\n                pointGrouping: {\n                    /**\n                     * Whether or not to group points\n                     */\n                    enabled: true,\n                    /**\n                     * The size of each group in milliseconds. Audio events closer than\n                     * this are grouped together.\n                     */\n                    groupTimespan: 15,\n                    /**\n                     * The grouping algorithm, deciding which points to keep when\n                     * grouping a set of points together. By default `\"minmax\"` is\n                     * used, which keeps both the minimum and maximum points.\n                     *\n                     * The other algorithms will either keep the first point in the\n                     * group (time wise), last point, middle point, or both the first\n                     * and the last point.\n                     *\n                     * The timing of the resulting point(s) is then adjusted to play\n                     * evenly, regardless of its original position within the group.\n                     *\n                     * @type {\"minmax\"|\"first\"|\"last\"|\"middle\"|\"firstlast\"}\n                     */\n                    algorithm: 'minmax',\n                    /**\n                     * The data property for each point to compare when deciding which\n                     * points to keep in the group.\n                     *\n                     * By default it is \"y\", which means that if the `\"minmax\"`\n                     * algorithm is used, the two points the group with the lowest and\n                     * highest `y` value will be kept, and the others not played.\n                     */\n                    prop: 'y'\n                },\n                /**\n                 * Default sonification options for all instrument tracks.\n                 *\n                 * If specific options are also set on individual tracks or per\n                 * series, those will override these options.\n                 *\n                 * @sample  highcharts/sonification/point-sonify\n                 *          Sonify points on click\n                 *\n                 * @declare Highcharts.SonificationInstrumentOptions\n                 */\n                defaultInstrumentOptions: {\n                    /**\n                     * Round pitch mapping to musical notes.\n                     *\n                     * If `false`, will play the exact mapped note, even if it is out\n                     * of tune compared to the musical notes as defined by 440Hz\n                     * standard tuning.\n                     */\n                    roundToMusicalNotes: true,\n                    /**\n                     * Type of track. Always `\"instrument\"` for instrument tracks, and\n                     * `\"speech\"` for speech tracks.\n                     *\n                     * @declare    Highcharts.SonifcationTypeValue\n                     * @type       {string}\n                     * @default    instrument\n                     * @validvalue [\"instrument\",\"speech\"]\n                     * @apioption  sonification.defaultInstrumentOptions.type\n                     */\n                    /**\n                     * Show play marker (tooltip and/or crosshair) for a track.\n                     *\n                     * @type      {boolean}\n                     * @default   true\n                     * @apioption sonification.defaultInstrumentOptions.showPlayMarker\n                     */\n                    /**\n                     * Name to use for a track when exporting to MIDI.\n                     * By default it uses the series name if the track is related to\n                     * a series.\n                     *\n                     * @type      {string}\n                     * @apioption sonification.defaultInstrumentOptions.midiName\n                     */\n                    /**\n                     * Options for point grouping, specifically for instrument tracks.\n                     *\n                     * @declare   Highcharts.SonificationInstrumentPointGroupingOptions\n                     * @extends   sonification.pointGrouping\n                     * @apioption sonification.defaultInstrumentOptions.pointGrouping\n                     */\n                    /**\n                     * Define a condition for when a track should be active and not.\n                     *\n                     * Can either be a function callback or a configuration object.\n                     *\n                     * If a function is used, it should return a `boolean` for whether\n                     * or not the track should be active. The function is called for\n                     * each audio event, and receives a parameter object with `time`,\n                     * and potentially `point` and `value` properties depending on the\n                     * track. `point` is available if the audio event is related to a\n                     * data point. `value` is available if the track is used as a\n                     * context track, and `valueInterval` is used.\n                     *\n                     * @sample highcharts/sonification/mapping-zones\n                     *         Mapping zones\n                     *\n                     * @declare   Highcharts.SonificationInstrumentActiveWhenOptions\n                     * @type      {Function|*}\n                     * @apioption sonification.defaultInstrumentOptions.activeWhen\n                     */\n                    /**\n                     * Track is only active when `prop` is above or at this value.\n                     *\n                     * @type      {number}\n                     * @apioption sonification.defaultInstrumentOptions.activeWhen.min\n                     */\n                    /**\n                     * Track is only active when `prop` is below or at this value.\n                     *\n                     * @type      {number}\n                     * @apioption sonification.defaultInstrumentOptions.activeWhen.max\n                     */\n                    /**\n                     * Track is only active when `prop` was below, and is now at or\n                     * above this value.\n                     *\n                     * If both `crossingUp` and `crossingDown` are defined, the track\n                     * is active if either condition is met.\n                     *\n                     * @type      {number}\n                     * @apioption sonification.defaultInstrumentOptions.activeWhen.crossingUp\n                     */\n                    /**\n                     * Track is only active when `prop` was above, and is now at or\n                     * below this value.\n                     *\n                     * If both `crossingUp` and `crossingDown` are defined, the track\n                     * is active if either condition is met.\n                     *\n                     * @type      {number}\n                     * @apioption sonification.defaultInstrumentOptions.activeWhen.crossingDown\n                     */\n                    /**\n                     * The point property to compare, for example `y` or `x`.\n                     *\n                     * @type      {string}\n                     * @apioption sonification.defaultInstrumentOptions.activeWhen.prop\n                     */\n                    /**\n                     * Instrument to use for playing.\n                     *\n                     * Can either be a string referencing a synth preset, or it can be\n                     * a synth configuration object.\n                     *\n                     * @sample  highcharts/demo/all-instruments\n                     *          Overview of available presets\n                     * @sample  highcharts/sonification/custom-instrument\n                     *          Custom instrument\n                     *\n                     * @type {string|Highcharts.SynthPatchOptionsObject}\n                     */\n                    instrument: 'piano',\n                    /**\n                     * Mapping options for the audio parameters.\n                     *\n                     * All parameters can be either:\n                     *  - A string, referencing a point property to map to.\n                     *  - A number, setting the value of the audio parameter directly.\n                     *  - A callback function, returning the value programmatically.\n                     *  - An object defining detailed configuration of the mapping.\n                     *\n                     * If a function is used, it should return the desired value for\n                     * the audio parameter. The function is called for each audio event\n                     * to be played, and receives a context object parameter with\n                     * `time`, and potentially `point` and `value` depending on the\n                     * track. `point` is available if the audio event is related to a\n                     * data point, and `value` is available if the track is used for a\n                     * context track using `valueInterval`.\n                     *\n                     * @sample  highcharts/sonification/mapping-overview\n                     *          Overview of common mapping parameters\n                     * @sample  highcharts/sonification/pitch-mapping\n                     *          Various types of mapping used\n                     * @sample  highcharts/sonification/polarity-invert\n                     *          Inverted mapping to property\n                     * @sample  highcharts/sonification/log-mapping\n                     *          Logarithmic mapping to property\n                     *\n                     * @declare Highcharts.SonificationInstrumentMappingOptions\n                     */\n                    mapping: {\n                        /**\n                         * The volume of notes, from 0 to 1.\n                         *\n                         * @declare   Highcharts.SonificationInstrumentVolumeOptions\n                         * @extends   sonification.defaultInstrumentOptions.mapping.time\n                         * @default   1\n                         * @apioption sonification.defaultInstrumentOptions.mapping.volume\n                         */\n                        /**\n                         * Frequency in Hertz of notes. Overrides pitch mapping if set.\n                         *\n                         * @declare   Highcharts.SonificationInstrumentFrequencyOptions\n                         * @extends   sonification.defaultInstrumentOptions.mapping.time\n                         * @apioption sonification.defaultInstrumentOptions.mapping.frequency\n                         */\n                        /**\n                         * Milliseconds to wait before playing, comes in addition to\n                         * the time determined by the `time` mapping.\n                         *\n                         * Can also be negative to play before the mapped time.\n                         *\n                         * @declare   Highcharts.SonificationInstrumentPlayDelayOptions\n                         * @extends   sonification.defaultInstrumentOptions.mapping.time\n                         * @apioption sonification.defaultInstrumentOptions.mapping.playDelay\n                         */\n                        /**\n                         * Mapping options for tremolo effects.\n                         *\n                         * Tremolo is repeated changes of volume over time.\n                         *\n                         * @declare   Highcharts.SonificationInstrumentTremoloOptions\n                         * @apioption sonification.defaultInstrumentOptions.mapping.tremolo\n                         */\n                        /**\n                         * Map to tremolo depth, from 0 to 1.\n                         *\n                         * This determines the intensity of the tremolo effect, how\n                         * much the volume changes.\n                         *\n                         * @declare   Highcharts.SonificationInstrumentTremoloDepthOptions\n                         * @extends   sonification.defaultInstrumentOptions.mapping.time\n                         * @apioption sonification.defaultInstrumentOptions.mapping.tremolo.depth\n                         */\n                        /**\n                         * Map to tremolo speed, from 0 to 1.\n                         *\n                         * This determines the speed of the tremolo effect, how fast\n                         * the volume changes.\n                         *\n                         * @declare   Highcharts.SonificationInstrumentTremoloSpeedOptions\n                         * @extends   sonification.defaultInstrumentOptions.mapping.time\n                         * @apioption sonification.defaultInstrumentOptions.mapping.tremolo.speed\n                         */\n                        /**\n                         * Mapping options for the lowpass filter.\n                         *\n                         * A lowpass filter lets low frequencies through, but stops high\n                         * frequencies, making the sound more dull.\n                         *\n                         * @declare   Highcharts.SonificationInstrumentLowpassOptions\n                         * @apioption sonification.defaultInstrumentOptions.mapping.lowpass\n                         */\n                        /**\n                         * Map to filter frequency in Hertz from 1 to 20,000Hz.\n                         *\n                         * @declare   Highcharts.SonificationInstrumentLowpassFrequencyOptions\n                         * @extends   sonification.defaultInstrumentOptions.mapping.time\n                         * @apioption sonification.defaultInstrumentOptions.mapping.lowpass.frequency\n                         */\n                        /**\n                         * Map to filter resonance in dB. Can be negative to cause a\n                         * dip, or positive to cause a bump.\n                         *\n                         * @declare   Highcharts.SonificationInstrumentLowpassResonanceOptions\n                         * @extends   sonification.defaultInstrumentOptions.mapping.time\n                         * @apioption sonification.defaultInstrumentOptions.mapping.lowpass.resonance\n                         */\n                        /**\n                         * Mapping options for the highpass filter.\n                         *\n                         * A highpass filter lets high frequencies through, but stops\n                         * low frequencies, making the sound thinner.\n                         *\n                         * @declare   Highcharts.SonificationInstrumentHighpassOptions\n                         * @extends   sonification.defaultInstrumentOptions.mapping.lowpass\n                         * @apioption sonification.defaultInstrumentOptions.mapping.highpass\n                         */\n                        /**\n                         * Time mapping determines what time each point plays. It is\n                         * defined as an offset in milliseconds, where 0 means it\n                         * plays immediately when the chart is sonified.\n                         *\n                         * By default time is mapped to `x`, meaning points with the\n                         * lowest `x` value plays first, and points with the highest\n                         * `x` value plays last.\n                         *\n                         * Can be set to a fixed value, a prop to map to, a function,\n                         * or a mapping object.\n                         *\n                         * @sample  highcharts/sonification/point-play-time\n                         *          Play points in order of Y value\n                         *\n                         * @declare Highcharts.SonificationInstrumentTimeOptions\n                         * @type    {string|number|Function|*}\n                         * @default \"x\"\n                         */\n                        time: 'x',\n                        /**\n                         * A point property to map the mapping parameter to.\n                         *\n                         * A negative sign `-` can be placed before the property name\n                         * to make mapping inverted.\n                         *\n                         * @sample  highcharts/sonification/polarity-invert\n                         *          Inverted mapping to property\n                         *\n                         * @type      {string}\n                         * @apioption sonification.defaultInstrumentOptions.mapping.time.mapTo\n                         */\n                        /**\n                         * The minimum value for the audio parameter. This is the\n                         * lowest value the audio parameter will be mapped to.\n                         *\n                         * @type      {number}\n                         * @apioption sonification.defaultInstrumentOptions.mapping.time.min\n                         */\n                        /**\n                         * The maximum value for the audio parameter. This is the\n                         * highest value the audio parameter will be mapped to.\n                         *\n                         * @type      {number}\n                         * @apioption sonification.defaultInstrumentOptions.mapping.time.max\n                         */\n                        /**\n                         * What data values to map the parameter within.\n                         *\n                         * Mapping within `\"series\"` will make the lowest value point\n                         * in the series map to the min audio parameter value, and the\n                         * highest value will map to the max audio parameter.\n                         *\n                         * Mapping within `\"chart\"` will make the lowest value point in\n                         * the whole chart map to the min audio parameter value, and\n                         * the highest value in the whole chart will map to the max\n                         * audio parameter.\n                         *\n                         * You can also map within the X or Y axis of each series.\n                         *\n                         * @sample highcharts/sonification/mapping-within\n                         *         Mapping within demonstrated\n                         *\n                         * @type      {\"chart\"|\"series\"|\"xAxis\"|\"yAxis\"}\n                         * @apioption sonification.defaultInstrumentOptions.mapping.time.within\n                         */\n                        /**\n                         * How to perform the mapping.\n                         * @sample highcharts/sonification/log-mapping\n                         *         Logarithmic mapping to property\n                         *\n                         * @type      {\"linear\"|\"logarithmic\"}\n                         * @apioption sonification.defaultInstrumentOptions.mapping.time.mapFunction\n                         */\n                        /**\n                         * A fixed value to use for the prop when mapping.\n                         *\n                         * For example, if mapping to `y`, setting value to `4` will\n                         * map as if all points had a y value of 4.\n                         *\n                         * @sample highcharts/demo/plotline-context\n                         *         Map to fixed y value\n                         *\n                         * @type      {number}\n                         * @apioption sonification.defaultInstrumentOptions.mapping.time.value\n                         */\n                        /**\n                         * Pan refers to the stereo panning position of the sound.\n                         * It is defined from -1 (left) to 1 (right).\n                         *\n                         * By default it is mapped to `x`, making the sound move from\n                         * left to right as the chart plays.\n                         *\n                         * Can be set to a fixed value, a prop to map to, a function,\n                         * or a mapping object.\n                         *\n                         * @extends sonification.defaultInstrumentOptions.mapping.time\n                         * @default \"x\"\n                         */\n                        pan: 'x',\n                        /**\n                         * Note duration determines for how long a note plays, in\n                         * milliseconds.\n                         *\n                         * It only affects instruments that are able to play\n                         * continuous sustained notes. Examples of these instruments\n                         * from the presets include `flute`, `saxophone`, `trumpet`,\n                         * `sawsynth`, `wobble`, `basic1`, `basic2`, `sine`,\n                         * `sineGlide`, `triangle`, `square`, `sawtooth`, `noise`,\n                         * `filteredNoise`, and `wind`.\n                         *\n                         * Can be set to a fixed value, a prop to map to, a function,\n                         * or a mapping object.\n                         *\n                         * @extends sonification.defaultInstrumentOptions.mapping.time\n                         * @default 200\n                         */\n                        noteDuration: 200,\n                        /**\n                         * Musical pitch refers to how high or low notes are played.\n                         *\n                         * By default it is mapped to `y` so low `y` values are played\n                         * with a lower pitch, and high values are played with a higher\n                         * pitch.\n                         *\n                         * Pitch mapping has a few extra features compared to other\n                         * audio parameters.\n                         *\n                         * Firstly, it accepts not only number values, but also string\n                         * values denoting note names. These are given in the form\n                         * `<note><octave>`, for example `\"c6\"` or `\"F#2\"`.\n                         *\n                         * Secondly, it is possible to map pitch to an array of notes.\n                         * In this case, the `[gapBetweenNotes](#sonification.defaultInstrumentOptions.mapping.gapBetweenNotes)`\n                         * mapping determines the delay between these notes.\n                         *\n                         * Thirdly, it is possible to define a musical scale to follow\n                         * when mapping.\n                         *\n                         * Can be set to a fixed value, an array, a prop to map to, a\n                         * function, or a mapping object.\n                         *\n                         * @sample  highcharts/sonification/pitch-mapping\n                         *          Various types of mapping used\n                         * @sample  highcharts/sonification/polarity-invert\n                         *          Inverted mapping to property\n                         * @sample  highcharts/sonification/log-mapping\n                         *          Logarithmic mapping to property\n                         *\n                         * @declare Highcharts.SonificationInstrumentPitchOptions\n                         * @extends sonification.defaultInstrumentOptions.mapping.time\n                         * @type    {string|number|Function|Array<string|number>|*}\n                         */\n                        pitch: {\n                            mapTo: 'y',\n                            min: 'c2',\n                            max: 'c6',\n                            within: 'yAxis'\n                        },\n                        /**\n                         * Map pitches to a musical scale. The scale is defined as an\n                         * array of semitone offsets from the root note.\n                         *\n                         * @sample  highcharts/sonification/all-scales\n                         *          Predefined scale presets\n                         *\n                         * @type      {Array<number>}\n                         * @apioption sonification.defaultInstrumentOptions.mapping.pitch.scale\n                         */\n                        /**\n                         * Gap in milliseconds between notes if pitch is mapped to an\n                         * array of notes.\n                         *\n                         * Can be set to a fixed value, a prop to map to, a function,\n                         * or a mapping object.\n                         *\n                         * @sample  maps/demo/audio-map\n                         *          Mapping to gap between notes\n                         *\n                         * @extends sonification.defaultInstrumentOptions.mapping.time\n                         * @default 100\n                         */\n                        gapBetweenNotes: 100\n                    }\n                },\n                /**\n                 * Default sonification options for all speech tracks.\n                 *\n                 * If specific options are also set on individual tracks or per\n                 * series, those will override these options.\n                 *\n                 * @sample  highcharts/sonification/speak-values\n                 *          Speak values\n                 *\n                 * @declare   Highcharts.SonificationSpeechOptions\n                 * @extends   sonification.defaultInstrumentOptions\n                 * @excluding roundToMusicalNotes, midiName, instrument\n                 */\n                defaultSpeechOptions: {\n                    /**\n                     * Type of track. Always `\"instrument\"` for instrument tracks, and\n                     * `\"speech\"` for speech tracks.\n                     *\n                     * @declare    Highcharts.SonifcationTypeValue\n                     * @type       {string}\n                     * @default    speech\n                     * @validvalue [\"instrument\",\"speech\"]\n                     * @apioption  sonification.defaultSpeechOptions.type\n                     */\n                    /**\n                     * Name of the voice synthesis to prefer for speech tracks.\n                     *\n                     * If not available, falls back to the default voice for the\n                     * selected language.\n                     *\n                     * Different platforms provide different voices for web speech\n                     * synthesis.\n                     *\n                     * @type      {string}\n                     * @apioption sonification.defaultSpeechOptions.preferredVoice\n                     */\n                    /**\n                     * The language to speak in for speech tracks, as an IETF BCP 47\n                     * language tag.\n                     *\n                     * @sample  maps/demo/audio-map\n                     *          French language speech\n                     */\n                    language: 'en-US',\n                    /**\n                     * Mapping configuration for the speech/audio parameters.\n                     *\n                     * All parameters except `text` can be either:\n                     *  - A string, referencing a point property to map to.\n                     *  - A number, setting the value of the speech parameter directly.\n                     *  - A callback function, returning the value programmatically.\n                     *  - An object defining detailed configuration of the mapping.\n                     *\n                     * If a function is used, it should return the desired value for\n                     * the speech parameter. The function is called for each speech\n                     * event to be played, and receives a context object parameter with\n                     * `time`, and potentially `point` and `value` depending on the\n                     * track. `point` is available if the audio event is related to a\n                     * data point, and `value` is available if the track is used for a\n                     * context track using `valueInterval`.\n                     *\n                     * @declare   Highcharts.SonificationSpeechMappingOptions\n                     * @extends   sonification.defaultInstrumentOptions.mapping\n                     * @excluding frequency, gapBetweenNotes, highpass, lowpass,\n                     *            tremolo, noteDuration, pan\n                     * @apioption sonification.defaultSpeechOptions.mapping\n                     */\n                    mapping: {\n                        /**\n                         * Milliseconds to wait before playing, comes in addition to\n                         * the time determined by the `time` mapping.\n                         *\n                         * Can also be negative to play before the mapped time.\n                         *\n                         * @declare   Highcharts.SonificationSpeechPlayDelayOptions\n                         * @extends   sonification.defaultInstrumentOptions.mapping.time\n                         * @apioption sonification.defaultSpeechOptions.mapping.playDelay\n                         */\n                        /**\n                         * Speech pitch (how high/low the voice is) multiplier.\n                         * @sample  highcharts/sonification/speak-values\n                         *          Speak values\n                         *\n                         * @declare   Highcharts.SonificationSpeechPitchOptions\n                         * @extends   sonification.defaultInstrumentOptions.mapping.time\n                         * @excluding scale\n                         * @type      {string|number|Function|*}\n                         * @default   1\n                         * @apioption sonification.defaultSpeechOptions.mapping.pitch\n                         */\n                        /**\n                         * @default   undefined\n                         * @apioption sonification.defaultSpeechOptions.mapping.pitch.mapTo\n                         */\n                        /**\n                         * @default   undefined\n                         * @apioption sonification.defaultSpeechOptions.mapping.pitch.min\n                         */\n                        /**\n                         * @default   undefined\n                         * @apioption sonification.defaultSpeechOptions.mapping.pitch.max\n                         */\n                        /**\n                         * @default   undefined\n                         * @apioption sonification.defaultSpeechOptions.mapping.pitch.within\n                         */\n                        /**\n                         * The text to announce for speech tracks. Can either be a\n                         * format string or a function.\n                         *\n                         * If it is a function, it should return the format string to\n                         * announce. The function is called for each audio event, and\n                         * receives a parameter object with `time`, and potentially\n                         * `point` and `value` properties depending on the track.\n                         * `point` is available if the audio event is related to a data\n                         * point. `value` is available if the track is used as a\n                         * context track, and `valueInterval` is used.\n                         *\n                         * If it is a format string, in addition to normal string\n                         * content, format values can be accessed using bracket\n                         * notation. For example `\"Value is {point.y}%\"`.\n                         *\n                         * `time`, `point` and `value` are available to the format\n                         * strings similarly to with functions. Nested properties can\n                         * be accessed with dot notation, for example\n                         * `\"Density: {point.options.custom.density}\"`\n                         *\n                         * @sample highcharts/sonification/speak-values\n                         *         Speak values\n                         *\n                         * @type      {string|Function}\n                         * @apioption sonification.defaultSpeechOptions.mapping.text\n                         */\n                        /**\n                         * @extends sonification.defaultInstrumentOptions.mapping.time\n                         * @default \"x\"\n                         */\n                        time: 'x',\n                        /**\n                         * Speech rate (speed) multiplier.\n                         * @extends sonification.defaultInstrumentOptions.mapping.time\n                         * @default 1.3\n                         */\n                        rate: 1.3,\n                        /**\n                         * Volume of the speech announcement.\n                         * @extends sonification.defaultInstrumentOptions.mapping.volume\n                         * @default 0.4\n                         */\n                        volume: 0.4\n                    },\n                    pointGrouping: {\n                        algorithm: 'last'\n                    }\n                }\n            },\n            exporting: {\n                menuItemDefinitions: {\n                    downloadMIDI: {\n                        textKey: 'downloadMIDI',\n                        onclick: function () {\n                            if (this.sonification) {\n                                this.sonification.downloadMIDI();\n                            }\n                        }\n                    },\n                    playAsSound: {\n                        textKey: 'playAsSound',\n                        onclick: function () {\n                            const s = this.sonification;\n                            if (s && s.isPlaying()) {\n                                s.cancel();\n                            }\n                            else {\n                                this.sonify();\n                            }\n                        }\n                    }\n                }\n            },\n            /**\n             * @optionparent lang\n             * @private\n             */\n            lang: {\n                /**\n                 * The text for the MIDI download menu item in the export menu.\n                 * @requires modules/sonification\n                 * @since 11.0.0\n                 */\n                downloadMIDI: 'Download MIDI',\n                /**\n                 * The text for the Play as sound menu item in the export menu.\n                 * @requires modules/sonification\n                 * @since 11.0.0\n                 */\n                playAsSound: 'Play as sound'\n            }\n        };\n        /* *\n         *\n         *  API declarations\n         *\n         * */\n        /**\n         * Sonification/audio chart options for a series.\n         *\n         * @declare    Highcharts.SeriesSonificationOptions\n         * @since      11.0.0\n         * @requires   modules/sonification\n         * @apioption  plotOptions.series.sonification\n         */\n        /**\n         * Whether or not sonification is enabled for this series.\n         *\n         * @type       {boolean}\n         * @default    true\n         * @apioption  plotOptions.series.sonification.enabled\n         */\n        /**\n         * Context tracks for this series. Context tracks are tracks that are not\n         * tied to data points.\n         *\n         * Given as an array of instrument tracks, speech tracks, or a mix of both.\n         *\n         * @declare    Highcharts.SeriesSonificationContextTracksOptions\n         * @type       {Array<*>}\n         * @extends    sonification.globalContextTracks\n         * @apioption  plotOptions.series.sonification.contextTracks\n         */\n        /**\n         * Tracks for this series.\n         *\n         * Given as an array of instrument tracks, speech tracks, or a mix of both.\n         *\n         * @declare    Highcharts.SeriesSonificationTracksOptions\n         * @type       {Array<*>}\n         * @extends    sonification.globalTracks\n         * @apioption  plotOptions.series.sonification.tracks\n         */\n        /**\n         * Default options for all this series' instrument tracks.\n         *\n         * @declare    Highcharts.SeriesSonificationInstrumentOptions\n         * @extends    sonification.defaultInstrumentOptions\n         * @apioption  plotOptions.series.sonification.defaultInstrumentOptions\n         */\n        /**\n         * Default options for all this series' speech tracks.\n         *\n         * @declare    Highcharts.SeriesSonificationSpeechOptions\n         * @extends    sonification.defaultSpeechOptions\n         * @apioption  plotOptions.series.sonification.defaultSpeechOptions\n         */\n        /**\n         * Sonification point grouping options for this series.\n         *\n         * @declare    Highcharts.SeriesSonificationPointGroupingOptions\n         * @extends    sonification.pointGrouping\n         * @apioption  plotOptions.series.sonification.pointGrouping\n         */\n        /**\n         * Event context object sent to sonification chart events.\n         * @requires  modules/sonification\n         * @interface Highcharts.SonificationChartEventCallbackContext\n         */ /**\n        * The relevant chart\n        * @name Highcharts.SonificationChartEventCallbackContext#chart\n        * @type {Highcharts.Chart|undefined}\n        */ /**\n        * The points that were played, if any\n        * @name Highcharts.SonificationChartEventCallbackContext#pointsPlayed\n        * @type {Array<Highcharts.Point>|undefined}\n        */ /**\n        * The playing timeline object with advanced and internal content\n        * @name Highcharts.SonificationChartEventCallbackContext#timeline\n        * @type {object|undefined}\n        */\n        /**\n         * Event context object sent to sonification series events.\n         * @requires  modules/sonification\n         * @interface Highcharts.SonificationSeriesEventCallbackContext\n         */ /**\n        * The relevant series\n        * @name Highcharts.SonificationSeriesEventCallbackContext#series\n        * @type {Highcharts.Series|undefined}\n        */ /**\n        * The playing timeline object with advanced and internal content\n        * @name Highcharts.SonificationSeriesEventCallbackContext#timeline\n        * @type {object|undefined}\n        */\n        /**\n         * Callback function for sonification events on chart.\n         * @callback Highcharts.SonificationChartEventCallback\n         * @param {Highcharts.SonificationChartEventCallbackContext} e Sonification chart event context\n         */\n        /**\n         * Callback function for sonification events on series.\n         * @callback Highcharts.SonificationSeriesEventCallback\n         * @param {Highcharts.SonificationSeriesEventCallbackContext} e Sonification series event context\n         */\n        (''); // Keep above doclets in JS file\n\n        return Options;\n    });\n    _registerModule(_modules, 'Extensions/Sonification/SynthPatch.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Øystein Moseng\n         *\n         *  Class representing a Synth Patch, used by Instruments in the\n         *  sonification.js module.\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { clamp, defined, pick } = U;\n        /**\n         * Get the multiplier value from a pitch tracked multiplier. The parameter\n         * specifies the multiplier at ca 3200Hz. It is 1 at ca 50Hz. In between\n         * it is mapped logarithmically.\n         * @private\n         * @param {number} multiplier The multiplier to track.\n         * @param {number} freq The current frequency.\n         */\n        function getPitchTrackedMultiplierVal(multiplier, freq) {\n            const a = 0.2414 * multiplier - 0.2414, b = (3.5 - 1.7 * multiplier) / 1.8;\n            return a * Math.log(freq) + b;\n        }\n        /**\n         * Schedule a mini ramp to volume at time - avoid clicks/pops.\n         * @private\n         * @param {Object} gainNode The gain node to schedule for.\n         * @param {number} time The time in seconds to start ramp.\n         * @param {number} vol The volume to ramp to.\n         */\n        function miniRampToVolAtTime(gainNode, time, vol) {\n            gainNode.gain.cancelScheduledValues(time);\n            gainNode.gain.setTargetAtTime(vol, time, SynthPatch.stopRampTime / 4);\n            gainNode.gain.setValueAtTime(vol, time + SynthPatch.stopRampTime);\n        }\n        /**\n         * Schedule a gain envelope for a gain node.\n         * @private\n         * @param {Array<Object>} envelope The envelope to schedule.\n         * @param {string} type Type of envelope, attack or release.\n         * @param {number} time At what time (in seconds) to start envelope.\n         * @param {Object} gainNode The gain node to schedule on.\n         * @param {number} [volumeMultiplier] Volume multiplier for the envelope.\n         */\n        function scheduleGainEnvelope(envelope, type, time, gainNode, volumeMultiplier = 1) {\n            const isAtk = type === 'attack', gain = gainNode.gain;\n            gain.cancelScheduledValues(time);\n            if (!envelope.length) {\n                miniRampToVolAtTime(gainNode, time, isAtk ? volumeMultiplier : 0);\n                return;\n            }\n            if (envelope[0].t > 1) {\n                envelope.unshift({ t: 0, vol: isAtk ? 0 : 1 });\n            }\n            envelope.forEach((ep, ix) => {\n                const prev = envelope[ix - 1], delta = prev ? (ep.t - prev.t) / 1000 : 0, startTime = time + (prev ? prev.t / 1000 + SynthPatch.stopRampTime : 0);\n                gain.setTargetAtTime(ep.vol * volumeMultiplier, startTime, Math.max(delta, SynthPatch.stopRampTime) / 2);\n            });\n        }\n        /**\n         * Internal class used by Oscillator, representing a Pulse Oscillator node.\n         * Combines two sawtooth oscillators to create a pulse by phase inverting and\n         * delaying one of them.\n         * @class\n         * @private\n         */\n        class PulseOscNode {\n            constructor(context, options) {\n                this.pulseWidth = Math.min(Math.max(0, options.pulseWidth || 0.5));\n                const makeOsc = () => new OscillatorNode(context, {\n                    type: 'sawtooth',\n                    detune: options.detune,\n                    frequency: Math.max(1, options.frequency || 350)\n                });\n                this.sawOscA = makeOsc();\n                this.sawOscB = makeOsc();\n                this.phaseInverter = new GainNode(context, { gain: -1 });\n                this.masterGain = new GainNode(context);\n                this.delayNode = new DelayNode(context, {\n                    delayTime: this.pulseWidth / this.sawOscA.frequency.value\n                });\n                this.sawOscA.connect(this.masterGain);\n                this.sawOscB.connect(this.phaseInverter);\n                this.phaseInverter.connect(this.delayNode);\n                this.delayNode.connect(this.masterGain);\n            }\n            connect(destination) {\n                this.masterGain.connect(destination);\n            }\n            // Polymorph with normal osc.frequency API\n            getFrequencyFacade() {\n                const pulse = this;\n                return {\n                    cancelScheduledValues(fromTime) {\n                        pulse.sawOscA.frequency.cancelScheduledValues(fromTime);\n                        pulse.sawOscB.frequency.cancelScheduledValues(fromTime);\n                        pulse.delayNode.delayTime.cancelScheduledValues(fromTime);\n                        return pulse.sawOscA.frequency;\n                    },\n                    setValueAtTime(frequency, time) {\n                        this.cancelScheduledValues(time);\n                        pulse.sawOscA.frequency.setValueAtTime(frequency, time);\n                        pulse.sawOscB.frequency.setValueAtTime(frequency, time);\n                        pulse.delayNode.delayTime.setValueAtTime(Math.round(10000 * pulse.pulseWidth / frequency) / 10000, time);\n                        return pulse.sawOscA.frequency;\n                    },\n                    setTargetAtTime(frequency, time, timeConstant) {\n                        this.cancelScheduledValues(time);\n                        pulse.sawOscA.frequency\n                            .setTargetAtTime(frequency, time, timeConstant);\n                        pulse.sawOscB.frequency\n                            .setTargetAtTime(frequency, time, timeConstant);\n                        pulse.delayNode.delayTime.setTargetAtTime(Math.round(10000 * pulse.pulseWidth / frequency) / 10000, time, timeConstant);\n                        return pulse.sawOscA.frequency;\n                    }\n                };\n            }\n            getPWMTarget() {\n                return this.delayNode.delayTime;\n            }\n            start() {\n                this.sawOscA.start();\n                this.sawOscB.start();\n            }\n            stop(time) {\n                this.sawOscA.stop(time);\n                this.sawOscB.stop(time);\n            }\n        }\n        /**\n         * Internal class used by SynthPatch\n         * @class\n         * @private\n         */\n        class Oscillator {\n            constructor(audioContext, options, destination) {\n                this.audioContext = audioContext;\n                this.options = options;\n                this.fmOscillatorIx = options.fmOscillator;\n                this.vmOscillatorIx = options.vmOscillator;\n                this.createSoundSource();\n                this.createGain();\n                this.createFilters();\n                this.createVolTracking();\n                if (destination) {\n                    this.connect(destination);\n                }\n            }\n            // Connect the node tree from destination down to oscillator,\n            // depending on which nodes exist. Done automatically unless\n            // no destination was passed to constructor.\n            connect(destination) {\n                [\n                    this.lowpassNode,\n                    this.highpassNode,\n                    this.volTrackingNode,\n                    this.vmNode,\n                    this.gainNode,\n                    this.whiteNoise,\n                    this.pulseNode,\n                    this.oscNode\n                ].reduce((prev, cur) => (cur ?\n                    (cur.connect(prev), cur) :\n                    prev), destination);\n            }\n            start() {\n                if (this.oscNode) {\n                    this.oscNode.start();\n                }\n                if (this.whiteNoise) {\n                    this.whiteNoise.start();\n                }\n                if (this.pulseNode) {\n                    this.pulseNode.start();\n                }\n            }\n            stopAtTime(time) {\n                if (this.oscNode) {\n                    this.oscNode.stop(time);\n                }\n                if (this.whiteNoise) {\n                    this.whiteNoise.stop(time);\n                }\n                if (this.pulseNode) {\n                    this.pulseNode.stop(time);\n                }\n            }\n            setFreqAtTime(time, frequency, glideDuration = 0) {\n                const opts = this.options, f = clamp(pick(opts.fixedFrequency, frequency) *\n                    (opts.freqMultiplier || 1), 0, 21000), oscTarget = this.getOscTarget(), timeConstant = glideDuration / 5000;\n                if (oscTarget) {\n                    oscTarget.cancelScheduledValues(time);\n                    if (glideDuration && time - (this.lastUpdateTime || -1) > 0.01) {\n                        oscTarget.setTargetAtTime(f, time, timeConstant);\n                        oscTarget.setValueAtTime(f, time + timeConstant);\n                    }\n                    else {\n                        oscTarget.setValueAtTime(f, time);\n                    }\n                }\n                this.scheduleVolTrackingChange(f, time, glideDuration);\n                this.scheduleFilterTrackingChange(f, time, glideDuration);\n                this.lastUpdateTime = time;\n            }\n            // Get target for FM synthesis if another oscillator wants to modulate.\n            // Pulse nodes don't do FM, but do PWM instead.\n            getFMTarget() {\n                return this.oscNode && this.oscNode.detune ||\n                    this.whiteNoise && this.whiteNoise.detune ||\n                    this.pulseNode && this.pulseNode.getPWMTarget();\n            }\n            // Get target for volume modulation if another oscillator wants to modulate.\n            getVMTarget() {\n                return this.vmNode && this.vmNode.gain;\n            }\n            // Schedule one of the oscillator envelopes at a specified time in\n            // seconds (in AudioContext timespace).\n            runEnvelopeAtTime(type, time) {\n                if (!this.gainNode) {\n                    return;\n                }\n                const env = (type === 'attack' ? this.options.attackEnvelope :\n                    this.options.releaseEnvelope) || [];\n                scheduleGainEnvelope(env, type, time, this.gainNode, this.options.volume);\n            }\n            // Cancel any envelopes or frequency changes currently scheduled\n            cancelScheduled() {\n                if (this.gainNode) {\n                    this.gainNode.gain\n                        .cancelScheduledValues(this.audioContext.currentTime);\n                }\n                const oscTarget = this.getOscTarget();\n                if (oscTarget) {\n                    oscTarget.cancelScheduledValues(0);\n                }\n                if (this.lowpassNode) {\n                    this.lowpassNode.frequency.cancelScheduledValues(0);\n                }\n                if (this.highpassNode) {\n                    this.highpassNode.frequency.cancelScheduledValues(0);\n                }\n                if (this.volTrackingNode) {\n                    this.volTrackingNode.gain.cancelScheduledValues(0);\n                }\n            }\n            // Set the pitch dependent volume to fit some frequency at some time\n            scheduleVolTrackingChange(frequency, time, glideDuration) {\n                if (this.volTrackingNode) {\n                    const v = getPitchTrackedMultiplierVal(this.options.volumePitchTrackingMultiplier || 1, frequency), rampTime = glideDuration ? glideDuration / 1000 :\n                        SynthPatch.stopRampTime;\n                    this.volTrackingNode.gain.cancelScheduledValues(time);\n                    this.volTrackingNode.gain.setTargetAtTime(v, time, rampTime / 5);\n                    this.volTrackingNode.gain.setValueAtTime(v, time + rampTime);\n                }\n            }\n            // Set the pitch dependent filter frequency to fit frequency at some time\n            scheduleFilterTrackingChange(frequency, time, glideDuration) {\n                const opts = this.options, rampTime = glideDuration ? glideDuration / 1000 :\n                    SynthPatch.stopRampTime, scheduleFilterTarget = (filterNode, filterOptions) => {\n                    const multiplier = getPitchTrackedMultiplierVal(filterOptions.frequencyPitchTrackingMultiplier || 1, frequency), f = clamp((filterOptions.frequency || 1000) * multiplier, 0, 21000);\n                    filterNode.frequency.cancelScheduledValues(time);\n                    filterNode.frequency.setTargetAtTime(f, time, rampTime / 5);\n                    filterNode.frequency.setValueAtTime(f, time + rampTime);\n                };\n                if (this.lowpassNode && opts.lowpass) {\n                    scheduleFilterTarget(this.lowpassNode, opts.lowpass);\n                }\n                if (this.highpassNode && opts.highpass) {\n                    scheduleFilterTarget(this.highpassNode, opts.highpass);\n                }\n            }\n            createGain() {\n                const opts = this.options, needsGainNode = defined(opts.volume) ||\n                    opts.attackEnvelope && opts.attackEnvelope.length ||\n                    opts.releaseEnvelope && opts.releaseEnvelope.length;\n                if (needsGainNode) {\n                    this.gainNode = new GainNode(this.audioContext, {\n                        gain: pick(opts.volume, 1)\n                    });\n                }\n                // We always need VM gain, so make that\n                this.vmNode = new GainNode(this.audioContext);\n            }\n            // Create the oscillator or audio buffer acting as the sound source\n            createSoundSource() {\n                const opts = this.options, ctx = this.audioContext, frequency = (opts.fixedFrequency || 0) *\n                    (opts.freqMultiplier || 1);\n                if (opts.type === 'whitenoise') {\n                    const bSize = ctx.sampleRate * 2, buffer = ctx.createBuffer(1, bSize, ctx.sampleRate), data = buffer.getChannelData(0);\n                    for (let i = 0; i < bSize; ++i) {\n                        // More pleasant \"white\" noise with less variance than -1 to +1\n                        data[i] = Math.random() * 1.2 - 0.6;\n                    }\n                    const wn = this.whiteNoise = ctx.createBufferSource();\n                    wn.buffer = buffer;\n                    wn.loop = true;\n                }\n                else if (opts.type === 'pulse') {\n                    this.pulseNode = new PulseOscNode(ctx, {\n                        detune: opts.detune,\n                        pulseWidth: opts.pulseWidth,\n                        frequency\n                    });\n                }\n                else {\n                    this.oscNode = new OscillatorNode(ctx, {\n                        type: opts.type || 'sine',\n                        detune: opts.detune,\n                        frequency\n                    });\n                }\n            }\n            // Lowpass/Highpass filters\n            createFilters() {\n                const opts = this.options;\n                if (opts.lowpass && opts.lowpass.frequency) {\n                    this.lowpassNode = new BiquadFilterNode(this.audioContext, {\n                        type: 'lowpass',\n                        Q: opts.lowpass.Q || 1,\n                        frequency: opts.lowpass.frequency\n                    });\n                }\n                if (opts.highpass && opts.highpass.frequency) {\n                    this.highpassNode = new BiquadFilterNode(this.audioContext, {\n                        type: 'highpass',\n                        Q: opts.highpass.Q || 1,\n                        frequency: opts.highpass.frequency\n                    });\n                }\n            }\n            // Gain node used for frequency dependent volume tracking\n            createVolTracking() {\n                const opts = this.options;\n                if (opts.volumePitchTrackingMultiplier &&\n                    opts.volumePitchTrackingMultiplier !== 1) {\n                    this.volTrackingNode = new GainNode(this.audioContext, {\n                        gain: 1\n                    });\n                }\n            }\n            // Get the oscillator frequency target\n            getOscTarget() {\n                return this.oscNode ? this.oscNode.frequency :\n                    this.pulseNode && this.pulseNode.getFrequencyFacade();\n            }\n        }\n        /**\n         * The SynthPatch class. This class represents an instance and configuration\n         * of the built-in Highcharts synthesizer. It can be used to play various\n         * generated sounds.\n         *\n         * @sample highcharts/sonification/manual-using-synth\n         *         Using Synth directly to sonify manually\n         * @sample highcharts/sonification/custom-instrument\n         *         Using custom Synth options with chart\n         *\n         * @requires modules/sonification\n         *\n         * @class\n         * @name Highcharts.SynthPatch\n         *\n         * @param {AudioContext} audioContext\n         *        The AudioContext to use.\n         * @param {Highcharts.SynthPatchOptionsObject} options\n         *        Configuration for the synth.\n         */\n        class SynthPatch {\n            constructor(audioContext, options) {\n                this.audioContext = audioContext;\n                this.options = options;\n                this.eqNodes = [];\n                this.midiInstrument = options.midiInstrument || 1;\n                this.outputNode = new GainNode(audioContext, { gain: 0 });\n                this.createEqChain(this.outputNode);\n                const inputNode = this.eqNodes.length ?\n                    this.eqNodes[0] : this.outputNode;\n                this.oscillators = (this.options.oscillators || []).map((oscOpts) => new Oscillator(audioContext, oscOpts, defined(oscOpts.fmOscillator) || defined(oscOpts.vmOscillator) ?\n                    void 0 : inputNode));\n                // Now that we have all oscillators, connect the ones\n                // that are used for modulation.\n                this.oscillators.forEach((osc) => {\n                    const connectTarget = (targetFunc, targetOsc) => {\n                        if (targetOsc) {\n                            const target = targetOsc[targetFunc]();\n                            if (target) {\n                                osc.connect(target);\n                            }\n                        }\n                    };\n                    if (defined(osc.fmOscillatorIx)) {\n                        connectTarget('getFMTarget', this.oscillators[osc.fmOscillatorIx]);\n                    }\n                    if (defined(osc.vmOscillatorIx)) {\n                        connectTarget('getVMTarget', this.oscillators[osc.vmOscillatorIx]);\n                    }\n                });\n            }\n            /**\n             * Start the oscillators, but don't output sound.\n             * @function Highcharts.SynthPatch#startSilently\n             */\n            startSilently() {\n                this.outputNode.gain.value = 0;\n                this.oscillators.forEach((o) => o.start());\n            }\n            /**\n             * Stop the synth. It can't be started again.\n             * @function Highcharts.SynthPatch#stop\n             */\n            stop() {\n                const curTime = this.audioContext.currentTime, endTime = curTime + SynthPatch.stopRampTime;\n                miniRampToVolAtTime(this.outputNode, curTime, 0);\n                this.oscillators.forEach((o) => o.stopAtTime(endTime));\n                this.outputNode.disconnect();\n            }\n            /**\n             * Mute sound at time (in seconds).\n             * Will still run release envelope. Note: If scheduled multiple times in\n             * succession, the release envelope will run, and that could make sound.\n             * @function Highcharts.SynthPatch#silenceAtTime\n             * @param {number} time Time offset from now, in seconds\n             */\n            silenceAtTime(time) {\n                if (!time && this.outputNode.gain.value < 0.01) {\n                    this.outputNode.gain.value = 0;\n                    return; // Skip if not needed\n                }\n                this.releaseAtTime((time || 0) + this.audioContext.currentTime);\n            }\n            /**\n             * Mute sound immediately.\n             * @function Highcharts.SynthPatch#mute\n             */\n            mute() {\n                this.cancelScheduled();\n                miniRampToVolAtTime(this.outputNode, this.audioContext.currentTime, 0);\n            }\n            /**\n             * Play a frequency at time (in seconds).\n             * Time denotes when the attack ramp starts. Note duration is given in\n             * milliseconds. If note duration is not given, the note plays indefinitely.\n             * @function Highcharts.SynthPatch#silenceAtTime\n             * @param {number} time Time offset from now, in seconds\n             * @param {number} frequency The frequency to play at\n             * @param {number|undefined} noteDuration Duration to play, in milliseconds\n             */\n            playFreqAtTime(time, frequency, noteDuration) {\n                const t = (time || 0) + this.audioContext.currentTime, opts = this.options;\n                this.oscillators.forEach((o) => {\n                    o.setFreqAtTime(t, frequency, opts.noteGlideDuration);\n                    o.runEnvelopeAtTime('attack', t);\n                });\n                scheduleGainEnvelope(opts.masterAttackEnvelope || [], 'attack', t, this.outputNode, opts.masterVolume);\n                if (noteDuration) {\n                    this.releaseAtTime(t + noteDuration / 1000);\n                }\n            }\n            /**\n             * Cancel any scheduled actions\n             * @function Highcharts.SynthPatch#cancelScheduled\n             */\n            cancelScheduled() {\n                this.outputNode.gain.cancelScheduledValues(this.audioContext.currentTime);\n                this.oscillators.forEach((o) => o.cancelScheduled());\n            }\n            /**\n             * Connect the SynthPatch output to an audio node / destination.\n             * @function Highcharts.SynthPatch#connect\n             * @param {AudioNode} destinationNode The node to connect to.\n             * @return {AudioNode} The destination node, to allow chaining.\n             */\n            connect(destinationNode) {\n                return this.outputNode.connect(destinationNode);\n            }\n            /**\n             * Create nodes for master EQ\n             * @private\n             */\n            createEqChain(outputNode) {\n                this.eqNodes = (this.options.eq || []).map((eqDef) => new BiquadFilterNode(this.audioContext, {\n                    type: 'peaking',\n                    ...eqDef\n                }));\n                // Connect nodes\n                this.eqNodes.reduceRight((chain, node) => {\n                    node.connect(chain);\n                    return node;\n                }, outputNode);\n            }\n            /**\n             * Fade by release envelopes at time\n             * @private\n             */\n            releaseAtTime(time) {\n                let maxReleaseDuration = 0;\n                this.oscillators.forEach((o) => {\n                    const env = o.options.releaseEnvelope;\n                    if (env && env.length) {\n                        maxReleaseDuration = Math.max(maxReleaseDuration, env[env.length - 1].t);\n                        o.runEnvelopeAtTime('release', time);\n                    }\n                });\n                const masterEnv = this.options.masterReleaseEnvelope || [];\n                if (masterEnv.length) {\n                    scheduleGainEnvelope(masterEnv, 'release', time, this.outputNode, this.options.masterVolume);\n                    maxReleaseDuration = Math.max(maxReleaseDuration, masterEnv[masterEnv.length - 1].t);\n                }\n                miniRampToVolAtTime(this.outputNode, time + maxReleaseDuration / 1000, 0);\n            }\n        }\n        SynthPatch.stopRampTime = 0.012; // Ramp time to 0 when stopping sound\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API declarations\n         *\n         * */\n        /**\n         * An EQ filter definition for a low/highpass filter.\n         * @requires modules/sonification\n         * @interface Highcharts.SynthPatchPassFilter\n         */ /**\n        * Filter frequency.\n        * @name Highcharts.SynthPatchPassFilter#frequency\n        * @type {number|undefined}\n        */ /**\n        * A pitch tracking multiplier similarly to the one for oscillator volume.\n        * Affects the filter frequency.\n        * @name Highcharts.SynthPatchPassFilter#frequencyPitchTrackingMultiplier\n        * @type {number|undefined}\n        */ /**\n        * Filter resonance bump/dip in dB. Defaults to 0.\n        * @name Highcharts.SynthPatchPassFilter#Q\n        * @type {number|undefined}\n        */\n        /**\n         * @typedef {Highcharts.Record<\"t\"|\"vol\",number>} Highcharts.SynthEnvelopePoint\n         * @requires modules/sonification\n         */\n        /**\n         * @typedef {Array<Highcharts.SynthEnvelopePoint>} Highcharts.SynthEnvelope\n         * @requires modules/sonification\n         */\n        /**\n         * @typedef {\"sine\"|\"square\"|\"sawtooth\"|\"triangle\"|\"whitenoise\"|\"pulse\"} Highcharts.SynthPatchOscillatorType\n         * @requires modules/sonification\n         */\n        /**\n         * Configuration for an oscillator for the synth.\n         * @requires modules/sonification\n         * @interface Highcharts.SynthPatchOscillatorOptionsObject\n         */ /**\n        * The type of oscillator. This describes the waveform of the oscillator.\n        * @name Highcharts.SynthPatchOscillatorOptionsObject#type\n        * @type {Highcharts.SynthPatchOscillatorType|undefined}\n        */ /**\n        * A volume modifier for the oscillator. Defaults to 1.\n        * @name Highcharts.SynthPatchOscillatorOptionsObject#volume\n        * @type {number|undefined}\n        */ /**\n        * A multiplier for the input frequency of the oscillator. Defaults to 1. If\n        * this is for example set to 4, an input frequency of 220Hz will cause the\n        * oscillator to play at 880Hz.\n        * @name Highcharts.SynthPatchOscillatorOptionsObject#freqMultiplier\n        * @type {number|undefined}\n        */ /**\n        * Play a fixed frequency for the oscillator - ignoring input frequency. The\n        * frequency multiplier is still applied.\n        * @name Highcharts.SynthPatchOscillatorOptionsObject#fixedFrequency\n        * @type {number|undefined}\n        */ /**\n        * Applies a detuning of all frequencies. Set in cents. Defaults to 0.\n        * @name Highcharts.SynthPatchOscillatorOptionsObject#detune\n        * @type {number|undefined}\n        */ /**\n        * Width of the pulse waveform. Only applies to \"pulse\" type oscillators. A\n        * width of 0.5 is roughly equal to a square wave. This is the default.\n        * @name Highcharts.SynthPatchOscillatorOptionsObject#pulseWidth\n        * @type {number|undefined}\n        */ /**\n        * Index of another oscillator to use as carrier, with this oscillator being\n        * used as a volume modulator. The first oscillator in the array has index 0,\n        * and so on. This option can be used to produce tremolo effects.\n        * @name Highcharts.SynthPatchOscillatorOptionsObject#vmOscillator\n        * @type {number|undefined}\n        */ /**\n        * Index of another oscillator to use as carrier, with this oscillator being\n        * used as a frequency modulator. Note: If the carrier is a pulse oscillator,\n        * the modulation will be on pulse width instead of frequency, allowing for\n        * PWM effects.\n        * @name Highcharts.SynthPatchOscillatorOptionsObject#fmOscillator\n        * @type {number|undefined}\n        */ /**\n        * A tracking multiplier used for frequency dependent behavior. For example, by\n        * setting the volume tracking multiplier to 0.01, the volume will be lower at\n        * higher notes. The multiplier is a logarithmic function, where 1 is at ca\n        * 50Hz, and you define the output multiplier for an input frequency around\n        * 3.2kHz.\n        * @name Highcharts.SynthPatchOscillatorOptionsObject#volumePitchTrackingMultiplier\n        * @type {number|undefined}\n        */ /**\n        * Volume envelope for note attack, specific to this oscillator.\n        * @name Highcharts.SynthPatchOscillatorOptionsObject#attackEnvelope\n        * @type {Highcharts.SynthEnvelope|undefined}\n        */ /**\n        * Volume envelope for note release, specific to this oscillator.\n        * @name Highcharts.SynthPatchOscillatorOptionsObject#releaseEnvelope\n        * @type {Highcharts.SynthEnvelope|undefined}\n        */ /**\n        * Highpass filter options for the oscillator.\n        * @name Highcharts.SynthPatchOscillatorOptionsObject#highpass\n        * @type {Highcharts.SynthPatchPassFilter|undefined}\n        */ /**\n        * Lowpass filter options for the oscillator.\n        * @name Highcharts.SynthPatchOscillatorOptionsObject#lowpass\n        * @type {Highcharts.SynthPatchPassFilter|undefined}\n        */\n        /**\n         * An EQ filter definition for a bell filter.\n         * @requires modules/sonification\n         * @interface Highcharts.SynthPatchEQFilter\n         */ /**\n        * Filter frequency.\n        * @name Highcharts.SynthPatchEQFilter#frequency\n        * @type {number|undefined}\n        */ /**\n        * Filter gain. Defaults to 0.\n        * @name Highcharts.SynthPatchEQFilter#gain\n        * @type {number|undefined}\n        */ /**\n        * Filter Q. Defaults to 1. Lower numbers mean a wider bell.\n        * @name Highcharts.SynthPatchEQFilter#Q\n        * @type {number|undefined}\n        */\n        /**\n         * A set of options for the SynthPatch class.\n         *\n         * @requires modules/sonification\n         *\n         * @interface Highcharts.SynthPatchOptionsObject\n         */ /**\n        * Global volume modifier for the synth. Defaults to 1. Note that if the total\n        * volume of all oscillators is too high, the browser's audio engine can\n        * distort.\n        * @name Highcharts.SynthPatchOptionsObject#masterVolume\n        * @type {number|undefined}\n        */ /**\n        * Time in milliseconds to glide between notes. Causes a glissando effect.\n        * @name Highcharts.SynthPatchOptionsObject#noteGlideDuration\n        * @type {number|undefined}\n        */ /**\n        * MIDI instrument ID for the synth. Used with MIDI export of Timelines to have\n        * tracks open with a similar instrument loaded when imported into other\n        * applications. Defaults to 1, \"Acoustic Grand Piano\".\n        * @name Highcharts.SynthPatchOptionsObject#midiInstrument\n        * @type {number|undefined}\n        */ /**\n        * Volume envelope for the overall attack of a note - what happens to the\n        * volume when a note first plays. If the volume goes to 0 in the attack\n        * envelope, the synth will not be able to play the note continuously/\n        * sustained, and the notes will be staccato.\n        * @name Highcharts.SynthPatchOptionsObject#masterAttackEnvelope\n        * @type {Highcharts.SynthEnvelope|undefined}\n        */ /**\n        * Volume envelope for the overall release of a note - what happens to the\n        * volume when a note stops playing. If the release envelope starts at a higher\n        * volume than the attack envelope ends, the volume will first rise to that\n        * volume before falling when releasing a note. If the note is released while\n        * the attack envelope is still in effect, the attack envelope is interrupted,\n        * and the release envelope plays instead.\n        * @name Highcharts.SynthPatchOptionsObject#masterReleaseEnvelope\n        * @type {Highcharts.SynthEnvelope|undefined}\n        */ /**\n        * Master EQ filters for the synth, affecting the overall sound.\n        * @name Highcharts.SynthPatchOptionsObject#eq\n        * @type {Array<Highcharts.SynthPatchEQFilter>|undefined}\n        */ /**\n        * Array of oscillators to add to the synth.\n        * @name Highcharts.SynthPatchOptionsObject#oscillators\n        * @type {Array<Highcharts.SynthPatchOscillatorOptionsObject>|undefined}\n        */\n        (''); // Keep above doclets in JS file\n\n        return SynthPatch;\n    });\n    _registerModule(_modules, 'Extensions/Sonification/InstrumentPresets.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Øystein Moseng\n         *\n         *  Presets for SynthPatch.\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const InstrumentPresets = {\n            // PIANO ----------------------------\n            piano: {\n                masterVolume: 0.45,\n                masterAttackEnvelope: [\n                    { t: 1, vol: 0.71 },\n                    { t: 40, vol: 0.79 },\n                    { t: 82, vol: 0.64 },\n                    { t: 147, vol: 0.29 },\n                    { t: 260, vol: 0.15 },\n                    { t: 417, vol: 0.05 },\n                    { t: 589, vol: 0 }\n                ],\n                eq: [\n                    { frequency: 200, Q: 0.7, gain: 6 },\n                    { frequency: 450, gain: 6 },\n                    { frequency: 1300, gain: 2 },\n                    { frequency: 2600, Q: 0.8, gain: 8 },\n                    { frequency: 3500, Q: 0.8, gain: 6 },\n                    { frequency: 6200, Q: 0.8, gain: 10 },\n                    { frequency: 8000, gain: -23 },\n                    { frequency: 10000, Q: 0.4, gain: -12 }\n                ],\n                oscillators: [{\n                        type: 'pulse',\n                        volume: 0.5,\n                        pulseWidth: 0.55,\n                        volumePitchTrackingMultiplier: 0.1,\n                        lowpass: {\n                            frequency: 4.5,\n                            frequencyPitchTrackingMultiplier: 900,\n                            Q: -2\n                        },\n                        highpass: { frequency: 270 },\n                        attackEnvelope: [{ t: 1, vol: 1 }],\n                        releaseEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 282, vol: 0.64 },\n                            { t: 597, vol: 0 }\n                        ]\n                    }, {\n                        type: 'whitenoise',\n                        volume: 0.8,\n                        lowpass: { frequency: 400 },\n                        highpass: { frequency: 300 },\n                        attackEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 19, vol: 0 }\n                        ]\n                    }]\n            },\n            // PLUCKED --------------------------\n            plucked: {\n                masterVolume: 0.5,\n                midiInstrument: 25,\n                masterAttackEnvelope: [\n                    { t: 1, vol: 0.71 },\n                    { t: 4, vol: 0.71 },\n                    { t: 31, vol: 0.4 },\n                    { t: 109, vol: 0.12 },\n                    { t: 234, vol: 0.04 },\n                    { t: 442, vol: 0 }\n                ],\n                eq: [\n                    { frequency: 800, gain: -8 },\n                    { frequency: 1400, Q: 4, gain: 4 },\n                    { frequency: 1600, gain: -14 },\n                    { frequency: 2200, gain: -8 },\n                    { frequency: 3600, gain: -2 },\n                    { frequency: 6400, Q: 2, gain: -6 }\n                ],\n                oscillators: [{\n                        type: 'sawtooth',\n                        volume: 0.9,\n                        volumePitchTrackingMultiplier: 0.6,\n                        highpass: { frequency: 100 },\n                        lowpass: { frequency: 8000 },\n                        releaseEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 315, vol: 0.56 },\n                            { t: 550, vol: 0 }\n                        ]\n                    }]\n            },\n            // FLUTE ----------------------------\n            flute: {\n                masterVolume: 1.1,\n                midiInstrument: 74,\n                noteGlideDuration: 30,\n                masterAttackEnvelope: [\n                    { t: 0, vol: 0 },\n                    { t: 29, vol: 1 },\n                    { t: 76, vol: 0.48 },\n                    { t: 600, vol: 0.36 }\n                ],\n                masterReleaseEnvelope: [\n                    { t: 1, vol: 0.36 },\n                    { t: 24, vol: 0.15 },\n                    { t: 119, vol: 0 }\n                ],\n                eq: [\n                    { frequency: 150, Q: 0.6, gain: -10 },\n                    { frequency: 500, gain: 4 },\n                    { frequency: 1100, gain: -4 },\n                    { frequency: 2200, gain: -14 },\n                    { frequency: 5000, gain: 8 },\n                    { frequency: 6400, gain: 10 },\n                    { frequency: 8000, gain: 12 },\n                    { frequency: 10800, gain: 8 }\n                ],\n                oscillators: [{\n                        type: 'triangle',\n                        volume: 1,\n                        volumePitchTrackingMultiplier: 0.4,\n                        lowpass: {\n                            frequency: 12,\n                            frequencyPitchTrackingMultiplier: 100\n                        },\n                        highpass: {\n                            frequency: 200\n                        }\n                    }, {\n                        type: 'sine',\n                        fixedFrequency: 5,\n                        volume: 0.2,\n                        vmOscillator: 0,\n                        attackEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 48, vol: 0 },\n                            { t: 225, vol: 0.05 },\n                            { t: 600, vol: 0.77 }\n                        ]\n                    }, {\n                        type: 'whitenoise',\n                        volume: 0.13,\n                        lowpass: {\n                            frequency: 9000,\n                            Q: 3\n                        },\n                        highpass: {\n                            frequency: 6000,\n                            Q: 3\n                        },\n                        vmOscillator: 0,\n                        attackEnvelope: [\n                            { t: 0, vol: 0 },\n                            { t: 26, vol: 1 },\n                            { t: 93, vol: 0.8 }\n                        ]\n                    }]\n            },\n            // LEAD -----------------------------\n            lead: {\n                masterVolume: 1,\n                midiInstrument: 20,\n                masterAttackEnvelope: [\n                    { t: 1, vol: 0.81 },\n                    { t: 98, vol: 0.5 },\n                    { t: 201, vol: 0.18 },\n                    { t: 377, vol: 0.04 },\n                    { t: 586, vol: 0 },\n                    { t: 586, vol: 0 }\n                ],\n                eq: [\n                    { frequency: 200, gain: -6 },\n                    { frequency: 400, gain: -8 },\n                    { frequency: 800, Q: 0.5, gain: -10 },\n                    { frequency: 1200, gain: 4 },\n                    { frequency: 3600, gain: -4 },\n                    { frequency: 4200, gain: -12 },\n                    { frequency: 7400, gain: -14 },\n                    { frequency: 10000, gain: 2 }\n                ],\n                oscillators: [{\n                        type: 'triangle',\n                        volume: 1.1,\n                        volumePitchTrackingMultiplier: 0.6,\n                        lowpass: { frequency: 5000 },\n                        highpass: { frequency: 100 }\n                    }, {\n                        type: 'sawtooth',\n                        volume: 0.4,\n                        lowpass: { frequency: 7000 },\n                        highpass: { frequency: 800, Q: 6 },\n                        releaseEnvelope: [\n                            { t: 0, vol: 0.99 },\n                            { t: 200, vol: 0.83 },\n                            { t: 495, vol: 0 }\n                        ]\n                    }]\n            },\n            // VIBRAPHONE -----------------------\n            vibraphone: {\n                masterVolume: 1,\n                midiInstrument: 12,\n                masterAttackEnvelope: [\n                    { t: 1, vol: 0 },\n                    { t: 10, vol: 0.63 },\n                    { t: 82, vol: 0.64 },\n                    { t: 149, vol: 0.26 },\n                    { t: 600, vol: 0 }\n                ],\n                eq: [\n                    { frequency: 200, Q: 0.8, gain: -12 },\n                    { frequency: 400, gain: -4 },\n                    { frequency: 1600, Q: 0.5, gain: 6 },\n                    { frequency: 2200, Q: 0.5, gain: 6 },\n                    { frequency: 6400, gain: 4 },\n                    { frequency: 12800, gain: 4 }\n                ],\n                oscillators: [{\n                        type: 'sine',\n                        volume: 1.5,\n                        volumePitchTrackingMultiplier: 0.0000001,\n                        attackEnvelope: [{ t: 1, vol: 1 }],\n                        releaseEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 146, vol: 0.39 },\n                            { t: 597, vol: 0 }\n                        ]\n                    }, {\n                        type: 'whitenoise',\n                        volume: 0.03,\n                        volumePitchTrackingMultiplier: 0.0001,\n                        lowpass: {\n                            frequency: 900\n                        },\n                        highpass: {\n                            frequency: 800\n                        },\n                        attackEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 9, vol: 0 }\n                        ]\n                    }, {\n                        type: 'sine',\n                        freqMultiplier: 4,\n                        volume: 0.15,\n                        volumePitchTrackingMultiplier: 0.0001\n                    }, {\n                        type: 'sine',\n                        fixedFrequency: 3,\n                        volume: 6,\n                        fmOscillator: 0,\n                        releaseEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 190, vol: 0.41 },\n                            { t: 600, vol: 0 }\n                        ]\n                    }, {\n                        type: 'sine',\n                        fixedFrequency: 6,\n                        volume: 3,\n                        fmOscillator: 2\n                    }, {\n                        type: 'sine',\n                        freqMultiplier: 9,\n                        volume: 0.0005,\n                        volumePitchTrackingMultiplier: 0.0001,\n                        releaseEnvelope: [\n                            { t: 1, vol: 0.97 },\n                            { t: 530, vol: 0 }\n                        ]\n                    }]\n            },\n            // SAXOPHONE ------------------------\n            saxophone: {\n                masterVolume: 1,\n                midiInstrument: 67,\n                noteGlideDuration: 10,\n                masterAttackEnvelope: [\n                    { t: 1, vol: 0.57 },\n                    { t: 35, vol: 1 },\n                    { t: 87, vol: 0.84 },\n                    { t: 111, vol: 0.6 },\n                    { t: 296, vol: 0.49 },\n                    { t: 600, vol: 0.58 }\n                ],\n                masterReleaseEnvelope: [\n                    { t: 1, vol: 0.58 },\n                    { t: 47, vol: 0.16 },\n                    { t: 119, vol: 0 }\n                ],\n                eq: [\n                    { frequency: 200, gain: -2 },\n                    { frequency: 600, gain: 2 },\n                    { frequency: 800, gain: -10 },\n                    { frequency: 1100, gain: -2 },\n                    { frequency: 2200, gain: -2 },\n                    { frequency: 3500, gain: 10 },\n                    { frequency: 12800, gain: 4 }\n                ],\n                oscillators: [{\n                        type: 'sawtooth',\n                        volume: 0.45,\n                        volumePitchTrackingMultiplier: 0.06,\n                        lowpass: {\n                            frequency: 18,\n                            frequencyPitchTrackingMultiplier: 200\n                        },\n                        highpass: {\n                            frequency: 300\n                        }\n                    }, {\n                        type: 'whitenoise',\n                        fixedFrequency: 1,\n                        volume: 0.4,\n                        highpass: {\n                            frequency: 7000\n                        },\n                        vmOscillator: 0,\n                        attackEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 51, vol: 1 },\n                            { t: 86, vol: 0.84 },\n                            { t: 500, vol: 0.78 }\n                        ]\n                    }, {\n                        type: 'sine',\n                        fixedFrequency: 4,\n                        volume: 2,\n                        fmOscillator: 0,\n                        attackEnvelope: [\n                            { t: 0, vol: 0 },\n                            { t: 15, vol: 0.94 },\n                            { t: 79, vol: 1 },\n                            { t: 172, vol: 0.47 },\n                            { t: 500, vol: 0.26 }\n                        ]\n                    }, {\n                        type: 'sine',\n                        fixedFrequency: 7,\n                        volume: 6,\n                        fmOscillator: 0,\n                        attackEnvelope: [\n                            { t: 0, vol: 0 },\n                            { t: 25, vol: 0.99 },\n                            { t: 85, vol: 0 },\n                            { t: 85, vol: 0 },\n                            { t: 387, vol: 0.02 },\n                            { t: 511, vol: 0.43 },\n                            { t: 600, vol: 0 }\n                        ]\n                    }]\n            },\n            // TRUMPET ------------------------\n            trumpet: {\n                masterVolume: 0.3,\n                midiInstrument: 57,\n                noteGlideDuration: 40,\n                masterAttackEnvelope: [\n                    { t: 1, vol: 0 },\n                    { t: 17, vol: 1 },\n                    { t: 42, vol: 0.85 },\n                    { t: 76, vol: 1 },\n                    { t: 202, vol: 0.65 },\n                    { t: 226, vol: 0.86 },\n                    { t: 282, vol: 0.63 }\n                ],\n                masterReleaseEnvelope: [\n                    { t: 1, vol: 0.62 },\n                    { t: 34, vol: 0.14 },\n                    { t: 63, vol: 0.21 },\n                    { t: 96, vol: 0 }\n                ],\n                eq: [\n                    { frequency: 200, Q: 0.6, gain: 10 },\n                    { frequency: 600, Q: 0.5, gain: 6 },\n                    { frequency: 1500, Q: 0.7, gain: 14 },\n                    { frequency: 3200, Q: 2, gain: 8 },\n                    { frequency: 3800, Q: 0.8, gain: 10 },\n                    { frequency: 6200, gain: 12 },\n                    { frequency: 8400, gain: -20 },\n                    { frequency: 12800, Q: 0.5, gain: -18 }\n                ],\n                oscillators: [{\n                        type: 'sawtooth',\n                        volume: 0.15,\n                        pulseWidth: 0.5,\n                        volumePitchTrackingMultiplier: 0.5,\n                        lowpass: { frequency: 1900, Q: 3 }\n                    }, {\n                        type: 'sine',\n                        fixedFrequency: 6,\n                        volume: 0.2,\n                        vmOscillator: 0,\n                        attackEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 102, vol: 0.13 },\n                            { t: 556, vol: 0.24 }\n                        ]\n                    }, {\n                        type: 'whitenoise',\n                        volume: 0.45,\n                        highpass: { frequency: 7000, Q: 9 },\n                        vmOscillator: 0,\n                        attackEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 89, vol: 0.51 },\n                            { t: 577, vol: 0.29 }\n                        ]\n                    }, {\n                        type: 'sine',\n                        fixedFrequency: 5.7,\n                        volume: 20,\n                        fmOscillator: 0,\n                        attackEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 89, vol: 1 },\n                            { t: 137, vol: 0.46 },\n                            { t: 283, vol: 0.15 },\n                            { t: 600, vol: 0.28 }\n                        ]\n                    }]\n            },\n            // SAWSYNTH --------------------------\n            sawsynth: {\n                masterVolume: 0.3,\n                midiInstrument: 51,\n                noteGlideDuration: 40,\n                masterAttackEnvelope: [\n                    { t: 0, vol: 0.6 },\n                    { t: 9, vol: 1 },\n                    { t: 102, vol: 0.48 }\n                ],\n                eq: [{ frequency: 200, gain: -6 }],\n                oscillators: [{\n                        type: 'sawtooth',\n                        volume: 0.4,\n                        volumePitchTrackingMultiplier: 0.3\n                    }, {\n                        type: 'sawtooth',\n                        volume: 0.4,\n                        detune: 11,\n                        volumePitchTrackingMultiplier: 0.3\n                    }, {\n                        type: 'sawtooth',\n                        volume: 0.4,\n                        detune: -11,\n                        volumePitchTrackingMultiplier: 0.3\n                    }]\n            },\n            // BASIC1 ---------------------------\n            basic1: {\n                masterVolume: 1,\n                noteGlideDuration: 0,\n                masterReleaseEnvelope: [\n                    { t: 1, vol: 0.36 },\n                    { t: 24, vol: 0.15 },\n                    { t: 119, vol: 0 }\n                ],\n                eq: [\n                    { frequency: 150, Q: 0.6, gain: -12 },\n                    { frequency: 1100, gain: -2 },\n                    { frequency: 2200, gain: -16 },\n                    { frequency: 5000, gain: 8 },\n                    { frequency: 6400, gain: 10 },\n                    { frequency: 8000, gain: 12 },\n                    { frequency: 10800, gain: 8 }\n                ],\n                oscillators: [{\n                        type: 'triangle',\n                        volume: 1,\n                        volumePitchTrackingMultiplier: 0.05,\n                        lowpass: { frequency: 17, frequencyPitchTrackingMultiplier: 100 },\n                        highpass: { frequency: 200 }\n                    }, {\n                        type: 'whitenoise',\n                        volume: 0.04,\n                        lowpass: { frequency: 9000, Q: 3 },\n                        highpass: { frequency: 6000, Q: 3 },\n                        vmOscillator: 0,\n                        attackEnvelope: [\n                            { t: 0, vol: 0 },\n                            { t: 26, vol: 1 },\n                            { t: 71, vol: 0.73 }\n                        ]\n                    }]\n            },\n            // BASIC2 ---------------------------\n            basic2: {\n                masterVolume: 0.3,\n                eq: [\n                    { frequency: 200, Q: 0.7, gain: 6 },\n                    { frequency: 450, gain: 2 },\n                    { frequency: 1300, gain: -2 },\n                    { frequency: 2600, Q: 0.8, gain: 6 },\n                    { frequency: 3500, Q: 0.8, gain: 6 },\n                    { frequency: 6200, Q: 0.8, gain: 10 },\n                    { frequency: 8000, gain: -18 },\n                    { frequency: 10000, Q: 0.4, gain: -12 }\n                ],\n                oscillators: [{\n                        type: 'pulse',\n                        volume: 0.4,\n                        pulseWidth: 0.55,\n                        volumePitchTrackingMultiplier: 0.1,\n                        lowpass: {\n                            frequency: 4.5,\n                            frequencyPitchTrackingMultiplier: 900,\n                            Q: -2\n                        },\n                        highpass: { frequency: 270 }\n                    }]\n            },\n            // CHORD -------------------------------\n            chord: {\n                masterVolume: 1,\n                masterAttackEnvelope: [\n                    { t: 1, vol: 0.79 },\n                    { t: 27, vol: 0.86 },\n                    { t: 62, vol: 0.81 },\n                    { t: 150, vol: 0.35 },\n                    { t: 408, vol: 0.04 },\n                    { t: 600, vol: 0 }\n                ],\n                eq: [\n                    { frequency: 200, gain: -8 },\n                    { frequency: 600, Q: 2, gain: 4 },\n                    { frequency: 800, gain: -10 },\n                    { frequency: 1600, gain: -2 },\n                    { frequency: 2200, gain: -6 },\n                    { frequency: 3600, Q: 0.7, gain: -2 },\n                    { frequency: 6400, gain: 6 },\n                    { frequency: 12800, gain: 6 }\n                ],\n                oscillators: [{\n                        type: 'triangle',\n                        volume: 1.1,\n                        volumePitchTrackingMultiplier: 0.05,\n                        lowpass: { frequency: 8000 },\n                        highpass: { frequency: 100 },\n                        releaseEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 315, vol: 0.56 },\n                            { t: 540, vol: 0 }\n                        ]\n                    }, {\n                        type: 'triangle',\n                        freqMultiplier: 1.17,\n                        volume: 0.4,\n                        volumePitchTrackingMultiplier: 0.07,\n                        lowpass: { frequency: 5000 },\n                        highpass: { frequency: 100 },\n                        releaseEnvelope: [\n                            { t: 0, vol: 1 },\n                            { t: 476, vol: 0 }\n                        ]\n                    }, {\n                        type: 'triangle',\n                        freqMultiplier: 1.58333,\n                        volume: 0.7,\n                        volumePitchTrackingMultiplier: 0.02,\n                        highpass: { frequency: 200 },\n                        releaseEnvelope: [\n                            { t: 0, vol: 1 },\n                            { t: 422, vol: 0.56 },\n                            { t: 577, vol: 0 }\n                        ]\n                    }, {\n                        type: 'sine',\n                        fixedFrequency: 10,\n                        volume: 4,\n                        fmOscillator: 0,\n                        attackEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 157, vol: 0.65 }\n                        ]\n                    }, {\n                        type: 'sine',\n                        fixedFrequency: 5,\n                        volume: 0.3,\n                        vmOscillator: 2,\n                        attackEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 155, vol: 0.91 },\n                            { t: 289, vol: 0.78 }\n                        ]\n                    }]\n            },\n            // WOBBLE ---------------------------\n            wobble: {\n                masterVolume: 0.9,\n                masterReleaseEnvelope: [\n                    { t: 1, vol: 0.36 },\n                    { t: 24, vol: 0.15 },\n                    { t: 119, vol: 0 }\n                ],\n                eq: [\n                    { frequency: 150, Q: 0.6, gain: -12 },\n                    { frequency: 1100, gain: -2 },\n                    { frequency: 2200, gain: -16 },\n                    { frequency: 5000, gain: 8 },\n                    { frequency: 6400, gain: 10 },\n                    { frequency: 8000, gain: 12 },\n                    { frequency: 10800, gain: 8 }\n                ],\n                oscillators: [{\n                        type: 'triangle',\n                        volume: 0.9,\n                        volumePitchTrackingMultiplier: 0.1,\n                        lowpass: { frequency: 17, frequencyPitchTrackingMultiplier: 100 },\n                        highpass: { frequency: 200 }\n                    }, {\n                        type: 'whitenoise',\n                        volume: 0.04,\n                        lowpass: { frequency: 9000, Q: 3 },\n                        highpass: { frequency: 6000, Q: 3 },\n                        vmOscillator: 0,\n                        attackEnvelope: [\n                            { t: 0, vol: 0 },\n                            { t: 26, vol: 1 },\n                            { t: 71, vol: 0.73 }\n                        ]\n                    }, {\n                        type: 'sine',\n                        freqMultiplier: 0.011,\n                        volume: 30,\n                        fmOscillator: 0\n                    }]\n            },\n            // SINE -----------------------------\n            sine: {\n                masterVolume: 1,\n                oscillators: [{\n                        type: 'sine',\n                        volumePitchTrackingMultiplier: 0.07\n                    }]\n            },\n            // SINE GLIDE -----------------------\n            sineGlide: {\n                masterVolume: 1,\n                noteGlideDuration: 100,\n                oscillators: [{\n                        type: 'sine',\n                        volumePitchTrackingMultiplier: 0.07\n                    }]\n            },\n            // TRIANGLE -------------------------\n            triangle: {\n                masterVolume: 0.5,\n                oscillators: [{\n                        type: 'triangle',\n                        volume: 1,\n                        volumePitchTrackingMultiplier: 0.07\n                    }]\n            },\n            // SAWTOOTH -------------------------\n            sawtooth: {\n                masterVolume: 0.25,\n                midiInstrument: 82,\n                oscillators: [{\n                        type: 'sawtooth',\n                        volume: 0.3,\n                        volumePitchTrackingMultiplier: 0.07\n                    }]\n            },\n            // SQUARE ---------------------------\n            square: {\n                masterVolume: 0.3,\n                midiInstrument: 81,\n                oscillators: [{\n                        type: 'square',\n                        volume: 0.2,\n                        volumePitchTrackingMultiplier: 0.07\n                    }]\n            },\n            // PERCUSSION INSTRUMENTS ----------\n            chop: {\n                masterVolume: 1,\n                midiInstrument: 116,\n                masterAttackEnvelope: [{ t: 1, vol: 1 }, { t: 44, vol: 0 }],\n                oscillators: [{\n                        type: 'whitenoise',\n                        volume: 1,\n                        lowpass: { frequency: 600 },\n                        highpass: { frequency: 200 }\n                    }]\n            },\n            shaker: {\n                masterVolume: 0.4,\n                midiInstrument: 116,\n                masterAttackEnvelope: [{ t: 1, vol: 1 }, { t: 44, vol: 0 }],\n                oscillators: [{\n                        type: 'whitenoise',\n                        volume: 1,\n                        lowpass: { frequency: 6500 },\n                        highpass: { frequency: 5000 }\n                    }]\n            },\n            step: {\n                masterVolume: 1,\n                midiInstrument: 116,\n                masterAttackEnvelope: [{ t: 1, vol: 1 }, { t: 44, vol: 0 }],\n                eq: [\n                    { frequency: 200, gain: -1 },\n                    { frequency: 400, gain: -14 },\n                    { frequency: 800, gain: 8 },\n                    { frequency: 1000, Q: 5, gain: -24 },\n                    { frequency: 1600, gain: 8 },\n                    { frequency: 2200, gain: -10 },\n                    { frequency: 5400, gain: 4 },\n                    { frequency: 12800, gain: -36 }\n                ],\n                oscillators: [{\n                        type: 'whitenoise',\n                        volume: 1.5,\n                        lowpass: { frequency: 300 },\n                        highpass: { frequency: 100, Q: 6 }\n                    }]\n            },\n            kick: {\n                masterVolume: 0.55,\n                masterAttackEnvelope: [\n                    { t: 1, vol: 0.8 },\n                    { t: 15, vol: 1 },\n                    { t: 45, vol: 0.35 },\n                    { t: 121, vol: 0.11 },\n                    { t: 242, vol: 0 }\n                ],\n                eq: [\n                    { frequency: 50, gain: 6 },\n                    { frequency: 400, gain: -18 },\n                    { frequency: 1600, gain: 18 }\n                ],\n                oscillators: [{\n                        type: 'triangle',\n                        fixedFrequency: 90,\n                        volume: 1,\n                        lowpass: { frequency: 300 },\n                        attackEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 6, vol: 1 },\n                            { t: 45, vol: 0.01 }\n                        ]\n                    }, {\n                        type: 'whitenoise',\n                        volume: 0.4,\n                        lowpass: { frequency: 200 },\n                        attackEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 30, vol: 0 }\n                        ]\n                    }, {\n                        type: 'triangle',\n                        freqMultiplier: 0.1,\n                        volume: 1,\n                        lowpass: { frequency: 200 }\n                    }]\n            },\n            shortnote: {\n                masterVolume: 0.8,\n                midiInstrument: 116,\n                masterAttackEnvelope: [\n                    { t: 1, vol: 1 },\n                    { t: 15, vol: 0 }\n                ],\n                eq: [\n                    { frequency: 400, gain: -4 },\n                    { frequency: 800, gain: -12 },\n                    { frequency: 2400, gain: 4 },\n                    { frequency: 7200, gain: -20 },\n                    { frequency: 1000, Q: 5, gain: -12 },\n                    { frequency: 5400, gain: -32 },\n                    { frequency: 12800, gain: -14 }\n                ],\n                oscillators: [{\n                        type: 'sawtooth',\n                        volume: 0.6,\n                        lowpass: { frequency: 1000 }\n                    }, {\n                        type: 'whitenoise',\n                        volume: 0.2,\n                        lowpass: { frequency: 10000 },\n                        highpass: { frequency: 7000 },\n                        attackEnvelope: [\n                            { t: 1, vol: 1 },\n                            { t: 10, vol: 0 }\n                        ]\n                    }, {\n                        type: 'whitenoise',\n                        volume: 1.3,\n                        lowpass: { frequency: 700, Q: 4 },\n                        highpass: { frequency: 250 }\n                    }]\n            },\n            // NOISE ----------------------------\n            noise: {\n                masterVolume: 0.3,\n                midiInstrument: 122,\n                oscillators: [{\n                        type: 'whitenoise'\n                    }]\n            },\n            // FILTERED NOISE -------------------\n            filteredNoise: {\n                masterVolume: 0.3,\n                midiInstrument: 122,\n                eq: [\n                    { frequency: 1600, gain: -8 },\n                    { frequency: 2200, gain: -4 }\n                ],\n                oscillators: [{\n                        type: 'whitenoise',\n                        lowpass: {\n                            frequency: 5,\n                            frequencyPitchTrackingMultiplier: 1300,\n                            Q: 6\n                        },\n                        highpass: {\n                            frequency: 5,\n                            frequencyPitchTrackingMultiplier: 300,\n                            Q: 6\n                        }\n                    }]\n            },\n            // WIND -------------------------------\n            wind: {\n                masterVolume: 0.75,\n                midiInstrument: 122,\n                noteGlideDuration: 150,\n                masterReleaseEnvelope: [\n                    { t: 0, vol: 1 },\n                    { t: 124, vol: 0.24 },\n                    { t: 281, vol: 0 }\n                ],\n                oscillators: [{\n                        type: 'whitenoise',\n                        volume: 1,\n                        lowpass: {\n                            frequency: 100,\n                            frequencyPitchTrackingMultiplier: 6,\n                            Q: 23\n                        },\n                        highpass: {\n                            frequency: 170,\n                            frequencyPitchTrackingMultiplier: 6\n                        }\n                    }, {\n                        type: 'sine',\n                        freqMultiplier: 0.016,\n                        volume: 1000,\n                        fmOscillator: 0\n                    }]\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API declarations\n         *\n         * */\n        /**\n         * @typedef {\"piano\"|\"plucked\"|\"flute\"|\"lead\"|\"vibraphone\"|\"saxophone\"|\"trumpet\"|\"sawsynth\"|\"basic1\"|\"basic2\"|\"chord\"|\"wobble\"|\"sine\"|\"sineGlide\"|\"triangle\"|\"sawtooth\"|\"square\"|\"chop\"|\"shaker\"|\"step\"|\"kick\"|\"shortnote\"|\"noise\"|\"filteredNoise\"|\"wind\"} Highcharts.SonificationSynthPreset\n         * @requires modules/sonification\n         */\n        (''); // Keep above doclets in JS file\n\n        return InstrumentPresets;\n    });\n    _registerModule(_modules, 'Extensions/Sonification/SonificationInstrument.js', [_modules['Extensions/Sonification/SynthPatch.js'], _modules['Extensions/Sonification/InstrumentPresets.js'], _modules['Core/Utilities.js']], function (SynthPatch, InstrumentPresets, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Øystein Moseng\n         *\n         *  Class representing an Instrument with mappable parameters for sonification.\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined, extend } = U;\n        /**\n         * The SonificationInstrument class. This class represents an instrument with\n         * mapping capabilities. The instrument wraps a SynthPatch object, and extends\n         * it with functionality such as panning, tremolo, and global low/highpass\n         * filters.\n         *\n         * @sample highcharts/sonification/instrument-raw\n         *         Using SonificationInstrument directly, with no chart.\n         *\n         * @requires modules/sonification\n         *\n         * @class\n         * @name Highcharts.SonificationInstrument\n         *\n         * @param {AudioContext} audioContext\n         *        The AudioContext to use.\n         * @param {AudioNode} outputNode\n         *        The destination node to connect to.\n         * @param {Highcharts.SonificationInstrumentOptionsObject} options\n         *        Configuration for the instrument.\n         */\n        class SonificationInstrument {\n            constructor(audioContext, outputNode, options) {\n                this.audioContext = audioContext;\n                this.curParams = {};\n                this.midiTrackName = options.midiTrackName;\n                this.masterVolNode = new GainNode(audioContext);\n                this.masterVolNode.connect(outputNode);\n                this.volumeNode = new GainNode(audioContext);\n                this.createNodesFromCapabilities(extend({\n                    pan: true\n                }, options.capabilities || {}));\n                this.connectCapabilityNodes(this.volumeNode, this.masterVolNode);\n                this.synthPatch = new SynthPatch(audioContext, typeof options.synthPatch === 'string' ?\n                    InstrumentPresets[options.synthPatch] : options.synthPatch);\n                this.midiInstrument = this.synthPatch.midiInstrument || 1;\n                this.synthPatch.startSilently();\n                this.synthPatch.connect(this.volumeNode);\n            }\n            /**\n             * Set the overall volume.\n             * @function Highcharts.SonificationInstrument#setMasterVolume\n             * @param {number} volume The volume to set, from 0 to 1.\n             */\n            setMasterVolume(volume) {\n                this.masterVolNode.gain.setTargetAtTime(volume, 0, SonificationInstrument.rampTime);\n            }\n            /**\n             * Schedule an instrument event at a given time offset, whether it is\n             * playing a note or changing the parameters of the instrument.\n             * @function Highcharts.SonificationInstrument#scheduleEventAtTime\n             * @param {number} time Time is given in seconds, where 0 is now.\n             * @param {Highcharts.SonificationInstrumentScheduledEventOptionsObject} params\n             * Parameters for the instrument event.\n             */\n            scheduleEventAtTime(time, params) {\n                const mergedParams = extend(this.curParams, params), freq = defined(params.frequency) ?\n                    params.frequency : defined(params.note) ?\n                    SonificationInstrument.musicalNoteToFrequency(params.note) :\n                    220;\n                if (defined(freq)) {\n                    this.synthPatch.playFreqAtTime(time, freq, mergedParams.noteDuration);\n                }\n                if (defined(mergedParams.tremoloDepth) ||\n                    defined(mergedParams.tremoloSpeed)) {\n                    this.setTremoloAtTime(time, mergedParams.tremoloDepth, mergedParams.tremoloSpeed);\n                }\n                if (defined(mergedParams.pan)) {\n                    this.setPanAtTime(time, mergedParams.pan);\n                }\n                if (defined(mergedParams.volume)) {\n                    this.setVolumeAtTime(time, mergedParams.volume);\n                }\n                if (defined(mergedParams.lowpassFreq) ||\n                    defined(mergedParams.lowpassResonance)) {\n                    this.setFilterAtTime('lowpass', time, mergedParams.lowpassFreq, mergedParams.lowpassResonance);\n                }\n                if (defined(mergedParams.highpassFreq) ||\n                    defined(mergedParams.highpassResonance)) {\n                    this.setFilterAtTime('highpass', time, mergedParams.highpassFreq, mergedParams.highpassResonance);\n                }\n            }\n            /**\n             * Schedule silencing the instrument at a given time offset.\n             * @function Highcharts.SonificationInstrument#silenceAtTime\n             * @param {number} time Time is given in seconds, where 0 is now.\n             */\n            silenceAtTime(time) {\n                this.synthPatch.silenceAtTime(time);\n            }\n            /**\n             * Cancel currently playing sounds and any scheduled actions.\n             * @function Highcharts.SonificationInstrument#cancel\n             */\n            cancel() {\n                this.synthPatch.mute();\n                [\n                    this.tremoloDepth && this.tremoloDepth.gain,\n                    this.tremoloOsc && this.tremoloOsc.frequency,\n                    this.lowpassNode && this.lowpassNode.frequency,\n                    this.lowpassNode && this.lowpassNode.Q,\n                    this.highpassNode && this.highpassNode.frequency,\n                    this.highpassNode && this.highpassNode.Q,\n                    this.panNode && this.panNode.pan,\n                    this.volumeNode.gain\n                ].forEach((p) => (p && p.cancelScheduledValues(0)));\n            }\n            /**\n             * Stop instrument and destroy it, cleaning up used resources.\n             * @function Highcharts.SonificationInstrument#destroy\n             */\n            destroy() {\n                this.cancel();\n                this.synthPatch.stop();\n                if (this.tremoloOsc) {\n                    this.tremoloOsc.stop();\n                }\n                [\n                    this.tremoloDepth, this.tremoloOsc, this.lowpassNode,\n                    this.highpassNode, this.panNode, this.volumeNode,\n                    this.masterVolNode\n                ].forEach(((n) => n && n.disconnect()));\n            }\n            /**\n             * Schedule a pan value at a given time offset.\n             * @private\n             */\n            setPanAtTime(time, pan) {\n                if (this.panNode) {\n                    this.panNode.pan.setTargetAtTime(pan, time + this.audioContext.currentTime, SonificationInstrument.rampTime);\n                }\n            }\n            /**\n             * Schedule a filter configuration at a given time offset.\n             * @private\n             */\n            setFilterAtTime(filter, time, frequency, resonance) {\n                const node = this[filter + 'Node'], audioTime = this.audioContext.currentTime + time;\n                if (node) {\n                    if (defined(resonance)) {\n                        node.Q.setTargetAtTime(resonance, audioTime, SonificationInstrument.rampTime);\n                    }\n                    if (defined(frequency)) {\n                        node.frequency.setTargetAtTime(frequency, audioTime, SonificationInstrument.rampTime);\n                    }\n                }\n            }\n            /**\n             * Schedule a volume value at a given time offset.\n             * @private\n             */\n            setVolumeAtTime(time, volume) {\n                if (this.volumeNode) {\n                    this.volumeNode.gain.setTargetAtTime(volume, time + this.audioContext.currentTime, SonificationInstrument.rampTime);\n                }\n            }\n            /**\n             * Schedule a tremolo configuration at a given time offset.\n             * @private\n             */\n            setTremoloAtTime(time, depth, speed) {\n                const audioTime = this.audioContext.currentTime + time;\n                if (this.tremoloDepth && defined(depth)) {\n                    this.tremoloDepth.gain.setTargetAtTime(depth, audioTime, SonificationInstrument.rampTime);\n                }\n                if (this.tremoloOsc && defined(speed)) {\n                    this.tremoloOsc.frequency.setTargetAtTime(15 * speed, audioTime, SonificationInstrument.rampTime);\n                }\n            }\n            /**\n             * Create audio nodes according to instrument capabilities\n             * @private\n             */\n            createNodesFromCapabilities(capabilities) {\n                const ctx = this.audioContext;\n                if (capabilities.pan) {\n                    this.panNode = new StereoPannerNode(ctx);\n                }\n                if (capabilities.tremolo) {\n                    this.tremoloOsc = new OscillatorNode(ctx, {\n                        type: 'sine',\n                        frequency: 3\n                    });\n                    this.tremoloDepth = new GainNode(ctx);\n                    this.tremoloOsc.connect(this.tremoloDepth);\n                    this.tremoloDepth.connect(this.masterVolNode.gain);\n                    this.tremoloOsc.start();\n                }\n                if (capabilities.filters) {\n                    this.lowpassNode = new BiquadFilterNode(ctx, {\n                        type: 'lowpass',\n                        frequency: 20000\n                    });\n                    this.highpassNode = new BiquadFilterNode(ctx, {\n                        type: 'highpass',\n                        frequency: 0\n                    });\n                }\n            }\n            /**\n             * Connect audio node chain from output down to input, depending on which\n             * nodes exist.\n             * @private\n             */\n            connectCapabilityNodes(input, output) {\n                [\n                    this.panNode,\n                    this.lowpassNode,\n                    this.highpassNode,\n                    input\n                ].reduce((prev, cur) => (cur ?\n                    (cur.connect(prev), cur) :\n                    prev), output);\n            }\n            /**\n             * Get number of notes from C0 from a string like \"F#4\"\n             * @static\n             * @private\n             */\n            static noteStringToC0Distance(note) {\n                const match = note.match(/^([a-g][#b]?)([0-8])$/i), semitone = match ? match[1] : 'a', wholetone = semitone[0].toLowerCase(), accidental = semitone[1], octave = match ? parseInt(match[2], 10) : 4, accidentalOffset = accidental === '#' ?\n                    1 : accidental === 'b' ? -1 : 0;\n                return ({\n                    c: 0, d: 2, e: 4, f: 5, g: 7, a: 9, b: 11\n                }[wholetone] || 0) + accidentalOffset + octave * 12;\n            }\n            /**\n             * Convert a note value to a frequency.\n             * @static\n             * @function Highcharts.SonificationInstrument#musicalNoteToFrequency\n             * @param {string|number} note\n             * Note to convert. Can be a string 'c0' to 'b8' or a number of semitones\n             * from c0.\n             * @return {number} The converted frequency\n             */\n            static musicalNoteToFrequency(note) {\n                const notesFromC0 = typeof note === 'string' ?\n                    this.noteStringToC0Distance(note) : note;\n                return 16.3516 * Math.pow(2, Math.min(notesFromC0, 107) / 12);\n            }\n        }\n        SonificationInstrument.rampTime = SynthPatch.stopRampTime / 4;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API definitions\n         *\n         * */\n        /**\n         * Capabilities configuration for a SonificationInstrument.\n         * @requires modules/sonification\n         * @interface Highcharts.SonificationInstrumentCapabilitiesOptionsObject\n         */ /**\n        * Whether or not instrument should be able to pan. Defaults to `true`.\n        * @name Highcharts.SonificationInstrumentCapabilitiesOptionsObject#pan\n        * @type {boolean|undefined}\n        */ /**\n        * Whether or not instrument should be able to use tremolo effects. Defaults\n        * to `false`.\n        * @name Highcharts.SonificationInstrumentCapabilitiesOptionsObject#tremolo\n        * @type {boolean|undefined}\n        */ /**\n        * Whether or not instrument should be able to use filter effects. Defaults\n        * to `false`.\n        * @name Highcharts.SonificationInstrumentCapabilitiesOptionsObject#filters\n        * @type {boolean|undefined}\n        */\n        /**\n         * Configuration for a SonificationInstrument.\n         * @requires modules/sonification\n         * @interface Highcharts.SonificationInstrumentOptionsObject\n         */ /**\n        * The synth configuration for the instrument. Can be either a string,\n        * referencing the instrument presets, or an actual SynthPatch configuration.\n        * @name Highcharts.SonificationInstrumentOptionsObject#synthPatch\n        * @type {Highcharts.SonificationSynthPreset|Highcharts.SynthPatchOptionsObject}\n        * @sample highcharts/demo/all-instruments\n        *      All instrument presets\n        * @sample highcharts/sonification/custom-instrument\n        *      Custom instrument preset\n        */ /**\n        * Define additional capabilities for the instrument, such as panning, filters,\n        * and tremolo effects.\n        * @name Highcharts.SonificationInstrumentOptionsObject#capabilities\n        * @type {Highcharts.SonificationInstrumentCapabilitiesOptionsObject|undefined}\n        */ /**\n        * A track name to use for this instrument in MIDI export.\n        * @name Highcharts.SonificationInstrumentOptionsObject#midiTrackName\n        * @type {string|undefined}\n        */\n        /**\n         * Options for a scheduled event for a SonificationInstrument\n         * @requires modules/sonification\n         * @interface Highcharts.SonificationInstrumentScheduledEventOptionsObject\n         */ /**\n        * Number of semitones from c0, or a note string - such as \"c4\" or \"F#6\".\n        * @name Highcharts.SonificationInstrumentScheduledEventOptionsObject#note\n        * @type {number|string|undefined}\n        */ /**\n        * Note frequency in Hertz. Overrides note, if both are given.\n        * @name Highcharts.SonificationInstrumentScheduledEventOptionsObject#frequency\n        * @type {number|undefined}\n        */ /**\n        * Duration to play the note in milliseconds. If not given, the note keeps\n        * playing indefinitely\n        * @name Highcharts.SonificationInstrumentScheduledEventOptionsObject#noteDuration\n        * @type {number|undefined}\n        */ /**\n        * Depth/intensity of the tremolo effect - which is a periodic change in\n        * volume. From 0 to 1.\n        * @name Highcharts.SonificationInstrumentScheduledEventOptionsObject#tremoloDepth\n        * @type {number|undefined}\n        */ /**\n        * Speed of the tremolo effect, from 0 to 1.\n        * @name Highcharts.SonificationInstrumentScheduledEventOptionsObject#tremoloSpeed\n        * @type {number|undefined}\n        */ /**\n        * Stereo panning value, from -1 (left) to 1 (right).\n        * @name Highcharts.SonificationInstrumentScheduledEventOptionsObject#pan\n        * @type {number|undefined}\n        */ /**\n        * Volume of the instrument, from 0 to 1. Can be set independent of the\n        * master/overall volume.\n        * @name Highcharts.SonificationInstrumentScheduledEventOptionsObject#volume\n        * @type {number|undefined}\n        */ /**\n        * Frequency of the lowpass filter, in Hertz.\n        * @name Highcharts.SonificationInstrumentScheduledEventOptionsObject#lowpassFreq\n        * @type {number|undefined}\n        */ /**\n        * Resonance of the lowpass filter, in dB. Can be negative for a dip, or\n        * positive for a bump.\n        * @name Highcharts.SonificationInstrumentScheduledEventOptionsObject#lowpassResonance\n        * @type {number|undefined}\n        */ /**\n        * Frequency of the highpass filter, in Hertz.\n        * @name Highcharts.SonificationInstrumentScheduledEventOptionsObject#highpassFreq\n        * @type {number|undefined}\n        */ /**\n        * Resonance of the highpass filter, in dB. Can be negative for a dip, or\n        * positive for a bump.\n        * @name Highcharts.SonificationInstrumentScheduledEventOptionsObject#highpassResonance\n        * @type {number|undefined}\n        */\n        (''); // Keep above doclets in JS file\n\n        return SonificationInstrument;\n    });\n    _registerModule(_modules, 'Extensions/Sonification/SonificationSpeaker.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Øystein Moseng\n         *\n         *  Class representing a speech synthesis voice.\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { pick } = U;\n        /**\n         * The SonificationSpeaker class. This class represents an announcer using\n         * speech synthesis. It allows for scheduling speech announcements, as well\n         * as speech parameter changes - including rate, volume and pitch.\n         *\n         * @sample highcharts/demo/sonification-navigation\n         *         Demo using SonificationSpeaker directly for some announcements\n         *\n         * @requires modules/sonification\n         *\n         * @class\n         * @name Highcharts.SonificationSpeaker\n         *\n         * @param {Highcharts.SonificationSpeakerOptionsObject} options\n         *        Configuration for the speaker\n         */\n        class SonificationSpeaker {\n            constructor(options) {\n                this.options = options;\n                this.masterVolume = 1;\n                this.synthesis = window.speechSynthesis;\n                if (typeof speechSynthesis.onvoiceschanged !== 'undefined') {\n                    speechSynthesis.onvoiceschanged = this.setVoice.bind(this);\n                }\n                this.setVoice();\n                this.scheduled = [];\n            }\n            /**\n             * Say a message using the speaker voice. Interrupts other currently\n             * speaking announcements from this speaker.\n             * @function Highcharts.SonificationSpeaker#say\n             * @param {string} message The message to speak.\n             * @param {SonificationSpeakerOptionsObject} [options]\n             * Optionally override speaker configuration.\n             */\n            say(message, options) {\n                if (this.synthesis) {\n                    this.synthesis.cancel();\n                    const utterance = new SpeechSynthesisUtterance(message);\n                    if (this.voice) {\n                        utterance.voice = this.voice;\n                    }\n                    utterance.rate = options && options.rate || this.options.rate || 1;\n                    utterance.pitch = options && options.pitch ||\n                        this.options.pitch || 1;\n                    utterance.volume = pick(options && options.volume, this.options.volume, 1) * this.masterVolume;\n                    this.synthesis.speak(utterance);\n                }\n            }\n            /**\n             * Schedule a message using the speaker voice.\n             * @function Highcharts.SonificationSpeaker#sayAtTime\n             * @param {number} time\n             * The time offset to speak at, in milliseconds from now.\n             * @param {string} message\n             * The message to speak.\n             * @param {SonificationSpeakerOptionsObject} [options]\n             * Optionally override speaker configuration.\n             */\n            sayAtTime(time, message, options) {\n                this.scheduled.push(setTimeout(this.say.bind(this, message, options), time));\n            }\n            /**\n             * Clear scheduled announcements, and stop current speech.\n             * @function Highcharts.SonificationSpeaker#cancel\n             */\n            cancel() {\n                this.scheduled.forEach(clearTimeout);\n                this.scheduled = [];\n                this.synthesis.cancel();\n            }\n            /**\n             * Stop speech and release any used resources\n             * @private\n             */\n            destroy() {\n                // Ran on TimelineChannel.destroy\n                // (polymorphism with SonificationInstrument).\n                // Currently all we need to do is cancel.\n                this.cancel();\n            }\n            /**\n             * Set speaker overall/master volume modifier. This affects all\n             * announcements, and applies in addition to the individual announcement\n             * volume.\n             * @function Highcharts.SonificationSpeaker#setMasterVolume\n             * @param {number} vol Volume from 0 to 1.\n             */\n            setMasterVolume(vol) {\n                this.masterVolume = vol;\n            }\n            /**\n             * Set the active synthesis voice for the speaker.\n             * @private\n             */\n            setVoice() {\n                if (this.synthesis) {\n                    const name = this.options.name, lang = this.options.language || 'en-US', voices = this.synthesis.getVoices(), len = voices.length;\n                    let langFallback;\n                    for (let i = 0; i < len; ++i) {\n                        if (name && voices[i].name === name) {\n                            this.voice = voices[i];\n                            return;\n                        }\n                        if (!langFallback && voices[i].lang === lang) {\n                            langFallback = voices[i];\n                            if (!name) {\n                                break;\n                            }\n                        }\n                    }\n                    this.voice = langFallback;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API declarations\n         *\n         * */\n        /**\n         * Configuration for a SonificationSpeaker.\n         * @requires modules/sonification\n         * @interface Highcharts.SonificationSpeakerOptionsObject\n         */ /**\n        * Name of the voice synthesis to use. If not found, reverts to the default\n        * voice for the language chosen.\n        * @name Highcharts.SonificationSpeakerOptionsObject#name\n        * @type {string|undefined}\n        */ /**\n        * The language of the voice synthesis. Defaults to `\"en-US\"`.\n        * @name Highcharts.SonificationSpeakerOptionsObject#language\n        * @type {string|undefined}\n        */ /**\n        * The pitch modifier of the voice. Defaults to `1`. Set higher for a higher\n        * voice pitch.\n        * @name Highcharts.SonificationSpeakerOptionsObject#pitch\n        * @type {number|undefined}\n        */ /**\n        * The speech rate modifier. Defaults to `1`.\n        * @name Highcharts.SonificationSpeakerOptionsObject#rate\n        * @type {number|undefined}\n        */ /**\n        * The speech volume, from 0 to 1. Defaults to `1`.\n        * @name Highcharts.SonificationSpeakerOptionsObject#volume\n        * @type {number|undefined}\n        */\n        (''); // Keep above doclets in JS file\n\n        return SonificationSpeaker;\n    });\n    _registerModule(_modules, 'Extensions/Sonification/TimelineChannel.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Øystein Moseng\n         *\n         *  Class representing a TimelineChannel with sonification events to play.\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /**\n         * Represents a channel of TimelineEvents for an engine (either an instrument\n         * or a speaker).\n         * @private\n         */\n        class TimelineChannel {\n            constructor(type, engine, showPlayMarker = false, events, muted) {\n                this.type = type;\n                this.engine = engine;\n                this.showPlayMarker = showPlayMarker;\n                this.muted = muted;\n                this.events = events || [];\n            }\n            addEvent(event) {\n                const lastEvent = this.events[this.events.length - 1];\n                if (lastEvent && event.time < lastEvent.time) {\n                    // Ensure we are sorted by time, so insert at the right place\n                    let i = this.events.length;\n                    while (i-- && this.events[i].time > event.time) { /* */ }\n                    this.events.splice(i + 1, 0, event);\n                }\n                else {\n                    this.events.push(event);\n                }\n                return event;\n            }\n            mute() {\n                this.muted = true;\n            }\n            unmute() {\n                this.muted = false;\n            }\n            cancel() {\n                this.engine.cancel();\n            }\n            destroy() {\n                this.engine.destroy();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API declarations\n         *\n         * */\n        /**\n         * A TimelineEvent object represents a scheduled audio event to play for a\n         * SonificationTimeline.\n         * @requires modules/sonification\n         * @interface Highcharts.SonificationTimelineEvent\n         */ /**\n        * Time is given in milliseconds, where 0 is now.\n        * @name Highcharts.SonificationTimelineEvent#time\n        * @type {number}\n        */ /**\n        * A reference to a data point related to the TimelineEvent. Populated when\n        * sonifying points.\n        * @name Highcharts.SonificationTimelineEvent#relatedPoint\n        * @type {Highcharts.Point|undefined}\n        */ /**\n        * Options for an instrument event to be played.\n        * @name Highcharts.SonificationTimelineEvent#instrumentEventOptions\n        * @type {Highcharts.SonificationInstrumentScheduledEventOptionsObject|undefined}\n        */ /**\n        * Options for a speech event to be played.\n        * @name Highcharts.SonificationTimelineEvent#speechOptions\n        * @type {Highcharts.SonificationSpeakerOptionsObject|undefined}\n        */ /**\n        * The message to speak for speech events.\n        * @name Highcharts.SonificationTimelineEvent#message\n        * @type {string|undefined}\n        */ /**\n        * Callback to call when playing the event.\n        * @name Highcharts.SonificationTimelineEvent#callback\n        * @type {Function|undefined}\n        */\n        (''); // Keep above doclets in JS file\n\n        return TimelineChannel;\n    });\n    _registerModule(_modules, 'Extensions/Sonification/MIDI.js', [_modules['Extensions/Sonification/SonificationInstrument.js'], _modules['Core/Utilities.js']], function (SonificationInstrument, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Øystein Moseng\n         *\n         *  Small MIDI file writer for sonification export.\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* eslint-disable no-multi-spaces */\n        const { pick } = U;\n        const freqToNote = (f) => Math.round(12 * Math.log(f) / Math.LN2 - 48.37632), b = (byte, n) => n >>> 8 * byte & 0xFF, getHeader = (nTracks) => [\n            0x4D, 0x54, 0x68, 0x64, // HD_TYPE\n            0, 0, 0, 6, // HD_SIZE\n            0, nTracks > 1 ? 1 : 0, // HD_FORMAT\n            b(1, nTracks), b(0, nTracks), // HD_NTRACKS\n            // SMTPE: 0xE7 0x28\n            // -25/40 time div gives us millisecond SMTPE, but not widely supported.\n            1, 0xF4 // HD_TIMEDIV, 500 ticks per beat = millisecond at 120bpm\n        ], timeInfo = [0, 0xFF, 0x51, 0x03, 0x07, 0xA1, 0x20], // META_TEMPO\n        varLenEnc = (n) => {\n            let buf = n & 0x7F;\n            const res = [];\n            while (n >>= 7) { // eslint-disable-line no-cond-assign\n                buf <<= 8;\n                buf |= (n & 0x7F) | 0x80;\n            }\n            while (true) { // eslint-disable-line no-constant-condition\n                res.push(buf & 0xFF);\n                if (buf & 0x80) {\n                    buf >>= 8;\n                }\n                else {\n                    break;\n                }\n            }\n            return res;\n        }, toMIDIEvents = (events) => {\n            let cachedVel, cachedDur;\n            const res = [], add = (el) => {\n                let ix = res.length;\n                while (ix-- && res[ix].timeMS > el.timeMS) { /* */ }\n                res.splice(ix + 1, 0, el);\n            };\n            events.forEach((e) => {\n                const o = e.instrumentEventOptions || {}, t = e.time, dur = cachedDur = pick(o.noteDuration, cachedDur), tNOF = dur && e.time + dur, ctrl = [{\n                        valMap: (n) => 64 + 63 * n & 0x7F,\n                        data: {\n                            0x0A: o.pan, // Use MSB only, no need for fine adjust\n                            0x5C: o.tremoloDepth,\n                            0x5D: o.tremoloSpeed\n                        }\n                    }, {\n                        valMap: (n) => 127 * n / 20000 & 0x7F,\n                        data: {\n                            0x4A: o.lowpassFreq,\n                            0x4B: o.highpassFreq\n                        }\n                    }, {\n                        valMap: (n) => 63 * Math.min(18, Math.max(-18, n)) / 18 + 63 & 0x7F,\n                        data: {\n                            0x47: o.lowpassResonance,\n                            0x4C: o.highpassResonance\n                        }\n                    }], v = cachedVel = o.volume === void 0 ?\n                    pick(cachedVel, 127) : 127 * o.volume & 0x7F, freq = o.frequency, note = o.note || 0, noteVal = 12 + (freq ? freqToNote(freq) : // MIDI note #0 is C-1\n                    typeof note === 'string' ? SonificationInstrument\n                        .noteStringToC0Distance(note) : note) & 0x7F;\n                // CTRL_CHANGE events\n                ctrl.forEach((ctrlDef) => Object.keys(ctrlDef.data)\n                    .forEach((ctrlSignal) => {\n                    const val = ctrlDef.data[ctrlSignal];\n                    if (val !== void 0) {\n                        add({\n                            timeMS: t,\n                            type: 'CTRL_CHG',\n                            data: [\n                                0xB0, parseInt(ctrlSignal, 10),\n                                ctrlDef.valMap(val)\n                            ]\n                        });\n                    }\n                }));\n                // NON/NOF\n                if (tNOF) {\n                    add({ timeMS: t, type: 'NON', data: [0x90, noteVal, v] });\n                    add({ timeMS: tNOF, type: 'NOF', data: [0x80, noteVal, v] });\n                }\n            });\n            return res;\n        }, getMetaEvents = (midiTrackName, midiInstrument) => {\n            const events = [];\n            if (midiInstrument) {\n                // Program Change MIDI event\n                events.push(0, 0xC0, midiInstrument & 0x7F);\n            }\n            if (midiTrackName) {\n                // Track name meta event\n                const textArr = [];\n                for (let i = 0; i < midiTrackName.length; ++i) {\n                    const code = midiTrackName.charCodeAt(i);\n                    if (code < 128) { // Keep ASCII only\n                        textArr.push(code);\n                    }\n                }\n                return events.concat([0, 0xFF, 0x03], varLenEnc(textArr.length), textArr);\n            }\n            return events;\n        }, getTrackChunk = (events, addTimeInfo, midiTrackName, midiInstrument) => {\n            let prevTime = 0;\n            const metaEvents = getMetaEvents(midiTrackName, midiInstrument), trackEvents = toMIDIEvents(events).reduce((data, e) => {\n                const t = varLenEnc(e.timeMS - prevTime);\n                prevTime = e.timeMS;\n                return data.concat(t, e.data);\n            }, []);\n            const trackEnd = [0, 0xFF, 0x2F, 0], size = (addTimeInfo ? timeInfo.length : 0) +\n                metaEvents.length +\n                trackEvents.length + trackEnd.length;\n            return [\n                0x4D, 0x54, 0x72, 0x6B, // TRK_TYPE\n                b(3, size), b(2, size), // TRK_SIZE\n                b(1, size), b(0, size)\n            ].concat(addTimeInfo ? timeInfo : [], metaEvents, trackEvents, trackEnd // SYSEX_TRACK_END\n            );\n        };\n        /**\n         * Get MIDI data from a set of Timeline instrument channels.\n         *\n         * Outputs multi-track MIDI for Timelines with multiple channels.\n         *\n         * @private\n         */\n        function toMIDI(channels) {\n            const channelsToAdd = channels.filter((c) => !!c.events.length), numCh = channelsToAdd.length, multiCh = numCh > 1;\n            return new Uint8Array(getHeader(multiCh ? numCh + 1 : numCh).concat(multiCh ? getTrackChunk([], true) : [], // Time info only\n            channelsToAdd.reduce((chunks, channel) => {\n                const engine = channel.engine;\n                return chunks.concat(getTrackChunk(channel.events, !multiCh, engine.midiTrackName, engine.midiInstrument));\n            }, [])));\n        }\n\n        return toMIDI;\n    });\n    _registerModule(_modules, 'Extensions/DownloadURL.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2015-2024 Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Mixin for downloading content in the browser\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { isSafari, win, win: { document: doc } } = H;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const domurl = win.URL || win.webkitURL || win;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Convert base64 dataURL to Blob if supported, otherwise returns undefined.\n         * @private\n         * @function Highcharts.dataURLtoBlob\n         * @param {string} dataURL\n         *        URL to convert\n         * @return {string|undefined}\n         *         Blob\n         */\n        function dataURLtoBlob(dataURL) {\n            const parts = dataURL\n                .replace(/filename=.*;/, '')\n                .match(/data:([^;]*)(;base64)?,([A-Z+\\d\\/]+)/i);\n            if (parts &&\n                parts.length > 3 &&\n                (win.atob) &&\n                win.ArrayBuffer &&\n                win.Uint8Array &&\n                win.Blob &&\n                (domurl.createObjectURL)) {\n                // Try to convert data URL to Blob\n                const binStr = win.atob(parts[3]), buf = new win.ArrayBuffer(binStr.length), binary = new win.Uint8Array(buf);\n                for (let i = 0; i < binary.length; ++i) {\n                    binary[i] = binStr.charCodeAt(i);\n                }\n                return domurl\n                    .createObjectURL(new win.Blob([binary], { 'type': parts[1] }));\n            }\n        }\n        /**\n         * Download a data URL in the browser. Can also take a blob as first param.\n         *\n         * @private\n         * @function Highcharts.downloadURL\n         * @param {string|global.URL} dataURL\n         *        The dataURL/Blob to download\n         * @param {string} filename\n         *        The name of the resulting file (w/extension)\n         * @return {void}\n         */\n        function downloadURL(dataURL, filename) {\n            const nav = win.navigator, a = doc.createElement('a');\n            // IE specific blob implementation\n            // Don't use for normal dataURLs\n            if (typeof dataURL !== 'string' &&\n                !(dataURL instanceof String) &&\n                nav.msSaveOrOpenBlob) {\n                nav.msSaveOrOpenBlob(dataURL, filename);\n                return;\n            }\n            dataURL = '' + dataURL;\n            if (nav.userAgent.length > 1000 /* RegexLimits.shortLimit */) {\n                throw new Error('Input too long');\n            }\n            const // Some browsers have limitations for data URL lengths. Try to convert\n            // to Blob or fall back. Edge always needs that blob.\n            isOldEdgeBrowser = /Edge\\/\\d+/.test(nav.userAgent), \n            // Safari on iOS needs Blob in order to download PDF\n            safariBlob = (isSafari &&\n                typeof dataURL === 'string' &&\n                dataURL.indexOf('data:application/pdf') === 0);\n            if (safariBlob || isOldEdgeBrowser || dataURL.length > 2000000) {\n                dataURL = dataURLtoBlob(dataURL) || '';\n                if (!dataURL) {\n                    throw new Error('Failed to convert to blob');\n                }\n            }\n            // Try HTML5 download attr if supported\n            if (typeof a.download !== 'undefined') {\n                a.href = dataURL;\n                a.download = filename; // HTML5 download attribute\n                doc.body.appendChild(a);\n                a.click();\n                doc.body.removeChild(a);\n            }\n            else {\n                // No download attr, just opening data URI\n                try {\n                    if (!win.open(dataURL, 'chart')) {\n                        throw new Error('Failed to open window');\n                    }\n                }\n                catch {\n                    // If window.open failed, try location.href\n                    win.location.href = dataURL;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DownloadURL = {\n            dataURLtoBlob,\n            downloadURL\n        };\n\n        return DownloadURL;\n    });\n    _registerModule(_modules, 'Extensions/Sonification/SonificationTimeline.js', [_modules['Extensions/Sonification/TimelineChannel.js'], _modules['Extensions/Sonification/MIDI.js'], _modules['Extensions/DownloadURL.js'], _modules['Core/Utilities.js']], function (TimelineChannel, toMIDI, DU, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Øystein Moseng\n         *\n         *  Class representing a Timeline with sonification events to play.\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { downloadURL } = DU;\n        const { defined, find, merge } = U;\n        /**\n         * Get filtered channels. Timestamps are compensated, so that the first\n         * event starts immediately.\n         * @private\n         */\n        function filterChannels(filter, channels) {\n            const filtered = channels.map((channel) => {\n                channel.cancel();\n                return {\n                    channel,\n                    filteredEvents: channel.muted ?\n                        [] : channel.events.filter(filter)\n                };\n            }), minTime = filtered.reduce((acc, cur) => Math.min(acc, cur.filteredEvents.length ?\n                cur.filteredEvents[0].time : Infinity), Infinity);\n            return filtered.map((c) => (new TimelineChannel(c.channel.type, c.channel.engine, c.channel.showPlayMarker, c.filteredEvents.map((e) => merge(e, { time: e.time - minTime })), c.channel.muted)));\n        }\n        /**\n         * The SonificationTimeline class. This class represents a timeline of\n         * audio events scheduled to play. It provides functionality for manipulating\n         * and navigating the timeline.\n         * @private\n         */\n        class SonificationTimeline {\n            constructor(options, chart) {\n                this.chart = chart;\n                this.isPaused = false;\n                this.isPlaying = false;\n                this.channels = [];\n                this.scheduledCallbacks = [];\n                this.playTimestamp = 0;\n                this.resumeFromTime = 0;\n                this.options = options || {};\n            }\n            // Add a channel, optionally with events, to be played.\n            // Note: Only one speech channel is supported at a time.\n            addChannel(type, engine, showPlayMarker = false, events) {\n                if (type === 'instrument' &&\n                    !engine.scheduleEventAtTime ||\n                    type === 'speech' &&\n                        !engine.sayAtTime) {\n                    throw new Error('Highcharts Sonification: Invalid channel engine.');\n                }\n                const channel = new TimelineChannel(type, engine, showPlayMarker, events);\n                this.channels.push(channel);\n                return channel;\n            }\n            // Play timeline, optionally filtering out only some of the events to play.\n            // Note that if not all instrument parameters are updated on each event,\n            // parameters may update differently depending on the events filtered out,\n            // since some of the events that update parameters can be filtered out too.\n            // The filterPersists argument determines whether or not the filter persists\n            // after e.g. pausing and resuming. Usually this should be true.\n            play(filter, filterPersists = true, resetAfter = true, onEnd) {\n                if (this.isPlaying) {\n                    this.cancel();\n                }\n                else {\n                    this.clearScheduledCallbacks();\n                }\n                this.onEndArgument = onEnd;\n                this.playTimestamp = Date.now();\n                this.resumeFromTime = 0;\n                this.isPaused = false;\n                this.isPlaying = true;\n                const skipThreshold = this.options.skipThreshold || 2, onPlay = this.options.onPlay, showTooltip = this.options.showTooltip, showCrosshair = this.options.showCrosshair, channels = filter ?\n                    filterChannels(filter, this.playingChannels || this.channels) :\n                    this.channels, getEventKeysSignature = (e) => Object.keys(e.speechOptions || {})\n                    .concat(Object.keys(e.instrumentEventOptions || {}))\n                    .join(), pointsPlayed = [];\n                if (filterPersists) {\n                    this.playingChannels = channels;\n                }\n                if (onPlay) {\n                    onPlay({ chart: this.chart, timeline: this });\n                }\n                let maxTime = 0;\n                channels.forEach((channel) => {\n                    if (channel.muted) {\n                        return;\n                    }\n                    const numEvents = channel.events.length;\n                    let lastCallbackTime = -Infinity, lastEventTime = -Infinity, lastEventKeys = '';\n                    maxTime = Math.max(channel.events[numEvents - 1] &&\n                        channel.events[numEvents - 1].time || 0, maxTime);\n                    for (let i = 0; i < numEvents; ++i) {\n                        const e = channel.events[i], keysSig = getEventKeysSignature(e);\n                        // Optimize by skipping extremely close events (<2ms apart by\n                        // default), as long as they don't introduce new event options\n                        if (keysSig === lastEventKeys &&\n                            e.time - lastEventTime < skipThreshold) {\n                            continue;\n                        }\n                        lastEventKeys = keysSig;\n                        lastEventTime = e.time;\n                        if (channel.type === 'instrument') {\n                            channel.engine\n                                .scheduleEventAtTime(e.time / 1000, e.instrumentEventOptions || {});\n                        }\n                        else {\n                            channel.engine.sayAtTime(e.time, e.message || '', e.speechOptions || {});\n                        }\n                        const point = e.relatedPoint, chart = point && point.series && point.series.chart, needsCallback = e.callback ||\n                            point && (showTooltip || showCrosshair) &&\n                                channel.showPlayMarker !== false &&\n                                (e.time - lastCallbackTime > 50 || i === numEvents - 1);\n                        if (point) {\n                            pointsPlayed.push(point);\n                        }\n                        if (needsCallback) {\n                            this.scheduledCallbacks.push(setTimeout(() => {\n                                if (e.callback) {\n                                    e.callback();\n                                }\n                                if (point) {\n                                    if (showCrosshair) {\n                                        const s = point.series;\n                                        if (s && s.xAxis && s.xAxis.crosshair) {\n                                            s.xAxis.drawCrosshair(void 0, point);\n                                        }\n                                        if (s && s.yAxis && s.yAxis.crosshair) {\n                                            s.yAxis.drawCrosshair(void 0, point);\n                                        }\n                                    }\n                                    if (showTooltip && !(\n                                    // Don't re-hover if shared tooltip\n                                    chart && chart.hoverPoints &&\n                                        chart.hoverPoints.length > 1 &&\n                                        find(chart.hoverPoints, (p) => p === point) &&\n                                        // Stock issue w/Navigator\n                                        point.onMouseOver)) {\n                                        point.onMouseOver();\n                                    }\n                                }\n                            }, e.time));\n                            lastCallbackTime = e.time;\n                        }\n                    }\n                });\n                const onEndOpt = this.options.onEnd, onStop = this.options.onStop;\n                this.scheduledCallbacks.push(setTimeout(() => {\n                    const chart = this.chart, context = { chart, timeline: this, pointsPlayed };\n                    this.isPlaying = false;\n                    if (resetAfter) {\n                        this.resetPlayState();\n                    }\n                    if (onStop) {\n                        onStop(context);\n                    }\n                    if (onEndOpt) {\n                        onEndOpt(context);\n                    }\n                    if (onEnd) {\n                        onEnd(context);\n                    }\n                    if (chart) {\n                        if (chart.tooltip) {\n                            chart.tooltip.hide(0);\n                        }\n                        if (chart.hoverSeries) {\n                            chart.hoverSeries.onMouseOut();\n                        }\n                        chart.axes.forEach((a) => a.hideCrosshair());\n                    }\n                }, maxTime + 250));\n                this.resumeFromTime = filterPersists ? maxTime : this.getLength();\n            }\n            // Pause for later resuming. Returns current timestamp to resume from.\n            pause() {\n                this.isPaused = true;\n                this.cancel();\n                this.resumeFromTime = Date.now() - this.playTimestamp - 10;\n                return this.resumeFromTime;\n            }\n            // Get current time\n            getCurrentTime() {\n                return this.isPlaying ?\n                    Date.now() - this.playTimestamp :\n                    this.resumeFromTime;\n            }\n            // Get length of timeline in milliseconds\n            getLength() {\n                return this.channels.reduce((maxTime, channel) => {\n                    const lastEvent = channel.events[channel.events.length - 1];\n                    return lastEvent ? Math.max(lastEvent.time, maxTime) : maxTime;\n                }, 0);\n            }\n            // Resume from paused\n            resume() {\n                if (this.playingChannels) {\n                    const resumeFrom = this.resumeFromTime - 50;\n                    this.play((e) => e.time > resumeFrom, false, false, this.onEndArgument);\n                    this.playTimestamp -= resumeFrom;\n                }\n                else {\n                    this.play(void 0, false, false, this.onEndArgument);\n                }\n            }\n            // Play a short moment, then pause, setting the cursor to the final\n            // event's time.\n            anchorPlayMoment(eventFilter, onEnd) {\n                if (this.isPlaying) {\n                    this.pause();\n                }\n                let finalEventTime = 0;\n                this.play((e, ix, arr) => {\n                    // We have to keep track of final event time ourselves, since\n                    // play() messes with the time internally upon filtering.\n                    const res = eventFilter(e, ix, arr);\n                    if (res && e.time > finalEventTime) {\n                        finalEventTime = e.time;\n                    }\n                    return res;\n                }, false, false, onEnd);\n                this.playingChannels = this.playingChannels || this.channels;\n                this.isPaused = true;\n                this.isPlaying = false;\n                this.resumeFromTime = finalEventTime;\n            }\n            // Play event(s) occurring next/prev from paused state.\n            playAdjacent(next, onEnd, onBoundaryHit, eventFilter) {\n                if (this.isPlaying) {\n                    this.pause();\n                }\n                const fromTime = this.resumeFromTime, closestTime = this.channels.reduce((time, channel) => {\n                    // Adapted binary search since events are sorted by time\n                    const events = eventFilter ?\n                        channel.events.filter(eventFilter) : channel.events;\n                    let s = 0, e = events.length, lastValidTime = time;\n                    while (s < e) {\n                        const mid = (s + e) >> 1, t = events[mid].time, cmp = t - fromTime;\n                        if (cmp > 0) { // Ahead\n                            if (next && t < lastValidTime) {\n                                lastValidTime = t;\n                            }\n                            e = mid;\n                        }\n                        else if (cmp < 0) { // Behind\n                            if (!next && t > lastValidTime) {\n                                lastValidTime = t;\n                            }\n                            s = mid + 1;\n                        }\n                        else { // Same as from time\n                            if (next) {\n                                s = mid + 1;\n                            }\n                            else {\n                                e = mid;\n                            }\n                        }\n                    }\n                    return lastValidTime;\n                }, next ? Infinity : -Infinity), margin = 0.02;\n                if (closestTime === Infinity || closestTime === -Infinity) {\n                    if (onBoundaryHit) {\n                        onBoundaryHit({\n                            chart: this.chart, timeline: this, attemptedNext: next\n                        });\n                    }\n                    return;\n                }\n                this.anchorPlayMoment((e, ix, arr) => {\n                    const withinTime = next ?\n                        e.time > fromTime && e.time <= closestTime + margin :\n                        e.time < fromTime && e.time >= closestTime - margin;\n                    return eventFilter ? withinTime && eventFilter(e, ix, arr) :\n                        withinTime;\n                }, onEnd);\n            }\n            // Play event with related point, where the value of a prop on the\n            // related point is closest to a target value.\n            // Note: not very efficient.\n            playClosestToPropValue(prop, targetVal, onEnd, onBoundaryHit, eventFilter) {\n                const filter = (e, ix, arr) => !!(eventFilter ?\n                    eventFilter(e, ix, arr) && e.relatedPoint :\n                    e.relatedPoint);\n                let closestValDiff = Infinity, closestEvent = null;\n                (this.playingChannels || this.channels).forEach((channel) => {\n                    const events = channel.events;\n                    let i = events.length;\n                    while (i--) {\n                        if (!filter(events[i], i, events)) {\n                            continue;\n                        }\n                        const val = events[i].relatedPoint[prop], diff = defined(val) && Math.abs(targetVal - val);\n                        if (diff !== false && diff < closestValDiff) {\n                            closestValDiff = diff;\n                            closestEvent = events[i];\n                        }\n                    }\n                });\n                if (closestEvent) {\n                    this.play((e) => !!(closestEvent &&\n                        e.time < closestEvent.time + 1 &&\n                        e.time > closestEvent.time - 1 &&\n                        e.relatedPoint === closestEvent.relatedPoint), false, false, onEnd);\n                    this.playingChannels = this.playingChannels || this.channels;\n                    this.isPaused = true;\n                    this.isPlaying = false;\n                    this.resumeFromTime = closestEvent.time;\n                }\n                else if (onBoundaryHit) {\n                    onBoundaryHit({ chart: this.chart, timeline: this });\n                }\n            }\n            // Get timeline events that are related to a certain point.\n            // Note: Point grouping may cause some points not to have a\n            //  related point in the timeline.\n            getEventsForPoint(point) {\n                return this.channels.reduce((events, channel) => {\n                    const pointEvents = channel.events\n                        .filter((e) => e.relatedPoint === point);\n                    return events.concat(pointEvents);\n                }, []);\n            }\n            // Divide timeline into 100 parts of equal time, and play one of them.\n            // Used for scrubbing.\n            // Note: Should be optimized?\n            playSegment(segment, onEnd) {\n                const numSegments = 100;\n                const eventTimes = {\n                    first: Infinity,\n                    last: -Infinity\n                };\n                this.channels.forEach((c) => {\n                    if (c.events.length) {\n                        eventTimes.first = Math.min(c.events[0].time, eventTimes.first);\n                        eventTimes.last = Math.max(c.events[c.events.length - 1].time, eventTimes.last);\n                    }\n                });\n                if (eventTimes.first < Infinity) {\n                    const segmentSize = (eventTimes.last - eventTimes.first) / numSegments, fromTime = eventTimes.first + segment * segmentSize, toTime = fromTime + segmentSize;\n                    // Binary search, do we have any events within time range?\n                    if (!this.channels.some((c) => {\n                        const events = c.events;\n                        let s = 0, e = events.length;\n                        while (s < e) {\n                            const mid = (s + e) >> 1, t = events[mid].time;\n                            if (t < fromTime) { // Behind\n                                s = mid + 1;\n                            }\n                            else if (t > toTime) { // Ahead\n                                e = mid;\n                            }\n                            else {\n                                return true;\n                            }\n                        }\n                        return false;\n                    })) {\n                        return; // If not, don't play - avoid cancelling current play\n                    }\n                    this.play((e) => e.time >= fromTime && e.time <= toTime, false, false, onEnd);\n                    this.playingChannels = this.playingChannels || this.channels;\n                    this.isPaused = true;\n                    this.isPlaying = false;\n                    this.resumeFromTime = toTime;\n                }\n            }\n            // Get last played / current point\n            // Since events are scheduled we can't just store points as we play them\n            getLastPlayedPoint(filter) {\n                const curTime = this.getCurrentTime(), channels = this.playingChannels || this.channels;\n                let closestDiff = Infinity, closestPoint = null;\n                channels.forEach((c) => {\n                    const events = c.events.filter((e, ix, arr) => !!(e.relatedPoint && e.time <= curTime &&\n                        (!filter || filter(e, ix, arr)))), closestEvent = events[events.length - 1];\n                    if (closestEvent) {\n                        const closestTime = closestEvent.time, diff = Math.abs(closestTime - curTime);\n                        if (diff < closestDiff) {\n                            closestDiff = diff;\n                            closestPoint = closestEvent.relatedPoint;\n                        }\n                    }\n                });\n                return closestPoint;\n            }\n            // Reset play/pause state so that a later call to resume() will start over\n            reset() {\n                if (this.isPlaying) {\n                    this.cancel();\n                }\n                this.resetPlayState();\n            }\n            cancel() {\n                const onStop = this.options.onStop;\n                if (onStop) {\n                    onStop({ chart: this.chart, timeline: this });\n                }\n                this.isPlaying = false;\n                this.channels.forEach((c) => c.cancel());\n                if (this.playingChannels && this.playingChannels !== this.channels) {\n                    this.playingChannels.forEach((c) => c.cancel());\n                }\n                this.clearScheduledCallbacks();\n                this.resumeFromTime = 0;\n            }\n            destroy() {\n                this.cancel();\n                if (this.playingChannels && this.playingChannels !== this.channels) {\n                    this.playingChannels.forEach((c) => c.destroy());\n                }\n                this.channels.forEach((c) => c.destroy());\n            }\n            setMasterVolume(vol) {\n                this.channels.forEach((c) => c.engine.setMasterVolume(vol));\n            }\n            getMIDIData() {\n                return toMIDI(this.channels.filter((c) => c.type === 'instrument'));\n            }\n            downloadMIDI(filename) {\n                const data = this.getMIDIData(), name = (filename ||\n                    this.chart &&\n                        this.chart.options.title &&\n                        this.chart.options.title.text ||\n                    'chart') + '.mid', blob = new Blob([data], { type: 'application/octet-stream' }), url = window.URL.createObjectURL(blob);\n                downloadURL(url, name);\n                window.URL.revokeObjectURL(url);\n            }\n            resetPlayState() {\n                delete this.playingChannels;\n                delete this.onEndArgument;\n                this.playTimestamp = this.resumeFromTime = 0;\n                this.isPaused = false;\n            }\n            clearScheduledCallbacks() {\n                this.scheduledCallbacks.forEach(clearTimeout);\n                this.scheduledCallbacks = [];\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API declarations\n         *\n         * */\n        /**\n         * Filter callback for filtering timeline events on a SonificationTimeline.\n         *\n         * @callback Highcharts.SonificationTimelineFilterCallback\n         *\n         * @param {Highcharts.SonificationTimelineEvent} e TimelineEvent being filtered\n         *\n         * @param {number} ix Index of TimelineEvent in current event array\n         *\n         * @param {Array<Highcharts.SonificationTimelineEvent>} arr The current event array\n         *\n         * @return {boolean}\n         * The function should return true if the TimelineEvent should be included,\n         * false otherwise.\n         */\n        (''); // Keep above doclets in JS file\n\n        return SonificationTimeline;\n    });\n    _registerModule(_modules, 'Extensions/Sonification/TimelineFromChart.js', [_modules['Extensions/Sonification/SonificationTimeline.js'], _modules['Extensions/Sonification/SonificationInstrument.js'], _modules['Extensions/Sonification/SonificationSpeaker.js'], _modules['Core/Utilities.js'], _modules['Core/Templating.js']], function (SonificationTimeline, SonificationInstrument, SonificationSpeaker, U, T) {\n        /* *\n         *\n         *  (c) 2009-2024 Øystein Moseng\n         *\n         *  Build a timeline from a chart.\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { clamp, defined, extend, getNestedProperty, merge, pick } = U;\n        const { format } = T;\n        const isNoteDefinition = (str) => (/^([a-g][#b]?)[0-8]$/i).test(str);\n        /**\n         * Get the value of a point property from string.\n         * @private\n         */\n        function getPointPropValue(point, prop) {\n            let ret;\n            if (prop) {\n                ret = point[prop];\n                if (typeof ret === 'number') {\n                    return ret;\n                }\n                ret = getNestedProperty(prop, point);\n            }\n            return typeof ret === 'number' ? ret : void 0;\n        }\n        /**\n         * Get chart wide min/max for a set of props, as well as per\n         * series min/max for selected props.\n         * @private\n         */\n        function getChartExtremesForProps(chart, props, perSeriesProps) {\n            const series = chart.series, numProps = props.length, numSeriesProps = perSeriesProps.length, initCache = (propList) => propList.reduce((cache, prop) => {\n                ((cache[prop] = { min: Infinity, max: -Infinity }), cache);\n                return cache;\n            }, {}), updateCache = (cache, point, prop) => {\n                let val = point[prop];\n                if (val === void 0) {\n                    val = getNestedProperty(prop, point);\n                }\n                if (typeof val === 'number') {\n                    cache[prop].min = Math.min(cache[prop].min, val);\n                    cache[prop].max = Math.max(cache[prop].max, val);\n                }\n            }, globalExtremes = initCache(props);\n            let i = series.length;\n            const allSeriesExtremes = new Array(i);\n            while (i--) {\n                const seriesExtremes = initCache(perSeriesProps);\n                const opts = series[i].options;\n                if (!series[i].visible ||\n                    opts && opts.sonification && opts.sonification.enabled === false) {\n                    continue;\n                }\n                const points = series[i].points || [];\n                let j = points.length;\n                while (j--) {\n                    let k = numProps;\n                    while (k--) {\n                        updateCache(globalExtremes, points[j], props[k]);\n                    }\n                    k = numSeriesProps;\n                    while (k--) {\n                        updateCache(seriesExtremes, points[j], perSeriesProps[k]);\n                    }\n                }\n                allSeriesExtremes[i] = seriesExtremes;\n            }\n            return {\n                globalExtremes,\n                seriesExtremes: allSeriesExtremes\n            };\n        }\n        /**\n         * Build a cache of prop extremes for the chart. Goes through\n         * options to find out which props are needed.\n         * @private\n         */\n        function getPropMetrics(chart) {\n            const globalOpts = chart.options.sonification ||\n                {}, defaultInstrMapping = (globalOpts.defaultInstrumentOptions || {})\n                .mapping || { time: 'x', pitch: 'y' }, defaultSpeechMapping = globalOpts.defaultSpeechOptions &&\n                globalOpts.defaultSpeechOptions.mapping || {}, seriesTimeProps = [], commonTimeProps = {}, addTimeProp = (prop, seriesIx) => {\n                if (seriesIx !== null) {\n                    seriesTimeProps[seriesIx] =\n                        seriesTimeProps[seriesIx] || {};\n                    seriesTimeProps[seriesIx][prop] = true;\n                }\n                else {\n                    commonTimeProps[prop] = true;\n                }\n            }, props = {}, perSeriesProps = {}, addPropFromMappingParam = (param, val, seriesIx) => {\n                const removeInvertedFlag = (s) => (s.charAt(0) === '-' ? s.slice(1) : s);\n                if (typeof val === 'string' && param !== 'text') {\n                    if (param === 'pitch' && isNoteDefinition(val)) {\n                        return;\n                    }\n                    if (param === 'time') {\n                        perSeriesProps[val] = true;\n                        addTimeProp(val, seriesIx);\n                    }\n                    props[removeInvertedFlag(val)] = true;\n                    return;\n                }\n                const paramOpts = val;\n                if (paramOpts && paramOpts.mapTo &&\n                    typeof paramOpts.mapTo === 'string') {\n                    const mapTo = removeInvertedFlag(paramOpts.mapTo);\n                    if (param === 'time') {\n                        addTimeProp(mapTo, seriesIx);\n                    }\n                    if (param === 'time' || paramOpts.within === 'series') {\n                        perSeriesProps[mapTo] = true;\n                    }\n                    props[mapTo] = true;\n                    return;\n                }\n                if (['tremolo', 'lowpass', 'highpass'].indexOf(param) > -1 &&\n                    typeof val === 'object') {\n                    Object.keys(val).forEach((subParam) => addPropFromMappingParam(subParam, val[subParam], seriesIx));\n                }\n            }, addPropsFromMappingOptions = (mapping, seriesIx) => {\n                (Object.keys(mapping)).forEach((param) => addPropFromMappingParam(param, mapping[param], seriesIx));\n            }, addPropsFromContextTracks = (tracks) => tracks.forEach((track) => {\n                props[track.valueProp || 'x'] =\n                    perSeriesProps[track.valueProp || 'x'] = true;\n            });\n            addPropsFromMappingOptions(defaultInstrMapping, null);\n            addPropsFromMappingOptions(defaultSpeechMapping, null);\n            addPropsFromContextTracks(globalOpts.globalContextTracks || []);\n            const hasCommonTimeProps = Object.keys(commonTimeProps).length;\n            chart.series.forEach((series) => {\n                const sOpts = series.options.sonification;\n                if (series.visible && !(sOpts && sOpts.enabled === false)) {\n                    if (hasCommonTimeProps) {\n                        seriesTimeProps[series.index] = merge(commonTimeProps);\n                    }\n                    if (sOpts) {\n                        const defaultInstrMapping = (sOpts.defaultInstrumentOptions || {}).mapping, defaultSpeechMapping = (sOpts.defaultSpeechOptions || {}).mapping;\n                        if (defaultInstrMapping) {\n                            addPropsFromMappingOptions(defaultInstrMapping, series.index);\n                        }\n                        if (defaultSpeechMapping) {\n                            addPropsFromMappingOptions(defaultSpeechMapping, series.index);\n                        }\n                        addPropsFromContextTracks(sOpts.contextTracks || []);\n                        (sOpts.tracks || [])\n                            .concat(sOpts.contextTracks || [])\n                            .forEach((trackOpts) => {\n                            if (trackOpts.mapping) {\n                                addPropsFromMappingOptions(trackOpts.mapping, series.index);\n                            }\n                        });\n                    }\n                }\n            });\n            return {\n                seriesTimeProps,\n                ...getChartExtremesForProps(chart, Object.keys(props), Object.keys(perSeriesProps))\n            };\n        }\n        /**\n         * Map a relative value onto a virtual axis.\n         * @private\n         */\n        function mapToVirtualAxis(value, valueExtremes, virtualAxisExtremes, invert, logarithmic // Virtual axis is logarithmic\n        ) {\n            const lenValueAxis = valueExtremes.max - valueExtremes.min;\n            if (lenValueAxis <= 0) {\n                return virtualAxisExtremes.min;\n            }\n            const lenVirtualAxis = virtualAxisExtremes.max - virtualAxisExtremes.min, valueDelta = value - valueExtremes.min;\n            let virtualValueDelta = lenVirtualAxis * valueDelta / lenValueAxis;\n            if (logarithmic) {\n                const log = valueExtremes.min > 0 ?\n                    // Normal log formula\n                    (x) => Math.log(x) / Math.LOG10E :\n                    // Negative logarithmic support needed\n                    (x) => {\n                        let adjustedNum = Math.abs(x);\n                        if (adjustedNum < 10) {\n                            adjustedNum += (10 - adjustedNum) / 10;\n                        }\n                        const res = Math.log(adjustedNum) / Math.LN10;\n                        return x < 0 ? -res : res;\n                    };\n                const logValMin = log(valueExtremes.min);\n                virtualValueDelta = lenVirtualAxis *\n                    (log(value) - logValMin) /\n                    (log(valueExtremes.max) - logValMin);\n            }\n            const val = invert ?\n                virtualAxisExtremes.max - virtualValueDelta :\n                virtualAxisExtremes.min + virtualValueDelta;\n            return clamp(val, virtualAxisExtremes.min, virtualAxisExtremes.max);\n        }\n        /**\n         * Get the value of a mapped parameter for a point.\n         * @private\n         */\n        function getMappingParameterValue(context, propMetrics, useSeriesExtremes, defaultMapping, mappingOptions, contextValueProp) {\n            if (typeof mappingOptions === 'number') {\n                return mappingOptions;\n            }\n            if (typeof mappingOptions === 'function') {\n                return mappingOptions(extend({ time: 0 }, context));\n            }\n            let mapTo = mappingOptions, mapFunc = defaultMapping.mapFunction, min = defaultMapping.min, max = defaultMapping.max, within = defaultMapping.within, scale;\n            if (typeof mappingOptions === 'object') {\n                mapTo = mappingOptions.mapTo;\n                mapFunc = mappingOptions.mapFunction || mapFunc;\n                min = pick(mappingOptions.min, min);\n                max = pick(mappingOptions.max, max);\n                within = mappingOptions.within || defaultMapping.within;\n                scale = mappingOptions.scale;\n            }\n            if (!mapTo) {\n                return null;\n            }\n            const isInverted = mapTo.charAt(0) === '-';\n            if (isInverted) {\n                mapTo = mapTo.slice(1);\n            }\n            let value = context.value;\n            const useContextValue = mapTo === 'value' && value !== void 0 &&\n                contextValueProp;\n            if (!useContextValue) {\n                const fixedValue = mappingOptions.value;\n                if (fixedValue !== void 0) {\n                    value = fixedValue;\n                }\n                else {\n                    if (!context.point) {\n                        return null;\n                    }\n                    value = context.point[mapTo];\n                }\n                if (value === void 0) {\n                    value = getNestedProperty(mapTo, context.point);\n                }\n            }\n            if (typeof value !== 'number' || value === null) {\n                return null;\n            }\n            // Figure out extremes for this mapping\n            let extremes = null;\n            if (context.point) {\n                if (within === 'xAxis' || within === 'yAxis') {\n                    const axis = context.point.series[within];\n                    if (axis && defined(axis.dataMin) && defined(axis.dataMax)) {\n                        extremes = {\n                            min: axis.dataMin,\n                            max: axis.dataMax\n                        };\n                    }\n                }\n                else if ((within === 'series' || useSeriesExtremes) &&\n                    context.point.series) {\n                    extremes = propMetrics.seriesExtremes[context.point.series.index][useContextValue ? contextValueProp : mapTo];\n                }\n            }\n            if (!extremes) { // Chart extremes\n                extremes = propMetrics.globalExtremes[useContextValue ? contextValueProp : mapTo];\n            }\n            if (scale) {\n                // Build a musical scale from array\n                const scaleAxis = [], minOctave = Math.floor(min / 12), maxOctave = Math.ceil(max / 12) + 1, lenScale = scale.length;\n                for (let octave = minOctave; octave < maxOctave; ++octave) {\n                    for (let scaleIx = 0; scaleIx < lenScale; ++scaleIx) {\n                        const note = 12 * octave + scale[scaleIx];\n                        if (note >= min && note <= max) {\n                            scaleAxis.push(note);\n                        }\n                    }\n                }\n                // Map to the scale\n                const noteNum = mapToVirtualAxis(value, extremes, { min: 0, max: scaleAxis.length - 1 }, isInverted, mapFunc === 'logarithmic');\n                return scaleAxis[Math.round(noteNum)];\n            }\n            return mapToVirtualAxis(value, extremes, { min, max }, isInverted, mapFunc === 'logarithmic');\n        }\n        /**\n         * Get mapping parameter value with defined fallback and defaults.\n         * @private\n         */\n        function getParamValWithDefault(context, propMetrics, useSeriesExtremes, mappingParamOptions, fallback, defaults, contextValueProp) {\n            return pick(getMappingParameterValue(context, propMetrics, useSeriesExtremes, extend({\n                min: 0, max: 1, mapTo: 'y', mapFunction: 'linear', within: 'chart'\n            }, (defaults || {})), mappingParamOptions, contextValueProp), fallback);\n        }\n        /**\n         * Get time value for a point event.\n         * @private\n         */\n        function getPointTime(point, startTime, duration, timeMappingOptions, propMetrics, useSeriesExtremes) {\n            const time = getParamValWithDefault({ point, time: 0 }, propMetrics, useSeriesExtremes, timeMappingOptions, 0, { min: 0, max: duration, mapTo: 'x' });\n            return time + startTime;\n        }\n        /**\n         * Get duration for a series\n         * @private\n         */\n        function getAvailableDurationForSeries(series, totalDuration, propMetrics, afterSeriesWait) {\n            let timeProp, seriesDuration;\n            const availableDuration = totalDuration -\n                (series.chart.series.length - 1) * afterSeriesWait, hasGlobalTimeProp = propMetrics.seriesTimeProps.every((timeProps) => {\n                const props = Object.keys(timeProps);\n                if (props.length > 1) {\n                    return false;\n                }\n                if (!timeProp) {\n                    timeProp = props[0];\n                }\n                return timeProp === props[0];\n            });\n            if (hasGlobalTimeProp) {\n                // Chart-wide single time prop, use time prop extremes\n                const seriesExtremes = propMetrics\n                    .seriesExtremes[series.index][timeProp], seriesTimeLen = seriesExtremes.max - seriesExtremes.min, totalTimeLen = propMetrics.seriesExtremes.reduce((sum, s) => (s[timeProp] ?\n                    sum + s[timeProp].max - s[timeProp].min :\n                    sum), 0);\n                seriesDuration = Math.round(seriesTimeLen / totalTimeLen * availableDuration);\n            }\n            else {\n                // No common time prop, so use percent of total points\n                const totalPoints = series.chart.series.reduce((sum, s) => sum + s.points.length, 0);\n                seriesDuration = Math.round((series.points || []).length / totalPoints * availableDuration);\n            }\n            return Math.max(50, seriesDuration);\n        }\n        /**\n         * Build and add a track to the timeline.\n         * @private\n         */\n        function addTimelineChannelFromTrack(timeline, audioContext, destinationNode, options) {\n            const speechOpts = options, instrMappingOpts = (options.mapping || {}), engine = options.type === 'speech' ?\n                new SonificationSpeaker({\n                    language: speechOpts.language,\n                    name: speechOpts.preferredVoice\n                }) :\n                new SonificationInstrument(audioContext, destinationNode, {\n                    capabilities: {\n                        pan: !!instrMappingOpts.pan,\n                        tremolo: !!instrMappingOpts.tremolo,\n                        filters: !!(instrMappingOpts.highpass ||\n                            instrMappingOpts.lowpass)\n                    },\n                    synthPatch: options.instrument,\n                    midiTrackName: options.midiName\n                });\n            return timeline.addChannel(options.type || 'instrument', engine, pick(options.showPlayMarker, true));\n        }\n        /**\n         * Add event from a point to a mapped instrument track.\n         * @private\n         */\n        function addMappedInstrumentEvent(context, channel, mappingOptions, propMetrics, roundToMusicalNotes, contextValueProp) {\n            const getParam = (param, fallback, defaults, parent) => getParamValWithDefault(context, propMetrics, false, (parent || mappingOptions)[param], fallback, defaults, contextValueProp);\n            const eventsAdded = [], eventOpts = {\n                noteDuration: getParam('noteDuration', 200, { min: 40, max: 1000 }),\n                pan: getParam('pan', 0, { min: -1, max: 1 }),\n                volume: getParam('volume', 1, { min: 0.1, max: 1 })\n            };\n            if (mappingOptions.frequency) {\n                eventOpts.frequency = getParam('frequency', 440, { min: 50, max: 6000 });\n            }\n            if (mappingOptions.lowpass) {\n                eventOpts.lowpassFreq = getParam('frequency', 20000, { min: 0, max: 20000 }, mappingOptions.lowpass);\n                eventOpts.lowpassResonance = getParam('resonance', 0, { min: -6, max: 12 }, mappingOptions.lowpass);\n            }\n            if (mappingOptions.highpass) {\n                eventOpts.highpassFreq = getParam('frequency', 20000, { min: 0, max: 20000 }, mappingOptions.highpass);\n                eventOpts.highpassResonance = getParam('resonance', 0, { min: -6, max: 12 }, mappingOptions.highpass);\n            }\n            if (mappingOptions.tremolo) {\n                eventOpts.tremoloDepth = getParam('depth', 0, { min: 0, max: 0.8 }, mappingOptions.tremolo);\n                eventOpts.tremoloSpeed = getParam('speed', 0, { min: 0, max: 0.8 }, mappingOptions.tremolo);\n            }\n            const gapBetweenNotes = getParam('gapBetweenNotes', 150, { min: 50, max: 1000 }), playDelay = getParam('playDelay', 0, { max: 200 });\n            const addNoteEvent = (noteDef, ix = 0) => {\n                let opts = noteDef;\n                if (noteDef.mapTo) {\n                    // Transform the pitch mapping options to normal mapping options\n                    if (typeof noteDef.min === 'string') {\n                        opts.min = SonificationInstrument\n                            .noteStringToC0Distance(noteDef.min);\n                    }\n                    if (typeof noteDef.max === 'string') {\n                        opts.max = SonificationInstrument\n                            .noteStringToC0Distance(noteDef.max);\n                    }\n                }\n                else if (typeof noteDef === 'string' && isNoteDefinition(noteDef)) {\n                    opts = SonificationInstrument.noteStringToC0Distance(noteDef);\n                }\n                eventOpts.note = getParamValWithDefault(context, propMetrics, false, opts, -1, { min: 0, max: 107 }, contextValueProp);\n                if (eventOpts.note > -1) {\n                    if (roundToMusicalNotes) {\n                        eventOpts.note = Math.round(eventOpts.note);\n                    }\n                    eventsAdded.push(channel.addEvent({\n                        time: context.time + playDelay + gapBetweenNotes * ix,\n                        relatedPoint: context.point,\n                        instrumentEventOptions: ix !== void 0 ?\n                            extend({}, eventOpts) : eventOpts\n                    }));\n                }\n            };\n            if (mappingOptions.pitch &&\n                mappingOptions.pitch.constructor === Array) {\n                mappingOptions.pitch.forEach(addNoteEvent);\n            }\n            else if (mappingOptions.pitch) {\n                addNoteEvent(mappingOptions.pitch);\n            }\n            else if (mappingOptions.frequency) {\n                eventsAdded.push(channel.addEvent({\n                    time: context.time + playDelay,\n                    relatedPoint: context.point,\n                    instrumentEventOptions: eventOpts\n                }));\n            }\n            return eventsAdded;\n        }\n        /**\n         * Get the message value to speak for a point.\n         * @private\n         */\n        function getSpeechMessageValue(context, messageParam) {\n            return format(typeof messageParam === 'function' ?\n                messageParam(context) :\n                messageParam, context, context.point && context.point.series.chart);\n        }\n        /**\n         * Add an event from a point to a mapped speech track.\n         * @private\n         */\n        function addMappedSpeechEvent(context, channel, mappingOptions, propMetrics, contextValueProp) {\n            const getParam = (param, fallback, defaults) => getParamValWithDefault(context, propMetrics, false, mappingOptions[param], fallback, defaults, contextValueProp);\n            const playDelay = getParam('playDelay', 0, { max: 200 }), pitch = getParam('pitch', 1, { min: 0.3, max: 2 }), rate = getParam('rate', 1, { min: 0.4, max: 4 }), volume = getParam('volume', 1, { min: 0.1 }), message = getSpeechMessageValue(context, mappingOptions.text);\n            if (message) {\n                return channel.addEvent({\n                    time: context.time + playDelay,\n                    relatedPoint: context.point,\n                    speechOptions: {\n                        pitch,\n                        rate,\n                        volume\n                    },\n                    message\n                });\n            }\n        }\n        /**\n         * Add events to a channel for a point&track combo.\n         * @private\n         */\n        function addMappedEventForPoint(context, channel, trackOptions, propMetrics) {\n            let eventsAdded = [];\n            if (trackOptions.type === 'speech' && trackOptions.mapping) {\n                const eventAdded = addMappedSpeechEvent(context, channel, trackOptions.mapping, propMetrics);\n                if (eventAdded) {\n                    eventsAdded = [eventAdded];\n                }\n            }\n            else if (trackOptions.mapping) {\n                eventsAdded = addMappedInstrumentEvent(context, channel, trackOptions.mapping, propMetrics, pick(trackOptions\n                    .roundToMusicalNotes, true));\n            }\n            return eventsAdded;\n        }\n        /**\n         * Get a reduced set of points from a list, depending on grouping opts.\n         * @private\n         */\n        function getGroupedPoints(pointGroupOpts, points) {\n            const alg = pointGroupOpts.algorithm || 'minmax', r = (ix) => (points[ix] ? [points[ix].point] : []);\n            if (alg === 'first') {\n                return r(0);\n            }\n            if (alg === 'last') {\n                return r(points.length - 1);\n            }\n            if (alg === 'middle') {\n                return r(points.length >> 1);\n            }\n            if (alg === 'firstlast') {\n                return r(0).concat(r(points.length - 1));\n            }\n            if (alg === 'minmax') {\n                const prop = pointGroupOpts.prop || 'y';\n                let min, max, minVal, maxVal;\n                points.forEach((p) => {\n                    const val = getPointPropValue(p.point, prop);\n                    if (val === void 0) {\n                        return;\n                    }\n                    if (!min || val < minVal) {\n                        min = p;\n                        minVal = val;\n                    }\n                    if (!max || val > maxVal) {\n                        max = p;\n                        maxVal = val;\n                    }\n                });\n                if (min && max) {\n                    if (min.point === max.point) {\n                        return [min.point];\n                    }\n                    return min.time > max.time ?\n                        [max.point, min.point] :\n                        [min.point, max.point];\n                }\n            }\n            return [];\n        }\n        /**\n         * Should a track be active for this event?\n         * @private\n         */\n        function isActive(context, activeWhen, lastPropValue) {\n            if (typeof activeWhen === 'function') {\n                return activeWhen(context);\n            }\n            if (typeof activeWhen === 'object') {\n                const prop = activeWhen.prop, val = pick(context.value, context.point && getPointPropValue(context.point, prop));\n                if (typeof val !== 'number') {\n                    return false;\n                }\n                let crossingOk = true;\n                const crossingUp = activeWhen.crossingUp, crossingDown = activeWhen.crossingDown, hasLastValue = typeof lastPropValue === 'number';\n                if (crossingUp && crossingDown) {\n                    crossingOk = hasLastValue && (lastPropValue < crossingUp && val >= crossingUp ||\n                        lastPropValue > crossingDown && val <= crossingDown);\n                }\n                else {\n                    crossingOk = (crossingUp === void 0 ||\n                        hasLastValue && lastPropValue < crossingUp &&\n                            val >= crossingUp) && (crossingDown === void 0 ||\n                        hasLastValue && lastPropValue > crossingDown &&\n                            val <= crossingDown);\n                }\n                const max = pick(activeWhen.max, Infinity), min = pick(activeWhen.min, -Infinity);\n                return val <= max && val >= min && crossingOk;\n            }\n            return true;\n        }\n        /**\n         * Build a new timeline object from a chart.\n         * @private\n         */\n        function timelineFromChart(audioContext, destinationNode, chart) {\n            const options = chart.options.sonification ||\n                {}, defaultInstrOpts = options.defaultInstrumentOptions, defaultSpeechOpts = options.defaultSpeechOptions, defaultPointGroupOpts = merge({\n                enabled: true,\n                groupTimespan: 15,\n                algorithm: 'minmax',\n                prop: 'y'\n            }, options.pointGrouping), globalTracks = options.globalTracks || [], globalContextTracks = options.globalContextTracks || [], isSequential = options.order === 'sequential', \n            // Slight margin for note end\n            totalDuration = Math.max(50, options.duration - 300), afterSeriesWait = options.afterSeriesWait, eventOptions = options.events || {}, propMetrics = getPropMetrics(chart), timeline = new SonificationTimeline({\n                onPlay: eventOptions.onPlay,\n                onEnd: eventOptions.onEnd,\n                onStop: eventOptions.onStop,\n                showCrosshair: options.showCrosshair,\n                showTooltip: options.showTooltip\n            }, chart);\n            // Expose PropMetrics for tests\n            if (chart.sonification) {\n                chart.sonification.propMetrics = propMetrics;\n            }\n            let startTime = 0;\n            chart.series.forEach((series, seriesIx) => {\n                const sOptions = series.options.sonification ||\n                    {};\n                if (series.visible && sOptions.enabled !== false) {\n                    const seriesDuration = isSequential ? getAvailableDurationForSeries(series, totalDuration, propMetrics, afterSeriesWait) : totalDuration, seriesDefaultInstrOpts = merge(defaultInstrOpts, sOptions.defaultInstrumentOptions), seriesDefaultSpeechOpts = merge(defaultSpeechOpts, sOptions.defaultSpeechOptions), seriesPointGroupOpts = merge(defaultPointGroupOpts, sOptions.pointGrouping), mainTracks = (sOptions.tracks || [seriesDefaultInstrOpts])\n                        .concat(globalTracks), hasAddedSeries = !!timeline.channels.length, contextTracks = hasAddedSeries && !isSequential ?\n                        sOptions.contextTracks || [] :\n                        (sOptions.contextTracks || []).concat(globalContextTracks), eventsAdded = [];\n                    // For crossing threshold notifications\n                    let lastPropValue;\n                    // Add events for the mapped tracks\n                    mainTracks.forEach((trackOpts) => {\n                        const mergedOpts = merge({\n                            pointGrouping: seriesPointGroupOpts,\n                            midiName: trackOpts.midiName || series.name\n                        }, trackOpts.type === 'speech' ?\n                            seriesDefaultSpeechOpts : seriesDefaultInstrOpts, trackOpts), pointGroupOpts = mergedOpts.pointGrouping, activeWhen = mergedOpts.activeWhen, updateLastPropValue = (point) => {\n                            if (typeof activeWhen === 'object' &&\n                                activeWhen.prop) {\n                                lastPropValue = getPointPropValue(point, activeWhen.prop);\n                            }\n                        };\n                        const channel = addTimelineChannelFromTrack(timeline, audioContext, destinationNode, mergedOpts), add = (c) => eventsAdded.push(\n                        // Note arrays add multiple events\n                        ...addMappedEventForPoint(c, channel, mergedOpts, propMetrics));\n                        // Go through the points and add events to channel\n                        let pointGroup = [], pointGroupTime = 0;\n                        const addCurrentPointGroup = (groupSpanTime) => {\n                            if (pointGroup.length === 1) {\n                                add({\n                                    point: pointGroup[0].point,\n                                    time: pointGroupTime + groupSpanTime / 2\n                                });\n                            }\n                            else {\n                                const points = getGroupedPoints(pointGroupOpts, pointGroup), t = groupSpanTime / points.length;\n                                points.forEach((p, ix) => add({\n                                    point: p,\n                                    time: pointGroupTime + t / 2 + t * ix\n                                }));\n                            }\n                            pointGroup = [];\n                        };\n                        (series.points || []).forEach((point, pointIx) => {\n                            const isLastPoint = pointIx === series.points.length - 1;\n                            const time = getPointTime(point, startTime, seriesDuration, mergedOpts.mapping && mergedOpts.mapping.time || 0, propMetrics, isSequential);\n                            const context = { point, time };\n                            // Is this point active?\n                            if (!mergedOpts.mapping ||\n                                !isActive(context, activeWhen, lastPropValue)) {\n                                updateLastPropValue(point);\n                                // Remaining points in group\n                                if (isLastPoint && pointGroup.length) {\n                                    addCurrentPointGroup(pointGroup[pointGroup.length - 1].time -\n                                        pointGroup[0].time);\n                                }\n                                return;\n                            }\n                            updateLastPropValue(point);\n                            // Add the events\n                            if (!pointGroupOpts.enabled) {\n                                add(context);\n                            }\n                            else {\n                                const dT = time - pointGroupTime, groupSpan = pointGroupOpts.groupTimespan, spanTime = isLastPoint &&\n                                    dT <= groupSpan ? dT : groupSpan;\n                                if (isLastPoint || dT > groupSpan) {\n                                    if (dT <= groupSpan) {\n                                        // Only happens if last point is within group\n                                        pointGroup.push(context);\n                                    }\n                                    addCurrentPointGroup(spanTime);\n                                    pointGroupTime = Math.floor(time / groupSpan) *\n                                        groupSpan;\n                                    if (isLastPoint && dT > groupSpan) {\n                                        add({\n                                            point: context.point,\n                                            time: pointGroupTime + spanTime / 2\n                                        });\n                                    }\n                                    else {\n                                        pointGroup = [context];\n                                    }\n                                }\n                                else {\n                                    pointGroup.push(context);\n                                }\n                            }\n                        });\n                    });\n                    // Add callbacks to first/last events\n                    const firstEvent = eventsAdded.reduce((first, e) => (e.time < first.time ? e : first), { time: Infinity });\n                    const lastEvent = eventsAdded.reduce((last, e) => (e.time > last.time ? e : last), { time: -Infinity });\n                    firstEvent.callback = eventOptions.onSeriesStart ?\n                        eventOptions.onSeriesStart.bind(null, { series, timeline }) :\n                        void 0;\n                    lastEvent.callback = eventOptions.onSeriesEnd ?\n                        eventOptions.onSeriesEnd.bind(null, { series, timeline }) :\n                        void 0;\n                    // Add the context tracks that are not related to points\n                    contextTracks.forEach((trackOpts) => {\n                        const mergedOpts = trackOpts.type === 'speech' ?\n                            merge(defaultSpeechOpts, trackOpts) :\n                            merge(defaultInstrOpts, {\n                                mapping: { pitch: { mapTo: 'value' } }\n                            }, trackOpts);\n                        const contextChannel = addTimelineChannelFromTrack(timeline, audioContext, destinationNode, mergedOpts);\n                        lastPropValue = void 0;\n                        const { timeInterval, valueInterval } = mergedOpts, valueProp = mergedOpts.valueProp || 'x', activeWhen = mergedOpts.activeWhen, contextExtremes = propMetrics\n                            .seriesExtremes[seriesIx][valueProp], addContextEvent = (time, value) => {\n                            if (!mergedOpts.mapping ||\n                                !isActive({ time, value }, typeof activeWhen === 'object' ?\n                                    extend({ prop: valueProp }, activeWhen) :\n                                    activeWhen, lastPropValue)) {\n                                lastPropValue = value;\n                                return;\n                            }\n                            lastPropValue = value;\n                            if (mergedOpts.type === 'speech') {\n                                addMappedSpeechEvent({ time, value }, contextChannel, mergedOpts.mapping, propMetrics, valueProp);\n                            }\n                            else {\n                                addMappedInstrumentEvent({ time, value }, contextChannel, mergedOpts.mapping, propMetrics, pick(mergedOpts.roundToMusicalNotes, true), valueProp);\n                            }\n                        };\n                        if (timeInterval) {\n                            let time = 0;\n                            while (time <= seriesDuration) {\n                                const val = mapToVirtualAxis(time, { min: 0, max: seriesDuration }, contextExtremes);\n                                addContextEvent(time + startTime, val);\n                                time += timeInterval;\n                            }\n                        }\n                        if (valueInterval) {\n                            let val = contextExtremes.min;\n                            while (val <= contextExtremes.max) {\n                                const time = mapToVirtualAxis(val, contextExtremes, { min: 0, max: seriesDuration }, false, mergedOpts.valueMapFunction === 'logarithmic');\n                                addContextEvent(time + startTime, val);\n                                val += valueInterval;\n                            }\n                        }\n                    });\n                    if (isSequential) {\n                        startTime += seriesDuration + afterSeriesWait;\n                    }\n                }\n            });\n            return timeline;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return timelineFromChart;\n    });\n    _registerModule(_modules, 'Extensions/Sonification/Sonification.js', [_modules['Core/Defaults.js'], _modules['Core/Utilities.js'], _modules['Core/Globals.js'], _modules['Extensions/Sonification/Options.js'], _modules['Extensions/Sonification/SonificationInstrument.js'], _modules['Extensions/Sonification/SonificationSpeaker.js'], _modules['Extensions/Sonification/SynthPatch.js'], _modules['Extensions/Sonification/InstrumentPresets.js'], _modules['Extensions/Sonification/TimelineFromChart.js']], function (D, U, H, defaultSonificationOptions, SonificationInstrument, SonificationSpeaker, SynthPatch, InstrumentPresets, timelineFromChart) {\n        /* *\n         *\n         *  (c) 2009-2024 Øystein Moseng\n         *\n         *  Sonification module.\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { defaultOptions, getOptions } = D;\n        const { addEvent, extend, fireEvent, merge, pick } = U;\n        const { doc, win } = H;\n        /**\n         * The Sonification class. This class represents a chart's sonification\n         * capabilities. A chart automatically gets an instance of this class when\n         * applicable.\n         *\n         * @sample highcharts/sonification/chart-events\n         *         Basic demo accessing some of the chart.sonification methods.\n         * @sample highcharts/demo/sonification-navigation\n         *         More advanced demo using more functionality.\n         *\n         * @requires modules/sonification\n         *\n         * @class\n         * @name Highcharts.Sonification\n         *\n         * @param {Highcharts.Chart} chart The chart to tie the sonification to\n         */\n        class Sonification {\n            constructor(chart) {\n                this.chart = chart;\n                this.retryContextCounter = 0;\n                this.lastUpdate = 0;\n                this.unbindKeydown = addEvent(doc, 'keydown', function (e) {\n                    if (chart && chart.sonification &&\n                        (e.key === 'Esc' || e.key === 'Escape')) {\n                        chart.sonification.cancel();\n                    }\n                });\n                try {\n                    this.audioContext = new win.AudioContext();\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this.audioContext.suspend();\n                    this.audioDestination = this.audioContext.destination;\n                }\n                catch (e) { /* Ignore */ }\n            }\n            /**\n             * Set the audio destination node to something other than the default\n             * output. This allows for inserting custom WebAudio chains after the\n             * sonification.\n             * @function Highcharts.Sonification#setAudioDestination\n             * @param {AudioDestinationNode} audioDestination The destination node\n             */\n            setAudioDestination(audioDestination) {\n                this.audioDestination = audioDestination;\n                this.update();\n            }\n            /**\n             * Check if sonification is playing currently\n             * @function Highcharts.Sonification#isPlaying\n             * @return {boolean} `true` if currently playing, `false` if not\n             */\n            isPlaying() {\n                return !!this.timeline && this.timeline.isPlaying;\n            }\n            /**\n             * Divide timeline into 100 parts of equal time, and play one of them.\n             * Can be used for scrubbing navigation.\n             * @function Highcharts.Sonification#playSegment\n             *\n             * @sample highcharts/sonification/scrubbing\n             *         Scrubbing with slider\n             *\n             * @param {number} segment The segment to play, from 0 to 100\n             * @param {Highcharts.SonificationChartEventCallback} [onEnd] Callback to call after play completed\n             */\n            playSegment(segment, onEnd) {\n                if (!this.ready(this.playSegment.bind(this, segment, onEnd))) {\n                    return;\n                }\n                if (this.timeline) {\n                    this.timeline.playSegment(segment, onEnd);\n                }\n            }\n            /**\n             * Play point(s)/event(s) adjacent to current timeline cursor location.\n             * @function Highcharts.Sonification#playAdjacent\n             *\n             * @sample highcharts/demo/sonification-navigation\n             *         Sonification keyboard navigation\n             *\n             * @param {number} next Pass `true` to play next point, `false` for previous\n             * @param {Highcharts.SonificationChartEventCallback} [onEnd]\n             * Callback to call after play completed\n             * @param {Highcharts.SonificationTimelineFilterCallback} [eventFilter]\n             * Filter to apply to the events before finding adjacent to play\n             */\n            playAdjacent(next, onEnd, eventFilter) {\n                if (!this.ready(this.playAdjacent.bind(this, next, onEnd, eventFilter))) {\n                    return;\n                }\n                if (this.timeline) {\n                    const opts = this.chart.options.sonification, onHit = opts && opts.events && opts.events.onBoundaryHit;\n                    if (!onHit) {\n                        this.initBoundaryInstrument();\n                    }\n                    this.timeline.playAdjacent(next, onEnd, onHit || (() => {\n                        this.defaultBoundaryHit();\n                    }), eventFilter);\n                }\n            }\n            /**\n             * Play next/previous series, picking the point closest to a prop value\n             * from last played point. By default picks the point in the adjacent\n             * series with the closest x value as the last played point.\n             * @function Highcharts.Sonification#playAdjacentSeries\n             *\n             * @sample highcharts/demo/sonification-navigation\n             *         Sonification keyboard navigation\n             *\n             * @param {number} next Pass `true` to play next series, `false` for previous\n             * @param {string} [prop] Prop to find closest value of, defaults to `x`.\n             * @param {Highcharts.SonificationChartEventCallback} [onEnd]\n             * Callback to call after play completed\n             *\n             * @return {Highcharts.Series|null} The played series, or `null` if none found\n             */\n            playAdjacentSeries(next, prop = 'x', onEnd) {\n                const lastPlayed = this.getLastPlayedPoint();\n                if (lastPlayed) {\n                    const targetSeriesIx = lastPlayed.series.index + (next ? 1 : -1);\n                    this.playClosestToProp(prop, lastPlayed[prop], (e) => !!e.relatedPoint &&\n                        e.relatedPoint.series.index === targetSeriesIx, onEnd);\n                    return this.chart.series[targetSeriesIx] || null;\n                }\n                return null;\n            }\n            /**\n             * Play point(s)/event(s) closest to a prop relative to a reference value.\n             * @function Highcharts.Sonification#playClosestToProp\n             *\n             * @param {string} prop Prop to compare.\n             * @param {number} targetValue Target value to find closest value of.\n             * @param {Highcharts.SonificationTimelineFilterCallback} [targetFilter]\n             * Filter to apply to the events before finding closest point(s)\n             * @param {Highcharts.SonificationChartEventCallback} [onEnd]\n             * Callback to call after play completed\n             */\n            playClosestToProp(prop, targetValue, targetFilter, onEnd) {\n                if (!this.ready(this.playClosestToProp.bind(this, prop, targetValue, targetFilter, onEnd))) {\n                    return;\n                }\n                if (this.timeline) {\n                    const opts = this.chart.options.sonification, onHit = opts && opts.events && opts.events.onBoundaryHit;\n                    if (!onHit) {\n                        this.initBoundaryInstrument();\n                    }\n                    this.timeline.playClosestToPropValue(prop, targetValue, onEnd, onHit || (() => this.defaultBoundaryHit()), targetFilter);\n                }\n            }\n            /**\n             * Get last played point\n             * @function Highcharts.Sonification#getLastPlayedPoint\n             *\n             * @sample highcharts/demo/sonification-navigation\n             *         Sonification keyboard navigation\n             *\n             * @return {Highcharts.Point|null} The point, or null if none\n             */\n            getLastPlayedPoint() {\n                if (this.timeline) {\n                    return this.timeline.getLastPlayedPoint();\n                }\n                return null;\n            }\n            /**\n             * Play a note with a specific instrument, and optionally a time offset.\n             * @function Highcharts.Sonification#playNote\n             *\n             * @sample highcharts/sonification/chart-events\n             *         Custom notifications\n             *\n             * @param {Highcharts.SonificationSynthPreset|Highcharts.SynthPatchOptionsObject} instrument\n             * The instrument to play. Can be either a string referencing the\n             * instrument presets, or an actual SynthPatch configuration.\n             * @param {Highcharts.SonificationInstrumentScheduledEventOptionsObject} options\n             * Configuration for the instrument event to play.\n             * @param {number} [delayMs]\n             * Time offset from now, in milliseconds. Defaults to 0.\n             */\n            playNote(instrument, options, delayMs = 0) {\n                if (!this.ready(this.playNote.bind(this, instrument, options))) {\n                    return;\n                }\n                const duration = options.noteDuration = options.noteDuration || 500;\n                const instr = new SonificationInstrument(this.audioContext, this.audioDestination, {\n                    synthPatch: instrument,\n                    capabilities: {\n                        filters: true,\n                        tremolo: true,\n                        pan: true\n                    }\n                });\n                instr.scheduleEventAtTime(delayMs / 1000, options);\n                setTimeout(() => instr && instr.destroy(), delayMs + duration + 500);\n            }\n            /**\n             * Speak a text string, optionally with a custom speaker configuration\n             * @function Highcharts.Sonification#speak\n             *\n             * @sample highcharts/sonification/chart-events\n             *         Custom notifications\n             *\n             * @param {string} text Text to announce\n             * @param {Highcharts.SonificationSpeakerOptionsObject} [speakerOptions]\n             * Options for the announcement\n             * @param {number} [delayMs]\n             * Time offset from now, in milliseconds. Defaults to 0.\n             */\n            speak(text, speakerOptions, delayMs = 0) {\n                const speaker = new SonificationSpeaker(merge({\n                    language: 'en-US',\n                    rate: 1.5,\n                    volume: 0.4\n                }, speakerOptions || {}));\n                speaker.sayAtTime(delayMs, text);\n            }\n            /**\n             * Cancel current playing audio and reset the timeline.\n             * @function Highcharts.Sonification#cancel\n             */\n            cancel() {\n                if (this.timeline) {\n                    this.timeline.cancel();\n                }\n                fireEvent(this, 'cancel');\n            }\n            /**\n             * Start download of a MIDI file export of the timeline.\n             * @function Highcharts.Sonification#downloadMIDI\n             */\n            downloadMIDI() {\n                if (!this.ready(this.downloadMIDI.bind(this))) {\n                    return;\n                }\n                if (this.timeline) {\n                    this.timeline.reset();\n                    this.timeline.downloadMIDI();\n                }\n            }\n            /**\n             * Implementation of chart.sonify\n             * @private\n             */\n            sonifyChart(resetAfter, onEnd) {\n                if (!this.ready(this.sonifyChart.bind(this, resetAfter, onEnd))) {\n                    return;\n                }\n                if (this.timeline) {\n                    this.timeline.reset();\n                    this.beforePlay();\n                    this.timeline.play(void 0, void 0, resetAfter, onEnd);\n                }\n            }\n            /**\n             * Implementation of series.sonify\n             * @private\n             */\n            sonifySeries(series, resetAfter, onEnd) {\n                if (!this.ready(this.sonifySeries.bind(this, series, resetAfter, onEnd))) {\n                    return;\n                }\n                if (this.timeline) {\n                    this.timeline.reset();\n                    this.beforePlay();\n                    this.timeline.play((e) => !!e.relatedPoint && e.relatedPoint.series === series, void 0, resetAfter, onEnd);\n                }\n            }\n            /**\n             * Implementation of point.sonify\n             * @private\n             */\n            sonifyPoint(point, onEnd) {\n                if (!this.ready(this.sonifyPoint.bind(this, point, onEnd))) {\n                    return;\n                }\n                if (this.timeline) {\n                    this.timeline.reset();\n                    this.beforePlay();\n                    this.timeline.anchorPlayMoment((e) => e.relatedPoint === point, onEnd);\n                }\n            }\n            /**\n             * Set the overall/master volume for the sonification.\n             * Usually handled through chart update.\n             * @private\n             */\n            setMasterVolume(vol) {\n                if (this.timeline) {\n                    this.timeline.setMasterVolume(vol);\n                }\n            }\n            /**\n             * Destroy the sonification capabilities\n             * @private\n             */\n            destroy() {\n                this.unbindKeydown();\n                if (this.timeline) {\n                    this.timeline.destroy();\n                    delete this.timeline;\n                }\n                if (this.boundaryInstrument) {\n                    this.boundaryInstrument.stop();\n                }\n                if (this.audioContext) {\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this.audioContext.close();\n                    delete this.audioContext;\n                }\n            }\n            /**\n             * Update the timeline with latest chart changes. Usually handled\n             * automatically. Note that the [sonification.updateInterval](https://api.highcharts.com/highcharts/sonification.updateInterval)\n             * option can stop updates from happening in rapid succession, including\n             * manual calls to this function.\n             * @private\n             */\n            update() {\n                const sOpts = this.chart.options && this.chart.options.sonification;\n                if (!this.ready(this.update.bind(this)) || !sOpts) {\n                    return;\n                }\n                // Don't update too often, it gets performance intensive\n                const now = Date.now(), updateInterval = sOpts.updateInterval;\n                if (now - this.lastUpdate < updateInterval && !this.forceReady) {\n                    clearTimeout(this.scheduledUpdate);\n                    this.scheduledUpdate = setTimeout(this.update.bind(this), updateInterval / 2);\n                    return;\n                }\n                const events = sOpts.events || {};\n                if (events.beforeUpdate) {\n                    events.beforeUpdate({ chart: this.chart, timeline: this.timeline });\n                }\n                this.lastUpdate = now;\n                if (this.timeline) {\n                    this.timeline.destroy();\n                }\n                if (this.audioContext && this.audioDestination) {\n                    this.timeline = timelineFromChart(this.audioContext, this.audioDestination, this.chart);\n                    const sOpts = this.chart.options.sonification;\n                    this.timeline.setMasterVolume(pick(sOpts && sOpts.masterVolume, 1));\n                }\n                if (events.afterUpdate) {\n                    events.afterUpdate({ chart: this.chart, timeline: this.timeline });\n                }\n            }\n            /**\n             * Only continue if sonification enabled. If audioContext is\n             * suspended, retry up to 20 times with a small delay.\n             * @private\n             */\n            ready(whenReady) {\n                if (!this.audioContext ||\n                    !this.audioDestination ||\n                    !this.chart.options ||\n                    this.chart.options.sonification &&\n                        this.chart.options.sonification.enabled === false) {\n                    return false;\n                }\n                if (this.audioContext.state === 'suspended' && !this.forceReady) {\n                    if (this.retryContextCounter++ < 20) {\n                        setTimeout(() => {\n                            if (this.audioContext &&\n                                this.audioContext.state === 'suspended') {\n                                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                                this.audioContext.resume().then(whenReady);\n                            }\n                            else {\n                                whenReady();\n                            }\n                        }, 5);\n                    }\n                    return false;\n                }\n                this.retryContextCounter = 0;\n                return true;\n            }\n            /**\n             * Call beforePlay event handler if exists\n             * @private\n             */\n            beforePlay() {\n                const opts = this.chart.options.sonification, beforePlay = opts && opts.events && opts.events.beforePlay;\n                if (beforePlay) {\n                    beforePlay({ chart: this.chart, timeline: this.timeline });\n                }\n            }\n            /**\n             * Initialize the builtin boundary hit instrument\n             * @private\n             */\n            initBoundaryInstrument() {\n                if (!this.boundaryInstrument) {\n                    this.boundaryInstrument = new SynthPatch(this.audioContext, merge(InstrumentPresets.chop, { masterVolume: 0.3 }));\n                    this.boundaryInstrument.startSilently();\n                    this.boundaryInstrument.connect(this.audioDestination);\n                }\n            }\n            /**\n             * The default boundary hit sound\n             * @private\n             */\n            defaultBoundaryHit() {\n                if (this.boundaryInstrument) {\n                    this.boundaryInstrument.playFreqAtTime(0.1, 1, 200);\n                    this.boundaryInstrument.playFreqAtTime(0.2, 1, 200);\n                }\n            }\n        }\n        (function (Sonification) {\n            const composedClasses = [];\n            /**\n             * Update sonification object on chart.\n             * @private\n             */\n            function updateSonificationEnabled() {\n                const sonification = this.sonification, sOptions = this.options && this.options.sonification;\n                if (sOptions && sOptions.enabled) {\n                    if (sonification) {\n                        sonification.update();\n                    }\n                    else {\n                        this.sonification = new Sonification(this);\n                        this.sonification.update();\n                    }\n                }\n                else if (sonification) {\n                    sonification.destroy();\n                    delete this.sonification;\n                }\n            }\n            /**\n             * Destroy with chart.\n             * @private\n             */\n            function chartOnDestroy() {\n                if (this && this.sonification) {\n                    this.sonification.destroy();\n                }\n            }\n            /**\n             * Update on render\n             * @private\n             */\n            function chartOnRender() {\n                if (this.updateSonificationEnabled) {\n                    this.updateSonificationEnabled();\n                }\n            }\n            /**\n             * Update\n             * @private\n             */\n            function chartOnUpdate(e) {\n                const newOptions = e.options.sonification;\n                if (newOptions) {\n                    merge(true, this.options.sonification, newOptions);\n                    chartOnRender.call(this);\n                }\n            }\n            /**\n             * Compose\n             * @private\n             */\n            function compose(ChartClass, SeriesClass, PointClass) {\n                // Extend chart\n                if (composedClasses.indexOf(ChartClass) === -1) {\n                    composedClasses.push(ChartClass);\n                    extend(ChartClass.prototype, {\n                        updateSonificationEnabled,\n                        sonify: function (onEnd) {\n                            if (this.sonification) {\n                                this.sonification.sonifyChart(false, onEnd);\n                            }\n                        },\n                        toggleSonify: function (reset = true, onEnd) {\n                            if (!this.sonification) {\n                                return;\n                            }\n                            const timeline = this.sonification.timeline;\n                            if (win.speechSynthesis) {\n                                win.speechSynthesis.cancel();\n                            }\n                            if (timeline && this.sonification.isPlaying()) {\n                                if (reset) {\n                                    this.sonification.cancel();\n                                }\n                                else {\n                                    timeline.pause();\n                                }\n                            }\n                            else if (timeline && timeline.isPaused) {\n                                timeline.resume();\n                            }\n                            else {\n                                this.sonification.sonifyChart(reset, onEnd);\n                            }\n                        }\n                    });\n                    addEvent(ChartClass, 'destroy', chartOnDestroy);\n                    addEvent(ChartClass, 'render', chartOnRender);\n                    addEvent(ChartClass, 'update', chartOnUpdate);\n                }\n                // Extend series\n                if (composedClasses.indexOf(SeriesClass) === -1) {\n                    composedClasses.push(SeriesClass);\n                    SeriesClass.prototype.sonify = function (onEnd) {\n                        if (this.chart.sonification) {\n                            this.chart.sonification.sonifySeries(this, false, onEnd);\n                        }\n                    };\n                }\n                // Extend points\n                if (composedClasses.indexOf(PointClass) === -1) {\n                    composedClasses.push(PointClass);\n                    PointClass.prototype.sonify = function (onEnd) {\n                        if (this.series.chart.sonification) {\n                            this.series.chart.sonification.sonifyPoint(this, onEnd);\n                        }\n                    };\n                }\n                // Add items to the exporting menu\n                const exportingOptions = getOptions().exporting;\n                if (exportingOptions &&\n                    exportingOptions.buttons &&\n                    exportingOptions.buttons.contextButton.menuItems) {\n                    exportingOptions.buttons.contextButton.menuItems.push('separator', 'downloadMIDI', 'playAsSound');\n                }\n            }\n            Sonification.compose = compose;\n        })(Sonification || (Sonification = {}));\n        // Add default options\n        merge(true, defaultOptions, defaultSonificationOptions);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API declarations\n         *\n         * */\n        /**\n         * Play a sonification of a chart.\n         *\n         * @function Highcharts.Chart#sonify\n         * @param {Highcharts.SonificationChartEventCallback} [onEnd]\n         * Callback to call after play completed\n         *\n         * @requires modules/sonification\n         */\n        /**\n         * Play/pause sonification of a chart.\n         *\n         * @function Highcharts.Chart#toggleSonify\n         *\n         * @param {boolean} [reset]\n         * Reset the playing cursor after play completed. Defaults to `true`.\n         * @param {Highcharts.SonificationChartEventCallback} [onEnd]\n         * Callback to call after play completed\n         *\n         * @requires modules/sonification\n         */\n        /**\n         * Play a sonification of a series.\n         *\n         * @function Highcharts.Series#sonify\n         * @param {Highcharts.SonificationChartEventCallback} [onEnd]\n         * Callback to call after play completed\n         *\n         * @requires modules/sonification\n         */\n        /**\n         * Play a sonification of a point.\n         *\n         * @function Highcharts.Point#sonify\n         * @param {Highcharts.SonificationChartEventCallback} [onEnd]\n         * Callback to call after play completed\n         *\n         * @requires modules/sonification\n         */\n        /**\n         * Sonification capabilities for the chart.\n         *\n         * @name Highcharts.Chart#sonification\n         * @type {Highcharts.Sonification|undefined}\n         *\n         * @requires modules/sonification\n         */\n        /**\n         * Collection of Sonification classes and objects.\n         * @requires modules/sonification\n         * @interface Highcharts.SonificationGlobalObject\n         */ /**\n        * SynthPatch presets\n        * @name Highcharts.SonificationGlobalObject#InstrumentPresets\n        * @type {Record<Highcharts.SonificationSynthPreset,Highcharts.SynthPatchOptionsObject>|undefined}\n        */ /**\n        * Musical scale presets\n        * @name Highcharts.SonificationGlobalObject#Scales\n        * @type {Highcharts.SonificationScalePresetsObject|undefined}\n        */ /**\n        * SynthPatch class\n        * @name Highcharts.SonificationGlobalObject#SynthPatch\n        * @type {Highcharts.SynthPatch|undefined}\n        */ /**\n        * SonificationInstrument class\n        * @name Highcharts.SonificationGlobalObject#SonificationInstrument\n        * @type {Highcharts.SonificationInstrument|undefined}\n        */ /**\n        * SonificationSpeaker class\n        * @name Highcharts.SonificationGlobalObject#SonificationSpeaker\n        * @type {Highcharts.SonificationSpeaker|undefined}\n        */\n        /**\n         * Global Sonification classes and objects.\n         *\n         * @name Highcharts.sonification\n         * @type {Highcharts.SonificationGlobalObject}\n         *\n         * @requires modules/sonification\n         */\n        (''); // Keep above doclets in JS file\n\n        return Sonification;\n    });\n    _registerModule(_modules, 'Extensions/Sonification/Scales.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Øystein Moseng\n         *\n         *  Musical scales for sonification.\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const Scales = {\n            minor: [0, 2, 3, 5, 7, 8, 10],\n            dorian: [0, 2, 3, 5, 7, 9, 10],\n            harmonicMinor: [0, 2, 3, 5, 7, 8, 11],\n            phrygian: [0, 1, 3, 5, 7, 8, 11],\n            major: [0, 2, 4, 5, 7, 9, 11],\n            lydian: [0, 2, 4, 6, 7, 9, 11],\n            mixolydian: [0, 2, 4, 5, 7, 9, 10],\n            majorPentatonic: [0, 2, 4, 7, 9],\n            minorPentatonic: [0, 3, 5, 7, 10]\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API declarations\n         *\n         * */\n        /**\n         * Preset scales for pitch mapping.\n         * @requires modules/sonification\n         * @interface Highcharts.SonificationScalePresetsObject\n         */ /**\n        * Minor scale (aeolian)\n        * @name Highcharts.SonificationScalePresetsObject#minor\n        * @type {Array<number>}\n        */ /**\n        * Dorian scale\n        * @name Highcharts.SonificationScalePresetsObject#dorian\n        * @type {Array<number>}\n        */ /**\n        * Harmonic minor scale\n        * @name Highcharts.SonificationScalePresetsObject#harmonicMinor\n        * @type {Array<number>}\n        */ /**\n        * Phrygian scale\n        * @name Highcharts.SonificationScalePresetsObject#phrygian\n        * @type {Array<number>}\n        */ /**\n        * Major (ionian) scale\n        * @name Highcharts.SonificationScalePresetsObject#major\n        * @type {Array<number>}\n        */ /**\n        * Lydian scale\n        * @name Highcharts.SonificationScalePresetsObject#lydian\n        * @type {Array<number>}\n        */ /**\n        * Mixolydian scale\n        * @name Highcharts.SonificationScalePresetsObject#mixolydian\n        * @type {Array<number>}\n        */ /**\n        * Major pentatonic scale\n        * @name Highcharts.SonificationScalePresetsObject#majorPentatonic\n        * @type {Array<number>}\n        */ /**\n        * Minor pentatonic scale\n        * @name Highcharts.SonificationScalePresetsObject#minorPentatonic\n        * @type {Array<number>}\n        */\n        (''); // Keep above doclets in JS file\n\n        return Scales;\n    });\n    _registerModule(_modules, 'masters/modules/sonification.src.js', [_modules['Core/Globals.js'], _modules['Extensions/Sonification/Sonification.js'], _modules['Extensions/Sonification/SynthPatch.js'], _modules['Extensions/Sonification/InstrumentPresets.js'], _modules['Extensions/Sonification/Scales.js'], _modules['Extensions/Sonification/SonificationInstrument.js'], _modules['Extensions/Sonification/SonificationSpeaker.js'], _modules['Extensions/Sonification/SonificationTimeline.js']], function (Highcharts, Sonification, SynthPatch, InstrumentPresets, Scales, SonificationInstrument, SonificationSpeaker, SonificationTimeline) {\n\n        const G = Highcharts;\n        // Global objects\n        G.sonification = {\n            InstrumentPresets,\n            Scales,\n            SynthPatch,\n            SonificationInstrument,\n            SonificationSpeaker,\n            SonificationTimeline,\n            Sonification\n        };\n        Sonification.compose(G.Chart, G.Series, G.Point);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","sonification","enabled","duration","afterSeriesWait","updateInterval","masterVolume","order","showTooltip","showCrosshair","pointGrouping","groupTimespan","algorithm","prop","defaultInstrumentOptions","roundToMusicalNotes","instrument","mapping","time","pan","noteDuration","pitch","mapTo","min","max","within","gapBetweenNotes","defaultSpeechOptions","language","rate","volume","exporting","menuItemDefinitions","downloadMIDI","textKey","onclick","playAsSound","s","isPlaying","cancel","sonify","lang","U","clamp","defined","pick","getPitchTrackedMultiplierVal","multiplier","freq","a","Math","log","miniRampToVolAtTime","gainNode","vol","gain","cancelScheduledValues","setTargetAtTime","SynthPatch","stopRampTime","setValueAtTime","scheduleGainEnvelope","envelope","type","volumeMultiplier","isAtk","length","t","unshift","forEach","ep","ix","prev","delta","startTime","PulseOscNode","constructor","context","options","pulseWidth","makeOsc","OscillatorNode","detune","frequency","sawOscA","sawOscB","phaseInverter","GainNode","masterGain","delayNode","DelayNode","delayTime","value","connect","destination","getFrequencyFacade","pulse","fromTime","round","timeConstant","getPWMTarget","start","stop","Oscillator","audioContext","fmOscillatorIx","fmOscillator","vmOscillatorIx","vmOscillator","createSoundSource","createGain","createFilters","createVolTracking","lowpassNode","highpassNode","volTrackingNode","vmNode","whiteNoise","pulseNode","oscNode","reduce","cur","stopAtTime","setFreqAtTime","glideDuration","opts","f","fixedFrequency","freqMultiplier","oscTarget","getOscTarget","lastUpdateTime","scheduleVolTrackingChange","scheduleFilterTrackingChange","getFMTarget","getVMTarget","runEnvelopeAtTime","attackEnvelope","releaseEnvelope","cancelScheduled","currentTime","v","volumePitchTrackingMultiplier","rampTime","scheduleFilterTarget","filterNode","filterOptions","frequencyPitchTrackingMultiplier","lowpass","highpass","ctx","bSize","sampleRate","buffer","createBuffer","data","getChannelData","i","random","wn","createBufferSource","loop","BiquadFilterNode","Q","eqNodes","midiInstrument","outputNode","createEqChain","inputNode","oscillators","map","oscOpts","osc","connectTarget","targetFunc","targetOsc","target","startSilently","o","curTime","endTime","disconnect","silenceAtTime","releaseAtTime","mute","playFreqAtTime","noteGlideDuration","masterAttackEnvelope","destinationNode","eq","eqDef","reduceRight","chain","node","maxReleaseDuration","env","masterEnv","masterReleaseEnvelope","piano","plucked","flute","lead","vibraphone","saxophone","trumpet","sawsynth","basic1","basic2","chord","wobble","sine","sineGlide","triangle","sawtooth","square","chop","shaker","step","kick","shortnote","noise","filteredNoise","wind","InstrumentPresets","extend","SonificationInstrument","curParams","midiTrackName","masterVolNode","volumeNode","createNodesFromCapabilities","capabilities","connectCapabilityNodes","synthPatch","setMasterVolume","scheduleEventAtTime","params","mergedParams","note","musicalNoteToFrequency","tremoloDepth","tremoloSpeed","setTremoloAtTime","setPanAtTime","setVolumeAtTime","lowpassFreq","lowpassResonance","setFilterAtTime","highpassFreq","highpassResonance","tremoloOsc","panNode","p","destroy","n","filter","resonance","audioTime","depth","speed","StereoPannerNode","tremolo","filters","input","output","noteStringToC0Distance","match","semitone","wholetone","toLowerCase","accidental","c","d","e","g","b","octave","parseInt","pow","synthesis","window","speechSynthesis","onvoiceschanged","setVoice","bind","scheduled","say","message","utterance","SpeechSynthesisUtterance","voice","speak","sayAtTime","push","setTimeout","clearTimeout","langFallback","name","voices","getVoices","len","engine","showPlayMarker","events","muted","addEvent","event","lastEvent","splice","unmute","freqToNote","LN2","byte","getHeader","nTracks","timeInfo","varLenEnc","buf","res","toMIDIEvents","cachedVel","cachedDur","add","el","timeMS","instrumentEventOptions","dur","tNOF","ctrl","valMap","noteVal","ctrlDef","Object","keys","ctrlSignal","val","getMetaEvents","textArr","code","charCodeAt","concat","getTrackChunk","addTimeInfo","prevTime","metaEvents","trackEvents","trackEnd","size","channels","channelsToAdd","numCh","multiCh","Uint8Array","chunks","channel","H","isSafari","document","doc","domurl","URL","webkitURL","dataURLtoBlob","dataURL","parts","replace","atob","ArrayBuffer","Blob","createObjectURL","binStr","binary","downloadURL","filename","nav","navigator","createElement","String","msSaveOrOpenBlob","userAgent","Error","isOldEdgeBrowser","test","safariBlob","indexOf","download","href","body","appendChild","click","removeChild","open","location","TimelineChannel","toMIDI","DU","find","merge","chart","isPaused","scheduledCallbacks","playTimestamp","resumeFromTime","addChannel","play","filterPersists","resetAfter","onEnd","clearScheduledCallbacks","onEndArgument","Date","now","skipThreshold","onPlay","filterChannels","filtered","filteredEvents","minTime","acc","Infinity","playingChannels","getEventKeysSignature","speechOptions","join","pointsPlayed","timeline","maxTime","numEvents","lastCallbackTime","lastEventTime","lastEventKeys","keysSig","point","relatedPoint","series","needsCallback","callback","xAxis","crosshair","drawCrosshair","yAxis","hoverPoints","onMouseOver","onEndOpt","onStop","resetPlayState","tooltip","hide","hoverSeries","onMouseOut","axes","hideCrosshair","getLength","pause","getCurrentTime","resume","resumeFrom","anchorPlayMoment","eventFilter","finalEventTime","arr","playAdjacent","next","onBoundaryHit","closestTime","lastValidTime","mid","cmp","attemptedNext","withinTime","playClosestToPropValue","targetVal","closestValDiff","closestEvent","diff","abs","getEventsForPoint","pointEvents","playSegment","segment","eventTimes","first","last","segmentSize","toTime","some","getLastPlayedPoint","closestDiff","closestPoint","reset","getMIDIData","title","text","blob","url","revokeObjectURL","SonificationTimeline","SonificationSpeaker","T","getNestedProperty","format","isNoteDefinition","str","getPointPropValue","ret","mapToVirtualAxis","valueExtremes","virtualAxisExtremes","invert","logarithmic","lenValueAxis","lenVirtualAxis","virtualValueDelta","x","LOG10E","adjustedNum","LN10","logValMin","getParamValWithDefault","propMetrics","useSeriesExtremes","mappingParamOptions","fallback","defaults","contextValueProp","getMappingParameterValue","defaultMapping","mappingOptions","mapFunc","mapFunction","scale","isInverted","charAt","slice","useContextValue","fixedValue","extremes","axis","dataMin","dataMax","seriesExtremes","index","globalExtremes","scaleAxis","minOctave","floor","maxOctave","ceil","lenScale","scaleIx","noteNum","addTimelineChannelFromTrack","instrMappingOpts","speechOpts","preferredVoice","midiName","addMappedInstrumentEvent","getParam","param","parent","eventsAdded","eventOpts","playDelay","addNoteEvent","noteDef","Array","addMappedSpeechEvent","messageParam","isActive","activeWhen","lastPropValue","crossingOk","crossingUp","crossingDown","hasLastValue","defaultInstrOpts","defaultSpeechOpts","defaultPointGroupOpts","globalTracks","globalContextTracks","isSequential","totalDuration","eventOptions","getPropMetrics","globalOpts","defaultInstrMapping","defaultSpeechMapping","seriesTimeProps","commonTimeProps","addTimeProp","seriesIx","props","perSeriesProps","addPropFromMappingParam","removeInvertedFlag","paramOpts","subParam","addPropsFromMappingOptions","addPropsFromContextTracks","tracks","track","valueProp","hasCommonTimeProps","sOpts","visible","contextTracks","trackOpts","getChartExtremesForProps","numProps","numSeriesProps","initCache","propList","cache","updateCache","allSeriesExtremes","points","j","k","sOptions","seriesDuration","getAvailableDurationForSeries","timeProp","availableDuration","every","timeProps","seriesTimeLen","sum","totalPoints","seriesDefaultInstrOpts","seriesDefaultSpeechOpts","seriesPointGroupOpts","mainTracks","hasAddedSeries","mergedOpts","pointGroupOpts","updateLastPropValue","addMappedEventForPoint","trackOptions","eventAdded","pointGroup","pointGroupTime","addCurrentPointGroup","groupSpanTime","getGroupedPoints","alg","r","minVal","maxVal","pointIx","isLastPoint","dT","groupSpan","spanTime","firstEvent","onSeriesStart","onSeriesEnd","contextChannel","timeInterval","valueInterval","contextExtremes","addContextEvent","valueMapFunction","D","defaultSonificationOptions","timelineFromChart","defaultOptions","getOptions","fireEvent","Sonification","retryContextCounter","lastUpdate","unbindKeydown","key","AudioContext","suspend","audioDestination","setAudioDestination","update","ready","onHit","initBoundaryInstrument","defaultBoundaryHit","playAdjacentSeries","lastPlayed","targetSeriesIx","playClosestToProp","targetValue","targetFilter","playNote","delayMs","instr","speakerOptions","speaker","sonifyChart","beforePlay","sonifySeries","sonifyPoint","boundaryInstrument","close","forceReady","scheduledUpdate","beforeUpdate","afterUpdate","whenReady","state","then","composedClasses","updateSonificationEnabled","chartOnDestroy","chartOnRender","chartOnUpdate","newOptions","call","compose","ChartClass","SeriesClass","PointClass","prototype","toggleSonify","exportingOptions","buttons","contextButton","menuItems","minor","dorian","harmonicMinor","phrygian","major","lydian","mixolydian","majorPentatonic","minorPentatonic","Scales","G","Chart","Series","Point"],"mappings":"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"}