{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * Exporting module\n *\n * (c) 2010-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/export-data', ['highcharts', 'highcharts/modules/exporting'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/DownloadURL.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2015-2024 Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Mixin for downloading content in the browser\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { isSafari, win, win: { document: doc } } = H;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const domurl = win.URL || win.webkitURL || win;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Convert base64 dataURL to Blob if supported, otherwise returns undefined.\n         * @private\n         * @function Highcharts.dataURLtoBlob\n         * @param {string} dataURL\n         *        URL to convert\n         * @return {string|undefined}\n         *         Blob\n         */\n        function dataURLtoBlob(dataURL) {\n            const parts = dataURL\n                .replace(/filename=.*;/, '')\n                .match(/data:([^;]*)(;base64)?,([A-Z+\\d\\/]+)/i);\n            if (parts &&\n                parts.length > 3 &&\n                (win.atob) &&\n                win.ArrayBuffer &&\n                win.Uint8Array &&\n                win.Blob &&\n                (domurl.createObjectURL)) {\n                // Try to convert data URL to Blob\n                const binStr = win.atob(parts[3]), buf = new win.ArrayBuffer(binStr.length), binary = new win.Uint8Array(buf);\n                for (let i = 0; i < binary.length; ++i) {\n                    binary[i] = binStr.charCodeAt(i);\n                }\n                return domurl\n                    .createObjectURL(new win.Blob([binary], { 'type': parts[1] }));\n            }\n        }\n        /**\n         * Download a data URL in the browser. Can also take a blob as first param.\n         *\n         * @private\n         * @function Highcharts.downloadURL\n         * @param {string|global.URL} dataURL\n         *        The dataURL/Blob to download\n         * @param {string} filename\n         *        The name of the resulting file (w/extension)\n         * @return {void}\n         */\n        function downloadURL(dataURL, filename) {\n            const nav = win.navigator, a = doc.createElement('a');\n            // IE specific blob implementation\n            // Don't use for normal dataURLs\n            if (typeof dataURL !== 'string' &&\n                !(dataURL instanceof String) &&\n                nav.msSaveOrOpenBlob) {\n                nav.msSaveOrOpenBlob(dataURL, filename);\n                return;\n            }\n            dataURL = '' + dataURL;\n            if (nav.userAgent.length > 1000 /* RegexLimits.shortLimit */) {\n                throw new Error('Input too long');\n            }\n            const // Some browsers have limitations for data URL lengths. Try to convert\n            // to Blob or fall back. Edge always needs that blob.\n            isOldEdgeBrowser = /Edge\\/\\d+/.test(nav.userAgent), \n            // Safari on iOS needs Blob in order to download PDF\n            safariBlob = (isSafari &&\n                typeof dataURL === 'string' &&\n                dataURL.indexOf('data:application/pdf') === 0);\n            if (safariBlob || isOldEdgeBrowser || dataURL.length > 2000000) {\n                dataURL = dataURLtoBlob(dataURL) || '';\n                if (!dataURL) {\n                    throw new Error('Failed to convert to blob');\n                }\n            }\n            // Try HTML5 download attr if supported\n            if (typeof a.download !== 'undefined') {\n                a.href = dataURL;\n                a.download = filename; // HTML5 download attribute\n                doc.body.appendChild(a);\n                a.click();\n                doc.body.removeChild(a);\n            }\n            else {\n                // No download attr, just opening data URI\n                try {\n                    if (!win.open(dataURL, 'chart')) {\n                        throw new Error('Failed to open window');\n                    }\n                }\n                catch {\n                    // If window.open failed, try location.href\n                    win.location.href = dataURL;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DownloadURL = {\n            dataURLtoBlob,\n            downloadURL\n        };\n\n        return DownloadURL;\n    });\n    _registerModule(_modules, 'Extensions/ExportData/ExportDataDefaults.js', [], function () {\n        /* *\n         *\n         *  Experimental data export module for Highcharts\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * @optionparent exporting\n         * @private\n         */\n        const exporting = {\n            /**\n             * Caption for the data table. Same as chart title by default. Set to\n             * `false` to disable.\n             *\n             * @sample highcharts/export-data/multilevel-table\n             *         Multiple table headers\n             *\n             * @type      {boolean|string}\n             * @since     6.0.4\n             * @requires  modules/export-data\n             * @apioption exporting.tableCaption\n             */\n            /**\n             * Options for exporting data to CSV or ExCel, or displaying the data\n             * in a HTML table or a JavaScript structure.\n             *\n             * This module adds data export options to the export menu and provides\n             * functions like `Chart.getCSV`, `Chart.getTable`, `Chart.getDataRows`\n             * and `Chart.viewData`.\n             *\n             * The XLS converter is limited and only creates a HTML string that is\n             * passed for download, which works but creates a warning before\n             * opening. The workaround for this is to use a third party XLSX\n             * converter, as demonstrated in the sample below.\n             *\n             * @sample  highcharts/export-data/categorized/ Categorized data\n             * @sample  highcharts/export-data/stock-timeaxis/ Highcharts Stock time axis\n             * @sample  highcharts/export-data/xlsx/\n             *          Using a third party XLSX converter\n             *\n             * @since    6.0.0\n             * @requires modules/export-data\n             */\n            csv: {\n                /**\n                 *\n                 * Options for annotations in the export-data table.\n                 *\n                 * @since 8.2.0\n                 * @requires modules/export-data\n                 * @requires modules/annotations\n                 *\n                 *\n                 */\n                annotations: {\n                    /**\n                    * The way to mark the separator for annotations\n                    * combined in one export-data table cell.\n                    *\n                    * @since 8.2.0\n                    * @requires modules/annotations\n                    */\n                    itemDelimiter: '; ',\n                    /**\n                    * When several labels are assigned to a specific point,\n                    * they will be displayed in one field in the table.\n                    *\n                    * @sample highcharts/export-data/join-annotations/\n                    *         Concatenate point annotations with itemDelimiter set.\n                    *\n                    * @since 8.2.0\n                    * @requires modules/annotations\n                    */\n                    join: false\n                },\n                /**\n                 * Formatter callback for the column headers. Parameters are:\n                 * - `item` - The series or axis object)\n                 * - `key` -  The point key, for example y or z\n                 * - `keyLength` - The amount of value keys for this item, for\n                 *   example a range series has the keys `low` and `high` so the\n                 *   key length is 2.\n                 *\n                 * If [useMultiLevelHeaders](#exporting.useMultiLevelHeaders) is\n                 * true, columnHeaderFormatter by default returns an object with\n                 * columnTitle and topLevelColumnTitle for each key. Columns with\n                 * the same topLevelColumnTitle have their titles merged into a\n                 * single cell with colspan for table/Excel export.\n                 *\n                 * If `useMultiLevelHeaders` is false, or for CSV export, it returns\n                 * the series name, followed by the key if there is more than one\n                 * key.\n                 *\n                 * For the axis it returns the axis title or \"Category\" or\n                 * \"DateTime\" by default.\n                 *\n                 * Return `false` to use Highcharts' proposed header.\n                 *\n                 * @sample highcharts/export-data/multilevel-table\n                 *         Multiple table headers\n                 *\n                 * @type {Function|null}\n                 */\n                columnHeaderFormatter: null,\n                /**\n                 * Which date format to use for exported dates on a datetime X axis.\n                 * See `Highcharts.dateFormat`.\n                 */\n                dateFormat: '%Y-%m-%d %H:%M:%S',\n                /**\n                 * Which decimal point to use for exported CSV. Defaults to the same\n                 * as the browser locale, typically `.` (English) or `,` (German,\n                 * French etc).\n                 *\n                 * @type  {string|null}\n                 * @since 6.0.4\n                 */\n                decimalPoint: null,\n                /**\n                 * The item delimiter in the exported data. Use `;` for direct\n                 * exporting to Excel. Defaults to a best guess based on the browser\n                 * locale. If the locale _decimal point_ is `,`, the `itemDelimiter`\n                 * defaults to `;`, otherwise the `itemDelimiter` defaults to `,`.\n                 *\n                 * @type {string|null}\n                 */\n                itemDelimiter: null,\n                /**\n                 * The line delimiter in the exported data, defaults to a newline.\n                 */\n                lineDelimiter: '\\n'\n            },\n            /**\n             * Show a HTML table below the chart with the chart's current data.\n             *\n             * @sample highcharts/export-data/showtable/\n             *         Show the table\n             * @sample highcharts/studies/exporting-table-html\n             *         Experiment with putting the table inside the subtitle to\n             *         allow exporting it.\n             *\n             * @since    6.0.0\n             * @requires modules/export-data\n             */\n            showTable: false,\n            /**\n             * Use multi level headers in data table. If [csv.columnHeaderFormatter\n             * ](#exporting.csv.columnHeaderFormatter) is defined, it has to return\n             * objects in order for multi level headers to work.\n             *\n             * @sample highcharts/export-data/multilevel-table\n             *         Multiple table headers\n             *\n             * @since    6.0.4\n             * @requires modules/export-data\n             */\n            useMultiLevelHeaders: true,\n            /**\n             * If using multi level table headers, use rowspans for headers that\n             * have only one level.\n             *\n             * @sample highcharts/export-data/multilevel-table\n             *         Multiple table headers\n             *\n             * @since    6.0.4\n             * @requires modules/export-data\n             */\n            useRowspanHeaders: true,\n            /**\n             * Display a message when export is in progress.\n             * Uses [Chart.setLoading()](/class-reference/Highcharts.Chart#setLoading)\n             *\n             * The message can be altered by changing [](#lang.exporting.exportInProgress)\n             *\n             * @since 11.3.0\n             * @requires modules/export-data\n             */\n            showExportInProgress: true\n        };\n        /**\n         * @optionparent lang\n         * @private\n         */\n        const lang = {\n            /**\n             * The text for the menu item.\n             *\n             * @since    6.0.0\n             * @requires modules/export-data\n             */\n            downloadCSV: 'Download CSV',\n            /**\n             * The text for the menu item.\n             *\n             * @since    6.0.0\n             * @requires modules/export-data\n             */\n            downloadXLS: 'Download XLS',\n            /**\n             * The text for exported table.\n             *\n             * @since 8.1.0\n             * @requires modules/export-data\n             */\n            exportData: {\n                /**\n                 * The annotation column title.\n                 */\n                annotationHeader: 'Annotations',\n                /**\n                 * The category column title.\n                 */\n                categoryHeader: 'Category',\n                /**\n                 * The category column title when axis type set to \"datetime\".\n                 */\n                categoryDatetimeHeader: 'DateTime'\n            },\n            /**\n             * The text for the menu item.\n             *\n             * @since    6.0.0\n             * @requires modules/export-data\n             */\n            viewData: 'View data table',\n            /**\n             * The text for the menu item.\n             *\n             * @since 8.2.0\n             * @requires modules/export-data\n             */\n            hideData: 'Hide data table',\n            /**\n             * Text to show when export is in progress.\n             *\n             * @since 11.3.0\n             * @requires modules/export-data\n             */\n            exportInProgress: 'Exporting...'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ExportDataDefaults = {\n            exporting,\n            lang\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Callback that fires while exporting data. This allows the modification of\n         * data rows before processed into the final format.\n         *\n         * @type      {Highcharts.ExportDataCallbackFunction}\n         * @context   Highcharts.Chart\n         * @requires  modules/export-data\n         * @apioption chart.events.exportData\n         */\n        /**\n         * When set to `false` will prevent the series data from being included in\n         * any form of data export.\n         *\n         * Since version 6.0.0 until 7.1.0 the option was existing undocumented\n         * as `includeInCSVExport`.\n         *\n         * @type      {boolean}\n         * @since     7.1.0\n         * @requires  modules/export-data\n         * @apioption plotOptions.series.includeInDataExport\n         */\n        (''); // Keep doclets above in JS file\n\n        return ExportDataDefaults;\n    });\n    _registerModule(_modules, 'Extensions/ExportData/ExportData.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Defaults.js'], _modules['Extensions/DownloadURL.js'], _modules['Extensions/ExportData/ExportDataDefaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (AST, D, DownloadURL, ExportDataDefaults, H, U) {\n        /* *\n         *\n         *  Experimental data export module for Highcharts\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        // @todo\n        // - Set up systematic tests for all series types, paired with tests of the data\n        //   module importing the same data.\n        const { getOptions, setOptions } = D;\n        const { downloadURL } = DownloadURL;\n        const { doc, win } = H;\n        const { addEvent, defined, extend, find, fireEvent, isNumber, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Wrapper function for the download functions, which handles showing and hiding\n         * the loading message\n         *\n         * @private\n         *\n         */\n        function wrapLoading(fn) {\n            const showMessage = Boolean(this.options.exporting?.showExportInProgress);\n            // Prefer requestAnimationFrame if available\n            const timeoutFn = win.requestAnimationFrame || setTimeout;\n            // Outer timeout avoids menu freezing on click\n            timeoutFn(() => {\n                showMessage && this.showLoading(this.options.lang.exportInProgress);\n                timeoutFn(() => {\n                    try {\n                        fn.call(this);\n                    }\n                    finally {\n                        showMessage && this.hideLoading();\n                    }\n                });\n            });\n        }\n        /**\n         * Generates a data URL of CSV for local download in the browser. This is the\n         * default action for a click on the 'Download CSV' button.\n         *\n         * See {@link Highcharts.Chart#getCSV} to get the CSV data itself.\n         *\n         * @function Highcharts.Chart#downloadCSV\n         *\n         * @requires modules/exporting\n         */\n        function chartDownloadCSV() {\n            wrapLoading.call(this, () => {\n                const csv = this.getCSV(true);\n                downloadURL(getBlobFromContent(csv, 'text/csv') ||\n                    'data:text/csv,\\uFEFF' + encodeURIComponent(csv), this.getFilename() + '.csv');\n            });\n        }\n        /**\n         * Generates a data URL of an XLS document for local download in the browser.\n         * This is the default action for a click on the 'Download XLS' button.\n         *\n         * See {@link Highcharts.Chart#getTable} to get the table data itself.\n         *\n         * @function Highcharts.Chart#downloadXLS\n         *\n         * @requires modules/exporting\n         */\n        function chartDownloadXLS() {\n            wrapLoading.call(this, () => {\n                const uri = 'data:application/vnd.ms-excel;base64,', template = '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" ' +\n                    'xmlns:x=\"urn:schemas-microsoft-com:office:excel\" ' +\n                    'xmlns=\"http://www.w3.org/TR/REC-html40\">' +\n                    '<head><!--[if gte mso 9]><xml><x:ExcelWorkbook>' +\n                    '<x:ExcelWorksheets><x:ExcelWorksheet>' +\n                    '<x:Name>Ark1</x:Name>' +\n                    '<x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions>' +\n                    '</x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook>' +\n                    '</xml><![endif]-->' +\n                    '<style>td{border:none;font-family: Calibri, sans-serif;} ' +\n                    '.number{mso-number-format:\"0.00\";} ' +\n                    '.text{ mso-number-format:\"\\@\";}</style>' +\n                    '<meta name=ProgId content=Excel.Sheet>' +\n                    '<meta charset=UTF-8>' +\n                    '</head><body>' +\n                    this.getTable(true) +\n                    '</body></html>', base64 = function (s) {\n                    return win.btoa(unescape(encodeURIComponent(s))); // #50\n                };\n                downloadURL(getBlobFromContent(template, 'application/vnd.ms-excel') ||\n                    uri + base64(template), this.getFilename() + '.xls');\n            });\n        }\n        /**\n         * Export-data module required. Returns the current chart data as a CSV string.\n         *\n         * @function Highcharts.Chart#getCSV\n         *\n         * @param {boolean} [useLocalDecimalPoint]\n         *        Whether to use the local decimal point as detected from the browser.\n         *        This makes it easier to export data to Excel in the same locale as the\n         *        user is.\n         *\n         * @return {string}\n         *         CSV representation of the data\n         */\n        function chartGetCSV(useLocalDecimalPoint) {\n            let csv = '';\n            const rows = this.getDataRows(), csvOptions = this.options.exporting.csv, decimalPoint = pick(csvOptions.decimalPoint, csvOptions.itemDelimiter !== ',' && useLocalDecimalPoint ?\n                (1.1).toLocaleString()[1] :\n                '.'), \n            // Use ';' for direct to Excel\n            itemDelimiter = pick(csvOptions.itemDelimiter, decimalPoint === ',' ? ';' : ','), \n            // '\\n' isn't working with the js csv data extraction\n            lineDelimiter = csvOptions.lineDelimiter;\n            // Transform the rows to CSV\n            rows.forEach((row, i) => {\n                let val = '', j = row.length;\n                while (j--) {\n                    val = row[j];\n                    if (typeof val === 'string') {\n                        val = `\"${val}\"`;\n                    }\n                    if (typeof val === 'number') {\n                        if (decimalPoint !== '.') {\n                            val = val.toString().replace('.', decimalPoint);\n                        }\n                    }\n                    row[j] = val;\n                }\n                // The first row is the header - it defines the number of columns.\n                // Empty columns between not-empty cells are covered in the getDataRows\n                // method.\n                // Now add empty values only to the end of the row so all rows have\n                // the same number of columns, #17186\n                row.length = rows.length ? rows[0].length : 0;\n                // Add the values\n                csv += row.join(itemDelimiter);\n                // Add the line delimiter\n                if (i < rows.length - 1) {\n                    csv += lineDelimiter;\n                }\n            });\n            return csv;\n        }\n        /**\n         * Export-data module required. Returns a two-dimensional array containing the\n         * current chart data.\n         *\n         * @function Highcharts.Chart#getDataRows\n         *\n         * @param {boolean} [multiLevelHeaders]\n         *        Use multilevel headers for the rows by default. Adds an extra row with\n         *        top level headers. If a custom columnHeaderFormatter is defined, this\n         *        can override the behavior.\n         *\n         * @return {Array<Array<(number|string)>>}\n         *         The current chart data\n         *\n         * @emits Highcharts.Chart#event:exportData\n         */\n        function chartGetDataRows(multiLevelHeaders) {\n            const hasParallelCoords = this.hasParallelCoordinates, time = this.time, csvOptions = ((this.options.exporting && this.options.exporting.csv) || {}), xAxes = this.xAxis, rows = {}, rowArr = [], topLevelColumnTitles = [], columnTitles = [], langOptions = this.options.lang, exportDataOptions = langOptions.exportData, categoryHeader = exportDataOptions.categoryHeader, categoryDatetimeHeader = exportDataOptions.categoryDatetimeHeader, \n            // Options\n            columnHeaderFormatter = function (item, key, keyLength) {\n                if (csvOptions.columnHeaderFormatter) {\n                    const s = csvOptions.columnHeaderFormatter(item, key, keyLength);\n                    if (s !== false) {\n                        return s;\n                    }\n                }\n                if (!item) {\n                    return categoryHeader;\n                }\n                if (!item.bindAxes) {\n                    return (item.options.title &&\n                        item.options.title.text) || (item.dateTime ?\n                        categoryDatetimeHeader :\n                        categoryHeader);\n                }\n                if (multiLevelHeaders) {\n                    return {\n                        columnTitle: keyLength > 1 ?\n                            key :\n                            item.name,\n                        topLevelColumnTitle: item.name\n                    };\n                }\n                return item.name + (keyLength > 1 ? ' (' + key + ')' : '');\n            }, \n            // Map the categories for value axes\n            getCategoryAndDateTimeMap = function (series, pointArrayMap, pIdx) {\n                const categoryMap = {}, dateTimeValueAxisMap = {};\n                pointArrayMap.forEach(function (prop) {\n                    const axisName = ((series.keyToAxis && series.keyToAxis[prop]) ||\n                        prop) + 'Axis', \n                    // Points in parallel coordinates refers to all yAxis\n                    // not only `series.yAxis`\n                    axis = isNumber(pIdx) ?\n                        series.chart[axisName][pIdx] :\n                        series[axisName];\n                    categoryMap[prop] = (axis && axis.categories) || [];\n                    dateTimeValueAxisMap[prop] = (axis && axis.dateTime);\n                });\n                return {\n                    categoryMap: categoryMap,\n                    dateTimeValueAxisMap: dateTimeValueAxisMap\n                };\n            }, \n            // Create point array depends if xAxis is category\n            // or point.name is defined #13293\n            getPointArray = function (series, xAxis) {\n                const pointArrayMap = series.pointArrayMap || ['y'], namedPoints = series.data.some((d) => (typeof d.y !== 'undefined') && d.name);\n                // If there are points with a name, we also want the x value in the\n                // table\n                if (namedPoints &&\n                    xAxis &&\n                    !xAxis.categories &&\n                    series.exportKey !== 'name') {\n                    return ['x', ...pointArrayMap];\n                }\n                return pointArrayMap;\n            }, xAxisIndices = [];\n            let xAxis, dataRows, columnTitleObj, i = 0, // Loop the series and index values\n            x, xTitle;\n            this.series.forEach(function (series) {\n                const keys = series.options.keys, xAxis = series.xAxis, pointArrayMap = keys || getPointArray(series, xAxis), valueCount = pointArrayMap.length, xTaken = !series.requireSorting && {}, xAxisIndex = xAxes.indexOf(xAxis);\n                let categoryAndDatetimeMap = getCategoryAndDateTimeMap(series, pointArrayMap), mockSeries, j;\n                if (series.options.includeInDataExport !== false &&\n                    !series.options.isInternal &&\n                    series.visible !== false // #55\n                ) {\n                    // Build a lookup for X axis index and the position of the first\n                    // series that belongs to that X axis. Includes -1 for non-axis\n                    // series types like pies.\n                    if (!find(xAxisIndices, function (index) {\n                        return index[0] === xAxisIndex;\n                    })) {\n                        xAxisIndices.push([xAxisIndex, i]);\n                    }\n                    // Compute the column headers and top level headers, usually the\n                    // same as series names\n                    j = 0;\n                    while (j < valueCount) {\n                        columnTitleObj = columnHeaderFormatter(series, pointArrayMap[j], pointArrayMap.length);\n                        columnTitles.push(columnTitleObj.columnTitle || columnTitleObj);\n                        if (multiLevelHeaders) {\n                            topLevelColumnTitles.push(columnTitleObj.topLevelColumnTitle ||\n                                columnTitleObj);\n                        }\n                        j++;\n                    }\n                    mockSeries = {\n                        chart: series.chart,\n                        autoIncrement: series.autoIncrement,\n                        options: series.options,\n                        pointArrayMap: series.pointArrayMap,\n                        index: series.index\n                    };\n                    // Export directly from options.data because we need the uncropped\n                    // data (#7913), and we need to support Boost (#7026).\n                    series.options.data.forEach(function eachData(options, pIdx) {\n                        const mockPoint = { series: mockSeries };\n                        let key, prop, val;\n                        // In parallel coordinates chart, each data point is connected\n                        // to a separate yAxis, conform this\n                        if (hasParallelCoords) {\n                            categoryAndDatetimeMap = getCategoryAndDateTimeMap(series, pointArrayMap, pIdx);\n                        }\n                        series.pointClass.prototype.applyOptions.apply(mockPoint, [options]);\n                        const name = series.data[pIdx] && series.data[pIdx].name;\n                        key = (mockPoint.x ?? '') + ',' + name;\n                        j = 0;\n                        // Pies, funnels, geo maps etc. use point name in X row\n                        if (!xAxis ||\n                            series.exportKey === 'name' ||\n                            (!hasParallelCoords && xAxis && xAxis.hasNames) && name) {\n                            key = name;\n                        }\n                        if (xTaken) {\n                            if (xTaken[key]) {\n                                key += '|' + pIdx;\n                            }\n                            xTaken[key] = true;\n                        }\n                        if (!rows[key]) {\n                            rows[key] = [];\n                            rows[key].xValues = [];\n                            // ES5 replacement for Array.from / fill.\n                            const arr = [];\n                            for (let i = 0; i < series.chart.series.length; i++) {\n                                arr[i] = 0;\n                            }\n                            // Create pointers array, holding information how many\n                            // duplicates of specific x occurs in each series.\n                            // Used for creating rows with duplicates.\n                            rows[key].pointers = arr;\n                            rows[key].pointers[series.index] = 1;\n                        }\n                        else {\n                            // Handle duplicates (points with the same x), by creating\n                            // extra rows based on pointers for better performance.\n                            const modifiedKey = `${key},${rows[key].pointers[series.index]}`, originalKey = key;\n                            if (rows[key].pointers[series.index]) {\n                                if (!rows[modifiedKey]) {\n                                    rows[modifiedKey] = [];\n                                    rows[modifiedKey].xValues = [];\n                                    rows[modifiedKey].pointers = [];\n                                }\n                                key = modifiedKey;\n                            }\n                            rows[originalKey].pointers[series.index] += 1;\n                        }\n                        rows[key].x = mockPoint.x;\n                        rows[key].name = name;\n                        rows[key].xValues[xAxisIndex] = mockPoint.x;\n                        while (j < valueCount) {\n                            prop = pointArrayMap[j]; // `y`, `z` etc\n                            val = mockPoint[prop];\n                            rows[key][i + j] = pick(\n                            // Y axis category if present\n                            categoryAndDatetimeMap.categoryMap[prop][val], \n                            // Datetime yAxis\n                            categoryAndDatetimeMap.dateTimeValueAxisMap[prop] ?\n                                time.dateFormat(csvOptions.dateFormat, val) :\n                                null, \n                            // Linear/log yAxis\n                            val);\n                            j++;\n                        }\n                    });\n                    i = i + j;\n                }\n            });\n            // Make a sortable array\n            for (x in rows) {\n                if (Object.hasOwnProperty.call(rows, x)) {\n                    rowArr.push(rows[x]);\n                }\n            }\n            let xAxisIndex, column;\n            // Add computed column headers and top level headers to final row set\n            dataRows = multiLevelHeaders ? [topLevelColumnTitles, columnTitles] :\n                [columnTitles];\n            i = xAxisIndices.length;\n            while (i--) { // Start from end to splice in\n                xAxisIndex = xAxisIndices[i][0];\n                column = xAxisIndices[i][1];\n                xAxis = xAxes[xAxisIndex];\n                // Sort it by X values\n                rowArr.sort(function (// eslint-disable-line no-loop-func\n                a, b) {\n                    return a.xValues[xAxisIndex] - b.xValues[xAxisIndex];\n                });\n                // Add header row\n                xTitle = columnHeaderFormatter(xAxis);\n                dataRows[0].splice(column, 0, xTitle);\n                if (multiLevelHeaders && dataRows[1]) {\n                    // If using multi level headers, we just added top level header.\n                    // Also add for sub level\n                    dataRows[1].splice(column, 0, xTitle);\n                }\n                // Add the category column\n                rowArr.forEach(function (// eslint-disable-line no-loop-func\n                row) {\n                    let category = row.name;\n                    if (xAxis && !defined(category)) {\n                        if (xAxis.dateTime) {\n                            if (row.x instanceof Date) {\n                                row.x = row.x.getTime();\n                            }\n                            category = time.dateFormat(csvOptions.dateFormat, row.x);\n                        }\n                        else if (xAxis.categories) {\n                            category = pick(xAxis.names[row.x], xAxis.categories[row.x], row.x);\n                        }\n                        else {\n                            category = row.x;\n                        }\n                    }\n                    // Add the X/date/category\n                    row.splice(column, 0, category);\n                });\n            }\n            dataRows = dataRows.concat(rowArr);\n            fireEvent(this, 'exportData', { dataRows: dataRows });\n            return dataRows;\n        }\n        /**\n         * Export-data module required. Build a HTML table with the chart's current\n         * data.\n         *\n         * @sample highcharts/export-data/viewdata/\n         *         View the data from the export menu\n         *\n         * @function Highcharts.Chart#getTable\n         *\n         * @param {boolean} [useLocalDecimalPoint]\n         *        Whether to use the local decimal point as detected from the browser.\n         *        This makes it easier to export data to Excel in the same locale as the\n         *        user is.\n         *\n         * @return {string}\n         *         HTML representation of the data.\n         *\n         * @emits Highcharts.Chart#event:afterGetTable\n         */\n        function chartGetTable(useLocalDecimalPoint) {\n            const serialize = (node) => {\n                if (!node.tagName || node.tagName === '#text') {\n                    // Text node\n                    return node.textContent || '';\n                }\n                const attributes = node.attributes;\n                let html = `<${node.tagName}`;\n                if (attributes) {\n                    Object.keys(attributes)\n                        .forEach((key) => {\n                        const value = attributes[key];\n                        html += ` ${key}=\"${value}\"`;\n                    });\n                }\n                html += '>';\n                html += node.textContent || '';\n                (node.children || []).forEach((child) => {\n                    html += serialize(child);\n                });\n                html += `</${node.tagName}>`;\n                return html;\n            };\n            const tree = this.getTableAST(useLocalDecimalPoint);\n            return serialize(tree);\n        }\n        /**\n         * Get the AST of a HTML table representing the chart data.\n         *\n         * @private\n         *\n         * @function Highcharts.Chart#getTableAST\n         *\n         * @param {boolean} [useLocalDecimalPoint]\n         *        Whether to use the local decimal point as detected from the browser.\n         *        This makes it easier to export data to Excel in the same locale as the\n         *        user is.\n         *\n         * @return {Highcharts.ASTNode}\n         *         The abstract syntax tree\n         */\n        function chartGetTableAST(useLocalDecimalPoint) {\n            let rowLength = 0;\n            const treeChildren = [];\n            const options = this.options, decimalPoint = useLocalDecimalPoint ? (1.1).toLocaleString()[1] : '.', useMultiLevelHeaders = pick(options.exporting.useMultiLevelHeaders, true), rows = this.getDataRows(useMultiLevelHeaders), topHeaders = useMultiLevelHeaders ? rows.shift() : null, subHeaders = rows.shift(), \n            // Compare two rows for equality\n            isRowEqual = function (row1, row2) {\n                let i = row1.length;\n                if (row2.length === i) {\n                    while (i--) {\n                        if (row1[i] !== row2[i]) {\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    return false;\n                }\n                return true;\n            }, \n            // Get table cell HTML from value\n            getCellHTMLFromValue = function (tagName, classes, attributes, value) {\n                let textContent = pick(value, ''), className = 'highcharts-text' + (classes ? ' ' + classes : '');\n                // Convert to string if number\n                if (typeof textContent === 'number') {\n                    textContent = textContent.toString();\n                    if (decimalPoint === ',') {\n                        textContent = textContent.replace('.', decimalPoint);\n                    }\n                    className = 'highcharts-number';\n                }\n                else if (!value) {\n                    className = 'highcharts-empty';\n                }\n                attributes = extend({ 'class': className }, attributes);\n                return {\n                    tagName,\n                    attributes,\n                    textContent\n                };\n            }, \n            // Get table header markup from row data\n            getTableHeaderHTML = function (topheaders, subheaders, rowLength) {\n                const theadChildren = [];\n                let i = 0, len = rowLength || subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n                // Clean up multiple table headers. Chart.getDataRows() returns two\n                // levels of headers when using multilevel, not merged. We need to\n                // merge identical headers, remove redundant headers, and keep it\n                // all marked up nicely.\n                if (useMultiLevelHeaders &&\n                    topheaders &&\n                    subheaders &&\n                    !isRowEqual(topheaders, subheaders)) {\n                    const trChildren = [];\n                    for (; i < len; ++i) {\n                        cur = topheaders[i];\n                        next = topheaders[i + 1];\n                        if (cur === next) {\n                            ++curColspan;\n                        }\n                        else if (curColspan) {\n                            // Ended colspan\n                            // Add cur to HTML with colspan.\n                            trChildren.push(getCellHTMLFromValue('th', 'highcharts-table-topheading', {\n                                scope: 'col',\n                                colspan: curColspan + 1\n                            }, cur));\n                            curColspan = 0;\n                        }\n                        else {\n                            // Cur is standalone. If it is same as sublevel,\n                            // remove sublevel and add just toplevel.\n                            if (cur === subheaders[i]) {\n                                if (options.exporting.useRowspanHeaders) {\n                                    rowspan = 2;\n                                    delete subheaders[i];\n                                }\n                                else {\n                                    rowspan = 1;\n                                    subheaders[i] = '';\n                                }\n                            }\n                            else {\n                                rowspan = 1;\n                            }\n                            const cell = getCellHTMLFromValue('th', 'highcharts-table-topheading', { scope: 'col' }, cur);\n                            if (rowspan > 1 && cell.attributes) {\n                                cell.attributes.valign = 'top';\n                                cell.attributes.rowspan = rowspan;\n                            }\n                            trChildren.push(cell);\n                        }\n                    }\n                    theadChildren.push({\n                        tagName: 'tr',\n                        children: trChildren\n                    });\n                }\n                // Add the subheaders (the only headers if not using multilevels)\n                if (subheaders) {\n                    const trChildren = [];\n                    for (i = 0, len = subheaders.length; i < len; ++i) {\n                        if (typeof subheaders[i] !== 'undefined') {\n                            trChildren.push(getCellHTMLFromValue('th', null, { scope: 'col' }, subheaders[i]));\n                        }\n                    }\n                    theadChildren.push({\n                        tagName: 'tr',\n                        children: trChildren\n                    });\n                }\n                return {\n                    tagName: 'thead',\n                    children: theadChildren\n                };\n            };\n            // Add table caption\n            if (options.exporting.tableCaption !== false) {\n                treeChildren.push({\n                    tagName: 'caption',\n                    attributes: {\n                        'class': 'highcharts-table-caption'\n                    },\n                    textContent: pick(options.exporting.tableCaption, (options.title.text ?\n                        options.title.text :\n                        'Chart'))\n                });\n            }\n            // Find longest row\n            for (let i = 0, len = rows.length; i < len; ++i) {\n                if (rows[i].length > rowLength) {\n                    rowLength = rows[i].length;\n                }\n            }\n            // Add header\n            treeChildren.push(getTableHeaderHTML(topHeaders, subHeaders, Math.max(rowLength, subHeaders.length)));\n            // Transform the rows to HTML\n            const trs = [];\n            rows.forEach(function (row) {\n                const trChildren = [];\n                for (let j = 0; j < rowLength; j++) {\n                    // Make first column a header too. Especially important for\n                    // category axes, but also might make sense for datetime? Should\n                    // await user feedback on this.\n                    trChildren.push(getCellHTMLFromValue(j ? 'td' : 'th', null, j ? {} : { scope: 'row' }, row[j]));\n                }\n                trs.push({\n                    tagName: 'tr',\n                    children: trChildren\n                });\n            });\n            treeChildren.push({\n                tagName: 'tbody',\n                children: trs\n            });\n            const e = {\n                tree: {\n                    tagName: 'table',\n                    id: `highcharts-data-table-${this.index}`,\n                    children: treeChildren\n                }\n            };\n            fireEvent(this, 'aftergetTableAST', e);\n            return e.tree;\n        }\n        /**\n         * Export-data module required. Hide the data table when visible.\n         *\n         * @function Highcharts.Chart#hideData\n         */\n        function chartHideData() {\n            this.toggleDataTable(false);\n        }\n        /**\n         * @private\n         */\n        function chartToggleDataTable(show) {\n            show = pick(show, !this.isDataTableVisible);\n            // Create the div\n            const createContainer = show && !this.dataTableDiv;\n            if (createContainer) {\n                this.dataTableDiv = doc.createElement('div');\n                this.dataTableDiv.className = 'highcharts-data-table';\n                // Insert after the chart container\n                this.renderTo.parentNode.insertBefore(this.dataTableDiv, this.renderTo.nextSibling);\n            }\n            // Toggle the visibility\n            if (this.dataTableDiv) {\n                const style = this.dataTableDiv.style, oldDisplay = style.display;\n                style.display = show ? 'block' : 'none';\n                // Generate the data table\n                if (show) {\n                    this.dataTableDiv.innerHTML = AST.emptyHTML;\n                    const ast = new AST([this.getTableAST()]);\n                    ast.addToDOM(this.dataTableDiv);\n                    fireEvent(this, 'afterViewData', {\n                        element: this.dataTableDiv,\n                        wasHidden: createContainer || oldDisplay !== style.display\n                    });\n                }\n                else {\n                    fireEvent(this, 'afterHideData');\n                }\n            }\n            // Set the flag\n            this.isDataTableVisible = show;\n            // Change the menu item text\n            const exportDivElements = this.exportDivElements, options = this.options.exporting, menuItems = options &&\n                options.buttons &&\n                options.buttons.contextButton.menuItems, lang = this.options.lang;\n            if (options &&\n                options.menuItemDefinitions &&\n                lang &&\n                lang.viewData &&\n                lang.hideData &&\n                menuItems &&\n                exportDivElements) {\n                const exportDivElement = exportDivElements[menuItems.indexOf('viewData')];\n                if (exportDivElement) {\n                    AST.setElementHTML(exportDivElement, this.isDataTableVisible ? lang.hideData : lang.viewData);\n                }\n            }\n        }\n        /**\n         * Export-data module required. View the data in a table below the chart.\n         *\n         * @function Highcharts.Chart#viewData\n         *\n         * @emits Highcharts.Chart#event:afterViewData\n         */\n        function chartViewData() {\n            this.toggleDataTable(true);\n        }\n        /**\n         * @private\n         */\n        function compose(ChartClass, SeriesClass) {\n            const chartProto = ChartClass.prototype;\n            if (!chartProto.getCSV) {\n                const exportingOptions = getOptions().exporting;\n                // Add an event listener to handle the showTable option\n                addEvent(ChartClass, 'afterViewData', onChartAfterViewData);\n                addEvent(ChartClass, 'render', onChartRenderer);\n                addEvent(ChartClass, 'destroy', onChartDestroy);\n                chartProto.downloadCSV = chartDownloadCSV;\n                chartProto.downloadXLS = chartDownloadXLS;\n                chartProto.getCSV = chartGetCSV;\n                chartProto.getDataRows = chartGetDataRows;\n                chartProto.getTable = chartGetTable;\n                chartProto.getTableAST = chartGetTableAST;\n                chartProto.hideData = chartHideData;\n                chartProto.toggleDataTable = chartToggleDataTable;\n                chartProto.viewData = chartViewData;\n                // Add \"Download CSV\" to the exporting menu.\n                // @todo consider move to defaults\n                if (exportingOptions) {\n                    extend(exportingOptions.menuItemDefinitions, {\n                        downloadCSV: {\n                            textKey: 'downloadCSV',\n                            onclick: function () {\n                                this.downloadCSV();\n                            }\n                        },\n                        downloadXLS: {\n                            textKey: 'downloadXLS',\n                            onclick: function () {\n                                this.downloadXLS();\n                            }\n                        },\n                        viewData: {\n                            textKey: 'viewData',\n                            onclick: function () {\n                                wrapLoading.call(this, this.toggleDataTable);\n                            }\n                        }\n                    });\n                    if (exportingOptions.buttons &&\n                        exportingOptions.buttons.contextButton.menuItems) {\n                        exportingOptions.buttons.contextButton.menuItems.push('separator', 'downloadCSV', 'downloadXLS', 'viewData');\n                    }\n                }\n                setOptions(ExportDataDefaults);\n                const { arearange: AreaRangeSeries, gantt: GanttSeries, map: MapSeries, mapbubble: MapBubbleSeries, treemap: TreemapSeries, xrange: XRangeSeries } = SeriesClass.types;\n                if (AreaRangeSeries) {\n                    AreaRangeSeries.prototype.keyToAxis = {\n                        low: 'y',\n                        high: 'y'\n                    };\n                }\n                if (GanttSeries) {\n                    GanttSeries.prototype.exportKey = 'name';\n                    GanttSeries.prototype.keyToAxis = {\n                        start: 'x',\n                        end: 'x'\n                    };\n                }\n                if (MapSeries) {\n                    MapSeries.prototype.exportKey = 'name';\n                }\n                if (MapBubbleSeries) {\n                    MapBubbleSeries.prototype.exportKey = 'name';\n                }\n                if (TreemapSeries) {\n                    TreemapSeries.prototype.exportKey = 'name';\n                }\n                if (XRangeSeries) {\n                    XRangeSeries.prototype.keyToAxis = {\n                        x2: 'x'\n                    };\n                }\n            }\n        }\n        /**\n         * Get a blob object from content, if blob is supported\n         *\n         * @private\n         * @param {string} content\n         *        The content to create the blob from.\n         * @param {string} type\n         *        The type of the content.\n         * @return {string|undefined}\n         *         The blob object, or undefined if not supported.\n         */\n        function getBlobFromContent(content, type) {\n            const nav = win.navigator, domurl = win.URL || win.webkitURL || win;\n            try {\n                // MS specific\n                if ((nav.msSaveOrOpenBlob) && win.MSBlobBuilder) {\n                    const blob = new win.MSBlobBuilder();\n                    blob.append(content);\n                    return blob.getBlob('image/svg+xml');\n                }\n                return domurl.createObjectURL(new win.Blob(['\\uFEFF' + content], // #7084\n                { type: type }));\n            }\n            catch (e) {\n                // Ignore\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartAfterViewData() {\n            const chart = this, dataTableDiv = chart.dataTableDiv, getCellValue = (tr, index) => tr.children[index].textContent, comparer = (index, ascending) => (a, b) => {\n                const sort = (v1, v2) => (v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ?\n                    v1 - v2 :\n                    v1.toString().localeCompare(v2));\n                return sort(getCellValue(ascending ? a : b, index), getCellValue(ascending ? b : a, index));\n            };\n            if (dataTableDiv &&\n                chart.options.exporting &&\n                chart.options.exporting.allowTableSorting) {\n                const row = dataTableDiv.querySelector('thead tr');\n                if (row) {\n                    row.childNodes.forEach((th) => {\n                        const table = th.closest('table');\n                        th.addEventListener('click', function () {\n                            const rows = [...dataTableDiv.querySelectorAll('tr:not(thead tr)')], headers = [...th.parentNode.children];\n                            rows.sort(comparer(headers.indexOf(th), chart.ascendingOrderInTable =\n                                !chart.ascendingOrderInTable)).forEach((tr) => {\n                                table.appendChild(tr);\n                            });\n                            headers.forEach((th) => {\n                                [\n                                    'highcharts-sort-ascending',\n                                    'highcharts-sort-descending'\n                                ].forEach((className) => {\n                                    if (th.classList.contains(className)) {\n                                        th.classList.remove(className);\n                                    }\n                                });\n                            });\n                            th.classList.add(chart.ascendingOrderInTable ?\n                                'highcharts-sort-ascending' :\n                                'highcharts-sort-descending');\n                        });\n                    });\n                }\n            }\n        }\n        /**\n         * Handle the showTable option\n         * @private\n         */\n        function onChartRenderer() {\n            if (this.options &&\n                this.options.exporting &&\n                this.options.exporting.showTable &&\n                !this.options.chart.forExport) {\n                this.viewData();\n            }\n        }\n        /**\n         * Clean up\n         * @private\n         */\n        function onChartDestroy() {\n            this.dataTableDiv?.remove();\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ExportData = {\n            compose\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Function callback to execute while data rows are processed for exporting.\n         * This allows the modification of data rows before processed into the final\n         * format.\n         *\n         * @callback Highcharts.ExportDataCallbackFunction\n         * @extends Highcharts.EventCallbackFunction<Highcharts.Chart>\n         *\n         * @param {Highcharts.Chart} this\n         * Chart context where the event occurred.\n         *\n         * @param {Highcharts.ExportDataEventObject} event\n         * Event object with data rows that can be modified.\n         */\n        /**\n         * Contains information about the export data event.\n         *\n         * @interface Highcharts.ExportDataEventObject\n         */ /**\n        * Contains the data rows for the current export task and can be modified.\n        * @name Highcharts.ExportDataEventObject#dataRows\n        * @type {Array<Array<string>>}\n        */\n        (''); // Keeps doclets above in JS file\n\n        return ExportData;\n    });\n    _registerModule(_modules, 'masters/modules/export-data.src.js', [_modules['Core/Globals.js'], _modules['Extensions/DownloadURL.js'], _modules['Extensions/ExportData/ExportData.js']], function (Highcharts, DownloadURL, ExportData) {\n\n        const G = Highcharts;\n        // Compatibility\n        G.dataURLtoBlob = G.dataURLtoBlob || DownloadURL.dataURLtoBlob;\n        G.downloadURL = G.downloadURL || DownloadURL.downloadURL;\n        // Compose\n        ExportData.compose(G.Chart, G.Series);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","H","isSafari","document","doc","domurl","URL","webkitURL","dataURLtoBlob","dataURL","parts","replace","match","length","atob","ArrayBuffer","Uint8Array","Blob","createObjectURL","binStr","buf","binary","i","charCodeAt","downloadURL","filename","nav","navigator","a","createElement","String","msSaveOrOpenBlob","userAgent","Error","isOldEdgeBrowser","test","safariBlob","indexOf","download","href","body","appendChild","click","removeChild","open","location","exporting","csv","annotations","itemDelimiter","join","columnHeaderFormatter","dateFormat","decimalPoint","lineDelimiter","showTable","useMultiLevelHeaders","useRowspanHeaders","showExportInProgress","lang","downloadCSV","downloadXLS","exportData","annotationHeader","categoryHeader","categoryDatetimeHeader","viewData","hideData","exportInProgress","AST","D","DownloadURL","ExportDataDefaults","U","getOptions","setOptions","addEvent","defined","extend","find","fireEvent","isNumber","pick","wrapLoading","showMessage","Boolean","options","timeoutFn","requestAnimationFrame","setTimeout","showLoading","call","hideLoading","chartDownloadCSV","getCSV","getBlobFromContent","encodeURIComponent","getFilename","chartDownloadXLS","template","getTable","uri","btoa","unescape","chartGetCSV","useLocalDecimalPoint","rows","getDataRows","csvOptions","toLocaleString","forEach","row","val","j","toString","chartGetDataRows","multiLevelHeaders","xAxisIndex","column","hasParallelCoords","hasParallelCoordinates","time","xAxes","xAxis","rowArr","topLevelColumnTitles","columnTitles","exportDataOptions","langOptions","item","key","keyLength","s","bindAxes","columnTitle","name","topLevelColumnTitle","title","text","dateTime","getCategoryAndDateTimeMap","series","pointArrayMap","pIdx","categoryMap","dateTimeValueAxisMap","prop","axisName","keyToAxis","axis","chart","categories","getPointArray","namedPoints","data","some","d","y","exportKey","xAxisIndices","dataRows","columnTitleObj","x","xTitle","keys","valueCount","xTaken","requireSorting","categoryAndDatetimeMap","mockSeries","includeInDataExport","isInternal","visible","index","push","autoIncrement","mockPoint","pointClass","prototype","applyOptions","hasNames","modifiedKey","pointers","originalKey","xValues","arr","Object","sort","b","splice","category","Date","getTime","names","concat","chartGetTable","serialize","node","tagName","textContent","attributes","html","value","children","child","getTableAST","chartGetTableAST","rowLength","treeChildren","topHeaders","shift","subHeaders","isRowEqual","row1","row2","getCellHTMLFromValue","classes","className","tableCaption","len","getTableHeaderHTML","topheaders","subheaders","theadChildren","cur","curColspan","rowspan","trChildren","scope","colspan","cell","valign","Math","max","trs","e","tree","id","chartHideData","toggleDataTable","chartToggleDataTable","show","createContainer","isDataTableVisible","dataTableDiv","renderTo","parentNode","insertBefore","nextSibling","style","oldDisplay","display","innerHTML","emptyHTML","ast","addToDOM","element","wasHidden","exportDivElements","menuItems","buttons","contextButton","menuItemDefinitions","exportDivElement","setElementHTML","chartViewData","content","type","MSBlobBuilder","blob","append","getBlob","onChartAfterViewData","getCellValue","tr","comparer","ascending","v1","v2","isNaN","localeCompare","allowTableSorting","querySelector","childNodes","th","table","closest","addEventListener","querySelectorAll","headers","ascendingOrderInTable","classList","contains","remove","add","onChartRenderer","forExport","onChartDestroy","compose","ChartClass","SeriesClass","chartProto","exportingOptions","textKey","onclick","arearange","AreaRangeSeries","gantt","GanttSeries","map","MapSeries","mapbubble","MapBubbleSeries","treemap","TreemapSeries","xrange","XRangeSeries","types","low","high","start","end","x2","ExportData","G","Chart","Series"],"mappings":"CAAA;;;;;;;;CAQC,EACA,SAAUA,CAAO,EACV,AAAkB,UAAlB,OAAOC,QAAuBA,OAAOC,OAAO,EAC5CF,EAAQ,OAAU,CAAGA,EACrBC,OAAOC,OAAO,CAAGF,GACV,AAAkB,YAAlB,OAAOG,QAAyBA,OAAOC,GAAG,CACjDD,OAAO,iCAAkC,CAAC,aAAc,+BAA+B,CAAE,SAAUE,CAAU,EAGzG,OAFAL,EAAQK,GACRL,EAAQK,UAAU,CAAGA,EACdL,CACX,GAEAA,EAAQ,AAAsB,aAAtB,OAAOK,WAA6BA,WAAaC,KAAAA,EAEjE,EAAE,SAAUD,CAAU,EAClB,aACA,IAAIE,EAAWF,EAAaA,EAAWE,QAAQ,CAAG,CAAC,EACnD,SAASC,EAAgBC,CAAG,CAAEC,CAAI,CAAEC,CAAI,CAAEC,CAAE,EACnCH,EAAII,cAAc,CAACH,KACpBD,CAAG,CAACC,EAAK,CAAGE,EAAGE,KAAK,CAAC,KAAMH,GAEA,YAAvB,OAAOI,aACPV,EAAWW,GAAG,CAACC,aAAa,CAAC,IAAIF,YAC7B,yBACA,CAAEG,OAAQ,CAAER,KAAMA,EAAMT,OAAQQ,CAAG,CAACC,EAAK,AAAC,CAAE,IAI5D,CACAF,EAAgBD,EAAU,4BAA6B,CAACA,CAAQ,CAAC,kBAAkB,CAAC,CAAE,SAAUY,CAAC,EAiB7F,GAAM,CAAEC,SAAAA,CAAQ,CAAEJ,IAAAA,CAAG,CAAEA,IAAK,CAAEK,SAAUC,CAAG,CAAE,CAAE,CAAGH,EAM5CI,EAASP,EAAIQ,GAAG,EAAIR,EAAIS,SAAS,EAAIT,EAe3C,SAASU,EAAcC,CAAO,EAC1B,IAAMC,EAAQD,EACTE,OAAO,CAAC,eAAgB,IACxBC,KAAK,CAAC,yCACX,GAAIF,GACAA,EAAMG,MAAM,CAAG,GACdf,EAAIgB,IAAI,EACThB,EAAIiB,WAAW,EACfjB,EAAIkB,UAAU,EACdlB,EAAImB,IAAI,EACPZ,EAAOa,eAAe,CAAG,CAE1B,IAAMC,EAASrB,EAAIgB,IAAI,CAACJ,CAAK,CAAC,EAAE,EAAGU,EAAM,IAAItB,EAAIiB,WAAW,CAACI,EAAON,MAAM,EAAGQ,EAAS,IAAIvB,EAAIkB,UAAU,CAACI,GACzG,IAAK,IAAIE,EAAI,EAAGA,EAAID,EAAOR,MAAM,CAAE,EAAES,EACjCD,CAAM,CAACC,EAAE,CAAGH,EAAOI,UAAU,CAACD,GAElC,OAAOjB,EACFa,eAAe,CAAC,IAAIpB,EAAImB,IAAI,CAAC,CAACI,EAAO,CAAE,CAAE,KAAQX,CAAK,CAAC,EAAE,AAAC,GACnE,CACJ,CAsEA,MALoB,CAChBF,cAAAA,EACAgB,YAvDJ,SAAqBf,CAAO,CAAEgB,CAAQ,EAClC,IAAMC,EAAM5B,EAAI6B,SAAS,CAAEC,EAAIxB,EAAIyB,aAAa,CAAC,KAGjD,GAAI,AAAmB,UAAnB,OAAOpB,GACP,CAAEA,CAAAA,aAAmBqB,MAAK,GAC1BJ,EAAIK,gBAAgB,CAAE,CACtBL,EAAIK,gBAAgB,CAACtB,EAASgB,GAC9B,MACJ,CAEA,GADAhB,EAAU,GAAKA,EACXiB,EAAIM,SAAS,CAACnB,MAAM,CAAG,IACvB,MAAM,AAAIoB,MAAM,kBAEpB,IAEAC,EAAmB,YAAYC,IAAI,CAACT,EAAIM,SAAS,EAKjD,GAAII,CAAAA,AAHUlC,GACV,AAAmB,UAAnB,OAAOO,GACPA,AAA4C,IAA5CA,EAAQ4B,OAAO,CAAC,yBACFH,GAAoBzB,EAAQI,MAAM,CAAG,GAAM,GAErD,CADJJ,CAAAA,EAAUD,EAAcC,IAAY,EAAC,EAEjC,MAAM,AAAIwB,MAAM,6BAIxB,GAAI,AAAsB,KAAA,IAAfL,EAAEU,QAAQ,CACjBV,EAAEW,IAAI,CAAG9B,EACTmB,EAAEU,QAAQ,CAAGb,EACbrB,EAAIoC,IAAI,CAACC,WAAW,CAACb,GACrBA,EAAEc,KAAK,GACPtC,EAAIoC,IAAI,CAACG,WAAW,CAACf,QAIrB,GAAI,CACA,GAAI,CAAC9B,EAAI8C,IAAI,CAACnC,EAAS,SACnB,MAAM,AAAIwB,MAAM,wBAExB,CACA,KAAM,CAEFnC,EAAI+C,QAAQ,CAACN,IAAI,CAAG9B,CACxB,CAER,CASA,CAGJ,GACAnB,EAAgBD,EAAU,8CAA+C,EAAE,CAAE,WAiSzE,MAhC2B,CACvByD,UA7Oc,CAkCdC,IAAK,CAWDC,YAAa,CAQTC,cAAe,KAWfC,KAAM,CAAA,CACV,EA6BAC,sBAAuB,KAKvBC,WAAY,oBASZC,aAAc,KASdJ,cAAe,KAIfK,cAAe,IACnB,EAaAC,UAAW,CAAA,EAYXC,qBAAsB,CAAA,EAWtBC,kBAAmB,CAAA,EAUnBC,qBAAsB,CAAA,CAC1B,EAqEIC,KAhES,CAOTC,YAAa,eAObC,YAAa,eAObC,WAAY,CAIRC,iBAAkB,cAIlBC,eAAgB,WAIhBC,uBAAwB,UAC5B,EAOAC,SAAU,kBAOVC,SAAU,kBAOVC,iBAAkB,cACtB,CASA,CA8BJ,GACA9E,EAAgBD,EAAU,sCAAuC,CAACA,CAAQ,CAAC,4BAA4B,CAAEA,CAAQ,CAAC,mBAAmB,CAAEA,CAAQ,CAAC,4BAA4B,CAAEA,CAAQ,CAAC,8CAA8C,CAAEA,CAAQ,CAAC,kBAAkB,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUgF,CAAG,CAAEC,CAAC,CAAEC,CAAW,CAAEC,CAAkB,CAAEvE,CAAC,CAAEwE,CAAC,EAevV,GAAM,CAAEC,WAAAA,CAAU,CAAEC,WAAAA,CAAU,CAAE,CAAGL,EAC7B,CAAE9C,YAAAA,CAAW,CAAE,CAAG+C,EAClB,CAAEnE,IAAAA,CAAG,CAAEN,IAAAA,CAAG,CAAE,CAAGG,EACf,CAAE2E,SAAAA,CAAQ,CAAEC,QAAAA,CAAO,CAAEC,OAAAA,CAAM,CAAEC,KAAAA,CAAI,CAAEC,UAAAA,CAAS,CAAEC,SAAAA,CAAQ,CAAEC,KAAAA,CAAI,CAAE,CAAGT,EAavE,SAASU,EAAYzF,CAAE,EACnB,IAAM0F,EAAcC,CAAAA,CAAQ,IAAI,CAACC,OAAO,CAACxC,SAAS,EAAEY,qBAE9C6B,EAAYzF,EAAI0F,qBAAqB,EAAIC,WAE/CF,EAAU,KACNH,GAAe,IAAI,CAACM,WAAW,CAAC,IAAI,CAACJ,OAAO,CAAC3B,IAAI,CAACS,gBAAgB,EAClEmB,EAAU,KACN,GAAI,CACA7F,EAAGiG,IAAI,CAAC,IAAI,CAChB,QACQ,CACJP,GAAe,IAAI,CAACQ,WAAW,EACnC,CACJ,EACJ,EACJ,CAWA,SAASC,IACLV,EAAYQ,IAAI,CAAC,IAAI,CAAE,KACnB,IAAM5C,EAAM,IAAI,CAAC+C,MAAM,CAAC,CAAA,GACxBtE,EAAYuE,EAAmBhD,EAAK,aAChC,uBAAyBiD,mBAAmBjD,GAAM,IAAI,CAACkD,WAAW,GAAK,OAC/E,EACJ,CAWA,SAASC,IACLf,EAAYQ,IAAI,CAAC,IAAI,CAAE,KACnB,IAAqDQ,EAAW,+kBAe5D,IAAI,CAACC,QAAQ,CAAC,CAAA,GACd,iBAGJ5E,EAAYuE,EAAmBI,EAAU,6BACrCE,AApBQ,wCAiBDvG,EAAIwG,IAAI,CAACC,SAASP,mBAGZG,KAAW,IAAI,CAACF,WAAW,GAAK,OACrD,EACJ,CAcA,SAASO,EAAYC,CAAoB,EACrC,IAAI1D,EAAM,GACJ2D,EAAO,IAAI,CAACC,WAAW,GAAIC,EAAa,IAAI,CAACtB,OAAO,CAACxC,SAAS,CAACC,GAAG,CAAEM,EAAe6B,EAAK0B,EAAWvD,YAAY,CAAEuD,AAA6B,MAA7BA,EAAW3D,aAAa,EAAYwD,EACvJ,AAAC,IAAKI,cAAc,EAAE,CAAC,EAAE,CACzB,KAEJ5D,EAAgBiC,EAAK0B,EAAW3D,aAAa,CAAEI,AAAiB,MAAjBA,EAAuB,IAAM,KAE5EC,EAAgBsD,EAAWtD,aAAa,CA6BxC,OA3BAoD,EAAKI,OAAO,CAAC,CAACC,EAAKzF,KACf,IAAI0F,EAAM,GAAIC,EAAIF,EAAIlG,MAAM,CAC5B,KAAOoG,KAEgB,UAAf,MADJD,CAAAA,EAAMD,CAAG,CAACE,EAAE,AAAD,GAEPD,CAAAA,EAAM,CAAC,CAAC,EAAEA,EAAI,CAAC,CAAC,AAAD,EAEA,UAAf,OAAOA,GACH3D,AAAiB,MAAjBA,GACA2D,CAAAA,EAAMA,EAAIE,QAAQ,GAAGvG,OAAO,CAAC,IAAK0C,EAAY,EAGtD0D,CAAG,CAACE,EAAE,CAAGD,CAObD,CAAAA,EAAIlG,MAAM,CAAG6F,EAAK7F,MAAM,CAAG6F,CAAI,CAAC,EAAE,CAAC7F,MAAM,CAAG,EAE5CkC,GAAOgE,EAAI7D,IAAI,CAACD,GAEZ3B,EAAIoF,EAAK7F,MAAM,CAAG,GAClBkC,CAAAA,GAAOO,CAAY,CAE3B,GACOP,CACX,CAiBA,SAASoE,EAAiBC,CAAiB,MAmLnCC,EAAYC,EAlLhB,IAAMC,EAAoB,IAAI,CAACC,sBAAsB,CAAEC,EAAO,IAAI,CAACA,IAAI,CAAEb,EAAc,AAAC,IAAI,CAACtB,OAAO,CAACxC,SAAS,EAAI,IAAI,CAACwC,OAAO,CAACxC,SAAS,CAACC,GAAG,EAAK,CAAC,EAAI2E,EAAQ,IAAI,CAACC,KAAK,CAAEjB,EAAO,CAAC,EAAGkB,EAAS,EAAE,CAAEC,EAAuB,EAAE,CAAEC,EAAe,EAAE,CAAmCC,EAAoBC,AAAvC,IAAI,CAAC1C,OAAO,CAAC3B,IAAI,CAAkCG,UAAU,CAAEE,EAAiB+D,EAAkB/D,cAAc,CAAEC,EAAyB8D,EAAkB9D,sBAAsB,CAEjbd,EAAwB,SAAU8E,CAAI,CAAEC,CAAG,CAAEC,CAAS,EAClD,GAAIvB,EAAWzD,qBAAqB,CAAE,CAClC,IAAMiF,EAAIxB,EAAWzD,qBAAqB,CAAC8E,EAAMC,EAAKC,GACtD,GAAIC,AAAM,CAAA,IAANA,EACA,OAAOA,CAEf,QACA,AAAKH,EAGAA,EAAKI,QAAQ,CAMdjB,EACO,CACHkB,YAAaH,EAAY,EACrBD,EACAD,EAAKM,IAAI,CACbC,oBAAqBP,EAAKM,IAAI,AAClC,EAEGN,EAAKM,IAAI,CAAIJ,CAAAA,EAAY,EAAI,KAAOD,EAAM,IAAM,EAAC,EAb7C,AAACD,EAAK3C,OAAO,CAACmD,KAAK,EACtBR,EAAK3C,OAAO,CAACmD,KAAK,CAACC,IAAI,EAAMT,CAAAA,EAAKU,QAAQ,CAC1C1E,EACAD,CAAa,EANVA,CAiBf,EAEA4E,EAA4B,SAAUC,CAAM,CAAEC,CAAa,CAAEC,CAAI,EAC7D,IAAMC,EAAc,CAAC,EAAGC,EAAuB,CAAC,EAYhD,OAXAH,EAAchC,OAAO,CAAC,SAAUoC,CAAI,EAChC,IAAMC,EAAW,AAAC,CAAA,AAACN,EAAOO,SAAS,EAAIP,EAAOO,SAAS,CAACF,EAAK,EACzDA,CAAG,EAAK,OAGZG,EAAOpE,EAAS8D,GACZF,EAAOS,KAAK,CAACH,EAAS,CAACJ,EAAK,CAC5BF,CAAM,CAACM,EAAS,AACpBH,CAAAA,CAAW,CAACE,EAAK,CAAG,AAACG,GAAQA,EAAKE,UAAU,EAAK,EAAE,CACnDN,CAAoB,CAACC,EAAK,CAAIG,GAAQA,EAAKV,QAAQ,AACvD,GACO,CACHK,YAAaA,EACbC,qBAAsBA,CAC1B,CACJ,EAGAO,EAAgB,SAAUX,CAAM,CAAElB,CAAK,EACnC,IAAMmB,EAAgBD,EAAOC,aAAa,EAAI,CAAC,IAAI,QAGnD,AAAIW,AAH+DZ,EAAOa,IAAI,CAACC,IAAI,CAAC,AAACC,GAAM,AAAgB,KAAA,IAARA,EAAEC,CAAC,EAAqBD,EAAErB,IAAI,GAI7HZ,GACA,CAACA,EAAM4B,UAAU,EACjBV,AAAqB,SAArBA,EAAOiB,SAAS,CACT,CAAC,OAAQhB,EAAc,CAE3BA,CACX,EAAGiB,EAAe,EAAE,CAChBpC,EAAOqC,EAAUC,EAAgB3I,EAAI,EACzC4I,EAAGC,EA+GH,IAAKD,KA9GL,IAAI,CAACrB,MAAM,CAAC/B,OAAO,CAAC,SAAU+B,CAAM,EAChC,IAAMuB,EAAOvB,EAAOvD,OAAO,CAAC8E,IAAI,CAAEzC,EAAQkB,EAAOlB,KAAK,CAAEmB,EAAgBsB,GAAQZ,EAAcX,EAAQlB,GAAQ0C,EAAavB,EAAcjI,MAAM,CAAEyJ,EAAS,CAACzB,EAAO0B,cAAc,EAAI,CAAC,EAAGlD,EAAaK,EAAMrF,OAAO,CAACsF,GAC/M6C,EAAyB5B,EAA0BC,EAAQC,GAAgB2B,EAAYxD,EAC3F,GAAI4B,AAAuC,CAAA,IAAvCA,EAAOvD,OAAO,CAACoF,mBAAmB,EAClC,CAAC7B,EAAOvD,OAAO,CAACqF,UAAU,EAC1B9B,AAAmB,CAAA,IAAnBA,EAAO+B,OAAO,CAChB,CAYE,IARK7F,EAAKgF,EAAc,SAAUc,CAAK,EACnC,OAAOA,CAAK,CAAC,EAAE,GAAKxD,CACxB,IACI0C,EAAae,IAAI,CAAC,CAACzD,EAAY/F,EAAE,EAIrC2F,EAAI,EACGA,EAAIoD,GACPJ,EAAiB9G,EAAsB0F,EAAQC,CAAa,CAAC7B,EAAE,CAAE6B,EAAcjI,MAAM,EACrFiH,EAAagD,IAAI,CAACb,EAAe3B,WAAW,EAAI2B,GAC5C7C,GACAS,EAAqBiD,IAAI,CAACb,EAAezB,mBAAmB,EACxDyB,GAERhD,IAEJwD,EAAa,CACTnB,MAAOT,EAAOS,KAAK,CACnByB,cAAelC,EAAOkC,aAAa,CACnCzF,QAASuD,EAAOvD,OAAO,CACvBwD,cAAeD,EAAOC,aAAa,CACnC+B,MAAOhC,EAAOgC,KAAK,AACvB,EAGAhC,EAAOvD,OAAO,CAACoE,IAAI,CAAC5C,OAAO,CAAC,SAAkBxB,CAAO,CAAEyD,CAAI,MAEnDb,EAAKgB,EAAMlC,EADf,IAAMgE,EAAY,CAAEnC,OAAQ4B,CAAW,EAInClD,GACAiD,CAAAA,EAAyB5B,EAA0BC,EAAQC,EAAeC,EAAI,EAElFF,EAAOoC,UAAU,CAACC,SAAS,CAACC,YAAY,CAACvL,KAAK,CAACoL,EAAW,CAAC1F,EAAQ,EACnE,IAAMiD,EAAOM,EAAOa,IAAI,CAACX,EAAK,EAAIF,EAAOa,IAAI,CAACX,EAAK,CAACR,IAAI,CAexD,GAdAL,EAAM,AAAC8C,CAAAA,EAAUd,CAAC,EAAI,EAAC,EAAK,IAAM3B,EAClCtB,EAAI,EAEA,CAAA,CAACU,GACDkB,AAAqB,SAArBA,EAAOiB,SAAS,EAChB,AAAC,CAACvC,GAAqBI,GAASA,EAAMyD,QAAQ,EAAK7C,CAAG,GACtDL,CAAAA,EAAMK,CAAG,EAET+B,IACIA,CAAM,CAACpC,EAAI,EACXA,CAAAA,GAAO,IAAMa,CAAG,EAEpBuB,CAAM,CAACpC,EAAI,CAAG,CAAA,GAEbxB,CAAI,CAACwB,EAAI,CAcT,CAGD,IAAMmD,EAAc,CAAC,EAAEnD,EAAI,CAAC,EAAExB,CAAI,CAACwB,EAAI,CAACoD,QAAQ,CAACzC,EAAOgC,KAAK,CAAC,CAAC,CAAC,CAAEU,EAAcrD,CAC5ExB,CAAAA,CAAI,CAACwB,EAAI,CAACoD,QAAQ,CAACzC,EAAOgC,KAAK,CAAC,GAC3BnE,CAAI,CAAC2E,EAAY,GAClB3E,CAAI,CAAC2E,EAAY,CAAG,EAAE,CACtB3E,CAAI,CAAC2E,EAAY,CAACG,OAAO,CAAG,EAAE,CAC9B9E,CAAI,CAAC2E,EAAY,CAACC,QAAQ,CAAG,EAAE,EAEnCpD,EAAMmD,GAEV3E,CAAI,CAAC6E,EAAY,CAACD,QAAQ,CAACzC,EAAOgC,KAAK,CAAC,EAAI,CAChD,KA3BgB,CACZnE,CAAI,CAACwB,EAAI,CAAG,EAAE,CACdxB,CAAI,CAACwB,EAAI,CAACsD,OAAO,CAAG,EAAE,CAEtB,IAAMC,EAAM,EAAE,CACd,IAAK,IAAInK,EAAI,EAAGA,EAAIuH,EAAOS,KAAK,CAACT,MAAM,CAAChI,MAAM,CAAES,IAC5CmK,CAAG,CAACnK,EAAE,CAAG,CAKboF,CAAAA,CAAI,CAACwB,EAAI,CAACoD,QAAQ,CAAGG,EACrB/E,CAAI,CAACwB,EAAI,CAACoD,QAAQ,CAACzC,EAAOgC,KAAK,CAAC,CAAG,CACvC,CAkBA,IAHAnE,CAAI,CAACwB,EAAI,CAACgC,CAAC,CAAGc,EAAUd,CAAC,CACzBxD,CAAI,CAACwB,EAAI,CAACK,IAAI,CAAGA,EACjB7B,CAAI,CAACwB,EAAI,CAACsD,OAAO,CAACnE,EAAW,CAAG2D,EAAUd,CAAC,CACpCjD,EAAIoD,GAEPrD,EAAMgE,CAAS,CADf9B,EAAOJ,CAAa,CAAC7B,EAAE,CACF,CACrBP,CAAI,CAACwB,EAAI,CAAC5G,EAAI2F,EAAE,CAAG/B,EAEnBsF,EAAuBxB,WAAW,CAACE,EAAK,CAAClC,EAAI,CAE7CwD,EAAuBvB,oBAAoB,CAACC,EAAK,CAC7CzB,EAAKrE,UAAU,CAACwD,EAAWxD,UAAU,CAAE4D,GACvC,KAEJA,GACAC,GAER,GACA3F,GAAQ2F,CACZ,CACJ,GAEUP,EACFgF,OAAO/L,cAAc,CAACgG,IAAI,CAACe,EAAMwD,IACjCtC,EAAOkD,IAAI,CAACpE,CAAI,CAACwD,EAAE,EAQ3B,IAHAF,EAAW5C,EAAoB,CAACS,EAAsBC,EAAa,CAC/D,CAACA,EAAa,CAClBxG,EAAIyI,EAAalJ,MAAM,CAChBS,KACH+F,EAAa0C,CAAY,CAACzI,EAAE,CAAC,EAAE,CAC/BgG,EAASyC,CAAY,CAACzI,EAAE,CAAC,EAAE,CAC3BqG,EAAQD,CAAK,CAACL,EAAW,CAEzBO,EAAO+D,IAAI,CAAC,SACZ/J,CAAC,CAAEgK,CAAC,EACA,OAAOhK,EAAE4J,OAAO,CAACnE,EAAW,CAAGuE,EAAEJ,OAAO,CAACnE,EAAW,AACxD,GAEA8C,EAAShH,EAAsBwE,GAC/BqC,CAAQ,CAAC,EAAE,CAAC6B,MAAM,CAACvE,EAAQ,EAAG6C,GAC1B/C,GAAqB4C,CAAQ,CAAC,EAAE,EAGhCA,CAAQ,CAAC,EAAE,CAAC6B,MAAM,CAACvE,EAAQ,EAAG6C,GAGlCvC,EAAOd,OAAO,CAAC,SACfC,CAAG,EACC,IAAI+E,EAAW/E,EAAIwB,IAAI,CACnBZ,GAAS,CAAC9C,EAAQiH,KACdnE,EAAMgB,QAAQ,EACV5B,EAAImD,CAAC,YAAY6B,MACjBhF,CAAAA,EAAImD,CAAC,CAAGnD,EAAImD,CAAC,CAAC8B,OAAO,EAAC,EAE1BF,EAAWrE,EAAKrE,UAAU,CAACwD,EAAWxD,UAAU,CAAE2D,EAAImD,CAAC,GAGvD4B,EADKnE,EAAM4B,UAAU,CACVrE,EAAKyC,EAAMsE,KAAK,CAAClF,EAAImD,CAAC,CAAC,CAAEvC,EAAM4B,UAAU,CAACxC,EAAImD,CAAC,CAAC,CAAEnD,EAAImD,CAAC,EAGvDnD,EAAImD,CAAC,EAIxBnD,EAAI8E,MAAM,CAACvE,EAAQ,EAAGwE,EAC1B,GAIJ,OADA9G,EAAU,IAAI,CAAE,aAAc,CAAEgF,SADhCA,EAAWA,EAASkC,MAAM,CAACtE,EACwB,GAC5CoC,CACX,CAoBA,SAASmC,EAAc1F,CAAoB,EACvC,IAAM2F,EAAY,AAACC,IACf,GAAI,CAACA,EAAKC,OAAO,EAAID,AAAiB,UAAjBA,EAAKC,OAAO,CAE7B,OAAOD,EAAKE,WAAW,EAAI,GAE/B,IAAMC,EAAaH,EAAKG,UAAU,CAC9BC,EAAO,CAAC,CAAC,EAAEJ,EAAKC,OAAO,CAAC,CAAC,CAc7B,OAbIE,GACAd,OAAOtB,IAAI,CAACoC,GACP1F,OAAO,CAAC,AAACoB,IACV,IAAMwE,EAAQF,CAAU,CAACtE,EAAI,CAC7BuE,GAAQ,CAAC,CAAC,EAAEvE,EAAI,EAAE,EAAEwE,EAAM,CAAC,CAAC,AAChC,GAGJD,GADQ,IACAJ,CAAAA,EAAKE,WAAW,EAAI,EAAC,EAC7B,AAACF,CAAAA,EAAKM,QAAQ,EAAI,EAAE,AAAD,EAAG7F,OAAO,CAAC,AAAC8F,IAC3BH,GAAQL,EAAUQ,EACtB,GACAH,GAAQ,CAAC,EAAE,EAAEJ,EAAKC,OAAO,CAAC,CAAC,CAAC,AAEhC,EAEA,OAAOF,EADM,IAAI,CAACS,WAAW,CAACpG,GAElC,CAgBA,SAASqG,EAAiBrG,CAAoB,EAC1C,IAAIsG,EAAY,EACVC,EAAe,EAAE,CACjB1H,EAAU,IAAI,CAACA,OAAO,CAAEjC,EAAeoD,EAAuB,AAAC,IAAKI,cAAc,EAAE,CAAC,EAAE,CAAG,IAAKrD,EAAuB0B,EAAKI,EAAQxC,SAAS,CAACU,oBAAoB,CAAE,CAAA,GAAOkD,EAAO,IAAI,CAACC,WAAW,CAACnD,GAAuByJ,EAAazJ,EAAuBkD,EAAKwG,KAAK,GAAK,KAAMC,EAAazG,EAAKwG,KAAK,GAE/SE,EAAa,SAAUC,CAAI,CAAEC,CAAI,EAC7B,IAAIhM,EAAI+L,EAAKxM,MAAM,CACnB,GAAIyM,EAAKzM,MAAM,GAAKS,EAQhB,MAAO,CAAA,EAPP,KAAOA,KACH,GAAI+L,CAAI,CAAC/L,EAAE,GAAKgM,CAAI,CAAChM,EAAE,CACnB,MAAO,CAAA,EAOnB,MAAO,CAAA,CACX,EAEAiM,EAAuB,SAAUjB,CAAO,CAAEkB,CAAO,CAAEhB,CAAU,CAAEE,CAAK,EAChE,IAAIH,EAAcrH,EAAKwH,EAAO,IAAKe,EAAY,kBAAqBD,CAAAA,EAAU,IAAMA,EAAU,EAAC,EAa/F,MAXI,AAAuB,UAAvB,OAAOjB,GACPA,EAAcA,EAAYrF,QAAQ,GACb,MAAjB7D,GACAkJ,CAAAA,EAAcA,EAAY5L,OAAO,CAAC,IAAK0C,EAAY,EAEvDoK,EAAY,qBAENf,GACNe,CAAAA,EAAY,kBAAiB,EAG1B,CACHnB,QAAAA,EACAE,WAHJA,EAAa1H,EAAO,CAAE,MAAS2I,CAAU,EAAGjB,GAIxCD,YAAAA,CACJ,CACJ,CA6EuC,EAAA,IAAnCjH,EAAQxC,SAAS,CAAC4K,YAAY,EAC9BV,EAAalC,IAAI,CAAC,CACdwB,QAAS,UACTE,WAAY,CACR,MAAS,0BACb,EACAD,YAAarH,EAAKI,EAAQxC,SAAS,CAAC4K,YAAY,CAAGpI,EAAQmD,KAAK,CAACC,IAAI,CACjEpD,EAAQmD,KAAK,CAACC,IAAI,CAClB,QACR,GAGJ,IAAK,IAAIpH,EAAI,EAAGqM,EAAMjH,EAAK7F,MAAM,CAAES,EAAIqM,EAAK,EAAErM,EACtCoF,CAAI,CAACpF,EAAE,CAACT,MAAM,CAAGkM,GACjBA,CAAAA,EAAYrG,CAAI,CAACpF,EAAE,CAACT,MAAM,AAAD,EAIjCmM,EAAalC,IAAI,CAAC8C,AA7FG,SAAUC,CAAU,CAAEC,CAAU,CAAEf,CAAS,EAC5D,IAAMgB,EAAgB,EAAE,CACpBzM,EAAI,EAAGqM,EAAMZ,GAAae,GAAcA,EAAWjN,MAAM,CAAQmN,EAAKC,EAAa,EAAGC,EAK1F,GAAI1K,GACAqK,GACAC,GACA,CAACV,EAAWS,EAAYC,GAAa,CACrC,IAAMK,EAAa,EAAE,CACrB,KAAO7M,EAAIqM,EAAK,EAAErM,EAGd,GAAI0M,AAFJA,CAAAA,EAAMH,CAAU,CAACvM,EAAE,AAAD,IACXuM,CAAU,CAACvM,EAAI,EAAE,CAEpB,EAAE2M,OAED,GAAIA,EAGLE,EAAWrD,IAAI,CAACyC,EAAqB,KAAM,8BAA+B,CACtEa,MAAO,MACPC,QAASJ,EAAa,CAC1B,EAAGD,IACHC,EAAa,MAEZ,CAGGD,IAAQF,CAAU,CAACxM,EAAE,CACjBgE,EAAQxC,SAAS,CAACW,iBAAiB,EACnCyK,EAAU,EACV,OAAOJ,CAAU,CAACxM,EAAE,GAGpB4M,EAAU,EACVJ,CAAU,CAACxM,EAAE,CAAG,IAIpB4M,EAAU,EAEd,IAAMI,EAAOf,EAAqB,KAAM,8BAA+B,CAAEa,MAAO,KAAM,EAAGJ,GACrFE,EAAU,GAAKI,EAAK9B,UAAU,GAC9B8B,EAAK9B,UAAU,CAAC+B,MAAM,CAAG,MACzBD,EAAK9B,UAAU,CAAC0B,OAAO,CAAGA,GAE9BC,EAAWrD,IAAI,CAACwD,EACpB,CAEJP,EAAcjD,IAAI,CAAC,CACfwB,QAAS,KACTK,SAAUwB,CACd,EACJ,CAEA,GAAIL,EAAY,CACZ,IAAMK,EAAa,EAAE,CACrB,IAAK7M,EAAI,EAAGqM,EAAMG,EAAWjN,MAAM,CAAES,EAAIqM,EAAK,EAAErM,EACf,KAAA,IAAlBwM,CAAU,CAACxM,EAAE,EACpB6M,EAAWrD,IAAI,CAACyC,EAAqB,KAAM,KAAM,CAAEa,MAAO,KAAM,EAAGN,CAAU,CAACxM,EAAE,GAGxFyM,EAAcjD,IAAI,CAAC,CACfwB,QAAS,KACTK,SAAUwB,CACd,EACJ,CACA,MAAO,CACH7B,QAAS,QACTK,SAAUoB,CACd,CACJ,EAoBqCd,EAAYE,EAAYqB,KAAKC,GAAG,CAAC1B,EAAWI,EAAWtM,MAAM,IAElG,IAAM6N,EAAM,EAAE,CACdhI,EAAKI,OAAO,CAAC,SAAUC,CAAG,EACtB,IAAMoH,EAAa,EAAE,CACrB,IAAK,IAAIlH,EAAI,EAAGA,EAAI8F,EAAW9F,IAI3BkH,EAAWrD,IAAI,CAACyC,EAAqBtG,EAAI,KAAO,KAAM,KAAMA,EAAI,CAAC,EAAI,CAAEmH,MAAO,KAAM,EAAGrH,CAAG,CAACE,EAAE,GAEjGyH,EAAI5D,IAAI,CAAC,CACLwB,QAAS,KACTK,SAAUwB,CACd,EACJ,GACAnB,EAAalC,IAAI,CAAC,CACdwB,QAAS,QACTK,SAAU+B,CACd,GACA,IAAMC,EAAI,CACNC,KAAM,CACFtC,QAAS,QACTuC,GAAI,CAAC,sBAAsB,EAAE,IAAI,CAAChE,KAAK,CAAC,CAAC,CACzC8B,SAAUK,CACd,CACJ,EAEA,OADAhI,EAAU,IAAI,CAAE,mBAAoB2J,GAC7BA,EAAEC,IAAI,AACjB,CAMA,SAASE,IACL,IAAI,CAACC,eAAe,CAAC,CAAA,EACzB,CAIA,SAASC,EAAqBC,CAAI,EAG9B,IAAMC,EAAkBD,AAFxBA,CAAAA,EAAO/J,EAAK+J,EAAM,CAAC,IAAI,CAACE,kBAAkB,CAAA,GAEV,CAAC,IAAI,CAACC,YAAY,CAQlD,GAPIF,IACA,IAAI,CAACE,YAAY,CAAGhP,EAAIyB,aAAa,CAAC,OACtC,IAAI,CAACuN,YAAY,CAAC3B,SAAS,CAAG,wBAE9B,IAAI,CAAC4B,QAAQ,CAACC,UAAU,CAACC,YAAY,CAAC,IAAI,CAACH,YAAY,CAAE,IAAI,CAACC,QAAQ,CAACG,WAAW,GAGlF,IAAI,CAACJ,YAAY,CAAE,CACnB,IAAMK,EAAQ,IAAI,CAACL,YAAY,CAACK,KAAK,CAAEC,EAAaD,EAAME,OAAO,AACjEF,CAAAA,EAAME,OAAO,CAAGV,EAAO,QAAU,OAE7BA,GACA,IAAI,CAACG,YAAY,CAACQ,SAAS,CAAGvL,EAAIwL,SAAS,CAE3CC,AADY,IAAIzL,EAAI,CAAC,IAAI,CAACwI,WAAW,GAAG,EACpCkD,QAAQ,CAAC,IAAI,CAACX,YAAY,EAC9BpK,EAAU,IAAI,CAAE,gBAAiB,CAC7BgL,QAAS,IAAI,CAACZ,YAAY,CAC1Ba,UAAWf,GAAmBQ,IAAeD,EAAME,OAAO,AAC9D,IAGA3K,EAAU,IAAI,CAAE,gBAExB,CAEA,IAAI,CAACmK,kBAAkB,CAAGF,EAE1B,IAAMiB,EAAoB,IAAI,CAACA,iBAAiB,CAAE5K,EAAU,IAAI,CAACA,OAAO,CAACxC,SAAS,CAAEqN,EAAY7K,GAC5FA,EAAQ8K,OAAO,EACf9K,EAAQ8K,OAAO,CAACC,aAAa,CAACF,SAAS,CAAExM,EAAO,IAAI,CAAC2B,OAAO,CAAC3B,IAAI,CACrE,GAAI2B,GACAA,EAAQgL,mBAAmB,EAC3B3M,GACAA,EAAKO,QAAQ,EACbP,EAAKQ,QAAQ,EACbgM,GACAD,EAAmB,CACnB,IAAMK,EAAmBL,CAAiB,CAACC,EAAU9N,OAAO,CAAC,YAAY,CACrEkO,GACAlM,EAAImM,cAAc,CAACD,EAAkB,IAAI,CAACpB,kBAAkB,CAAGxL,EAAKQ,QAAQ,CAAGR,EAAKO,QAAQ,CAEpG,CACJ,CAQA,SAASuM,IACL,IAAI,CAAC1B,eAAe,CAAC,CAAA,EACzB,CA2FA,SAAShJ,EAAmB2K,CAAO,CAAEC,CAAI,EACrC,IAAMjP,EAAM5B,EAAI6B,SAAS,CAAEtB,EAASP,EAAIQ,GAAG,EAAIR,EAAIS,SAAS,EAAIT,EAChE,GAAI,CAEA,GAAI,AAAC4B,EAAIK,gBAAgB,EAAKjC,EAAI8Q,aAAa,CAAE,CAC7C,IAAMC,EAAO,IAAI/Q,EAAI8Q,aAAa,CAElC,OADAC,EAAKC,MAAM,CAACJ,GACLG,EAAKE,OAAO,CAAC,gBACxB,CACA,OAAO1Q,EAAOa,eAAe,CAAC,IAAIpB,EAAImB,IAAI,CAAC,CAAC,SAAWyP,EAAQ,CAC/D,CAAEC,KAAMA,CAAK,GACjB,CACA,MAAOhC,EAAG,CAEV,CACJ,CAIA,SAASqC,IACL,IAAM1H,EAAQ,IAAI,CAAE8F,EAAe9F,EAAM8F,YAAY,CAAE6B,EAAe,CAACC,EAAIrG,IAAUqG,EAAGvE,QAAQ,CAAC9B,EAAM,CAAC0B,WAAW,CAAE4E,EAAW,CAACtG,EAAOuG,IAAc,CAACxP,EAAGgK,SACxIyF,EAAIC,EAGlB,OAHcD,EAGFJ,EAAaG,EAAYxP,EAAIgK,EAAGf,GAH1ByG,EAGkCL,EAAaG,EAAYxF,EAAIhK,EAAGiJ,GAH1DwG,AAAO,KAAPA,GAAaC,AAAO,KAAPA,GAAcC,MAAMF,IAAQE,MAAMD,GAErED,EAAGnK,QAAQ,GAAGsK,aAAa,CAACF,GAD5BD,EAAKC,CAGb,EACA,GAAIlC,GACA9F,EAAMhE,OAAO,CAACxC,SAAS,EACvBwG,EAAMhE,OAAO,CAACxC,SAAS,CAAC2O,iBAAiB,CAAE,CAC3C,IAAM1K,EAAMqI,EAAasC,aAAa,CAAC,YACnC3K,GACAA,EAAI4K,UAAU,CAAC7K,OAAO,CAAC,AAAC8K,IACpB,IAAMC,EAAQD,EAAGE,OAAO,CAAC,SACzBF,EAAGG,gBAAgB,CAAC,QAAS,WACzB,IAAMrL,EAAO,IAAI0I,EAAa4C,gBAAgB,CAAC,oBAAoB,CAAEC,EAAU,IAAIL,EAAGtC,UAAU,CAAC3C,QAAQ,CAAC,CAC1GjG,EAAKiF,IAAI,CAACwF,EAASc,EAAQ5P,OAAO,CAACuP,GAAKtI,EAAM4I,qBAAqB,CAC/D,CAAC5I,EAAM4I,qBAAqB,GAAGpL,OAAO,CAAC,AAACoK,IACxCW,EAAMpP,WAAW,CAACyO,EACtB,GACAe,EAAQnL,OAAO,CAAC,AAAC8K,IACb,CACI,4BACA,6BACH,CAAC9K,OAAO,CAAC,AAAC2G,IACHmE,EAAGO,SAAS,CAACC,QAAQ,CAAC3E,IACtBmE,EAAGO,SAAS,CAACE,MAAM,CAAC5E,EAE5B,EACJ,GACAmE,EAAGO,SAAS,CAACG,GAAG,CAAChJ,EAAM4I,qBAAqB,CACxC,4BACA,6BACR,EACJ,EAER,CACJ,CAKA,SAASK,IACD,IAAI,CAACjN,OAAO,EACZ,IAAI,CAACA,OAAO,CAACxC,SAAS,EACtB,IAAI,CAACwC,OAAO,CAACxC,SAAS,CAACS,SAAS,EAChC,CAAC,IAAI,CAAC+B,OAAO,CAACgE,KAAK,CAACkJ,SAAS,EAC7B,IAAI,CAACtO,QAAQ,EAErB,CAKA,SAASuO,IACL,IAAI,CAACrD,YAAY,EAAEiD,QACvB,CAuCA,MAjCmB,CACfK,QAzKJ,SAAiBC,CAAU,CAAEC,CAAW,EACpC,IAAMC,EAAaF,EAAWzH,SAAS,CACvC,GAAI,CAAC2H,EAAW/M,MAAM,CAAE,CACpB,IAAMgN,EAAmBpO,IAAa5B,SAAS,CAE/C8B,EAAS+N,EAAY,gBAAiB3B,GACtCpM,EAAS+N,EAAY,SAAUJ,GAC/B3N,EAAS+N,EAAY,UAAWF,GAChCI,EAAWjP,WAAW,CAAGiC,EACzBgN,EAAWhP,WAAW,CAAGqC,EACzB2M,EAAW/M,MAAM,CAAGU,EACpBqM,EAAWlM,WAAW,CAAGQ,EACzB0L,EAAWzM,QAAQ,CAAG+F,EACtB0G,EAAWhG,WAAW,CAAGC,EACzB+F,EAAW1O,QAAQ,CAAG2K,EACtB+D,EAAW9D,eAAe,CAAGC,EAC7B6D,EAAW3O,QAAQ,CAAGuM,EAGlBqC,IACAhO,EAAOgO,EAAiBxC,mBAAmB,CAAE,CACzC1M,YAAa,CACTmP,QAAS,cACTC,QAAS,WACL,IAAI,CAACpP,WAAW,EACpB,CACJ,EACAC,YAAa,CACTkP,QAAS,cACTC,QAAS,WACL,IAAI,CAACnP,WAAW,EACpB,CACJ,EACAK,SAAU,CACN6O,QAAS,WACTC,QAAS,WACL7N,EAAYQ,IAAI,CAAC,IAAI,CAAE,IAAI,CAACoJ,eAAe,CAC/C,CACJ,CACJ,GACI+D,EAAiB1C,OAAO,EACxB0C,EAAiB1C,OAAO,CAACC,aAAa,CAACF,SAAS,EAChD2C,EAAiB1C,OAAO,CAACC,aAAa,CAACF,SAAS,CAACrF,IAAI,CAAC,YAAa,cAAe,cAAe,aAGzGnG,EAAWH,GACX,GAAM,CAAEyO,UAAWC,CAAe,CAAEC,MAAOC,CAAW,CAAEC,IAAKC,CAAS,CAAEC,UAAWC,CAAe,CAAEC,QAASC,CAAa,CAAEC,OAAQC,CAAY,CAAE,CAAGhB,EAAYiB,KAAK,CAClKX,GACAA,CAAAA,EAAgBhI,SAAS,CAAC9B,SAAS,CAAG,CAClC0K,IAAK,IACLC,KAAM,GACV,CAAA,EAEAX,IACAA,EAAYlI,SAAS,CAACpB,SAAS,CAAG,OAClCsJ,EAAYlI,SAAS,CAAC9B,SAAS,CAAG,CAC9B4K,MAAO,IACPC,IAAK,GACT,GAEAX,GACAA,CAAAA,EAAUpI,SAAS,CAACpB,SAAS,CAAG,MAAK,EAErC0J,GACAA,CAAAA,EAAgBtI,SAAS,CAACpB,SAAS,CAAG,MAAK,EAE3C4J,GACAA,CAAAA,EAAcxI,SAAS,CAACpB,SAAS,CAAG,MAAK,EAEzC8J,GACAA,CAAAA,EAAa1I,SAAS,CAAC9B,SAAS,CAAG,CAC/B8K,GAAI,GACR,CAAA,CAER,CACJ,CA+FA,CAgCJ,GACA5U,EAAgBD,EAAU,qCAAsC,CAACA,CAAQ,CAAC,kBAAkB,CAAEA,CAAQ,CAAC,4BAA4B,CAAEA,CAAQ,CAAC,sCAAsC,CAAC,CAAE,SAAUF,CAAU,CAAEoF,CAAW,CAAE4P,CAAU,EAShO,OALAC,AAFUjV,EAERqB,aAAa,CAAG4T,AAFRjV,EAEUqB,aAAa,EAAI+D,EAAY/D,aAAa,CAC9D4T,AAHUjV,EAGRqC,WAAW,CAAG4S,AAHNjV,EAGQqC,WAAW,EAAI+C,EAAY/C,WAAW,CAExD2S,EAAWzB,OAAO,CAAC0B,AALTjV,EAKWkV,KAAK,CAAED,AALlBjV,EAKoBmV,MAAM,EAE7BnV,CACX,EACJ"}