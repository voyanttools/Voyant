{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * Solid angular gauge module\n *\n * (c) 2010-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/solid-gauge', ['highcharts', 'highcharts/highcharts-more'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Axis/Color/ColorAxisLike.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { merge } = U;\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var ColorAxisLike;\n        (function (ColorAxisLike) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initialize defined data classes.\n             * @private\n             */\n            function initDataClasses(userOptions) {\n                const axis = this, chart = axis.chart, legendItem = axis.legendItem = axis.legendItem || {}, options = axis.options, userDataClasses = userOptions.dataClasses || [];\n                let dataClass, dataClasses, colorCount = chart.options.chart.colorCount, colorCounter = 0, colors;\n                axis.dataClasses = dataClasses = [];\n                legendItem.labels = [];\n                for (let i = 0, iEnd = userDataClasses.length; i < iEnd; ++i) {\n                    dataClass = userDataClasses[i];\n                    dataClass = merge(dataClass);\n                    dataClasses.push(dataClass);\n                    if (!chart.styledMode && dataClass.color) {\n                        continue;\n                    }\n                    if (options.dataClassColor === 'category') {\n                        if (!chart.styledMode) {\n                            colors = chart.options.colors || [];\n                            colorCount = colors.length;\n                            dataClass.color = colors[colorCounter];\n                        }\n                        dataClass.colorIndex = colorCounter;\n                        // Loop back to zero\n                        colorCounter++;\n                        if (colorCounter === colorCount) {\n                            colorCounter = 0;\n                        }\n                    }\n                    else {\n                        dataClass.color = color(options.minColor).tweenTo(color(options.maxColor), iEnd < 2 ? 0.5 : i / (iEnd - 1) // #3219\n                        );\n                    }\n                }\n            }\n            ColorAxisLike.initDataClasses = initDataClasses;\n            /**\n             * Create initial color stops.\n             * @private\n             */\n            function initStops() {\n                const axis = this, options = axis.options, stops = axis.stops = options.stops || [\n                    [0, options.minColor || ''],\n                    [1, options.maxColor || '']\n                ];\n                for (let i = 0, iEnd = stops.length; i < iEnd; ++i) {\n                    stops[i].color = color(stops[i][1]);\n                }\n            }\n            ColorAxisLike.initStops = initStops;\n            /**\n             * Normalize logarithmic values.\n             * @private\n             */\n            function normalizedValue(value) {\n                const axis = this, max = axis.max || 0, min = axis.min || 0;\n                if (axis.logarithmic) {\n                    value = axis.logarithmic.log2lin(value);\n                }\n                return 1 - ((max - value) /\n                    ((max - min) || 1));\n            }\n            ColorAxisLike.normalizedValue = normalizedValue;\n            /**\n             * Translate from a value to a color.\n             * @private\n             */\n            function toColor(value, point) {\n                const axis = this;\n                const dataClasses = axis.dataClasses;\n                const stops = axis.stops;\n                let pos, from, to, color, dataClass, i;\n                if (dataClasses) {\n                    i = dataClasses.length;\n                    while (i--) {\n                        dataClass = dataClasses[i];\n                        from = dataClass.from;\n                        to = dataClass.to;\n                        if ((typeof from === 'undefined' || value >= from) &&\n                            (typeof to === 'undefined' || value <= to)) {\n                            color = dataClass.color;\n                            if (point) {\n                                point.dataClass = i;\n                                point.colorIndex = dataClass.colorIndex;\n                            }\n                            break;\n                        }\n                    }\n                }\n                else {\n                    pos = axis.normalizedValue(value);\n                    i = stops.length;\n                    while (i--) {\n                        if (pos > stops[i][0]) {\n                            break;\n                        }\n                    }\n                    from = stops[i] || stops[i + 1];\n                    to = stops[i + 1] || from;\n                    // The position within the gradient\n                    pos = 1 - (to[0] - pos) / ((to[0] - from[0]) || 1);\n                    color = from.color.tweenTo(to.color, pos);\n                }\n                return color;\n            }\n            ColorAxisLike.toColor = toColor;\n        })(ColorAxisLike || (ColorAxisLike = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColorAxisLike;\n    });\n    _registerModule(_modules, 'Core/Axis/SolidGaugeAxis.js', [_modules['Core/Axis/Color/ColorAxisLike.js'], _modules['Core/Utilities.js']], function (ColorAxisLike, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { extend } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function init(axis) {\n            extend(axis, ColorAxisLike);\n        }\n        /* *\n         *\n         *  Default export\n         *\n         * */\n        const SolidGaugeAxis = {\n            init\n        };\n\n        return SolidGaugeAxis;\n    });\n    _registerModule(_modules, 'Series/SolidGauge/SolidGaugeSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  Solid angular gauge module\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A solid gauge is a circular gauge where the value is indicated by a filled\n         * arc, and the color of the arc may variate with the value.\n         *\n         * @sample highcharts/demo/gauge-solid/\n         *         Solid gauges\n         *\n         * @extends      plotOptions.gauge\n         * @excluding    dial, pivot, wrap\n         * @product      highcharts\n         * @requires     modules/solid-gauge\n         * @optionparent plotOptions.solidgauge\n         */\n        const SolidGaugeSeriesDefaults = {\n            /**\n             * The inner radius for points in a solid gauge. Can be given only in\n             * percentage, either as a number or a string like `\"50%\"`.\n             *\n             * @sample {highcharts} highcharts/plotoptions/solidgauge-radius/\n             *         Individual radius and innerRadius\n             *\n             * @type      {string}\n             * @default   \"60%\"\n             * @since     4.1.6\n             * @product   highcharts\n             * @apioption plotOptions.solidgauge.innerRadius\n             */\n            /**\n             * Whether the strokes of the solid gauge should be `round` or `square`.\n             *\n             * @sample {highcharts} highcharts/demo/gauge-multiple-kpi/\n             *         Rounded gauge\n             *\n             * @type       {string}\n             * @default    round\n             * @since      4.2.2\n             * @product    highcharts\n             * @validvalue [\"square\", \"round\"]\n             * @apioption  plotOptions.solidgauge.linecap\n             */\n            /**\n             * Allow the gauge to overshoot the end of the perimeter axis by this\n             * many degrees. Say if the gauge axis goes from 0 to 60, a value of\n             * 100, or 1000, will show 5 degrees beyond the end of the axis when this\n             * option is set to 5.\n             *\n             * @type      {number}\n             * @default   0\n             * @since     3.0.10\n             * @product   highcharts\n             * @apioption plotOptions.solidgauge.overshoot\n             */\n            /**\n             * The outer radius for points in a solid gauge. Can be given only in\n             * percentage, either as a number or a string like `\"100%\"`.\n             *\n             * @sample {highcharts} highcharts/plotoptions/solidgauge-radius/\n             *         Individual radius and innerRadius\n             *\n             * @type      {string}\n             * @default   \"100%\"\n             * @since     4.1.6\n             * @product   highcharts\n             * @apioption plotOptions.solidgauge.radius\n             */\n            /**\n             * Whether to draw rounded edges on the gauge. This options adds the radius\n             * of the rounding to the ends of the arc, so it extends past the actual\n             * values. When `borderRadius` is set, it takes precedence over `rounded`. A\n             * `borderRadius` of 50% behaves like `rounded`, except the shape is not\n             * extended past its value.\n             *\n             * @sample {highcharts} highcharts/demo/gauge-multiple-kpi/\n             *         Gauge showing multiple KPIs\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     5.0.8\n             * @product   highcharts\n             * @apioption plotOptions.solidgauge.rounded\n             */\n            /**\n             * The threshold or base level for the gauge.\n             *\n             * @sample {highcharts} highcharts/plotoptions/solidgauge-threshold/\n             *         Zero threshold with negative and positive values\n             *\n             * @type      {number|null}\n             * @since     5.0.3\n             * @product   highcharts\n             * @apioption plotOptions.solidgauge.threshold\n             */\n            /**\n             * Whether to give each point an individual color.\n             */\n            colorByPoint: true,\n            dataLabels: {\n                y: 0\n            }\n        };\n        /**\n         * A `solidgauge` series. If the [type](#series.solidgauge.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         *\n         * @extends   series,plotOptions.solidgauge\n         * @excluding animationLimit, boostThreshold, connectEnds, connectNulls,\n         *            cropThreshold, dashStyle, dataParser, dataURL, dial,\n         *            findNearestPointBy, getExtremesFromAll, marker, negativeColor,\n         *            pointPlacement, pivot, shadow, softThreshold, stack, stacking,\n         *            states, step, threshold, turboThreshold, wrap, zoneAxis, zones,\n         *            dataSorting, boostBlending\n         * @product   highcharts\n         * @requires  modules/solid-gauge\n         * @apioption series.solidgauge\n         */\n        /**\n         * An array of data points for the series. For the `solidgauge` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `y` options. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.solidgauge.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        y: 5,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        y: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * The typical gauge only contains a single data value.\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|null|*>}\n         * @extends   series.gauge.data\n         * @product   highcharts\n         * @apioption series.solidgauge.data\n         */\n        /**\n         * The inner radius of an individual point in a solid gauge. Can be given only\n         * in percentage, either as a number or a string like `\"50%\"`.\n         *\n         * @sample {highcharts} highcharts/plotoptions/solidgauge-radius/\n         *         Individual radius and innerRadius\n         *\n         * @type      {string}\n         * @since     4.1.6\n         * @product   highcharts\n         * @apioption series.solidgauge.data.innerRadius\n         */\n        /**\n         * The outer radius of an individual point in a solid gauge. Can be\n         * given only in percentage, either as a number or a string like `\"100%\"`.\n         *\n         * @sample {highcharts} highcharts/plotoptions/solidgauge-radius/\n         *         Individual radius and innerRadius\n         *\n         * @type      {string}\n         * @since     4.1.6\n         * @product   highcharts\n         * @apioption series.solidgauge.data.radius\n         */\n        ''; // Keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SolidGaugeSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/SolidGauge/SolidGaugeSeries.js', [_modules['Extensions/BorderRadius.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Axis/SolidGaugeAxis.js'], _modules['Series/SolidGauge/SolidGaugeSeriesDefaults.js'], _modules['Core/Utilities.js']], function (BorderRadius, SeriesRegistry, SolidGaugeAxis, SolidGaugeSeriesDefaults, U) {\n        /* *\n         *\n         *  Solid angular gauge module\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { gauge: GaugeSeries, pie: PieSeries } = SeriesRegistry.seriesTypes;\n        const { clamp, extend, isNumber, merge, pick, pInt } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * SolidGauge series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.solidgauge\n         *\n         * @augments Highcarts.Series\n         */\n        class SolidGaugeSeries extends GaugeSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            // Extend the translate function to extend the Y axis with the necessary\n            // decoration (#5895).\n            translate() {\n                const axis = this.yAxis;\n                SolidGaugeAxis.init(axis);\n                // Prepare data classes\n                if (!axis.dataClasses && axis.options.dataClasses) {\n                    axis.initDataClasses(axis.options);\n                }\n                axis.initStops();\n                // Generate points and inherit data label position\n                GaugeSeries.prototype.translate.call(this);\n            }\n            // Draw the points where each point is one needle.\n            drawPoints() {\n                const series = this, yAxis = series.yAxis, center = yAxis.center, options = series.options, renderer = series.chart.renderer, overshoot = options.overshoot, rounded = options.rounded && options.borderRadius === void 0, overshootVal = isNumber(overshoot) ?\n                    overshoot / 180 * Math.PI :\n                    0;\n                let thresholdAngleRad;\n                // Handle the threshold option\n                if (isNumber(options.threshold)) {\n                    thresholdAngleRad = yAxis.startAngleRad + yAxis.translate(options.threshold, void 0, void 0, void 0, true);\n                }\n                this.thresholdAngleRad = pick(thresholdAngleRad, yAxis.startAngleRad);\n                for (const point of series.points) {\n                    // #10630 null point should not be draw\n                    if (!point.isNull) { // Condition like in pie chart\n                        const radius = ((pInt(pick(point.options.radius, options.radius, 100 // %\n                        )) * center[2]) / 200), innerRadius = ((pInt(pick(point.options.innerRadius, options.innerRadius, 60 // %\n                        )) * center[2]) / 200), axisMinAngle = Math.min(yAxis.startAngleRad, yAxis.endAngleRad), axisMaxAngle = Math.max(yAxis.startAngleRad, yAxis.endAngleRad);\n                        let graphic = point.graphic, rotation = (yAxis.startAngleRad +\n                            yAxis.translate(point.y, void 0, void 0, void 0, true)), shapeArgs, d, toColor = yAxis.toColor(point.y, point);\n                        if (toColor === 'none') { // #3708\n                            toColor = point.color || series.color || 'none';\n                        }\n                        if (toColor !== 'none') {\n                            point.color = toColor;\n                        }\n                        // Handle overshoot and clipping to axis max/min\n                        rotation = clamp(rotation, axisMinAngle - overshootVal, axisMaxAngle + overshootVal);\n                        // Handle the wrap option\n                        if (options.wrap === false) {\n                            rotation = clamp(rotation, axisMinAngle, axisMaxAngle);\n                        }\n                        const angleOfRounding = rounded ?\n                            ((radius - innerRadius) / 2) / radius :\n                            0, start = Math.min(rotation, series.thresholdAngleRad) -\n                            angleOfRounding;\n                        let end = Math.max(rotation, series.thresholdAngleRad) +\n                            angleOfRounding;\n                        if (end - start > 2 * Math.PI) {\n                            end = start + 2 * Math.PI;\n                        }\n                        let borderRadius = rounded ? '50%' : 0;\n                        if (options.borderRadius) {\n                            borderRadius = BorderRadius.optionsToObject(options.borderRadius).radius;\n                        }\n                        point.shapeArgs = shapeArgs = {\n                            x: center[0],\n                            y: center[1],\n                            r: radius,\n                            innerR: innerRadius,\n                            start,\n                            end,\n                            borderRadius\n                        };\n                        point.startR = radius; // For PieSeries.animate\n                        if (graphic) {\n                            d = shapeArgs.d;\n                            graphic.animate(extend({ fill: toColor }, shapeArgs));\n                            if (d) {\n                                shapeArgs.d = d; // Animate alters it\n                            }\n                        }\n                        else {\n                            point.graphic = graphic = renderer.arc(shapeArgs)\n                                .attr({\n                                fill: toColor,\n                                'sweep-flag': 0\n                            })\n                                .add(series.group);\n                        }\n                        if (!series.chart.styledMode) {\n                            if (options.linecap !== 'square') {\n                                graphic.attr({\n                                    'stroke-linecap': 'round',\n                                    'stroke-linejoin': 'round'\n                                });\n                            }\n                            graphic.attr({\n                                stroke: options.borderColor || 'none',\n                                'stroke-width': options.borderWidth || 0\n                            });\n                        }\n                        if (graphic) {\n                            graphic.addClass(point.getClassName(), true);\n                        }\n                    }\n                }\n            }\n            // Extend the pie slice animation by animating from start angle and up.\n            animate(init) {\n                if (!init) {\n                    this.startAngleRad = this.thresholdAngleRad;\n                    PieSeries.prototype.animate.call(this, init);\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        SolidGaugeSeries.defaultOptions = merge(GaugeSeries.defaultOptions, SolidGaugeSeriesDefaults);\n        SeriesRegistry.registerSeriesType('solidgauge', SolidGaugeSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SolidGaugeSeries;\n    });\n    _registerModule(_modules, 'masters/modules/solid-gauge.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","Color","U","ColorAxisLike","parse","color","merge","initDataClasses","userOptions","chart","axis","legendItem","options","userDataClasses","dataClasses","dataClass","colorCount","colorCounter","colors","labels","i","iEnd","length","push","styledMode","dataClassColor","colorIndex","minColor","tweenTo","maxColor","initStops","stops","normalizedValue","value","max","min","logarithmic","log2lin","toColor","point","pos","from","to","extend","init","colorByPoint","dataLabels","y","BorderRadius","SeriesRegistry","SolidGaugeAxis","SolidGaugeSeriesDefaults","gauge","GaugeSeries","pie","PieSeries","seriesTypes","clamp","isNumber","pick","pInt","SolidGaugeSeries","translate","yAxis","prototype","call","drawPoints","thresholdAngleRad","series","center","renderer","overshoot","rounded","borderRadius","overshootVal","Math","PI","threshold","startAngleRad","points","isNull","radius","innerRadius","axisMinAngle","endAngleRad","axisMaxAngle","graphic","rotation","shapeArgs","d","wrap","angleOfRounding","start","end","optionsToObject","x","r","innerR","startR","animate","fill","arc","attr","add","group","linecap","stroke","borderColor","borderWidth","addClass","getClassName","defaultOptions","registerSeriesType"],"mappings":"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"}