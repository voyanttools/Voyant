{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.8 (2024-08-29)\n *\n * Highcharts Stock as a plugin for Highcharts\n *\n * (c) 2010-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/stock', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/DataModifyComposition.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Series/Point.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (Axis, Point, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { tooltipFormatter: pointTooltipFormatter } = Point.prototype;\n        const { addEvent, arrayMax, arrayMin, correctFloat, defined, isArray, isNumber, isString, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var DataModifyComposition;\n        (function (DataModifyComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extends the series, axis and point classes with\n             * compare and cumulative support.\n             *\n             * @private\n             *\n             * @param SeriesClass\n             * Series class to use.\n             *\n             * @param AxisClass\n             * Axis class to extend.\n             *\n             * @param PointClass\n             * Point class to use.\n             */\n            function compose(SeriesClass, AxisClass, PointClass) {\n                const axisProto = AxisClass.prototype, pointProto = PointClass.prototype, seriesProto = SeriesClass.prototype;\n                if (!seriesProto.setCompare) {\n                    seriesProto.setCompare = seriesSetCompare;\n                    seriesProto.setCumulative = seriesSetCumulative;\n                    addEvent(SeriesClass, 'afterInit', afterInit);\n                    addEvent(SeriesClass, 'afterGetExtremes', afterGetExtremes);\n                    addEvent(SeriesClass, 'afterProcessData', afterProcessData);\n                }\n                if (!axisProto.setCompare) {\n                    axisProto.setCompare = axisSetCompare;\n                    axisProto.setModifier = setModifier;\n                    axisProto.setCumulative = axisSetCumulative;\n                    pointProto.tooltipFormatter = tooltipFormatter;\n                }\n                return SeriesClass;\n            }\n            DataModifyComposition.compose = compose;\n            /* ********************************************************************** *\n             *  Start shared compare and cumulative logic                             *\n             * ********************************************************************** */\n            /**\n             * Shared code for the axis.setCompare() and the axis.setCumulative()\n             * methods. Inits the 'compare' or the 'cumulative' mode.\n             * @private\n             */\n            function setModifier(mode, modeState, redraw) {\n                if (!this.isXAxis) {\n                    this.series.forEach(function (series) {\n                        if (mode === 'compare' &&\n                            typeof modeState !== 'boolean') {\n                            series.setCompare(modeState, false);\n                        }\n                        else if (mode === 'cumulative' &&\n                            !isString(modeState)) {\n                            series.setCumulative(modeState, false);\n                        }\n                    });\n                    if (pick(redraw, true)) {\n                        this.chart.redraw();\n                    }\n                }\n            }\n            /**\n             * Extend the tooltip formatter by adding support for the point.change\n             * variable as well as the changeDecimals option.\n             *\n             * @ignore\n             * @function Highcharts.Point#tooltipFormatter\n             *\n             * @param {string} pointFormat\n             */\n            function tooltipFormatter(pointFormat) {\n                const point = this, { numberFormatter } = point.series.chart, replace = function (value) {\n                    pointFormat = pointFormat.replace('{point.' + value + '}', (point[value] > 0 && value === 'change' ? '+' : '') +\n                        numberFormatter(point[value], pick(point.series.tooltipOptions.changeDecimals, 2)));\n                };\n                if (defined(point.change)) {\n                    replace('change');\n                }\n                if (defined(point.cumulativeSum)) {\n                    replace('cumulativeSum');\n                }\n                return pointTooltipFormatter.apply(this, [pointFormat]);\n            }\n            /**\n             * Extend series.init by adding a methods to modify the y values used\n             * for plotting on the y axis. For compare mode, this method is called both\n             * from the axis when finding dataMin and dataMax,\n             * and from the series.translate method.\n             *\n             * @ignore\n             * @function Highcharts.Series#init\n             */\n            function afterInit() {\n                const compare = this.options.compare;\n                let dataModify;\n                if (compare === 'percent' ||\n                    compare === 'value' ||\n                    this.options.cumulative) {\n                    dataModify = new Additions(this);\n                    if (compare === 'percent' || compare === 'value') {\n                        // Set comparison mode\n                        dataModify.initCompare(compare);\n                    }\n                    else {\n                        // Set Cumulative Sum mode\n                        dataModify.initCumulative();\n                    }\n                }\n                this.dataModify = dataModify;\n            }\n            /**\n             * Adjust the extremes (compare and cumulative modify the data).\n             * @private\n             */\n            function afterGetExtremes(e) {\n                const dataExtremes = e.dataExtremes, activeYData = dataExtremes.activeYData;\n                if (this.dataModify && dataExtremes) {\n                    let extremes;\n                    if (this.options.compare) {\n                        extremes = [\n                            this.dataModify.modifyValue(dataExtremes.dataMin),\n                            this.dataModify.modifyValue(dataExtremes.dataMax)\n                        ];\n                    }\n                    else if (this.options.cumulative &&\n                        isArray(activeYData) &&\n                        // If only one y visible, sum doesn't change\n                        // so no need to change extremes\n                        activeYData.length >= 2) {\n                        extremes = Additions.getCumulativeExtremes(activeYData);\n                    }\n                    if (extremes) {\n                        dataExtremes.dataMin = arrayMin(extremes);\n                        dataExtremes.dataMax = arrayMax(extremes);\n                    }\n                }\n            }\n            /* ********************************************************************** *\n             *  End shared compare and cumulative logic                               *\n             * ********************************************************************** */\n            /* ********************************************************************** *\n             *  Start value compare logic                                             *\n             * ********************************************************************** */\n            /**\n             * Highcharts Stock only. Set the\n             * [compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\n             * mode of the series after render time.\n             * In most cases it is more useful running\n             * {@link Axis#setCompare} on the X axis to update all its series.\n             *\n             * @function Highcharts.Series#setCompare\n             *\n             * @param {string|null} [compare]\n             *        Can be one of `undefined` (default), `null`, `\"percent\"`\n             *        or `\"value\"`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function seriesSetCompare(compare, redraw) {\n                // Survive to export, #5485 (and for options generally)\n                this.options.compare = this.userOptions.compare = compare;\n                // Fire series.init() that will set or delete series.dataModify\n                this.update({}, pick(redraw, true));\n                if (this.dataModify && (compare === 'value' || compare === 'percent')) {\n                    this.dataModify.initCompare(compare);\n                }\n                else {\n                    // When disabling, clear the points\n                    this.points.forEach((point) => {\n                        delete point.change;\n                    });\n                }\n            }\n            /**\n             * Extend series.processData by finding the first y value in the plot area,\n             * used for comparing the following values\n             *\n             * @ignore\n             * @function Highcharts.Series#processData\n             */\n            function afterProcessData() {\n                const series = this;\n                if (series.xAxis && // Not pies\n                    series.processedYData &&\n                    series.dataModify) {\n                    const processedXData = series.processedXData, processedYData = series.processedYData, length = processedYData.length, compareStart = series.options.compareStart === true ? 0 : 1;\n                    let keyIndex = -1, i;\n                    // For series with more than one value (range, OHLC etc), compare\n                    // against close or the pointValKey (#4922, #3112, #9854)\n                    if (series.pointArrayMap) {\n                        keyIndex = series.pointArrayMap.indexOf(series.options.pointValKey || series.pointValKey || 'y');\n                    }\n                    // Find the first value for comparison\n                    for (i = 0; i < length - compareStart; i++) {\n                        const compareValue = processedYData[i] && keyIndex > -1 ?\n                            processedYData[i][keyIndex] : processedYData[i];\n                        if (isNumber(compareValue) &&\n                            compareValue !== 0 &&\n                            processedXData[i + compareStart] >= (series.xAxis.min || 0)) {\n                            series.dataModify.compareValue = compareValue;\n                            break;\n                        }\n                    }\n                }\n            }\n            /**\n             * Highcharts Stock only. Set the compare mode on all series\n             * belonging to a Y axis.\n             *\n             * @see [plotOptions.series.compare](https://api.highcharts.com/highstock/plotOptions.series.compare)\n             *\n             * @sample stock/members/axis-setcompare/\n             *         Set compare\n             *\n             * @function Highcharts.Axis#setCompare\n             *\n             * @param {string|null} [compare]\n             *        The compare mode. Can be one of `undefined` (default), `null`,\n             *        `\"value\"` or `\"percent\"`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function axisSetCompare(compare, redraw) {\n                this.setModifier('compare', compare, redraw);\n            }\n            /* ********************************************************************** *\n             *  End value compare logic                                               *\n             * ********************************************************************** */\n            /* ********************************************************************** *\n             *  Start Cumulative Sum logic, author: Rafal Sebestjanski                *\n             * ********************************************************************** */\n            /**\n             * Highcharts Stock only. Set the\n             * [cumulative](https://api.highcharts.com/highstock/plotOptions.series.cumulative)\n             * mode of the series after render time.\n             * In most cases it is more useful running\n             * {@link Axis#setCumulative} on the Y axis to update all its series.\n             *\n             * @function Highcharts.Series#setCumulative\n             *\n             * @param {boolean} [cumulative=false]\n             *        Either enable or disable Cumulative Sum mode.\n             *        Can be one of `false` (default) or `true`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function seriesSetCumulative(cumulative, redraw) {\n                // Set default value to false\n                cumulative = pick(cumulative, false);\n                // Survive to export, #5485 (and for options generally)\n                this.options.cumulative = this.userOptions.cumulative = cumulative;\n                // Fire series.init() that will set or delete series.dataModify\n                this.update({}, pick(redraw, true));\n                // If should, turn on the Cumulative Sum mode\n                if (this.dataModify) {\n                    this.dataModify.initCumulative();\n                }\n                else {\n                    // When disabling, clear the points\n                    this.points.forEach((point) => {\n                        delete point.cumulativeSum;\n                    });\n                }\n            }\n            /**\n             * Highcharts Stock only. Set the cumulative mode on all series\n             * belonging to a Y axis.\n             *\n             * @see [plotOptions.series.cumulative](https://api.highcharts.com/highstock/plotOptions.series.cumulative)\n             *\n             * @sample stock/members/axis-setcumulative/\n             *         Set cumulative\n             *\n             * @function Highcharts.Axis#setCumulative\n             *\n             * @param {boolean} [cumulative]\n             *        Whether to disable or enable the cumulative mode.\n             *        Can be one of `undefined` (default, treated as `false`),\n             *        `false` or `true`.\n             *\n             * @param {boolean} [redraw=true]\n             *        Whether to redraw the chart or to wait for a later call to\n             *        {@link Chart#redraw}.\n             */\n            function axisSetCumulative(cumulative, redraw) {\n                this.setModifier('cumulative', cumulative, redraw);\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            /**\n             * @private\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                constructor(series) {\n                    this.series = series;\n                }\n                /* *\n                *\n                *  Functions\n                *\n                * */\n                /**\n                 * @private\n                 */\n                modifyValue() {\n                    return 0;\n                }\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#getCumulativeExtremes\n                 *\n                 * @param {Array} [activeYData]\n                 *        An array cointaining all the points' y values\n                 *        in a visible range.\n                 */\n                static getCumulativeExtremes(activeYData) {\n                    let cumulativeDataMin = Infinity, cumulativeDataMax = -Infinity;\n                    activeYData.reduce((prev, cur) => {\n                        const sum = prev + cur;\n                        cumulativeDataMin = Math.min(cumulativeDataMin, sum, prev);\n                        cumulativeDataMax = Math.max(cumulativeDataMax, sum, prev);\n                        return sum;\n                    });\n                    return [cumulativeDataMin, cumulativeDataMax];\n                }\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#initCompare\n                 *\n                 * @param {string} [compare]\n                 *        Can be one of `\"percent\"` or `\"value\"`.\n                 */\n                initCompare(compare) {\n                    // Set the modifyValue method\n                    this.modifyValue = function (value, index) {\n                        if (value === null) {\n                            value = 0;\n                        }\n                        const compareValue = this.compareValue;\n                        if (typeof value !== 'undefined' &&\n                            typeof compareValue !== 'undefined') { // #2601, #5814\n                            // Get the modified value\n                            if (compare === 'value') {\n                                value -= compareValue;\n                                // Compare percent\n                            }\n                            else {\n                                const compareBase = this.series.options.compareBase;\n                                value = 100 * (value / compareValue) -\n                                    (compareBase === 100 ? 0 : 100);\n                            }\n                            // Record for tooltip etc.\n                            if (typeof index !== 'undefined') {\n                                const point = this.series.points[index];\n                                if (point) {\n                                    point.change = value;\n                                }\n                            }\n                            return value;\n                        }\n                        return 0;\n                    };\n                }\n                /**\n                 * @ignore\n                 * @function Highcharts.Series#initCumulative\n                 */\n                initCumulative() {\n                    // Set the modifyValue method\n                    this.modifyValue = function (value, index) {\n                        if (value === null) {\n                            value = 0;\n                        }\n                        if (value !== void 0 && index !== void 0) {\n                            const prevPoint = index > 0 ?\n                                this.series.points[index - 1] : null;\n                            // Get the modified value\n                            if (prevPoint && prevPoint.cumulativeSum) {\n                                value = correctFloat(prevPoint.cumulativeSum + value);\n                            }\n                            // Record for tooltip etc.\n                            const point = this.series.points[index];\n                            const cumulativeStart = point.series.options.cumulativeStart, withinRange = point.x <= this.series.xAxis.max &&\n                                point.x >= this.series.xAxis.min;\n                            if (point) {\n                                if (!cumulativeStart || withinRange) {\n                                    point.cumulativeSum = value;\n                                }\n                                else {\n                                    point.cumulativeSum = void 0;\n                                }\n                            }\n                            return value;\n                        }\n                        return 0;\n                    };\n                }\n            }\n            DataModifyComposition.Additions = Additions;\n        })(DataModifyComposition || (DataModifyComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Compare the values of the series against the first non-null, non-\n         * zero value in the visible range. The y axis will show percentage\n         * or absolute change depending on whether `compare` is set to `\"percent\"`\n         * or `\"value\"`. When this is applied to multiple series, it allows\n         * comparing the development of the series against each other. Adds\n         * a `change` field to every point object.\n         *\n         * @see [compareBase](#plotOptions.series.compareBase)\n         * @see [Axis.setCompare()](/class-reference/Highcharts.Axis#setCompare)\n         * @see [Series.setCompare()](/class-reference/Highcharts.Series#setCompare)\n         *\n         * @sample {highstock} stock/plotoptions/series-compare-percent/\n         *         Percent\n         * @sample {highstock} stock/plotoptions/series-compare-value/\n         *         Value\n         *\n         * @type      {string}\n         * @since     1.0.1\n         * @product   highstock\n         * @validvalue [\"percent\", \"value\"]\n         * @apioption plotOptions.series.compare\n         */\n        /**\n         * Defines if comparison should start from the first point within the visible\n         * range or should start from the last point **before** the range.\n         *\n         * In other words, this flag determines if first point within the visible range\n         * will have 0% (`compareStart=true`) or should have been already calculated\n         * according to the previous point (`compareStart=false`).\n         *\n         * @sample {highstock} stock/plotoptions/series-comparestart/\n         *         Calculate compare within visible range\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.0.0\n         * @product   highstock\n         * @apioption plotOptions.series.compareStart\n         */\n        /**\n         * When [compare](#plotOptions.series.compare) is `percent`, this option\n         * dictates whether to use 0 or 100 as the base of comparison.\n         *\n         * @sample {highstock} stock/plotoptions/series-comparebase/\n         *         Compare base is 100\n         *\n         * @type       {number}\n         * @default    0\n         * @since      5.0.6\n         * @product    highstock\n         * @validvalue [0, 100]\n         * @apioption  plotOptions.series.compareBase\n         */\n        /**\n         * Cumulative Sum feature replaces points' values with the following formula:\n         * `sum of all previous points' values + current point's value`.\n         * Works only for points in a visible range.\n         * Adds the `cumulativeSum` field to each point object that can be accessed\n         * e.g. in the [tooltip.pointFormat](https://api.highcharts.com/highstock/tooltip.pointFormat).\n         *\n         * With `dataGrouping` enabled, default grouping approximation is set to `sum`.\n         *\n         * @see [Axis.setCumulative()](/class-reference/Highcharts.Axis#setCumulative)\n         * @see [Series.setCumulative()](/class-reference/Highcharts.Series#setCumulative)\n         *\n         * @sample {highstock} stock/plotoptions/series-cumulative-sum/\n         *         Cumulative Sum\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since 9.3.0\n         * @product   highstock\n         * @apioption plotOptions.series.cumulative\n         */\n        /**\n         * Defines if cumulation should start from the first point within the visible\n         * range or should start from the last point **before** the range.\n         *\n         * In other words, this flag determines if first point within the visible range\n         * will start at 0 (`cumulativeStart=true`) or should have been already calculated\n         * according to the previous point (`cumulativeStart=false`).\n         *\n         * @sample {highstock} stock/plotoptions/series-cumulativestart/\n         *         Cumulative Start\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since 11.4.2\n         * @product   highstock\n         * @apioption plotOptions.series.cumulativeStart\n         */\n        ''; // Keeps doclets above in transpiled file\n\n        return DataModifyComposition;\n    });\n    _registerModule(_modules, 'Stock/Navigator/ChartNavigatorComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { addEvent, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedMembers = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let NavigatorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass, NavigatorClass) {\n            if (U.pushUnique(composedMembers, ChartClass)) {\n                const chartProto = ChartClass.prototype;\n                NavigatorConstructor = NavigatorClass;\n                chartProto.callbacks.push(onChartCallback);\n                addEvent(ChartClass, 'afterAddSeries', onChartAfterAddSeries);\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n                addEvent(ChartClass, 'afterUpdate', onChartAfterUpdate);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'beforeShowResetZoom', onChartBeforeShowResetZoom);\n                addEvent(ChartClass, 'update', onChartUpdate);\n            }\n        }\n        /**\n         * Handle adding new series.\n         * @private\n         */\n        function onChartAfterAddSeries() {\n            if (this.navigator) {\n                // Recompute which series should be shown in navigator, and add them\n                this.navigator.setBaseSeries(null, false);\n            }\n        }\n        /**\n         * For stock charts, extend the Chart.setChartSize method so that we can set the\n         * final top position of the navigator once the height of the chart, including\n         * the legend, is determined. #367. We can't use Chart.getMargins, because\n         * labels offsets are not calculated yet.\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            const legend = this.legend, navigator = this.navigator;\n            let legendOptions, xAxis, yAxis;\n            if (navigator) {\n                legendOptions = legend && legend.options;\n                xAxis = navigator.xAxis;\n                yAxis = navigator.yAxis;\n                const { scrollbarHeight, scrollButtonSize } = navigator;\n                // Compute the top position\n                if (this.inverted) {\n                    navigator.left = navigator.opposite ?\n                        this.chartWidth - scrollbarHeight -\n                            navigator.height :\n                        this.spacing[3] + scrollbarHeight;\n                    navigator.top = this.plotTop + scrollButtonSize;\n                }\n                else {\n                    navigator.left = pick(xAxis.left, this.plotLeft + scrollButtonSize);\n                    navigator.top = navigator.navigatorOptions.top ||\n                        this.chartHeight -\n                            navigator.height -\n                            scrollbarHeight -\n                            (this.scrollbar?.options.margin || 0) -\n                            this.spacing[2] -\n                            (this.rangeSelector && this.extraBottomMargin ?\n                                this.rangeSelector.getHeight() :\n                                0) -\n                            ((legendOptions &&\n                                legendOptions.verticalAlign === 'bottom' &&\n                                legendOptions.layout !== 'proximate' && // #13392\n                                legendOptions.enabled &&\n                                !legendOptions.floating) ?\n                                legend.legendHeight +\n                                    pick(legendOptions.margin, 10) :\n                                0) -\n                            (this.titleOffset ? this.titleOffset[2] : 0);\n                }\n                if (xAxis && yAxis) { // False if navigator is disabled (#904)\n                    if (this.inverted) {\n                        xAxis.options.left = yAxis.options.left = navigator.left;\n                    }\n                    else {\n                        xAxis.options.top = yAxis.options.top = navigator.top;\n                    }\n                    xAxis.setAxisSize();\n                    yAxis.setAxisSize();\n                }\n            }\n        }\n        /**\n         * Initialize navigator, if no scrolling exists yet.\n         * @private\n         */\n        function onChartAfterUpdate(event) {\n            if (!this.navigator && !this.scroller &&\n                (this.options.navigator.enabled ||\n                    this.options.scrollbar.enabled)) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n                if (pick(event.redraw, true)) {\n                    this.redraw(event.animation); // #7067\n                }\n            }\n        }\n        /**\n         * Initialize navigator for stock charts\n         * @private\n         */\n        function onChartBeforeRender() {\n            const options = this.options;\n            if (options.navigator.enabled ||\n                options.scrollbar.enabled) {\n                this.scroller = this.navigator = new NavigatorConstructor(this);\n            }\n        }\n        /**\n         * For Stock charts. For x only zooming, do not to create the zoom button\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector. (#9285)\n         * @private\n         */\n        function onChartBeforeShowResetZoom() {\n            const chartOptions = this.options, navigator = chartOptions.navigator, rangeSelector = chartOptions.rangeSelector;\n            if (((navigator && navigator.enabled) ||\n                (rangeSelector && rangeSelector.enabled)) &&\n                ((!isTouchDevice &&\n                    this.zooming.type === 'x') ||\n                    (isTouchDevice && this.zooming.pinchType === 'x'))) {\n                return false;\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartCallback(chart) {\n            const navigator = chart.navigator;\n            // Initialize the navigator\n            if (navigator && chart.xAxis[0]) {\n                const extremes = chart.xAxis[0].getExtremes();\n                navigator.render(extremes.min, extremes.max);\n            }\n        }\n        /**\n         * Merge options, if no scrolling exists yet\n         * @private\n         */\n        function onChartUpdate(e) {\n            const navigatorOptions = (e.options.navigator || {}), scrollbarOptions = (e.options.scrollbar || {});\n            if (!this.navigator && !this.scroller &&\n                (navigatorOptions.enabled || scrollbarOptions.enabled)) {\n                merge(true, this.options.navigator, navigatorOptions);\n                merge(true, this.options.scrollbar, scrollbarOptions);\n                delete e.options.navigator;\n                delete e.options.scrollbar;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ChartNavigatorComposition = {\n            compose\n        };\n\n        return ChartNavigatorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/NavigatorAxisComposition.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isTouchDevice } = H;\n        const { addEvent, correctFloat, defined, isNumber, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onAxisInit() {\n            const axis = this;\n            if (!axis.navigatorAxis) {\n                axis.navigatorAxis = new NavigatorAxisAdditions(axis);\n            }\n        }\n        /**\n         * For Stock charts, override selection zooming with some special features\n         * because X axis zooming is already allowed by the Navigator and Range\n         * selector.\n         * @private\n         */\n        function onAxisSetExtremes(e) {\n            const axis = this, chart = axis.chart, chartOptions = chart.options, navigator = chartOptions.navigator, navigatorAxis = axis.navigatorAxis, pinchType = chart.zooming.pinchType, rangeSelector = chartOptions.rangeSelector, zoomType = chart.zooming.type;\n            let zoomed;\n            if (axis.isXAxis &&\n                (navigator?.enabled || rangeSelector?.enabled)) {\n                // For y only zooming, ignore the X axis completely\n                if (zoomType === 'y' && e.trigger === 'zoom') {\n                    zoomed = false;\n                    // For xy zooming, record the state of the zoom before zoom selection,\n                    // then when the reset button is pressed, revert to this state. This\n                    // should apply only if the chart is initialized with a range (#6612),\n                    // otherwise zoom all the way out.\n                }\n                else if (((e.trigger === 'zoom' && zoomType === 'xy') ||\n                    (isTouchDevice && pinchType === 'xy')) &&\n                    axis.options.range) {\n                    const previousZoom = navigatorAxis.previousZoom;\n                    // Minimum defined, zooming in\n                    if (defined(e.min)) {\n                        navigatorAxis.previousZoom = [axis.min, axis.max];\n                        // Minimum undefined, resetting zoom\n                    }\n                    else if (previousZoom) {\n                        e.min = previousZoom[0];\n                        e.max = previousZoom[1];\n                        navigatorAxis.previousZoom = void 0;\n                    }\n                }\n            }\n            if (typeof zoomed !== 'undefined') {\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class NavigatorAxisAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass) {\n                if (!AxisClass.keepProps.includes('navigatorAxis')) {\n                    AxisClass.keepProps.push('navigatorAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'setExtremes', onAxisSetExtremes);\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            destroy() {\n                this.axis = void 0;\n            }\n            /**\n             * Add logic to normalize the zoomed range in order to preserve the pressed\n             * state of range selector buttons\n             *\n             * @private\n             * @function Highcharts.Axis#toFixedRange\n             */\n            toFixedRange(pxMin, pxMax, fixedMin, fixedMax) {\n                const axis = this.axis, halfPointRange = (axis.pointRange || 0) / 2;\n                let newMin = pick(fixedMin, axis.translate(pxMin, true, !axis.horiz)), newMax = pick(fixedMax, axis.translate(pxMax, true, !axis.horiz));\n                // Add/remove half point range to/from the extremes (#1172)\n                if (!defined(fixedMin)) {\n                    newMin = correctFloat(newMin + halfPointRange);\n                }\n                if (!defined(fixedMax)) {\n                    newMax = correctFloat(newMax - halfPointRange);\n                }\n                if (!isNumber(newMin) || !isNumber(newMax)) { // #1195, #7411\n                    newMin = newMax = void 0;\n                }\n                return {\n                    min: newMin,\n                    max: newMax\n                };\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NavigatorAxisAdditions;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorDefaults.js', [_modules['Core/Color/Color.js'], _modules['Core/Series/SeriesRegistry.js']], function (Color, SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { seriesTypes } = SeriesRegistry;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * The navigator is a small series below the main series, displaying\n         * a view of the entire data set. It provides tools to zoom in and\n         * out on parts of the data as well as panning across the dataset.\n         *\n         * @product      highstock gantt\n         * @optionparent navigator\n         */\n        const NavigatorDefaults = {\n            /**\n             * Whether the navigator and scrollbar should adapt to updated data\n             * in the base X axis. When loading data async, as in the demo below,\n             * this should be `false`. Otherwise new data will trigger navigator\n             * redraw, which will cause unwanted looping. In the demo below, the\n             * data in the navigator is set only once. On navigating, only the main\n             * chart content is updated.\n             *\n             * @sample {highstock} stock/demo/lazy-loading/\n             *         Set to false with async data loading\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.adaptToUpdatedData\n             */\n            /**\n             * An integer identifying the index to use for the base series, or a\n             * string representing the id of the series.\n             *\n             * **Note**: As of Highcharts 5.0, this is now a deprecated option.\n             * Prefer [series.showInNavigator](#plotOptions.series.showInNavigator).\n             *\n             * @see [series.showInNavigator](#plotOptions.series.showInNavigator)\n             *\n             * @deprecated\n             * @type      {number|string}\n             * @default   0\n             * @apioption navigator.baseSeries\n             */\n            /**\n             * Enable or disable the navigator.\n             *\n             * @sample {highstock} stock/navigator/enabled/\n             *         Disable the navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption navigator.enabled\n             */\n            /**\n             * When the chart is inverted, whether to draw the navigator on the\n             * opposite side.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     5.0.8\n             * @apioption navigator.opposite\n             */\n            /**\n             * The height of the navigator.\n             *\n             * @sample {highstock} stock/navigator/height/\n             *         A higher navigator\n             */\n            height: 40,\n            /**\n             * The distance from the nearest element, the X axis or X axis labels.\n             *\n             * @sample {highstock} stock/navigator/margin/\n             *         A margin of 2 draws the navigator closer to the X axis labels\n             */\n            margin: 25,\n            /**\n             * Whether the mask should be inside the range marking the zoomed\n             * range, or outside. In Highcharts Stock 1.x it was always `false`.\n             *\n             * @sample {highstock} stock/demo/maskinside-false/\n             *         False, mask outside\n             *\n             * @since   2.0\n             */\n            maskInside: true,\n            /**\n             * Options for the handles for dragging the zoomed area.\n             *\n             * @sample {highstock} stock/navigator/handles/\n             *         Colored handles\n             */\n            handles: {\n                /**\n                 * Width for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                width: 7,\n                /**\n                 * Border radius of the handles.\n                 *\n                 * @sample {highstock} stock/navigator/handles-border-radius/\n                 *      Border radius on the navigator handles.\n                 *\n                 * @since 11.4.2\n                 */\n                borderRadius: 0,\n                /**\n                 * Height for handles.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since   6.0.0\n                 */\n                height: 15,\n                /**\n                 * Array to define shapes of handles. 0-index for left, 1-index for\n                 * right.\n                 *\n                 * Additionally, the URL to a graphic can be given on this form:\n                 * `url(graphic.png)`. Note that for the image to be applied to\n                 * exported charts, its URL needs to be accessible by the export\n                 * server.\n                 *\n                 * Custom callbacks for symbol path generation can also be added to\n                 * `Highcharts.SVGRenderer.prototype.symbols`. The callback is then\n                 * used by its method name, as shown in the demo.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @type    {Array<string>}\n                 * @default [\"navigator-handle\", \"navigator-handle\"]\n                 * @since   6.0.0\n                 */\n                symbols: ['navigator-handle', 'navigator-handle'],\n                /**\n                 * Allows to enable/disable handles.\n                 *\n                 * @since   6.0.0\n                 */\n                enabled: true,\n                /**\n                 * The width for the handle border and the stripes inside.\n                 *\n                 * @sample {highstock} stock/navigator/styled-handles/\n                 *         Styled handles\n                 *\n                 * @since     6.0.0\n                 * @apioption navigator.handles.lineWidth\n                 */\n                lineWidth: 1,\n                /**\n                 * The fill for the handle.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: \"#f2f2f2\" /* Palette.neutralColor5 */,\n                /**\n                 * The stroke for the handle border and the stripes inside.\n                 *\n                 * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                borderColor: \"#999999\" /* Palette.neutralColor40 */\n            },\n            /**\n             * The color of the mask covering the areas of the navigator series\n             * that are currently not visible in the main series. The default\n             * color is bluish with an opacity of 0.3 to see the series below.\n             *\n             * @see In styled mode, the mask is styled with the\n             *      `.highcharts-navigator-mask` and\n             *      `.highcharts-navigator-mask-inside` classes.\n             *\n             * @sample {highstock} stock/navigator/maskfill/\n             *         Blue, semi transparent mask\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default rgba(102,133,194,0.3)\n             */\n            maskFill: color(\"#667aff\" /* Palette.highlightColor60 */).setOpacity(0.3).get(),\n            /**\n             * The color of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #cccccc\n             */\n            outlineColor: \"#999999\" /* Palette.neutralColor40 */,\n            /**\n             * The width of the line marking the currently zoomed area in the\n             * navigator.\n             *\n             * @see In styled mode, the outline stroke width is set with the\n             *      `.highcharts-navigator-outline` class.\n             *\n             * @sample {highstock} stock/navigator/outline/\n             *         2px blue outline\n             *\n             * @type    {number}\n             */\n            outlineWidth: 1,\n            /**\n             * Options for the navigator series. Available options are the same\n             * as any series, documented at [plotOptions](#plotOptions.series)\n             * and [series](#series).\n             *\n             * Unless data is explicitly defined on navigator.series, the data\n             * is borrowed from the first series in the chart.\n             *\n             * Default series options for the navigator series are:\n             * ```js\n             * series: {\n             *     type: 'areaspline',\n             *     fillOpacity: 0.05,\n             *     dataGrouping: {\n             *         smoothed: true\n             *     },\n             *     lineWidth: 1,\n             *     marker: {\n             *         enabled: false\n             *     }\n             * }\n             * ```\n             *\n             * @see In styled mode, the navigator series is styled with the\n             *      `.highcharts-navigator-series` class.\n             *\n             * @sample {highstock} stock/navigator/series-data/\n             *         Using a separate data set for the navigator\n             * @sample {highstock} stock/navigator/series/\n             *         A green navigator series\n             *\n             * @type {*|Array<*>|Highcharts.SeriesOptionsType|Array<Highcharts.SeriesOptionsType>}\n             */\n            series: {\n                /**\n                 * The type of the navigator series.\n                 *\n                 * Heads up:\n                 * In column-type navigator, zooming is limited to at least one\n                 * point with its `pointRange`.\n                 *\n                 * @sample {highstock} stock/navigator/column/\n                 *         Column type navigator\n                 *\n                 * @type    {string}\n                 * @default {highstock} `areaspline` if defined, otherwise `line`\n                 * @default {gantt} gantt\n                 */\n                type: (typeof seriesTypes.areaspline === 'undefined' ?\n                    'line' :\n                    'areaspline'),\n                /**\n                 * The fill opacity of the navigator series.\n                 */\n                fillOpacity: 0.05,\n                /**\n                 * The pixel line width of the navigator series.\n                 */\n                lineWidth: 1,\n                /**\n                 * @ignore-option\n                 */\n                compare: null,\n                /**\n                 * @ignore-option\n                 */\n                sonification: {\n                    enabled: false\n                },\n                /**\n                 * Unless data is explicitly defined, the data is borrowed from the\n                 * first series in the chart.\n                 *\n                 * @type      {Array<number|Array<number|string|null>|object|null>}\n                 * @product   highstock\n                 * @apioption navigator.series.data\n                 */\n                /**\n                 * Data grouping options for the navigator series.\n                 *\n                 * @extends plotOptions.series.dataGrouping\n                 */\n                dataGrouping: {\n                    approximation: 'average',\n                    enabled: true,\n                    groupPixelWidth: 2,\n                    // Replace smoothed property by anchors, #12455.\n                    firstAnchor: 'firstPoint',\n                    anchor: 'middle',\n                    lastAnchor: 'lastPoint',\n                    // Day and week differs from plotOptions.series.dataGrouping\n                    units: [\n                        ['millisecond', [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]],\n                        ['second', [1, 2, 5, 10, 15, 30]],\n                        ['minute', [1, 2, 5, 10, 15, 30]],\n                        ['hour', [1, 2, 3, 4, 6, 8, 12]],\n                        ['day', [1, 2, 3, 4]],\n                        ['week', [1, 2, 3]],\n                        ['month', [1, 3, 6]],\n                        ['year', null]\n                    ]\n                },\n                /**\n                 * Data label options for the navigator series. Data labels are\n                 * disabled by default on the navigator series.\n                 *\n                 * @extends plotOptions.series.dataLabels\n                 */\n                dataLabels: {\n                    enabled: false,\n                    zIndex: 2 // #1839\n                },\n                id: 'highcharts-navigator-series',\n                className: 'highcharts-navigator-series',\n                /**\n                 * Sets the fill color of the navigator series.\n                 *\n                 * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 * @apioption navigator.series.color\n                 */\n                /**\n                 * Line color for the navigator series. Allows setting the color\n                 * while disallowing the default candlestick setting.\n                 *\n                 * @type {Highcharts.ColorString|null}\n                 */\n                lineColor: null, // #4602\n                marker: {\n                    enabled: false\n                },\n                /**\n                 * Since Highcharts Stock v8, default value is the same as default\n                 * `pointRange` defined for a specific type (e.g. `null` for\n                 * column type).\n                 *\n                 * In Highcharts Stock version < 8, defaults to 0.\n                 *\n                 * @extends plotOptions.series.pointRange\n                 * @type {number|null}\n                 * @apioption navigator.series.pointRange\n                 */\n                /**\n                 * The threshold option. Setting it to 0 will make the default\n                 * navigator area series draw its area from the 0 value and up.\n                 *\n                 * @type {number|null}\n                 */\n                threshold: null\n            },\n            /**\n             * Enable or disable navigator sticking to right, while adding new\n             * points. If `undefined`, the navigator sticks to the axis maximum only\n             * if it was already at the maximum prior to adding points.\n             *\n             * @type      {boolean}\n             * @default   undefined\n             * @since 10.2.1\n             * @sample {highstock} stock/navigator/sticktomax-false/\n             * stickToMax set to false\n             * @apioption navigator.stickToMax\n             */\n            /**\n             * Options for the navigator X axis. Default series options for the\n             * navigator xAxis are:\n             * ```js\n             * xAxis: {\n             *     tickWidth: 0,\n             *     lineWidth: 0,\n             *     gridLineWidth: 1,\n             *     tickPixelInterval: 200,\n             *     labels: {\n             *            align: 'left',\n             *         style: {\n             *             color: '#888'\n             *         },\n             *         x: 3,\n             *         y: -4\n             *     }\n             * }\n             * ```\n             *\n             * @extends   xAxis\n             * @excluding linkedTo, maxZoom, minRange, opposite, range, scrollbar,\n             *            showEmpty, maxRange\n             */\n            xAxis: {\n                /**\n                 * Additional range on the right side of the xAxis. Works similar to\n                 * `xAxis.maxPadding`, but the value is set in terms of axis values,\n                 * percentage or pixels.\n                 *\n                 * If it's a number, it is interpreted as axis values, which in a\n                 * datetime axis equals milliseconds.\n                 *\n                 * If it's a percentage string, is interpreted as percentages of the\n                 * axis length. An overscroll of 50% will make a 100px axis 50px longer.\n                 *\n                 * If it's a pixel string, it is interpreted as a fixed pixel value, but\n                 * limited to 90% of the axis length.\n                 *\n                 * If it's undefined, the value is inherited from `xAxis.overscroll`.\n                 *\n                 * Can be set for both, main xAxis and navigator's xAxis.\n                 *\n                 * @type    {number | string | undefined}\n                 * @since   6.0.0\n                 * @apioption navigator.xAxis.overscroll\n                 */\n                className: 'highcharts-navigator-xaxis',\n                tickLength: 0,\n                lineWidth: 0,\n                gridLineColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n                id: 'navigator-x-axis',\n                gridLineWidth: 1,\n                tickPixelInterval: 200,\n                labels: {\n                    align: 'left',\n                    /**\n                     * @type {Highcharts.CSSObject}\n                     */\n                    style: {\n                        /** @ignore */\n                        color: \"#000000\" /* Palette.neutralColor100 */,\n                        /** @ignore */\n                        fontSize: '0.7em',\n                        /** @ignore */\n                        opacity: 0.6,\n                        /** @ignore */\n                        textOutline: '2px contrast'\n                    },\n                    x: 3,\n                    y: -4\n                },\n                crosshair: false\n            },\n            /**\n             * Options for the navigator Y axis. Default series options for the\n             * navigator yAxis are:\n             * ```js\n             * yAxis: {\n             *     gridLineWidth: 0,\n             *     startOnTick: false,\n             *     endOnTick: false,\n             *     minPadding: 0.1,\n             *     maxPadding: 0.1,\n             *     labels: {\n             *         enabled: false\n             *     },\n             *     title: {\n             *         text: null\n             *     },\n             *     tickWidth: 0\n             * }\n             * ```\n             *\n             * @extends   yAxis\n             * @excluding height, linkedTo, maxZoom, minRange, ordinal, range,\n             *            showEmpty, scrollbar, top, units, maxRange, minLength,\n             *            maxLength, resize\n             */\n            yAxis: {\n                className: 'highcharts-navigator-yaxis',\n                gridLineWidth: 0,\n                startOnTick: false,\n                endOnTick: false,\n                minPadding: 0.1,\n                id: 'navigator-y-axis',\n                maxPadding: 0.1,\n                labels: {\n                    enabled: false\n                },\n                crosshair: false,\n                title: {\n                    text: null\n                },\n                tickLength: 0,\n                tickWidth: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Maximum range which can be set using the navigator's handles.\n         * Opposite of [xAxis.minRange](#xAxis.minRange).\n         *\n         * @sample {highstock} stock/navigator/maxrange/\n         *         Defined max and min range\n         *\n         * @type      {number}\n         * @since     6.0.0\n         * @product   highstock gantt\n         * @apioption xAxis.maxRange\n         */\n        (''); // Keeps doclets above in JS file\n\n        return NavigatorDefaults;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorSymbols.js', [_modules['Core/Renderer/SVG/Symbols.js'], _modules['Core/Utilities.js']], function (rect, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { relativeLength } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Draw one of the handles on the side of the zoomed range in the navigator.\n         * @private\n         */\n        function navigatorHandle(_x, _y, width, height, options = {}) {\n            const halfWidth = options.width ? options.width / 2 : width, markerPosition = 1.5, r = relativeLength(options.borderRadius || 0, Math.min(halfWidth * 2, height));\n            height = options.height || height;\n            return [\n                ['M', -markerPosition, height / 2 - 3.5],\n                ['L', -markerPosition, height / 2 + 4.5],\n                ['M', markerPosition - 1, height / 2 - 3.5],\n                ['L', markerPosition - 1, height / 2 + 4.5],\n                ...rect.rect(-halfWidth - 1, 0.5, halfWidth * 2 + 1, height, { r })\n            ];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorSymbols = {\n            'navigator-handle': navigatorHandle\n        };\n\n        return NavigatorSymbols;\n    });\n    _registerModule(_modules, 'Stock/Utilities/StockUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Sets the chart.fixedRange to the specified value. If the value is larger\n         * than actual range, sets it to the maximum possible range. (#20327)\n         *\n         * @private\n         * @function Highcharts.StockChart#setFixedRange\n         * @param {number|undefined} range\n         *        Range to set in axis units.\n         */\n        function setFixedRange(range) {\n            const xAxis = this.xAxis[0];\n            if (defined(xAxis.dataMax) &&\n                defined(xAxis.dataMin) &&\n                range) {\n                this.fixedRange = Math.min(range, xAxis.dataMax - xAxis.dataMin);\n            }\n            else {\n                this.fixedRange = range;\n            }\n        }\n        const StockUtilities = {\n            setFixedRange\n        };\n\n        return StockUtilities;\n    });\n    _registerModule(_modules, 'Stock/Navigator/NavigatorComposition.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorDefaults.js'], _modules['Stock/Navigator/NavigatorSymbols.js'], _modules['Core/Renderer/RendererRegistry.js'], _modules['Stock/Utilities/StockUtilities.js'], _modules['Core/Utilities.js']], function (D, H, NavigatorAxisAdditions, NavigatorDefaults, NavigatorSymbols, RendererRegistry, StockUtilities, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setOptions } = D;\n        const { composed } = H;\n        const { getRendererType } = RendererRegistry;\n        const { setFixedRange } = StockUtilities;\n        const { addEvent, extend, pushUnique } = U;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(ChartClass, AxisClass, SeriesClass) {\n            NavigatorAxisAdditions.compose(AxisClass);\n            if (pushUnique(composed, 'Navigator')) {\n                ChartClass.prototype.setFixedRange = setFixedRange;\n                extend(getRendererType().prototype.symbols, NavigatorSymbols);\n                addEvent(SeriesClass, 'afterUpdate', onSeriesAfterUpdate);\n                setOptions({ navigator: NavigatorDefaults });\n            }\n        }\n        /**\n         * Handle updating series\n         * @private\n         */\n        function onSeriesAfterUpdate() {\n            if (this.chart.navigator && !this.options.isInternal) {\n                this.chart.navigator.setBaseSeries(null, false);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigatorComposition = {\n            compose\n        };\n\n        return NavigatorComposition;\n    });\n    _registerModule(_modules, 'Core/Axis/ScrollbarAxis.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, defined, pick, pushUnique } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ScrollbarAxis;\n        (function (ScrollbarAxis) {\n            /* *\n             *\n             *  Variables\n             *\n             * */\n            let Scrollbar;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Attaches to axis events to create scrollbars if enabled.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} AxisClass\n             * Axis class to extend.\n             *\n             * @param {Highcharts.Scrollbar} ScrollbarClass\n             * Scrollbar class to use.\n             */\n            function compose(AxisClass, ScrollbarClass) {\n                if (pushUnique(composed, 'Axis.Scrollbar')) {\n                    Scrollbar = ScrollbarClass;\n                    addEvent(AxisClass, 'afterGetOffset', onAxisAfterGetOffset);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterRender', onAxisAfterRender);\n                }\n            }\n            ScrollbarAxis.compose = compose;\n            /** @private */\n            function getExtremes(axis) {\n                const axisMin = pick(axis.options && axis.options.min, axis.min);\n                const axisMax = pick(axis.options && axis.options.max, axis.max);\n                return {\n                    axisMin,\n                    axisMax,\n                    scrollMin: defined(axis.dataMin) ?\n                        Math.min(axisMin, axis.min, axis.dataMin, pick(axis.threshold, Infinity)) : axisMin,\n                    scrollMax: defined(axis.dataMax) ?\n                        Math.max(axisMax, axis.max, axis.dataMax, pick(axis.threshold, -Infinity)) : axisMax\n                };\n            }\n            /**\n             * Make space for a scrollbar.\n             * @private\n             */\n            function onAxisAfterGetOffset() {\n                const axis = this, scrollbar = axis.scrollbar, opposite = scrollbar && !scrollbar.options.opposite, index = axis.horiz ? 2 : opposite ? 3 : 1;\n                if (scrollbar) {\n                    // Reset scrollbars offsets\n                    axis.chart.scrollbarsOffsets = [0, 0];\n                    axis.chart.axisOffset[index] +=\n                        scrollbar.size + (scrollbar.options.margin || 0);\n                }\n            }\n            /**\n             * Wrap axis initialization and create scrollbar if enabled.\n             * @private\n             */\n            function onAxisAfterInit() {\n                const axis = this;\n                if (axis.options &&\n                    axis.options.scrollbar &&\n                    axis.options.scrollbar.enabled) {\n                    // Predefined options:\n                    axis.options.scrollbar.vertical = !axis.horiz;\n                    axis.options.startOnTick = axis.options.endOnTick = false;\n                    axis.scrollbar = new Scrollbar(axis.chart.renderer, axis.options.scrollbar, axis.chart);\n                    addEvent(axis.scrollbar, 'changed', function (e) {\n                        const { axisMin, axisMax, scrollMin: unitedMin, scrollMax: unitedMax } = getExtremes(axis), range = unitedMax - unitedMin;\n                        let to, from;\n                        // #12834, scroll when show/hide series, wrong extremes\n                        if (!defined(axisMin) || !defined(axisMax)) {\n                            return;\n                        }\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            to = unitedMin + range * this.to;\n                            from = unitedMin + range * this.from;\n                        }\n                        else {\n                            // Y-values in browser are reversed, but this also\n                            // applies for reversed horizontal axis:\n                            to = unitedMin + range * (1 - this.from);\n                            from = unitedMin + range * (1 - this.to);\n                        }\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            // #17977, set animation to undefined instead of true\n                            const animate = e.DOMType === 'mousemove' ||\n                                e.DOMType === 'touchmove' ? false : void 0;\n                            axis.setExtremes(from, to, true, animate, e);\n                        }\n                        else {\n                            // When live redraw is disabled, don't change extremes\n                            // Only change the position of the scrollbar thumb\n                            this.setRange(this.from, this.to);\n                        }\n                    });\n                }\n            }\n            /**\n             * Wrap rendering axis, and update scrollbar if one is created.\n             * @private\n             */\n            function onAxisAfterRender() {\n                const axis = this, { scrollMin, scrollMax } = getExtremes(axis), scrollbar = axis.scrollbar, offset = (axis.axisTitleMargin + (axis.titleOffset || 0)), scrollbarsOffsets = axis.chart.scrollbarsOffsets, axisMargin = axis.options.margin || 0;\n                let offsetsIndex, from, to;\n                if (scrollbar && scrollbarsOffsets) {\n                    if (axis.horiz) {\n                        // Reserve space for labels/title\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += offset;\n                        }\n                        scrollbar.position(axis.left, (axis.top +\n                            axis.height +\n                            2 +\n                            scrollbarsOffsets[1] -\n                            (axis.opposite ? axisMargin : 0)), axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (!axis.opposite) {\n                            scrollbarsOffsets[1] += axisMargin;\n                        }\n                        offsetsIndex = 1;\n                    }\n                    else {\n                        // Reserve space for labels/title\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += offset;\n                        }\n                        let xPosition;\n                        if (!scrollbar.options.opposite) {\n                            xPosition = axis.opposite ? 0 : axisMargin;\n                        }\n                        else {\n                            xPosition = axis.left +\n                                axis.width +\n                                2 +\n                                scrollbarsOffsets[0] -\n                                (axis.opposite ? 0 : axisMargin);\n                        }\n                        scrollbar.position(xPosition, axis.top, axis.width, axis.height);\n                        // Next scrollbar should reserve space for margin (if set)\n                        if (axis.opposite) {\n                            scrollbarsOffsets[0] += axisMargin;\n                        }\n                        offsetsIndex = 0;\n                    }\n                    scrollbarsOffsets[offsetsIndex] += scrollbar.size +\n                        (scrollbar.options.margin || 0);\n                    if (isNaN(scrollMin) ||\n                        isNaN(scrollMax) ||\n                        !defined(axis.min) ||\n                        !defined(axis.max) ||\n                        axis.dataMin === axis.dataMax // #10733\n                    ) {\n                        // Default action: when data extremes are the same or there is\n                        // not extremes on the axis, but scrollbar exists, make it\n                        // full size\n                        scrollbar.setRange(0, 1);\n                    }\n                    else if (axis.min === axis.max) { // #20359\n                        // When the extremes are the same, set the scrollbar to a point\n                        // within the extremes range. Utilize pointRange to perform the\n                        // calculations. (#20359)\n                        const interval = axis.pointRange / (axis.dataMax +\n                            1);\n                        from = interval * axis.min;\n                        to = interval * (axis.max + 1);\n                        scrollbar.setRange(from, to);\n                    }\n                    else {\n                        from = ((axis.min - scrollMin) /\n                            (scrollMax - scrollMin));\n                        to = ((axis.max - scrollMin) /\n                            (scrollMax - scrollMin));\n                        if ((axis.horiz && !axis.reversed) ||\n                            (!axis.horiz && axis.reversed)) {\n                            scrollbar.setRange(from, to);\n                        }\n                        else {\n                            // Inverse vertical axis\n                            scrollbar.setRange(1 - to, 1 - from);\n                        }\n                    }\n                }\n            }\n        })(ScrollbarAxis || (ScrollbarAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarAxis;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/ScrollbarDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constant\n         *\n         * */\n        /**\n         *\n         * The scrollbar is a means of panning over the X axis of a stock chart.\n         * Scrollbars can also be applied to other types of axes.\n         *\n         * Another approach to scrollable charts is the [chart.scrollablePlotArea](\n         * https://api.highcharts.com/highcharts/chart.scrollablePlotArea) option that\n         * is especially suitable for simpler cartesian charts on mobile.\n         *\n         * In styled mode, all the presentational options for the\n         * scrollbar are replaced by the classes `.highcharts-scrollbar-thumb`,\n         * `.highcharts-scrollbar-arrow`, `.highcharts-scrollbar-button`,\n         * `.highcharts-scrollbar-rifles` and `.highcharts-scrollbar-track`.\n         *\n         * @sample stock/yaxis/inverted-bar-scrollbar/\n         *         A scrollbar on a simple bar chart\n         *\n         * @product highstock gantt\n         * @optionparent scrollbar\n         *\n         * @private\n         */\n        const ScrollbarDefaults = {\n            /**\n             * The height of the scrollbar. If `buttonsEnabled` is true , the height\n             * also applies to the width of the scroll arrows so that they are always\n             * squares.\n             *\n             * @sample stock/scrollbar/style/\n             *         Non-default height\n             *\n             * @type    {number}\n             */\n            height: 10,\n            /**\n             * The border rounding radius of the bar.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderRadius: 5,\n            /**\n             * The corner radius of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderRadius: 0,\n            /**\n             * Enable or disable the buttons at the end of the scrollbar.\n             *\n             * @since 11.0.0\n             */\n            buttonsEnabled: false,\n            /**\n             * Enable or disable the scrollbar.\n             *\n             * @sample stock/scrollbar/enabled/\n             *         Disable the scrollbar, only use navigator\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.enabled\n             */\n            /**\n             * Whether to redraw the main chart as the scrollbar or the navigator\n             * zoomed window is moved. Defaults to `true` for modern browsers and\n             * `false` for legacy IE browsers as well as mobile devices.\n             *\n             * @sample stock/scrollbar/liveredraw\n             *         Setting live redraw to false\n             *\n             * @type  {boolean}\n             * @since 1.3\n             */\n            liveRedraw: void 0,\n            /**\n             * The margin between the scrollbar and its axis when the scrollbar is\n             * applied directly to an axis, or the navigator in case that is enabled.\n             * Defaults to 10 for axis, 0 for navigator.\n             *\n             * @type {number|undefined}\n             */\n            margin: void 0,\n            /**\n             * The minimum width of the scrollbar.\n             *\n             * @since 1.2.5\n             */\n            minWidth: 6,\n            /** @ignore-option */\n            opposite: true,\n            /**\n             * Whether to show or hide the scrollbar when the scrolled content is\n             * zoomed out to it full extent.\n             *\n             * @type      {boolean}\n             * @default   true\n             * @apioption scrollbar.showFull\n             */\n            step: 0.2,\n            /**\n             * The z index of the scrollbar group.\n             */\n            zIndex: 3,\n            /**\n             * The background color of the scrollbar itself.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBackgroundColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The width of the bar's border.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            barBorderWidth: 0,\n            /**\n             * The color of the scrollbar's border.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            barBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The color of the small arrow inside the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonArrowColor: \"#333333\" /* Palette.neutralColor80 */,\n            /**\n             * The color of scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBackgroundColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n            /**\n             * The color of the border of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            buttonBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The border width of the scrollbar buttons.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            buttonBorderWidth: 1,\n            /**\n             * The color of the small rifles in the middle of the scrollbar.\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            rifleColor: 'none',\n            /**\n             * The color of the track background.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBackgroundColor: 'rgba(255, 255, 255, 0.001)', // #18922\n            /**\n             * The color of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             *\n             * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             */\n            trackBorderColor: \"#cccccc\" /* Palette.neutralColor20 */,\n            /**\n             * The corner radius of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderRadius: 5,\n            /**\n             * The width of the border of the scrollbar track.\n             *\n             * @sample stock/scrollbar/style/\n             *         Scrollbar styling\n             */\n            trackBorderWidth: 1\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ScrollbarDefaults;\n    });\n    _registerModule(_modules, 'Stock/Scrollbar/Scrollbar.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/ScrollbarAxis.js'], _modules['Stock/Scrollbar/ScrollbarDefaults.js'], _modules['Core/Utilities.js']], function (D, H, ScrollbarAxis, ScrollbarDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, correctFloat, crisp, defined, destroyObjectProperties, fireEvent, merge, pick, removeEvent } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * A reusable scrollbar, internally used in Highcharts Stock's\n         * navigator and optionally on individual axes.\n         *\n         * @private\n         * @class\n         * @name Highcharts.Scrollbar\n         * @param {Highcharts.SVGRenderer} renderer\n         * @param {Highcharts.ScrollbarOptions} options\n         * @param {Highcharts.Chart} chart\n         */\n        class Scrollbar {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AxisClass) {\n                ScrollbarAxis.compose(AxisClass, Scrollbar);\n            }\n            /**\n             * When we have vertical scrollbar, rifles and arrow in buttons should be\n             * rotated. The same method is used in Navigator's handles, to rotate them.\n             *\n             * @function Highcharts.swapXY\n             *\n             * @param {Highcharts.SVGPathArray} path\n             * Path to be rotated.\n             *\n             * @param {boolean} [vertical]\n             * If vertical scrollbar, swap x-y values.\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Rotated path.\n             *\n             * @requires modules/stock\n             */\n            static swapXY(path, vertical) {\n                if (vertical) {\n                    path.forEach((seg) => {\n                        const len = seg.length;\n                        let temp;\n                        for (let i = 0; i < len; i += 2) {\n                            temp = seg[i + 1];\n                            if (typeof temp === 'number') {\n                                seg[i + 1] = seg[i + 2];\n                                seg[i + 2] = temp;\n                            }\n                        }\n                    });\n                }\n                return path;\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(renderer, options, chart) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this._events = [];\n                this.chartX = 0;\n                this.chartY = 0;\n                this.from = 0;\n                this.scrollbarButtons = [];\n                this.scrollbarLeft = 0;\n                this.scrollbarStrokeWidth = 1;\n                this.scrollbarTop = 0;\n                this.size = 0;\n                this.to = 0;\n                this.trackBorderWidth = 1;\n                this.x = 0;\n                this.y = 0;\n                this.init(renderer, options, chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set up the mouse and touch events for the Scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#addEvents\n             */\n            addEvents() {\n                const buttonsOrder = this.options.inverted ? [1, 0] : [0, 1], buttons = this.scrollbarButtons, bar = this.scrollbarGroup.element, track = this.track.element, mouseDownHandler = this.mouseDownHandler.bind(this), mouseMoveHandler = this.mouseMoveHandler.bind(this), mouseUpHandler = this.mouseUpHandler.bind(this);\n                const _events = [\n                    // Mouse events\n                    [\n                        buttons[buttonsOrder[0]].element,\n                        'click',\n                        this.buttonToMinClick.bind(this)\n                    ],\n                    [\n                        buttons[buttonsOrder[1]].element,\n                        'click',\n                        this.buttonToMaxClick.bind(this)\n                    ],\n                    [track, 'click', this.trackClick.bind(this)],\n                    [bar, 'mousedown', mouseDownHandler],\n                    [bar.ownerDocument, 'mousemove', mouseMoveHandler],\n                    [bar.ownerDocument, 'mouseup', mouseUpHandler],\n                    // Touch events\n                    [bar, 'touchstart', mouseDownHandler],\n                    [bar.ownerDocument, 'touchmove', mouseMoveHandler],\n                    [bar.ownerDocument, 'touchend', mouseUpHandler]\n                ];\n                // Add them all\n                _events.forEach(function (args) {\n                    addEvent.apply(null, args);\n                });\n                this._events = _events;\n            }\n            buttonToMaxClick(e) {\n                const scroller = this;\n                const range = ((scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2));\n                scroller.updatePosition(scroller.from + range, scroller.to + range);\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            buttonToMinClick(e) {\n                const scroller = this;\n                const range = correctFloat(scroller.to - scroller.from) *\n                    pick(scroller.options.step, 0.2);\n                scroller.updatePosition(correctFloat(scroller.from - range), correctFloat(scroller.to - range));\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Get normalized (0-1) cursor position over the scrollbar\n             *\n             * @private\n             * @function Highcharts.Scrollbar#cursorToScrollbarPosition\n             *\n             * @param  {*} normalizedEvent\n             *         normalized event, with chartX and chartY values\n             *\n             * @return {Highcharts.Dictionary<number>}\n             *         Local position {chartX, chartY}\n             */\n            cursorToScrollbarPosition(normalizedEvent) {\n                const scroller = this, options = scroller.options, minWidthDifference = options.minWidth > scroller.calculatedWidth ?\n                    options.minWidth :\n                    0; // `minWidth` distorts translation\n                return {\n                    chartX: (normalizedEvent.chartX - scroller.x -\n                        scroller.xOffset) /\n                        (scroller.barWidth - minWidthDifference),\n                    chartY: (normalizedEvent.chartY - scroller.y -\n                        scroller.yOffset) /\n                        (scroller.barWidth - minWidthDifference)\n                };\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#destroy\n             */\n            destroy() {\n                const scroller = this, navigator = scroller.chart.scroller;\n                // Disconnect events added in addEvents\n                scroller.removeEvents();\n                // Destroy properties\n                [\n                    'track',\n                    'scrollbarRifles',\n                    'scrollbar',\n                    'scrollbarGroup',\n                    'group'\n                ].forEach(function (prop) {\n                    if (scroller[prop] && scroller[prop].destroy) {\n                        scroller[prop] = scroller[prop].destroy();\n                    }\n                });\n                // #6421, chart may have more scrollbars\n                if (navigator && scroller === navigator.scrollbar) {\n                    navigator.scrollbar = null;\n                    // Destroy elements in collection\n                    destroyObjectProperties(navigator.scrollbarButtons);\n                }\n            }\n            /**\n             * Draw the scrollbar buttons with arrows\n             *\n             * @private\n             * @function Highcharts.Scrollbar#drawScrollbarButton\n             * @param {number} index\n             *        0 is left, 1 is right\n             */\n            drawScrollbarButton(index) {\n                const scroller = this, renderer = scroller.renderer, scrollbarButtons = scroller.scrollbarButtons, options = scroller.options, size = scroller.size, group = renderer.g().add(scroller.group);\n                scrollbarButtons.push(group);\n                if (options.buttonsEnabled) {\n                    // Create a rectangle for the scrollbar button\n                    const rect = renderer.rect()\n                        .addClass('highcharts-scrollbar-button')\n                        .add(group);\n                    // Presentational attributes\n                    if (!scroller.chart.styledMode) {\n                        rect.attr({\n                            stroke: options.buttonBorderColor,\n                            'stroke-width': options.buttonBorderWidth,\n                            fill: options.buttonBackgroundColor\n                        });\n                    }\n                    // Place the rectangle based on the rendered stroke width\n                    rect.attr(rect.crisp({\n                        x: -0.5,\n                        y: -0.5,\n                        width: size,\n                        height: size,\n                        r: options.buttonBorderRadius\n                    }, rect.strokeWidth()));\n                    // Button arrow\n                    const arrow = renderer\n                        .path(Scrollbar.swapXY([[\n                            'M',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 - 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? -1 : 1),\n                            size / 2 + 3\n                        ], [\n                            'L',\n                            size / 2 + (index ? 2 : -2),\n                            size / 2\n                        ]], options.vertical))\n                        .addClass('highcharts-scrollbar-arrow')\n                        .add(scrollbarButtons[index]);\n                    if (!scroller.chart.styledMode) {\n                        arrow.attr({\n                            fill: options.buttonArrowColor\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.Scrollbar#init\n             * @param {Highcharts.SVGRenderer} renderer\n             * @param {Highcharts.ScrollbarOptions} options\n             * @param {Highcharts.Chart} chart\n             */\n            init(renderer, options, chart) {\n                const scroller = this;\n                scroller.scrollbarButtons = [];\n                scroller.renderer = renderer;\n                scroller.userOptions = options;\n                scroller.options = merge(ScrollbarDefaults, defaultOptions.scrollbar, options);\n                scroller.options.margin = pick(scroller.options.margin, 10);\n                scroller.chart = chart;\n                // Backward compatibility\n                scroller.size = pick(scroller.options.size, scroller.options.height);\n                // Init\n                if (options.enabled) {\n                    scroller.render();\n                    scroller.addEvents();\n                }\n            }\n            mouseDownHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer?.normalize(e) || e, mousePosition = scroller.cursorToScrollbarPosition(normalizedEvent);\n                scroller.chartX = mousePosition.chartX;\n                scroller.chartY = mousePosition.chartY;\n                scroller.initPositions = [scroller.from, scroller.to];\n                scroller.grabbedCenter = true;\n            }\n            /**\n             * Event handler for the mouse move event.\n             * @private\n             */\n            mouseMoveHandler(e) {\n                const scroller = this, normalizedEvent = scroller.chart.pointer?.normalize(e) || e, options = scroller.options, direction = options.vertical ?\n                    'chartY' : 'chartX', initPositions = scroller.initPositions || [];\n                let scrollPosition, chartPosition, change;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when\n                // holding the finger down in the center of the scrollbar. This\n                // should be ignored.\n                if (scroller.grabbedCenter &&\n                    // #4696, scrollbar failed on Android\n                    (!e.touches || e.touches[0][direction] !== 0)) {\n                    chartPosition = scroller.cursorToScrollbarPosition(normalizedEvent)[direction];\n                    scrollPosition = scroller[direction];\n                    change = chartPosition - scrollPosition;\n                    scroller.hasDragged = true;\n                    scroller.updatePosition(initPositions[0] + change, initPositions[1] + change);\n                    if (scroller.hasDragged) {\n                        fireEvent(scroller, 'changed', {\n                            from: scroller.from,\n                            to: scroller.to,\n                            trigger: 'scrollbar',\n                            DOMType: e.type,\n                            DOMEvent: e\n                        });\n                    }\n                }\n            }\n            /**\n             * Event handler for the mouse up event.\n             * @private\n             */\n            mouseUpHandler(e) {\n                const scroller = this;\n                if (scroller.hasDragged) {\n                    fireEvent(scroller, 'changed', {\n                        from: scroller.from,\n                        to: scroller.to,\n                        trigger: 'scrollbar',\n                        DOMType: e.type,\n                        DOMEvent: e\n                    });\n                }\n                scroller.grabbedCenter =\n                    scroller.hasDragged =\n                        scroller.chartX =\n                            scroller.chartY = null;\n            }\n            /**\n             * Position the scrollbar, method called from a parent with defined\n             * dimensions.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#position\n             * @param {number} x\n             *        x-position on the chart\n             * @param {number} y\n             *        y-position on the chart\n             * @param {number} width\n             *        width of the scrollbar\n             * @param {number} height\n             *        height of the scrollbar\n             */\n            position(x, y, width, height) {\n                const scroller = this, options = scroller.options, { buttonsEnabled, margin = 0, vertical } = options, method = scroller.rendered ? 'animate' : 'attr';\n                let xOffset = height, yOffset = 0;\n                // Make the scrollbar visible when it is repositioned, #15763.\n                scroller.group.show();\n                scroller.x = x;\n                scroller.y = y + this.trackBorderWidth;\n                scroller.width = width; // Width with buttons\n                scroller.height = height;\n                scroller.xOffset = xOffset;\n                scroller.yOffset = yOffset;\n                // If Scrollbar is a vertical type, swap options:\n                if (vertical) {\n                    scroller.width = scroller.yOffset = width = yOffset = scroller.size;\n                    scroller.xOffset = xOffset = 0;\n                    scroller.yOffset = yOffset = buttonsEnabled ? scroller.size : 0;\n                    // Width without buttons\n                    scroller.barWidth = height - (buttonsEnabled ? width * 2 : 0);\n                    scroller.x = x = x + margin;\n                }\n                else {\n                    scroller.height = height = scroller.size;\n                    scroller.xOffset = xOffset = buttonsEnabled ? scroller.size : 0;\n                    // Width without buttons\n                    scroller.barWidth = width - (buttonsEnabled ? height * 2 : 0);\n                    scroller.y = scroller.y + margin;\n                }\n                // Set general position for a group:\n                scroller.group[method]({\n                    translateX: x,\n                    translateY: scroller.y\n                });\n                // Resize background/track:\n                scroller.track[method]({\n                    width: width,\n                    height: height\n                });\n                // Move right/bottom button to its place:\n                scroller.scrollbarButtons[1][method]({\n                    translateX: vertical ? 0 : width - xOffset,\n                    translateY: vertical ? height - yOffset : 0\n                });\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#removeEvents\n             */\n            removeEvents() {\n                this._events.forEach(function (args) {\n                    removeEvent.apply(null, args);\n                });\n                this._events.length = 0;\n            }\n            /**\n             * Render scrollbar with all required items.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#render\n             */\n            render() {\n                const scroller = this, renderer = scroller.renderer, options = scroller.options, size = scroller.size, styledMode = scroller.chart.styledMode, group = renderer.g('scrollbar')\n                    .attr({\n                    zIndex: options.zIndex\n                })\n                    .hide() // Initially hide the scrollbar #15863\n                    .add();\n                // Draw the scrollbar group\n                scroller.group = group;\n                // Draw the scrollbar track:\n                scroller.track = renderer.rect()\n                    .addClass('highcharts-scrollbar-track')\n                    .attr({\n                    r: options.trackBorderRadius || 0,\n                    height: size,\n                    width: size\n                }).add(group);\n                if (!styledMode) {\n                    scroller.track.attr({\n                        fill: options.trackBackgroundColor,\n                        stroke: options.trackBorderColor,\n                        'stroke-width': options.trackBorderWidth\n                    });\n                }\n                const trackBorderWidth = scroller.trackBorderWidth =\n                    scroller.track.strokeWidth();\n                scroller.track.attr({\n                    x: -crisp(0, trackBorderWidth),\n                    y: -crisp(0, trackBorderWidth)\n                });\n                // Draw the scrollbar itself\n                scroller.scrollbarGroup = renderer.g().add(group);\n                scroller.scrollbar = renderer.rect()\n                    .addClass('highcharts-scrollbar-thumb')\n                    .attr({\n                    height: size - trackBorderWidth,\n                    width: size - trackBorderWidth,\n                    r: options.barBorderRadius || 0\n                }).add(scroller.scrollbarGroup);\n                scroller.scrollbarRifles = renderer\n                    .path(Scrollbar.swapXY([\n                    ['M', -3, size / 4],\n                    ['L', -3, 2 * size / 3],\n                    ['M', 0, size / 4],\n                    ['L', 0, 2 * size / 3],\n                    ['M', 3, size / 4],\n                    ['L', 3, 2 * size / 3]\n                ], options.vertical))\n                    .addClass('highcharts-scrollbar-rifles')\n                    .add(scroller.scrollbarGroup);\n                if (!styledMode) {\n                    scroller.scrollbar.attr({\n                        fill: options.barBackgroundColor,\n                        stroke: options.barBorderColor,\n                        'stroke-width': options.barBorderWidth\n                    });\n                    scroller.scrollbarRifles.attr({\n                        stroke: options.rifleColor,\n                        'stroke-width': 1\n                    });\n                }\n                scroller.scrollbarStrokeWidth = scroller.scrollbar.strokeWidth();\n                scroller.scrollbarGroup.translate(-crisp(0, scroller.scrollbarStrokeWidth), -crisp(0, scroller.scrollbarStrokeWidth));\n                // Draw the buttons:\n                scroller.drawScrollbarButton(0);\n                scroller.drawScrollbarButton(1);\n            }\n            /**\n             * Set scrollbar size, with a given scale.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#setRange\n             * @param {number} from\n             *        scale (0-1) where bar should start\n             * @param {number} to\n             *        scale (0-1) where bar should end\n             */\n            setRange(from, to) {\n                const scroller = this, options = scroller.options, vertical = options.vertical, minWidth = options.minWidth, fullWidth = scroller.barWidth, method = (this.rendered &&\n                    !this.hasDragged &&\n                    !(this.chart.navigator && this.chart.navigator.hasDragged)) ? 'animate' : 'attr';\n                if (!defined(fullWidth)) {\n                    return;\n                }\n                const toPX = fullWidth * Math.min(to, 1);\n                let fromPX, newSize;\n                from = Math.max(from, 0);\n                fromPX = Math.ceil(fullWidth * from);\n                scroller.calculatedWidth = newSize = correctFloat(toPX - fromPX);\n                // We need to recalculate position, if minWidth is used\n                if (newSize < minWidth) {\n                    fromPX = (fullWidth - minWidth + newSize) * from;\n                    newSize = minWidth;\n                }\n                const newPos = Math.floor(fromPX + scroller.xOffset + scroller.yOffset);\n                const newRiflesPos = newSize / 2 - 0.5; // -0.5 -> rifle line width / 2\n                // Store current position:\n                scroller.from = from;\n                scroller.to = to;\n                if (!vertical) {\n                    scroller.scrollbarGroup[method]({\n                        translateX: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        width: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateX: newRiflesPos\n                    });\n                    scroller.scrollbarLeft = newPos;\n                    scroller.scrollbarTop = 0;\n                }\n                else {\n                    scroller.scrollbarGroup[method]({\n                        translateY: newPos\n                    });\n                    scroller.scrollbar[method]({\n                        height: newSize\n                    });\n                    scroller.scrollbarRifles[method]({\n                        translateY: newRiflesPos\n                    });\n                    scroller.scrollbarTop = newPos;\n                    scroller.scrollbarLeft = 0;\n                }\n                if (newSize <= 12) {\n                    scroller.scrollbarRifles.hide();\n                }\n                else {\n                    scroller.scrollbarRifles.show();\n                }\n                // Show or hide the scrollbar based on the showFull setting\n                if (options.showFull === false) {\n                    if (from <= 0 && to >= 1) {\n                        scroller.group.hide();\n                    }\n                    else {\n                        scroller.group.show();\n                    }\n                }\n                scroller.rendered = true;\n            }\n            /**\n             * Checks if the extremes should be updated in response to a scrollbar\n             * change event.\n             *\n             * @private\n             * @function Highcharts.Scrollbar#shouldUpdateExtremes\n             */\n            shouldUpdateExtremes(eventType) {\n                return (pick(this.options.liveRedraw, H.svg &&\n                    !H.isTouchDevice &&\n                    !this.chart.boosted) ||\n                    // Mouseup always should change extremes\n                    eventType === 'mouseup' ||\n                    eventType === 'touchend' ||\n                    // Internal events\n                    !defined(eventType));\n            }\n            trackClick(e) {\n                const scroller = this;\n                const normalizedEvent = scroller.chart.pointer?.normalize(e) || e, range = scroller.to - scroller.from, top = scroller.y + scroller.scrollbarTop, left = scroller.x + scroller.scrollbarLeft;\n                if ((scroller.options.vertical && normalizedEvent.chartY > top) ||\n                    (!scroller.options.vertical && normalizedEvent.chartX > left)) {\n                    // On the top or on the left side of the track:\n                    scroller.updatePosition(scroller.from + range, scroller.to + range);\n                }\n                else {\n                    // On the bottom or the right side of the track:\n                    scroller.updatePosition(scroller.from - range, scroller.to - range);\n                }\n                fireEvent(scroller, 'changed', {\n                    from: scroller.from,\n                    to: scroller.to,\n                    trigger: 'scrollbar',\n                    DOMEvent: e\n                });\n            }\n            /**\n             * Update the scrollbar with new options\n             *\n             * @private\n             * @function Highcharts.Scrollbar#update\n             * @param  {Highcharts.ScrollbarOptions} options\n             */\n            update(options) {\n                this.destroy();\n                this.init(this.chart.renderer, merge(true, this.options, options), this.chart);\n            }\n            /**\n             * Update position option in the Scrollbar, with normalized 0-1 scale\n             *\n             * @private\n             * @function Highcharts.Scrollbar#updatePosition\n             * @param  {number} from\n             * @param  {number} to\n             */\n            updatePosition(from, to) {\n                if (to > 1) {\n                    from = correctFloat(1 - correctFloat(to - from));\n                    to = 1;\n                }\n                if (from < 0) {\n                    to = correctFloat(to - from);\n                    from = 0;\n                }\n                this.from = from;\n                this.to = to;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        Scrollbar.defaultOptions = ScrollbarDefaults;\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        defaultOptions.scrollbar = merge(true, Scrollbar.defaultOptions, defaultOptions.scrollbar);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Scrollbar;\n    });\n    _registerModule(_modules, 'Stock/Navigator/Navigator.js', [_modules['Core/Axis/Axis.js'], _modules['Stock/Navigator/ChartNavigatorComposition.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Core/Axis/NavigatorAxisComposition.js'], _modules['Stock/Navigator/NavigatorComposition.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Core/Renderer/SVG/SVGRenderer.js'], _modules['Core/Utilities.js']], function (Axis, ChartNavigatorComposition, D, H, NavigatorAxisAdditions, NavigatorComposition, Scrollbar, SVGRenderer, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { isTouchDevice } = H;\n        const { prototype: { symbols } } = SVGRenderer;\n        const { addEvent, clamp, correctFloat, defined, destroyObjectProperties, erase, extend, find, fireEvent, isArray, isNumber, merge, pick, removeEvent, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Finding the min or max of a set of variables where we don't know if they are\n         * defined, is a pattern that is repeated several places in Highcharts. Consider\n         * making this a global utility method.\n         * @private\n         */\n        function numExt(extreme, ...args) {\n            const numbers = [].filter.call(args, isNumber);\n            if (numbers.length) {\n                return Math[extreme].apply(0, numbers);\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Navigator class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Navigator\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         */\n        class Navigator {\n            /* *\n             *\n             *  Static Properties\n             *\n             * */\n            static compose(ChartClass, AxisClass, SeriesClass) {\n                ChartNavigatorComposition.compose(ChartClass, Navigator);\n                NavigatorComposition.compose(ChartClass, AxisClass, SeriesClass);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                this.isDirty = false;\n                this.scrollbarHeight = 0;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Draw one of the handles on the side of the zoomed range in the navigator.\n             *\n             * @private\n             * @function Highcharts.Navigator#drawHandle\n             *\n             * @param {number} x\n             *        The x center for the handle\n             *\n             * @param {number} index\n             *        0 for left and 1 for right\n             *\n             * @param {boolean|undefined} inverted\n             *        Flag for chart.inverted\n             *\n             * @param {string} verb\n             *        Use 'animate' or 'attr'\n             */\n            drawHandle(x, index, inverted, verb) {\n                const navigator = this, height = navigator.navigatorOptions.handles.height;\n                // Place it\n                navigator.handles[index][verb](inverted ? {\n                    translateX: Math.round(navigator.left + navigator.height / 2),\n                    translateY: Math.round(navigator.top + parseInt(x, 10) + 0.5 - height)\n                } : {\n                    translateX: Math.round(navigator.left + parseInt(x, 10)),\n                    translateY: Math.round(navigator.top + navigator.height / 2 - height / 2 - 1)\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawOutline\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawOutline(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, maskInside = navigator.navigatorOptions.maskInside, outlineWidth = navigator.outline.strokeWidth(), halfOutline = outlineWidth / 2, outlineCorrection = (outlineWidth % 2) / 2, // #5800\n                scrollButtonSize = navigator.scrollButtonSize, navigatorSize = navigator.size, navigatorTop = navigator.top, height = navigator.height, lineTop = navigatorTop - halfOutline, lineBtm = navigatorTop + height;\n                let left = navigator.left, verticalMin, path;\n                if (inverted) {\n                    verticalMin = navigatorTop + zoomedMax + outlineCorrection;\n                    zoomedMax = navigatorTop + zoomedMin + outlineCorrection;\n                    path = [\n                        [\n                            'M',\n                            left + height,\n                            navigatorTop - scrollButtonSize - outlineCorrection\n                        ],\n                        // Top right of zoomed range\n                        ['L', left + height, verticalMin],\n                        ['L', left, verticalMin], // Top left of z.r.\n                        ['M', left, zoomedMax], // Bottom left of z.r.\n                        ['L', left + height, zoomedMax], // Bottom right of z.r.\n                        [\n                            'L',\n                            left + height,\n                            navigatorTop + navigatorSize + scrollButtonSize\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // Upper left of zoomed range\n                        ['M', left + height, verticalMin - halfOutline], \n                        // Upper right of z.r.\n                        [\n                            'L',\n                            left + height,\n                            zoomedMax + halfOutline\n                        ]);\n                    }\n                }\n                else {\n                    left -= scrollButtonSize;\n                    zoomedMin += left + scrollButtonSize - outlineCorrection;\n                    zoomedMax += left + scrollButtonSize - outlineCorrection;\n                    path = [\n                        // Left\n                        ['M', left, lineTop],\n                        // Upper left of zoomed range\n                        ['L', zoomedMin, lineTop],\n                        // Lower left of z.r.\n                        ['L', zoomedMin, lineBtm],\n                        // Lower right of z.r.\n                        ['M', zoomedMax, lineBtm],\n                        // Upper right of z.r.\n                        ['L', zoomedMax, lineTop],\n                        // Right\n                        [\n                            'L',\n                            left + navigatorSize + scrollButtonSize * 2,\n                            lineTop\n                        ]\n                    ];\n                    if (maskInside) {\n                        path.push(\n                        // Upper left of zoomed range\n                        ['M', zoomedMin - halfOutline, lineTop], \n                        // Upper right of z.r.\n                        ['L', zoomedMax + halfOutline, lineTop]);\n                    }\n                }\n                navigator.outline[verb]({\n                    d: path\n                });\n            }\n            /**\n             * Render outline around the zoomed range\n             *\n             * @private\n             * @function Highcharts.Navigator#drawMasks\n             *\n             * @param {number} zoomedMin\n             *        in pixels position where zoomed range starts\n             *\n             * @param {number} zoomedMax\n             *        in pixels position where zoomed range ends\n             *\n             * @param {boolean|undefined} inverted\n             *        flag if chart is inverted\n             *\n             * @param {string} verb\n             *        use 'animate' or 'attr'\n             */\n            drawMasks(zoomedMin, zoomedMax, inverted, verb) {\n                const navigator = this, left = navigator.left, top = navigator.top, navigatorHeight = navigator.height;\n                let height, width, x, y;\n                // Determine rectangle position & size\n                // According to (non)inverted position:\n                if (inverted) {\n                    x = [left, left, left];\n                    y = [top, top + zoomedMin, top + zoomedMax];\n                    width = [navigatorHeight, navigatorHeight, navigatorHeight];\n                    height = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                }\n                else {\n                    x = [left, left + zoomedMin, left + zoomedMax];\n                    y = [top, top, top];\n                    width = [\n                        zoomedMin,\n                        zoomedMax - zoomedMin,\n                        navigator.size - zoomedMax\n                    ];\n                    height = [navigatorHeight, navigatorHeight, navigatorHeight];\n                }\n                navigator.shades.forEach((shade, i) => {\n                    shade[verb]({\n                        x: x[i],\n                        y: y[i],\n                        width: width[i],\n                        height: height[i]\n                    });\n                });\n            }\n            /**\n             * Generate and update DOM elements for a navigator:\n             *\n             * - main navigator group\n             *\n             * - all shades\n             *\n             * - outline\n             *\n             * - handles\n             *\n             * @private\n             * @function Highcharts.Navigator#renderElements\n             */\n            renderElements() {\n                const navigator = this, navigatorOptions = navigator.navigatorOptions, maskInside = navigatorOptions.maskInside, chart = navigator.chart, inverted = chart.inverted, renderer = chart.renderer, mouseCursor = {\n                    cursor: inverted ? 'ns-resize' : 'ew-resize'\n                }, \n                // Create the main navigator group\n                navigatorGroup = navigator.navigatorGroup ??\n                    (navigator.navigatorGroup = renderer\n                        .g('navigator')\n                        .attr({\n                        zIndex: 8,\n                        visibility: 'hidden'\n                    })\n                        .add());\n                // Create masks, each mask will get events and fill:\n                [\n                    !maskInside,\n                    maskInside,\n                    !maskInside\n                ].forEach((hasMask, index) => {\n                    const shade = navigator.shades[index] ??\n                        (navigator.shades[index] = renderer.rect()\n                            .addClass('highcharts-navigator-mask' +\n                            (index === 1 ? '-inside' : '-outside'))\n                            .add(navigatorGroup));\n                    if (!chart.styledMode) {\n                        shade.attr({\n                            fill: hasMask ? navigatorOptions.maskFill : 'rgba(0,0,0,0)'\n                        });\n                        if (index === 1) {\n                            shade.css(mouseCursor);\n                        }\n                    }\n                });\n                // Create the outline:\n                if (!navigator.outline) {\n                    navigator.outline = renderer.path()\n                        .addClass('highcharts-navigator-outline')\n                        .add(navigatorGroup);\n                }\n                if (!chart.styledMode) {\n                    navigator.outline.attr({\n                        'stroke-width': navigatorOptions.outlineWidth,\n                        stroke: navigatorOptions.outlineColor\n                    });\n                }\n                // Create the handlers:\n                if (navigatorOptions.handles?.enabled) {\n                    const handlesOptions = navigatorOptions.handles, { height, width } = handlesOptions;\n                    [0, 1].forEach((index) => {\n                        const symbolName = handlesOptions.symbols[index];\n                        if (!navigator.handles[index] ||\n                            navigator.handles[index].symbolUrl !== symbolName) {\n                            // Generate symbol from scratch if we're dealing with an URL\n                            navigator.handles[index]?.destroy();\n                            navigator.handles[index] = renderer.symbol(symbolName, -width / 2 - 1, 0, width, height, handlesOptions);\n                            // Z index is 6 for right handle, 7 for left. Can't be 10,\n                            // because of the tooltip in inverted chart (#2908).\n                            navigator.handles[index].attr({ zIndex: 7 - index })\n                                .addClass('highcharts-navigator-handle ' +\n                                'highcharts-navigator-handle-' +\n                                ['left', 'right'][index]).add(navigatorGroup);\n                            navigator.addMouseEvents();\n                            // If the navigator symbol changed, update its path and name\n                        }\n                        else if (!navigator.handles[index].isImg &&\n                            navigator.handles[index].symbolName !== symbolName) {\n                            const symbolFn = symbols[symbolName], path = symbolFn.call(symbols, -width / 2 - 1, 0, width, height);\n                            navigator.handles[index].attr({\n                                d: path\n                            });\n                            navigator.handles[index].symbolName = symbolName;\n                        }\n                        if (chart.inverted) {\n                            navigator.handles[index].attr({\n                                rotation: 90,\n                                rotationOriginX: Math.floor(-width / 2),\n                                rotationOriginY: (height + width) / 2\n                            });\n                        }\n                        if (!chart.styledMode) {\n                            navigator.handles[index]\n                                .attr({\n                                fill: handlesOptions.backgroundColor,\n                                stroke: handlesOptions.borderColor,\n                                'stroke-width': handlesOptions.lineWidth,\n                                width: handlesOptions.width,\n                                height: handlesOptions.height,\n                                x: -width / 2 - 1,\n                                y: 0\n                            })\n                                .css(mouseCursor);\n                        }\n                    });\n                }\n            }\n            /**\n             * Update navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#update\n             *\n             * @param {Highcharts.NavigatorOptions} options\n             *        Options to merge in when updating navigator\n             */\n            update(options, redraw = false) {\n                const chart = this.chart, invertedUpdate = chart.options.chart.inverted !==\n                    chart.scrollbar?.options.vertical;\n                merge(true, chart.options.navigator, options);\n                this.navigatorOptions = chart.options.navigator || {};\n                this.setOpposite();\n                // Revert to destroy/init for navigator/scrollbar enabled toggle\n                if (defined(options.enabled) || invertedUpdate) {\n                    this.destroy();\n                    this.navigatorEnabled = options.enabled || this.navigatorEnabled;\n                    return this.init(chart);\n                }\n                if (this.navigatorEnabled) {\n                    this.isDirty = true;\n                    if (options.adaptToUpdatedData === false) {\n                        this.baseSeries.forEach((series) => {\n                            removeEvent(series, 'updatedData', this.updatedDataHandler);\n                        }, this);\n                    }\n                    if (options.adaptToUpdatedData) {\n                        this.baseSeries.forEach((series) => {\n                            series.eventsToUnbind.push(addEvent(series, 'updatedData', this.updatedDataHandler));\n                        }, this);\n                    }\n                    // Update navigator series\n                    if (options.series || options.baseSeries) {\n                        this.setBaseSeries(void 0, false);\n                    }\n                    // Update navigator axis\n                    if (options.height || options.xAxis || options.yAxis) {\n                        this.height = options.height ?? this.height;\n                        const offsets = this.getXAxisOffsets();\n                        this.xAxis.update({\n                            ...options.xAxis,\n                            offsets,\n                            [chart.inverted ? 'width' : 'height']: this.height,\n                            [chart.inverted ? 'height' : 'width']: void 0\n                        }, false);\n                        this.yAxis.update({\n                            ...options.yAxis,\n                            [chart.inverted ? 'width' : 'height']: this.height\n                        }, false);\n                    }\n                }\n                if (redraw) {\n                    chart.redraw();\n                }\n            }\n            /**\n             * Render the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#render\n             * @param {number} min\n             *        X axis value minimum\n             * @param {number} max\n             *        X axis value maximum\n             * @param {number} [pxMin]\n             *        Pixel value minimum\n             * @param {number} [pxMax]\n             *        Pixel value maximum\n             */\n            render(min, max, pxMin, pxMax) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, pointRange = xAxis.pointRange || 0, scrollbarXAxis = xAxis.navigatorAxis.fake ? chart.xAxis[0] : xAxis, navigatorEnabled = navigator.navigatorEnabled, rendered = navigator.rendered, inverted = chart.inverted, minRange = chart.xAxis[0].minRange, maxRange = chart.xAxis[0].options.maxRange, scrollButtonSize = navigator.scrollButtonSize;\n                let navigatorWidth, scrollbarLeft, scrollbarTop, scrollbarHeight = navigator.scrollbarHeight, navigatorSize, verb;\n                // Don't redraw while moving the handles (#4703).\n                if (this.hasDragged && !defined(pxMin)) {\n                    return;\n                }\n                if (this.isDirty) {\n                    // Update DOM navigator elements\n                    this.renderElements();\n                }\n                min = correctFloat(min - pointRange / 2);\n                max = correctFloat(max + pointRange / 2);\n                // Don't render the navigator until we have data (#486, #4202, #5172).\n                if (!isNumber(min) || !isNumber(max)) {\n                    // However, if navigator was already rendered, we may need to resize\n                    // it. For example hidden series, but visible navigator (#6022).\n                    if (rendered) {\n                        pxMin = 0;\n                        pxMax = pick(xAxis.width, scrollbarXAxis.width);\n                    }\n                    else {\n                        return;\n                    }\n                }\n                navigator.left = pick(xAxis.left, \n                // In case of scrollbar only, without navigator\n                chart.plotLeft + scrollButtonSize +\n                    (inverted ? chart.plotWidth : 0));\n                let zoomedMax = navigator.size = navigatorSize = pick(xAxis.len, (inverted ? chart.plotHeight : chart.plotWidth) -\n                    2 * scrollButtonSize);\n                if (inverted) {\n                    navigatorWidth = scrollbarHeight;\n                }\n                else {\n                    navigatorWidth = navigatorSize + 2 * scrollButtonSize;\n                }\n                // Get the pixel position of the handles\n                pxMin = pick(pxMin, xAxis.toPixels(min, true));\n                pxMax = pick(pxMax, xAxis.toPixels(max, true));\n                // Verify (#1851, #2238)\n                if (!isNumber(pxMin) || Math.abs(pxMin) === Infinity) {\n                    pxMin = 0;\n                    pxMax = navigatorWidth;\n                }\n                // Are we below the minRange? (#2618, #6191)\n                const newMin = xAxis.toValue(pxMin, true), newMax = xAxis.toValue(pxMax, true), currentRange = Math.abs(correctFloat(newMax - newMin));\n                if (currentRange < minRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - minRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + minRange + pointRange, true);\n                    }\n                }\n                else if (defined(maxRange) &&\n                    correctFloat(currentRange - pointRange) > maxRange) {\n                    if (this.grabbedLeft) {\n                        pxMin = xAxis.toPixels(newMax - maxRange - pointRange, true);\n                    }\n                    else if (this.grabbedRight) {\n                        pxMax = xAxis.toPixels(newMin + maxRange + pointRange, true);\n                    }\n                }\n                // Handles are allowed to cross, but never exceed the plot area\n                navigator.zoomedMax = clamp(Math.max(pxMin, pxMax), 0, zoomedMax);\n                navigator.zoomedMin = clamp(navigator.fixedWidth ?\n                    navigator.zoomedMax - navigator.fixedWidth :\n                    Math.min(pxMin, pxMax), 0, zoomedMax);\n                navigator.range = navigator.zoomedMax - navigator.zoomedMin;\n                zoomedMax = Math.round(navigator.zoomedMax);\n                const zoomedMin = Math.round(navigator.zoomedMin);\n                if (navigatorEnabled) {\n                    navigator.navigatorGroup.attr({\n                        visibility: 'inherit'\n                    });\n                    // Place elements\n                    verb = rendered && !navigator.hasDragged ? 'animate' : 'attr';\n                    navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    if (navigator.navigatorOptions.handles.enabled) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n                if (navigator.scrollbar) {\n                    if (inverted) {\n                        scrollbarTop = navigator.top - scrollButtonSize;\n                        scrollbarLeft = navigator.left - scrollbarHeight +\n                            (navigatorEnabled || !scrollbarXAxis.opposite ? 0 :\n                                // Multiple axes has offsets:\n                                (scrollbarXAxis.titleOffset || 0) +\n                                    // Self margin from the axis.title\n                                    scrollbarXAxis.axisTitleMargin);\n                        scrollbarHeight = navigatorSize + 2 * scrollButtonSize;\n                    }\n                    else {\n                        scrollbarTop = navigator.top + (navigatorEnabled ?\n                            navigator.height :\n                            -scrollbarHeight);\n                        scrollbarLeft = navigator.left - scrollButtonSize;\n                    }\n                    // Reposition scrollbar\n                    navigator.scrollbar.position(scrollbarLeft, scrollbarTop, navigatorWidth, scrollbarHeight);\n                    // Keep scale 0-1\n                    navigator.scrollbar.setRange(\n                    // Use real value, not rounded because range can be very small\n                    // (#1716)\n                    navigator.zoomedMin / (navigatorSize || 1), navigator.zoomedMax / (navigatorSize || 1));\n                }\n                navigator.rendered = true;\n                this.isDirty = false;\n                fireEvent(this, 'afterRender');\n            }\n            /**\n             * Set up the mouse and touch events for the navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#addMouseEvents\n             */\n            addMouseEvents() {\n                const navigator = this, chart = navigator.chart, container = chart.container;\n                let eventsToUnbind = [], mouseMoveHandler, mouseUpHandler;\n                /**\n                 * Create mouse events' handlers.\n                 * Make them as separate functions to enable wrapping them:\n                 */\n                navigator.mouseMoveHandler = mouseMoveHandler = function (e) {\n                    navigator.onMouseMove(e);\n                };\n                navigator.mouseUpHandler = mouseUpHandler = function (e) {\n                    navigator.onMouseUp(e);\n                };\n                // Add shades and handles mousedown events\n                eventsToUnbind = navigator.getPartsEvents('mousedown');\n                eventsToUnbind.push(\n                // Add mouse move and mouseup events. These are bind to doc/div,\n                // because Navigator.grabbedSomething flags are stored in mousedown\n                // events\n                addEvent(chart.renderTo, 'mousemove', mouseMoveHandler), addEvent(container.ownerDocument, 'mouseup', mouseUpHandler), \n                // Touch events\n                addEvent(chart.renderTo, 'touchmove', mouseMoveHandler), addEvent(container.ownerDocument, 'touchend', mouseUpHandler));\n                eventsToUnbind.concat(navigator.getPartsEvents('touchstart'));\n                navigator.eventsToUnbind = eventsToUnbind;\n                // Data events\n                if (navigator.series && navigator.series[0]) {\n                    eventsToUnbind.push(addEvent(navigator.series[0].xAxis, 'foundExtremes', function () {\n                        chart.navigator.modifyNavigatorAxisExtremes();\n                    }));\n                }\n            }\n            /**\n             * Generate events for handles and masks\n             *\n             * @private\n             * @function Highcharts.Navigator#getPartsEvents\n             *\n             * @param {string} eventName\n             *        Event name handler, 'mousedown' or 'touchstart'\n             *\n             * @return {Array<Function>}\n             *         An array of functions to remove navigator functions from the\n             *         events again.\n             */\n            getPartsEvents(eventName) {\n                const navigator = this, events = [];\n                ['shades', 'handles'].forEach(function (name) {\n                    navigator[name].forEach(function (navigatorItem, index) {\n                        events.push(addEvent(navigatorItem.element, eventName, function (e) {\n                            navigator[name + 'Mousedown'](e, index);\n                        }));\n                    });\n                });\n                return events;\n            }\n            /**\n             * Mousedown on a shaded mask, either:\n             *\n             * - will be stored for future drag&drop\n             *\n             * - will directly shift to a new range\n             *\n             * @private\n             * @function Highcharts.Navigator#shadesMousedown\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             *\n             * @param {number} index\n             *        Index of a mask in Navigator.shades array\n             */\n            shadesMousedown(e, index) {\n                e = this.chart.pointer?.normalize(e) || e;\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, zoomedMin = navigator.zoomedMin, navigatorSize = navigator.size, range = navigator.range;\n                let navigatorPosition = navigator.left, chartX = e.chartX, fixedMax, fixedMin, ext, left;\n                // For inverted chart, swap some options:\n                if (chart.inverted) {\n                    chartX = e.chartY;\n                    navigatorPosition = navigator.top;\n                }\n                if (index === 1) {\n                    // Store information for drag&drop\n                    navigator.grabbedCenter = chartX;\n                    navigator.fixedWidth = range;\n                    navigator.dragOffset = chartX - zoomedMin;\n                }\n                else {\n                    // Shift the range by clicking on shaded areas\n                    left = chartX - navigatorPosition - range / 2;\n                    if (index === 0) {\n                        left = Math.max(0, left);\n                    }\n                    else if (index === 2 && left + range >= navigatorSize) {\n                        left = navigatorSize - range;\n                        if (navigator.reversedExtremes) {\n                            // #7713\n                            left -= range;\n                            fixedMin = navigator.getUnionExtremes().dataMin;\n                        }\n                        else {\n                            // #2293, #3543\n                            fixedMax = navigator.getUnionExtremes().dataMax;\n                        }\n                    }\n                    if (left !== zoomedMin) { // It has actually moved\n                        navigator.fixedWidth = range; // #1370\n                        ext = xAxis.navigatorAxis.toFixedRange(left, left + range, fixedMin, fixedMax);\n                        if (defined(ext.min)) { // #7411\n                            fireEvent(this, 'setRange', {\n                                min: Math.min(ext.min, ext.max),\n                                max: Math.max(ext.min, ext.max),\n                                redraw: true,\n                                eventArguments: {\n                                    trigger: 'navigator'\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n            /**\n             * Mousedown on a handle mask.\n             * Will store necessary information for drag&drop.\n             *\n             * @private\n             * @function Highcharts.Navigator#handlesMousedown\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             * @param {number} index\n             *        Index of a handle in Navigator.handles array\n             */\n            handlesMousedown(e, index) {\n                e = this.chart.pointer?.normalize(e) || e;\n                const navigator = this, chart = navigator.chart, baseXAxis = chart.xAxis[0], \n                // For reversed axes, min and max are changed,\n                // so the other extreme should be stored\n                reverse = navigator.reversedExtremes;\n                if (index === 0) {\n                    // Grab the left handle\n                    navigator.grabbedLeft = true;\n                    navigator.otherHandlePos = navigator.zoomedMax;\n                    navigator.fixedExtreme = reverse ? baseXAxis.min : baseXAxis.max;\n                }\n                else {\n                    // Grab the right handle\n                    navigator.grabbedRight = true;\n                    navigator.otherHandlePos = navigator.zoomedMin;\n                    navigator.fixedExtreme = reverse ? baseXAxis.max : baseXAxis.min;\n                }\n                chart.setFixedRange(void 0);\n            }\n            /**\n             * Mouse move event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseMove\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseMove(e) {\n                const navigator = this, chart = navigator.chart, navigatorSize = navigator.navigatorSize, range = navigator.range, dragOffset = navigator.dragOffset, inverted = chart.inverted;\n                let left = navigator.left, chartX;\n                // In iOS, a mousemove event with e.pageX === 0 is fired when holding\n                // the finger down in the center of the scrollbar. This should be\n                // ignored.\n                if (!e.touches || e.touches[0].pageX !== 0) { // #4696\n                    e = chart.pointer?.normalize(e) || e;\n                    chartX = e.chartX;\n                    // Swap some options for inverted chart\n                    if (inverted) {\n                        left = navigator.top;\n                        chartX = e.chartY;\n                    }\n                    // Drag left handle or top handle\n                    if (navigator.grabbedLeft) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, chartX - left, navigator.otherHandlePos);\n                        // Drag right handle or bottom handle\n                    }\n                    else if (navigator.grabbedRight) {\n                        navigator.hasDragged = true;\n                        navigator.render(0, 0, navigator.otherHandlePos, chartX - left);\n                        // Drag scrollbar or open area in navigator\n                    }\n                    else if (navigator.grabbedCenter) {\n                        navigator.hasDragged = true;\n                        if (chartX < dragOffset) { // Outside left\n                            chartX = dragOffset;\n                            // Outside right\n                        }\n                        else if (chartX >\n                            navigatorSize + dragOffset - range) {\n                            chartX = navigatorSize + dragOffset - range;\n                        }\n                        navigator.render(0, 0, chartX - dragOffset, chartX - dragOffset + range);\n                    }\n                    if (navigator.hasDragged &&\n                        navigator.scrollbar &&\n                        pick(navigator.scrollbar.options.liveRedraw, \n                        // By default, don't run live redraw on touch\n                        // devices or if the chart is in boost.\n                        !isTouchDevice &&\n                            !this.chart.boosted)) {\n                        e.DOMType = e.type;\n                        setTimeout(function () {\n                            navigator.onMouseUp(e);\n                        }, 0);\n                    }\n                }\n            }\n            /**\n             * Mouse up event based on x/y mouse position.\n             *\n             * @private\n             * @function Highcharts.Navigator#onMouseUp\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event\n             */\n            onMouseUp(e) {\n                const navigator = this, chart = navigator.chart, xAxis = navigator.xAxis, scrollbar = navigator.scrollbar, DOMEvent = e.DOMEvent || e, inverted = chart.inverted, verb = navigator.rendered && !navigator.hasDragged ?\n                    'animate' : 'attr';\n                let zoomedMax, zoomedMin, unionExtremes, fixedMin, fixedMax, ext;\n                if (\n                // MouseUp is called for both, navigator and scrollbar (that order),\n                // which causes calling afterSetExtremes twice. Prevent first call\n                // by checking if scrollbar is going to set new extremes (#6334)\n                (navigator.hasDragged && (!scrollbar || !scrollbar.hasDragged)) ||\n                    e.trigger === 'scrollbar') {\n                    unionExtremes = navigator.getUnionExtremes();\n                    // When dragging one handle, make sure the other one doesn't change\n                    if (navigator.zoomedMin === navigator.otherHandlePos) {\n                        fixedMin = navigator.fixedExtreme;\n                    }\n                    else if (navigator.zoomedMax === navigator.otherHandlePos) {\n                        fixedMax = navigator.fixedExtreme;\n                    }\n                    // Snap to right edge (#4076)\n                    if (navigator.zoomedMax === navigator.size) {\n                        fixedMax = navigator.reversedExtremes ?\n                            unionExtremes.dataMin :\n                            unionExtremes.dataMax;\n                    }\n                    // Snap to left edge (#7576)\n                    if (navigator.zoomedMin === 0) {\n                        fixedMin = navigator.reversedExtremes ?\n                            unionExtremes.dataMax :\n                            unionExtremes.dataMin;\n                    }\n                    ext = xAxis.navigatorAxis.toFixedRange(navigator.zoomedMin, navigator.zoomedMax, fixedMin, fixedMax);\n                    if (defined(ext.min)) {\n                        fireEvent(this, 'setRange', {\n                            min: Math.min(ext.min, ext.max),\n                            max: Math.max(ext.min, ext.max),\n                            redraw: true,\n                            animation: navigator.hasDragged ? false : null,\n                            eventArguments: {\n                                trigger: 'navigator',\n                                triggerOp: 'navigator-drag',\n                                DOMEvent: DOMEvent // #1838\n                            }\n                        });\n                    }\n                }\n                if (e.DOMType !== 'mousemove' &&\n                    e.DOMType !== 'touchmove') {\n                    navigator.grabbedLeft = navigator.grabbedRight =\n                        navigator.grabbedCenter = navigator.fixedWidth =\n                            navigator.fixedExtreme = navigator.otherHandlePos =\n                                navigator.hasDragged = navigator.dragOffset = null;\n                }\n                // Update position of navigator shades, outline and handles (#12573)\n                if (navigator.navigatorEnabled &&\n                    isNumber(navigator.zoomedMin) &&\n                    isNumber(navigator.zoomedMax)) {\n                    zoomedMin = Math.round(navigator.zoomedMin);\n                    zoomedMax = Math.round(navigator.zoomedMax);\n                    if (navigator.shades) {\n                        navigator.drawMasks(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.outline) {\n                        navigator.drawOutline(zoomedMin, zoomedMax, inverted, verb);\n                    }\n                    if (navigator.navigatorOptions.handles.enabled &&\n                        Object.keys(navigator.handles).length ===\n                            navigator.handles.length) {\n                        navigator.drawHandle(zoomedMin, 0, inverted, verb);\n                        navigator.drawHandle(zoomedMax, 1, inverted, verb);\n                    }\n                }\n            }\n            /**\n             * Removes the event handlers attached previously with addEvents.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeEvents\n             */\n            removeEvents() {\n                if (this.eventsToUnbind) {\n                    this.eventsToUnbind.forEach(function (unbind) {\n                        unbind();\n                    });\n                    this.eventsToUnbind = void 0;\n                }\n                this.removeBaseSeriesEvents();\n            }\n            /**\n             * Remove data events.\n             *\n             * @private\n             * @function Highcharts.Navigator#removeBaseSeriesEvents\n             */\n            removeBaseSeriesEvents() {\n                const baseSeries = this.baseSeries || [];\n                if (this.navigatorEnabled && baseSeries[0]) {\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        baseSeries.forEach(function (series) {\n                            removeEvent(series, 'updatedData', this.updatedDataHandler);\n                        }, this);\n                    }\n                    // We only listen for extremes-events on the first baseSeries\n                    if (baseSeries[0].xAxis) {\n                        removeEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes);\n                    }\n                }\n            }\n            /**\n             * Calculate the navigator xAxis offsets\n             *\n             * @private\n             */\n            getXAxisOffsets() {\n                return (this.chart.inverted ?\n                    [this.scrollButtonSize, 0, -this.scrollButtonSize, 0] :\n                    [0, -this.scrollButtonSize, 0, this.scrollButtonSize]);\n            }\n            /**\n             * Initialize the Navigator object\n             *\n             * @private\n             * @function Highcharts.Navigator#init\n             */\n            init(chart) {\n                const chartOptions = chart.options, navigatorOptions = chartOptions.navigator || {}, navigatorEnabled = navigatorOptions.enabled, scrollbarOptions = chartOptions.scrollbar || {}, scrollbarEnabled = scrollbarOptions.enabled, height = navigatorEnabled && navigatorOptions.height || 0, scrollbarHeight = scrollbarEnabled && scrollbarOptions.height || 0, scrollButtonSize = scrollbarOptions.buttonsEnabled && scrollbarHeight || 0;\n                this.handles = [];\n                this.shades = [];\n                this.chart = chart;\n                this.setBaseSeries();\n                this.height = height;\n                this.scrollbarHeight = scrollbarHeight;\n                this.scrollButtonSize = scrollButtonSize;\n                this.scrollbarEnabled = scrollbarEnabled;\n                this.navigatorEnabled = navigatorEnabled;\n                this.navigatorOptions = navigatorOptions;\n                this.scrollbarOptions = scrollbarOptions;\n                this.setOpposite();\n                const navigator = this, baseSeries = navigator.baseSeries, xAxisIndex = chart.xAxis.length, yAxisIndex = chart.yAxis.length, baseXaxis = baseSeries && baseSeries[0] && baseSeries[0].xAxis ||\n                    chart.xAxis[0] || { options: {} };\n                chart.isDirtyBox = true;\n                if (navigator.navigatorEnabled) {\n                    const offsets = this.getXAxisOffsets();\n                    // An x axis is required for scrollbar also\n                    navigator.xAxis = new Axis(chart, merge({\n                        // Inherit base xAxis' break, ordinal options and overscroll\n                        breaks: baseXaxis.options.breaks,\n                        ordinal: baseXaxis.options.ordinal,\n                        overscroll: baseXaxis.options.overscroll\n                    }, navigatorOptions.xAxis, {\n                        type: 'datetime',\n                        yAxis: navigatorOptions.yAxis?.id,\n                        index: xAxisIndex,\n                        isInternal: true,\n                        offset: 0,\n                        keepOrdinalPadding: true, // #2436\n                        startOnTick: false,\n                        endOnTick: false,\n                        // Inherit base xAxis' padding when ordinal is false (#16915).\n                        minPadding: baseXaxis.options.ordinal ? 0 :\n                            baseXaxis.options.minPadding,\n                        maxPadding: baseXaxis.options.ordinal ? 0 :\n                            baseXaxis.options.maxPadding,\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        offsets,\n                        width: height\n                    } : {\n                        offsets,\n                        height\n                    }), 'xAxis');\n                    navigator.yAxis = new Axis(chart, merge(navigatorOptions.yAxis, {\n                        alignTicks: false,\n                        offset: 0,\n                        index: yAxisIndex,\n                        isInternal: true,\n                        reversed: pick((navigatorOptions.yAxis &&\n                            navigatorOptions.yAxis.reversed), (chart.yAxis[0] && chart.yAxis[0].reversed), false), // #14060\n                        zoomEnabled: false\n                    }, chart.inverted ? {\n                        width: height\n                    } : {\n                        height: height\n                    }), 'yAxis');\n                    // If we have a base series, initialize the navigator series\n                    if (baseSeries || navigatorOptions.series.data) {\n                        navigator.updateNavigatorSeries(false);\n                        // If not, set up an event to listen for added series\n                    }\n                    else if (chart.series.length === 0) {\n                        navigator.unbindRedraw = addEvent(chart, 'beforeRedraw', function () {\n                            // We've got one, now add it as base\n                            if (chart.series.length > 0 && !navigator.series) {\n                                navigator.setBaseSeries();\n                                navigator.unbindRedraw(); // Reset\n                            }\n                        });\n                    }\n                    navigator.reversedExtremes = (chart.inverted && !navigator.xAxis.reversed) || (!chart.inverted && navigator.xAxis.reversed);\n                    // Render items, so we can bind events to them:\n                    navigator.renderElements();\n                    // Add mouse events\n                    navigator.addMouseEvents();\n                    // In case of scrollbar only, fake an x axis to get translation\n                }\n                else {\n                    navigator.xAxis = {\n                        chart,\n                        navigatorAxis: {\n                            fake: true\n                        },\n                        translate: function (value, reverse) {\n                            const axis = chart.xAxis[0], ext = axis.getExtremes(), scrollTrackWidth = axis.len - 2 * scrollButtonSize, min = numExt('min', axis.options.min, ext.dataMin), valueRange = numExt('max', axis.options.max, ext.dataMax) - min;\n                            return reverse ?\n                                // From pixel to value\n                                (value * valueRange / scrollTrackWidth) + min :\n                                // From value to pixel\n                                scrollTrackWidth * (value - min) / valueRange;\n                        },\n                        toPixels: function (value) {\n                            return this.translate(value);\n                        },\n                        toValue: function (value) {\n                            return this.translate(value, true);\n                        }\n                    };\n                    navigator.xAxis.navigatorAxis.axis = navigator.xAxis;\n                    navigator.xAxis.navigatorAxis.toFixedRange = (NavigatorAxisAdditions.prototype.toFixedRange.bind(navigator.xAxis.navigatorAxis));\n                }\n                // Initialize the scrollbar\n                if (chart.options.scrollbar.enabled) {\n                    const options = merge(chart.options.scrollbar, { vertical: chart.inverted });\n                    if (!isNumber(options.margin) && navigator.navigatorEnabled) {\n                        options.margin = chart.inverted ? -3 : 3;\n                    }\n                    chart.scrollbar = navigator.scrollbar = new Scrollbar(chart.renderer, options, chart);\n                    addEvent(navigator.scrollbar, 'changed', function (e) {\n                        const range = navigator.size, to = range * this.to, from = range * this.from;\n                        navigator.hasDragged = navigator.scrollbar.hasDragged;\n                        navigator.render(0, 0, from, to);\n                        if (this.shouldUpdateExtremes(e.DOMType)) {\n                            setTimeout(function () {\n                                navigator.onMouseUp(e);\n                            });\n                        }\n                    });\n                }\n                // Add data events\n                navigator.addBaseSeriesEvents();\n                // Add redraw events\n                navigator.addChartEvents();\n            }\n            /**\n             * Set the opposite property on navigator\n             *\n             * @private\n             */\n            setOpposite() {\n                const navigatorOptions = this.navigatorOptions, navigatorEnabled = this.navigatorEnabled, chart = this.chart;\n                this.opposite = pick(navigatorOptions.opposite, Boolean(!navigatorEnabled && chart.inverted)); // #6262\n            }\n            /**\n             * Get the union data extremes of the chart - the outer data extremes of the\n             * base X axis and the navigator axis.\n             *\n             * @private\n             * @function Highcharts.Navigator#getUnionExtremes\n             */\n            getUnionExtremes(returnFalseOnNoBaseSeries) {\n                const baseAxis = this.chart.xAxis[0], navAxis = this.xAxis, navAxisOptions = navAxis.options, baseAxisOptions = baseAxis.options;\n                let ret;\n                if (!returnFalseOnNoBaseSeries || baseAxis.dataMin !== null) {\n                    ret = {\n                        dataMin: pick(// #4053\n                        navAxisOptions && navAxisOptions.min, numExt('min', baseAxisOptions.min, baseAxis.dataMin, navAxis.dataMin, navAxis.min)),\n                        dataMax: pick(navAxisOptions && navAxisOptions.max, numExt('max', baseAxisOptions.max, baseAxis.dataMax, navAxis.dataMax, navAxis.max))\n                    };\n                }\n                return ret;\n            }\n            /**\n             * Set the base series and update the navigator series from this. With a bit\n             * of modification we should be able to make this an API method to be called\n             * from the outside\n             *\n             * @private\n             * @function Highcharts.Navigator#setBaseSeries\n             * @param {Highcharts.SeriesOptionsType} [baseSeriesOptions]\n             *        Additional series options for a navigator\n             * @param {boolean} [redraw]\n             *        Whether to redraw after update.\n             */\n            setBaseSeries(baseSeriesOptions, redraw) {\n                const chart = this.chart, baseSeries = this.baseSeries = [];\n                baseSeriesOptions = (baseSeriesOptions ||\n                    chart.options && chart.options.navigator.baseSeries ||\n                    (chart.series.length ?\n                        // Find the first non-navigator series (#8430)\n                        find(chart.series, (s) => (!s.options.isInternal)).index :\n                        0));\n                // Iterate through series and add the ones that should be shown in\n                // navigator.\n                (chart.series || []).forEach((series, i) => {\n                    if (\n                    // Don't include existing nav series\n                    !series.options.isInternal &&\n                        (series.options.showInNavigator ||\n                            (i === baseSeriesOptions ||\n                                series.options.id === baseSeriesOptions) &&\n                                series.options.showInNavigator !== false)) {\n                        baseSeries.push(series);\n                    }\n                });\n                // When run after render, this.xAxis already exists\n                if (this.xAxis && !this.xAxis.navigatorAxis.fake) {\n                    this.updateNavigatorSeries(true, redraw);\n                }\n            }\n            /**\n             * Update series in the navigator from baseSeries, adding new if does not\n             * exist.\n             *\n             * @private\n             * @function Highcharts.Navigator.updateNavigatorSeries\n             */\n            updateNavigatorSeries(addEvents, redraw) {\n                const navigator = this, chart = navigator.chart, baseSeries = navigator.baseSeries, navSeriesMixin = {\n                    enableMouseTracking: false,\n                    index: null, // #6162\n                    linkedTo: null, // #6734\n                    group: 'nav', // For columns\n                    padXAxis: false,\n                    xAxis: this.navigatorOptions.xAxis?.id,\n                    yAxis: this.navigatorOptions.yAxis?.id,\n                    showInLegend: false,\n                    stacking: void 0, // #4823\n                    isInternal: true,\n                    states: {\n                        inactive: {\n                            opacity: 1\n                        }\n                    }\n                }, \n                // Remove navigator series that are no longer in the baseSeries\n                navigatorSeries = navigator.series =\n                    (navigator.series || []).filter((navSeries) => {\n                        const base = navSeries.baseSeries;\n                        if (baseSeries.indexOf(base) < 0) { // Not in array\n                            // If there is still a base series connected to this\n                            // series, remove event handler and reference.\n                            if (base) {\n                                removeEvent(base, 'updatedData', navigator.updatedDataHandler);\n                                delete base.navigatorSeries;\n                            }\n                            // Kill the nav series. It may already have been\n                            // destroyed (#8715).\n                            if (navSeries.chart) {\n                                navSeries.destroy();\n                            }\n                            return false;\n                        }\n                        return true;\n                    });\n                let baseOptions, mergedNavSeriesOptions, chartNavigatorSeriesOptions = navigator.navigatorOptions.series, baseNavigatorOptions;\n                // Go through each base series and merge the options to create new\n                // series\n                if (baseSeries && baseSeries.length) {\n                    baseSeries.forEach((base) => {\n                        const linkedNavSeries = base.navigatorSeries, userNavOptions = extend(\n                        // Grab color and visibility from base as default\n                        {\n                            color: base.color,\n                            visible: base.visible\n                        }, !isArray(chartNavigatorSeriesOptions) ?\n                            chartNavigatorSeriesOptions :\n                            defaultOptions.navigator.series);\n                        // Don't update if the series exists in nav and we have disabled\n                        // adaptToUpdatedData.\n                        if (linkedNavSeries &&\n                            navigator.navigatorOptions.adaptToUpdatedData === false) {\n                            return;\n                        }\n                        navSeriesMixin.name = 'Navigator ' + baseSeries.length;\n                        baseOptions = base.options || {};\n                        baseNavigatorOptions = baseOptions.navigatorOptions || {};\n                        // The dataLabels options are not merged correctly\n                        // if the settings are an array, #13847.\n                        userNavOptions.dataLabels = splat(userNavOptions.dataLabels);\n                        mergedNavSeriesOptions = merge(baseOptions, navSeriesMixin, userNavOptions, baseNavigatorOptions);\n                        // Once nav series type is resolved, pick correct pointRange\n                        mergedNavSeriesOptions.pointRange = pick(\n                        // Stricte set pointRange in options\n                        userNavOptions.pointRange, baseNavigatorOptions.pointRange, \n                        // Fallback to default values, e.g. `null` for column\n                        defaultOptions.plotOptions[mergedNavSeriesOptions.type || 'line'].pointRange);\n                        // Merge data separately. Do a slice to avoid mutating the\n                        // navigator options from base series (#4923).\n                        const navigatorSeriesData = baseNavigatorOptions.data || userNavOptions.data;\n                        navigator.hasNavigatorData =\n                            navigator.hasNavigatorData || !!navigatorSeriesData;\n                        mergedNavSeriesOptions.data =\n                            navigatorSeriesData ||\n                                baseOptions.data && baseOptions.data.slice(0);\n                        // Update or add the series\n                        if (linkedNavSeries && linkedNavSeries.options) {\n                            linkedNavSeries.update(mergedNavSeriesOptions, redraw);\n                        }\n                        else {\n                            base.navigatorSeries = chart.initSeries(mergedNavSeriesOptions);\n                            // Set data on initial run with dataSorting enabled (#20318)\n                            chart.setSortedData();\n                            base.navigatorSeries.baseSeries = base; // Store ref\n                            navigatorSeries.push(base.navigatorSeries);\n                        }\n                    });\n                }\n                // If user has defined data (and no base series) or explicitly defined\n                // navigator.series as an array, we create these series on top of any\n                // base series.\n                if (chartNavigatorSeriesOptions.data &&\n                    !(baseSeries && baseSeries.length) ||\n                    isArray(chartNavigatorSeriesOptions)) {\n                    navigator.hasNavigatorData = false;\n                    // Allow navigator.series to be an array\n                    chartNavigatorSeriesOptions =\n                        splat(chartNavigatorSeriesOptions);\n                    chartNavigatorSeriesOptions.forEach((userSeriesOptions, i) => {\n                        navSeriesMixin.name =\n                            'Navigator ' + (navigatorSeries.length + 1);\n                        mergedNavSeriesOptions = merge(defaultOptions.navigator.series, {\n                            // Since we don't have a base series to pull color from,\n                            // try to fake it by using color from series with same\n                            // index. Otherwise pull from the colors array. We need\n                            // an explicit color as otherwise updates will increment\n                            // color counter and we'll get a new color for each\n                            // update of the nav series.\n                            color: chart.series[i] &&\n                                !chart.series[i].options.isInternal &&\n                                chart.series[i].color ||\n                                chart.options.colors[i] ||\n                                chart.options.colors[0]\n                        }, navSeriesMixin, userSeriesOptions);\n                        mergedNavSeriesOptions.data = userSeriesOptions.data;\n                        if (mergedNavSeriesOptions.data) {\n                            navigator.hasNavigatorData = true;\n                            navigatorSeries.push(chart.initSeries(mergedNavSeriesOptions));\n                        }\n                    });\n                }\n                if (addEvents) {\n                    this.addBaseSeriesEvents();\n                }\n            }\n            /**\n             * Add data events.\n             * For example when main series is updated we need to recalculate extremes\n             *\n             * @private\n             * @function Highcharts.Navigator#addBaseSeriesEvent\n             */\n            addBaseSeriesEvents() {\n                const navigator = this, baseSeries = navigator.baseSeries || [];\n                // Bind modified extremes event to first base's xAxis only.\n                // In event of > 1 base-xAxes, the navigator will ignore those.\n                // Adding this multiple times to the same axis is no problem, as\n                // duplicates should be discarded by the browser.\n                if (baseSeries[0] && baseSeries[0].xAxis) {\n                    baseSeries[0].eventsToUnbind.push(addEvent(baseSeries[0].xAxis, 'foundExtremes', this.modifyBaseAxisExtremes));\n                }\n                baseSeries.forEach((base) => {\n                    // Link base series show/hide to navigator series visibility\n                    base.eventsToUnbind.push(addEvent(base, 'show', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(true, false);\n                        }\n                    }));\n                    base.eventsToUnbind.push(addEvent(base, 'hide', function () {\n                        if (this.navigatorSeries) {\n                            this.navigatorSeries.setVisible(false, false);\n                        }\n                    }));\n                    // Respond to updated data in the base series, unless explicitly\n                    // not adapting to data changes.\n                    if (this.navigatorOptions.adaptToUpdatedData !== false) {\n                        if (base.xAxis) {\n                            base.eventsToUnbind.push(addEvent(base, 'updatedData', this.updatedDataHandler));\n                        }\n                    }\n                    // Handle series removal\n                    base.eventsToUnbind.push(addEvent(base, 'remove', function () {\n                        if (baseSeries) {\n                            erase(baseSeries, base); // #21043\n                        }\n                        if (this.navigatorSeries) {\n                            erase(navigator.series, this.navigatorSeries);\n                            if (defined(this.navigatorSeries.options)) {\n                                this.navigatorSeries.remove(false);\n                            }\n                            delete this.navigatorSeries;\n                        }\n                    }));\n                });\n            }\n            /**\n             * Get minimum from all base series connected to the navigator\n             * @private\n             * @param {number} currentSeriesMin\n             *        Minium from the current series\n             * @return {number}\n             *         Minimum from all series\n             */\n            getBaseSeriesMin(currentSeriesMin) {\n                return this.baseSeries.reduce(function (min, series) {\n                    // (#10193)\n                    return Math.min(min, series.xData && series.xData.length ?\n                        series.xData[0] : min);\n                }, currentSeriesMin);\n            }\n            /**\n             * Set the navigator x axis extremes to reflect the total. The navigator\n             * extremes should always be the extremes of the union of all series in the\n             * chart as well as the navigator series.\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyNavigatorAxisExtremes\n             */\n            modifyNavigatorAxisExtremes() {\n                const xAxis = this.xAxis;\n                if (typeof xAxis.getExtremes !== 'undefined') {\n                    const unionExtremes = this.getUnionExtremes(true);\n                    if (unionExtremes &&\n                        (unionExtremes.dataMin !== xAxis.min ||\n                            unionExtremes.dataMax !== xAxis.max)) {\n                        xAxis.min = unionExtremes.dataMin;\n                        xAxis.max = unionExtremes.dataMax;\n                    }\n                }\n            }\n            /**\n             * Hook to modify the base axis extremes with information from the Navigator\n             *\n             * @private\n             * @function Highcharts.Navigator#modifyBaseAxisExtremes\n             */\n            modifyBaseAxisExtremes() {\n                const baseXAxis = this, navigator = baseXAxis.chart.navigator, baseExtremes = baseXAxis.getExtremes(), baseMin = baseExtremes.min, baseMax = baseExtremes.max, baseDataMin = baseExtremes.dataMin, baseDataMax = baseExtremes.dataMax, range = baseMax - baseMin, stickToMin = navigator.stickToMin, stickToMax = navigator.stickToMax, overscroll = pick(baseXAxis.ordinal?.convertOverscroll(baseXAxis.options.overscroll), 0), navigatorSeries = navigator.series && navigator.series[0], hasSetExtremes = !!baseXAxis.setExtremes, \n                // When the extremes have been set by range selector button, don't\n                // stick to min or max. The range selector buttons will handle the\n                // extremes. (#5489)\n                unmutable = baseXAxis.eventArgs &&\n                    baseXAxis.eventArgs.trigger === 'rangeSelectorButton';\n                let newMax, newMin;\n                if (!unmutable) {\n                    // If the zoomed range is already at the min, move it to the right\n                    // as new data comes in\n                    if (stickToMin) {\n                        newMin = baseDataMin;\n                        newMax = newMin + range;\n                    }\n                    // If the zoomed range is already at the max, move it to the right\n                    // as new data comes in\n                    if (stickToMax) {\n                        newMax = baseDataMax + overscroll;\n                        // If stickToMin is true, the new min value is set above\n                        if (!stickToMin) {\n                            newMin = Math.max(baseDataMin, // Don't go below data extremes (#13184)\n                            newMax - range, navigator.getBaseSeriesMin(navigatorSeries && navigatorSeries.xData ?\n                                navigatorSeries.xData[0] :\n                                -Number.MAX_VALUE));\n                        }\n                    }\n                    // Update the extremes\n                    if (hasSetExtremes && (stickToMin || stickToMax)) {\n                        if (isNumber(newMin)) {\n                            baseXAxis.min = baseXAxis.userMin = newMin;\n                            baseXAxis.max = baseXAxis.userMax = newMax;\n                        }\n                    }\n                }\n                // Reset\n                navigator.stickToMin =\n                    navigator.stickToMax = null;\n            }\n            /**\n             * Handler for updated data on the base series. When data is modified, the\n             * navigator series must reflect it. This is called from the Chart.redraw\n             * function before axis and series extremes are computed.\n             *\n             * @private\n             * @function Highcharts.Navigator#updateDataHandler\n             */\n            updatedDataHandler() {\n                const navigator = this.chart.navigator, baseSeries = this, navigatorSeries = this.navigatorSeries, shouldStickToMax = navigator.reversedExtremes ?\n                    Math.round(navigator.zoomedMin) === 0 :\n                    Math.round(navigator.zoomedMax) >= Math.round(navigator.size);\n                // If the scrollbar is scrolled all the way to the right, keep right as\n                // new data comes in, unless user set navigator.stickToMax to false.\n                navigator.stickToMax = pick(this.chart.options.navigator &&\n                    this.chart.options.navigator.stickToMax, shouldStickToMax);\n                navigator.stickToMin = navigator.shouldStickToMin(baseSeries, navigator);\n                // Set the navigator series data to the new data of the base series\n                if (navigatorSeries && !navigator.hasNavigatorData) {\n                    navigatorSeries.options.pointStart = baseSeries.xData[0];\n                    navigatorSeries.setData(baseSeries.options.data, false, null, false); // #5414\n                }\n            }\n            /**\n             * Detect if the zoomed area should stick to the minimum, #14742.\n             *\n             * @private\n             * @function Highcharts.Navigator#shouldStickToMin\n             */\n            shouldStickToMin(baseSeries, navigator) {\n                const xDataMin = navigator.getBaseSeriesMin(baseSeries.xData[0]), xAxis = baseSeries.xAxis, max = xAxis.max, min = xAxis.min, range = xAxis.options.range;\n                let stickToMin = true;\n                if (isNumber(max) && isNumber(min)) {\n                    // If range declared, stick to the minimum only if the range\n                    // is smaller than the data set range.\n                    if (range && max - xDataMin > 0) {\n                        stickToMin = max - xDataMin < range;\n                    }\n                    else {\n                        // If the current axis minimum falls outside the new\n                        // updated dataset, we must adjust.\n                        stickToMin = min <= xDataMin;\n                    }\n                }\n                else {\n                    stickToMin = false; // #15864\n                }\n                return stickToMin;\n            }\n            /**\n             * Add chart events, like redrawing navigator, when chart requires that.\n             *\n             * @private\n             * @function Highcharts.Navigator#addChartEvents\n             */\n            addChartEvents() {\n                if (!this.eventsToUnbind) {\n                    this.eventsToUnbind = [];\n                }\n                this.eventsToUnbind.push(\n                // Move the scrollbar after redraw, like after data updata even if\n                // axes don't redraw\n                addEvent(this.chart, 'redraw', function () {\n                    const navigator = this.navigator, xAxis = navigator && (navigator.baseSeries &&\n                        navigator.baseSeries[0] &&\n                        navigator.baseSeries[0].xAxis ||\n                        this.xAxis[0]); // #5709, #13114\n                    if (xAxis) {\n                        navigator.render(xAxis.min, xAxis.max);\n                    }\n                }), \n                // Make room for the navigator, can be placed around the chart:\n                addEvent(this.chart, 'getMargins', function () {\n                    const chart = this, navigator = chart.navigator;\n                    let marginName = navigator.opposite ?\n                        'plotTop' : 'marginBottom';\n                    if (chart.inverted) {\n                        marginName = navigator.opposite ?\n                            'marginRight' : 'plotLeft';\n                    }\n                    chart[marginName] =\n                        (chart[marginName] || 0) + (navigator.navigatorEnabled || !chart.inverted ?\n                            navigator.height + navigator.scrollbarHeight :\n                            0) + navigator.navigatorOptions.margin;\n                }), addEvent(Navigator, 'setRange', function (e) {\n                    this.chart.xAxis[0].setExtremes(e.min, e.max, e.redraw, e.animation, e.eventArguments);\n                }));\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.Navigator#destroy\n             */\n            destroy() {\n                // Disconnect events added in addEvents\n                this.removeEvents();\n                if (this.xAxis) {\n                    erase(this.chart.xAxis, this.xAxis);\n                    erase(this.chart.axes, this.xAxis);\n                }\n                if (this.yAxis) {\n                    erase(this.chart.yAxis, this.yAxis);\n                    erase(this.chart.axes, this.yAxis);\n                }\n                // Destroy series\n                (this.series || []).forEach((s) => {\n                    if (s.destroy) {\n                        s.destroy();\n                    }\n                });\n                // Destroy properties\n                [\n                    'series', 'xAxis', 'yAxis', 'shades', 'outline', 'scrollbarTrack',\n                    'scrollbarRifles', 'scrollbarGroup', 'scrollbar', 'navigatorGroup',\n                    'rendered'\n                ].forEach((prop) => {\n                    if (this[prop] && this[prop].destroy) {\n                        this[prop].destroy();\n                    }\n                    this[prop] = null;\n                });\n                // Destroy elements in collection\n                [this.handles].forEach((coll) => {\n                    destroyObjectProperties(coll);\n                });\n                this.navigatorEnabled = false;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Navigator;\n    });\n    _registerModule(_modules, 'Core/Axis/OrdinalAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (Axis, H, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, correctFloat, css, defined, error, isNumber, pick, timeUnits, isString } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Extends the axis with ordinal support.\n         * @private\n         */\n        var OrdinalAxis;\n        (function (OrdinalAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extends the axis with ordinal support.\n             *\n             * @private\n             *\n             * @param AxisClass\n             * Axis class to extend.\n             *\n             * @param ChartClass\n             * Chart class to use.\n             *\n             * @param SeriesClass\n             * Series class to use.\n             */\n            function compose(AxisClass, SeriesClass, ChartClass) {\n                const axisProto = AxisClass.prototype;\n                if (!axisProto.ordinal2lin) {\n                    axisProto.getTimeTicks = getTimeTicks;\n                    axisProto.index2val = index2val;\n                    axisProto.lin2val = lin2val;\n                    axisProto.val2lin = val2lin;\n                    // Record this to prevent overwriting by broken-axis module (#5979)\n                    axisProto.ordinal2lin = axisProto.val2lin;\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'foundExtremes', onAxisFoundExtremes);\n                    addEvent(AxisClass, 'afterSetScale', onAxisAfterSetScale);\n                    addEvent(AxisClass, 'initialAxisTranslation', onAxisInitialAxisTranslation);\n                    addEvent(ChartClass, 'pan', onChartPan);\n                    addEvent(ChartClass, 'touchpan', onChartPan);\n                    addEvent(SeriesClass, 'updatedData', onSeriesUpdatedData);\n                }\n                return AxisClass;\n            }\n            OrdinalAxis.compose = compose;\n            /**\n             * In an ordinal axis, there might be areas with dense concentrations of\n             * points, then large gaps between some. Creating equally distributed\n             * ticks over this entire range may lead to a huge number of ticks that\n             * will later be removed. So instead, break the positions up in\n             * segments, find the tick positions for each segment then concatenize\n             * them. This method is used from both data grouping logic and X axis\n             * tick position logic.\n             * @private\n             */\n            function getTimeTicks(normalizedInterval, min, max, startOfWeek, positions = [], closestDistance = 0, findHigherRanks) {\n                const higherRanks = {}, tickPixelIntervalOption = this.options.tickPixelInterval, time = this.chart.time, \n                // Record all the start positions of a segment, to use when\n                // deciding what's a gap in the data.\n                segmentStarts = [];\n                let end, segmentPositions, hasCrossedHigherRank, info, outsideMax, start = 0, groupPositions = [], lastGroupPosition = -Number.MAX_VALUE;\n                // The positions are not always defined, for example for ordinal\n                // positions when data has regular interval (#1557, #2090)\n                if ((!this.options.ordinal && !this.options.breaks) ||\n                    !positions ||\n                    positions.length < 3 ||\n                    typeof min === 'undefined') {\n                    return time.getTimeTicks.apply(time, arguments);\n                }\n                // Analyze the positions array to split it into segments on gaps\n                // larger than 5 times the closest distance. The closest distance is\n                // already found at this point, so we reuse that instead of\n                // computing it again.\n                const posLength = positions.length;\n                for (end = 0; end < posLength; end++) {\n                    outsideMax = end && positions[end - 1] > max;\n                    if (positions[end] < min) { // Set the last position before min\n                        start = end;\n                    }\n                    if (end === posLength - 1 ||\n                        positions[end + 1] - positions[end] > closestDistance * 5 ||\n                        outsideMax) {\n                        // For each segment, calculate the tick positions from the\n                        // getTimeTicks utility function. The interval will be the\n                        // same regardless of how long the segment is.\n                        if (positions[end] > lastGroupPosition) { // #1475\n                            segmentPositions = time.getTimeTicks(normalizedInterval, positions[start], positions[end], startOfWeek);\n                            // Prevent duplicate groups, for example for multiple\n                            // segments within one larger time frame (#1475)\n                            while (segmentPositions.length &&\n                                segmentPositions[0] <= lastGroupPosition) {\n                                segmentPositions.shift();\n                            }\n                            if (segmentPositions.length) {\n                                lastGroupPosition =\n                                    segmentPositions[segmentPositions.length - 1];\n                            }\n                            segmentStarts.push(groupPositions.length);\n                            groupPositions = groupPositions.concat(segmentPositions);\n                        }\n                        // Set start of next segment\n                        start = end + 1;\n                    }\n                    if (outsideMax) {\n                        break;\n                    }\n                }\n                // Get the grouping info from the last of the segments. The info is\n                // the same for all segments.\n                if (segmentPositions) {\n                    info = segmentPositions.info;\n                    // Optionally identify ticks with higher rank, for example\n                    // when the ticks have crossed midnight.\n                    if (findHigherRanks && info.unitRange <= timeUnits.hour) {\n                        end = groupPositions.length - 1;\n                        // Compare points two by two\n                        for (start = 1; start < end; start++) {\n                            if (time.dateFormat('%d', groupPositions[start]) !==\n                                time.dateFormat('%d', groupPositions[start - 1])) {\n                                higherRanks[groupPositions[start]] = 'day';\n                                hasCrossedHigherRank = true;\n                            }\n                        }\n                        // If the complete array has crossed midnight, we want\n                        // to mark the first positions also as higher rank\n                        if (hasCrossedHigherRank) {\n                            higherRanks[groupPositions[0]] = 'day';\n                        }\n                        info.higherRanks = higherRanks;\n                    }\n                    // Save the info\n                    info.segmentStarts = segmentStarts;\n                    groupPositions.info = info;\n                }\n                else {\n                    error(12, false, this.chart);\n                }\n                // Don't show ticks within a gap in the ordinal axis, where the\n                // space between two points is greater than a portion of the tick\n                // pixel interval\n                if (findHigherRanks && defined(tickPixelIntervalOption)) {\n                    const length = groupPositions.length, translatedArr = [], distances = [];\n                    let itemToRemove, translated, lastTranslated, medianDistance, distance, i = length;\n                    // Find median pixel distance in order to keep a reasonably even\n                    // distance between ticks (#748)\n                    while (i--) {\n                        translated = this.translate(groupPositions[i]);\n                        if (lastTranslated) {\n                            distances[i] = lastTranslated - translated;\n                        }\n                        translatedArr[i] = lastTranslated = translated;\n                    }\n                    distances.sort((a, b) => a - b);\n                    medianDistance = distances[Math.floor(distances.length / 2)];\n                    if (medianDistance < tickPixelIntervalOption * 0.6) {\n                        medianDistance = null;\n                    }\n                    // Now loop over again and remove ticks where needed\n                    i = groupPositions[length - 1] > max ? length - 1 : length; // #817\n                    lastTranslated = void 0;\n                    while (i--) {\n                        translated = translatedArr[i];\n                        distance = Math.abs(lastTranslated - translated);\n                        // #4175 - when axis is reversed, the distance, is negative but\n                        // tickPixelIntervalOption positive, so we need to compare the\n                        // same values\n                        // Remove ticks that are closer than 0.6 times the pixel\n                        // interval from the one to the right, but not if it is close to\n                        // the median distance (#748).\n                        if (lastTranslated &&\n                            distance < tickPixelIntervalOption * 0.8 &&\n                            (medianDistance === null || distance < medianDistance * 0.8)) {\n                            // Is this a higher ranked position with a normal\n                            // position to the right?\n                            if (higherRanks[groupPositions[i]] &&\n                                !higherRanks[groupPositions[i + 1]]) {\n                                // Yes: remove the lower ranked neighbour to the\n                                // right\n                                itemToRemove = i + 1;\n                                lastTranslated = translated; // #709\n                            }\n                            else {\n                                // No: remove this one\n                                itemToRemove = i;\n                            }\n                            groupPositions.splice(itemToRemove, 1);\n                        }\n                        else {\n                            lastTranslated = translated;\n                        }\n                    }\n                }\n                return groupPositions;\n            }\n            /**\n             * Get axis position of given index of the extended ordinal positions.\n             * Used only when panning an ordinal axis.\n             *\n             * @private\n             * @function Highcharts.Axis#index2val\n             * @param {number} index\n             * The index value of searched point\n             */\n            function index2val(index) {\n                const axis = this, ordinal = axis.ordinal, \n                // Context could be changed to extendedOrdinalPositions.\n                ordinalPositions = ordinal.positions;\n                // The visible range contains only equally spaced values.\n                if (!ordinalPositions) {\n                    return index;\n                }\n                let i = ordinalPositions.length - 1, distance;\n                if (index < 0) { // Out of range, in effect panning to the left\n                    index = ordinalPositions[0];\n                }\n                else if (index > i) { // Out of range, panning to the right\n                    index = ordinalPositions[i];\n                }\n                else { // Split it up\n                    i = Math.floor(index);\n                    distance = index - i; // The decimal\n                }\n                if (typeof distance !== 'undefined' &&\n                    typeof ordinalPositions[i] !== 'undefined') {\n                    return ordinalPositions[i] + (distance ?\n                        distance *\n                            (ordinalPositions[i + 1] - ordinalPositions[i]) :\n                        0);\n                }\n                return index;\n            }\n            /**\n             * Translate from linear (internal) to axis value.\n             *\n             * @private\n             * @function Highcharts.Axis#lin2val\n             * @param {number} val\n             * The linear abstracted value.\n             */\n            function lin2val(val) {\n                const axis = this, ordinal = axis.ordinal, localMin = axis.old ? axis.old.min : axis.min, localA = axis.old ? axis.old.transA : axis.transA;\n                // Always use extendedPositions (#19816)\n                const positions = ordinal.getExtendedPositions();\n                // In some cases (especially in early stages of the chart creation) the\n                // getExtendedPositions might return undefined.\n                if (positions && positions.length) {\n                    // Convert back from modivied value to pixels. // #15970\n                    const pixelVal = correctFloat((val - localMin) * localA +\n                        axis.minPixelPadding), index = correctFloat(ordinal.getIndexOfPoint(pixelVal, positions)), mantissa = correctFloat(index % 1);\n                    // Check if the index is inside position array. If true,\n                    // read/approximate value for that exact index.\n                    if (index >= 0 && index <= positions.length - 1) {\n                        const leftNeighbour = positions[Math.floor(index)], rightNeighbour = positions[Math.ceil(index)], distance = rightNeighbour - leftNeighbour;\n                        return positions[Math.floor(index)] + mantissa * distance;\n                    }\n                }\n                // If the value is outside positions array, return initial value\n                return val; // #16784\n            }\n            /**\n             * Internal function to calculate the precise index in ordinalPositions\n             * array.\n             * @private\n             */\n            function getIndexInArray(ordinalPositions, val) {\n                const index = OrdinalAxis.Additions.findIndexOf(ordinalPositions, val, true);\n                if (ordinalPositions[index] === val) {\n                    return index;\n                }\n                const percent = (val - ordinalPositions[index]) /\n                    (ordinalPositions[index + 1] - ordinalPositions[index]);\n                return index + percent;\n            }\n            /**\n            * @private\n            */\n            function onAxisAfterInit() {\n                const axis = this;\n                if (!axis.ordinal) {\n                    axis.ordinal = new OrdinalAxis.Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisFoundExtremes() {\n                const axis = this, { eventArgs, options } = axis;\n                if (axis.isXAxis &&\n                    defined(options.overscroll) &&\n                    options.overscroll !== 0 &&\n                    isNumber(axis.max) &&\n                    isNumber(axis.min)) {\n                    if (axis.options.ordinal && !axis.ordinal.originalOrdinalRange) {\n                        // Calculate the original ordinal range\n                        axis.ordinal.getExtendedPositions(false);\n                    }\n                    if (axis.max === axis.dataMax &&\n                        (\n                        // Panning is an exception. We don't want to apply\n                        // overscroll when panning over the dataMax\n                        eventArgs?.trigger !== 'pan' ||\n                            axis.isInternal) &&\n                        // Scrollbar buttons are the other execption\n                        eventArgs?.trigger !== 'navigator') {\n                        const overscroll = axis.ordinal.convertOverscroll(options.overscroll);\n                        axis.max += overscroll;\n                        // Live data and buttons require translation for the min:\n                        if (!axis.isInternal &&\n                            defined(axis.userMin) &&\n                            eventArgs?.trigger !== 'mousewheel') {\n                            axis.min += overscroll;\n                        }\n                    }\n                }\n            }\n            /**\n             * For ordinal axis, that loads data async, redraw axis after data is\n             * loaded. If we don't do that, axis will have the same extremes as\n             * previously, but ordinal positions won't be calculated. See #10290\n             * @private\n             */\n            function onAxisAfterSetScale() {\n                const axis = this;\n                if (axis.horiz && !axis.isDirty) {\n                    axis.isDirty = axis.isOrdinal &&\n                        axis.chart.navigator &&\n                        !axis.chart.navigator.adaptToUpdatedData;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInitialAxisTranslation() {\n                const axis = this;\n                if (axis.ordinal) {\n                    axis.ordinal.beforeSetTickPositions();\n                    axis.tickInterval = axis.ordinal.postProcessTickInterval(axis.tickInterval);\n                }\n            }\n            /**\n             * Extending the Chart.pan method for ordinal axes\n             * @private\n             */\n            function onChartPan(e) {\n                const chart = this, xAxis = chart.xAxis[0], overscroll = xAxis.ordinal.convertOverscroll(xAxis.options.overscroll), chartX = e.originalEvent.chartX, panning = chart.options.chart.panning;\n                let runBase = false;\n                if (panning &&\n                    panning.type !== 'y' &&\n                    xAxis.options.ordinal &&\n                    xAxis.series.length &&\n                    // On touch devices, let default function handle the pinching\n                    (!e.touches || e.touches.length <= 1)) {\n                    const mouseDownX = chart.mouseDownX, extremes = xAxis.getExtremes(), dataMin = extremes.dataMin, dataMax = extremes.dataMax, min = extremes.min, max = extremes.max, hoverPoints = chart.hoverPoints, closestPointRange = (xAxis.closestPointRange ||\n                        (xAxis.ordinal && xAxis.ordinal.overscrollPointsRange)), pointPixelWidth = (xAxis.translationSlope *\n                        (xAxis.ordinal.slope || closestPointRange)), \n                    // How many ordinal units did we move?\n                    movedUnits = Math.round((mouseDownX - chartX) / pointPixelWidth), \n                    // Get index of all the chart's points\n                    extendedOrdinalPositions = xAxis.ordinal.getExtendedPositions(), extendedAxis = {\n                        ordinal: {\n                            positions: extendedOrdinalPositions,\n                            extendedOrdinalPositions: extendedOrdinalPositions\n                        }\n                    }, index2val = xAxis.index2val, val2lin = xAxis.val2lin;\n                    let trimmedRange, ordinalPositions;\n                    // Make sure panning to the edges does not decrease the zoomed range\n                    if ((min <= dataMin && movedUnits < 0) ||\n                        (max + overscroll >= dataMax && movedUnits > 0)) {\n                        return;\n                    }\n                    // We have an ordinal axis, but the data is equally spaced\n                    if (!extendedAxis.ordinal.positions) {\n                        runBase = true;\n                    }\n                    else if (Math.abs(movedUnits) > 1) {\n                        // Remove active points for shared tooltip\n                        if (hoverPoints) {\n                            hoverPoints.forEach(function (point) {\n                                point.setState();\n                            });\n                        }\n                        // In grouped data series, the last ordinal position represents\n                        // the grouped data, which is to the left of the real data max.\n                        // If we don't compensate for this, we will be allowed to pan\n                        // grouped data series passed the right of the plot area.\n                        ordinalPositions = extendedAxis.ordinal.positions;\n                        if (dataMax >\n                            ordinalPositions[ordinalPositions.length - 1]) {\n                            ordinalPositions.push(dataMax);\n                        }\n                        // Get the new min and max values by getting the ordinal index\n                        // for the current extreme, then add the moved units and\n                        // translate back to values. This happens on the extended\n                        // ordinal positions if the new position is out of range, else\n                        // it happens on the current x axis which is smaller and faster.\n                        chart.setFixedRange(max - min);\n                        trimmedRange = xAxis.navigatorAxis\n                            .toFixedRange(void 0, void 0, index2val.apply(extendedAxis, [\n                            val2lin.apply(extendedAxis, [min, true]) +\n                                movedUnits\n                        ]), index2val.apply(extendedAxis, [\n                            val2lin.apply(extendedAxis, [max, true]) +\n                                movedUnits\n                        ]));\n                        // Apply it if it is within the available data range\n                        if (trimmedRange.min >= Math.min(extremes.dataMin, min) &&\n                            trimmedRange.max <= Math.max(dataMax, max) + overscroll) {\n                            xAxis.setExtremes(trimmedRange.min, trimmedRange.max, true, false, { trigger: 'pan' });\n                        }\n                        chart.mouseDownX = chartX; // Set new reference for next run\n                        css(chart.container, { cursor: 'move' });\n                    }\n                }\n                else {\n                    runBase = true;\n                }\n                // Revert to the linear chart.pan version\n                if (runBase || (panning && /y/.test(panning.type))) {\n                    if (overscroll) {\n                        xAxis.max = xAxis.dataMax + overscroll;\n                    }\n                }\n                else {\n                    e.preventDefault();\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesUpdatedData() {\n                const xAxis = this.xAxis;\n                // Destroy the extended ordinal index on updated data\n                // and destroy extendedOrdinalPositions, #16055.\n                if (xAxis && xAxis.options.ordinal) {\n                    delete xAxis.ordinal.index;\n                    delete xAxis.ordinal.originalOrdinalRange;\n                }\n            }\n            /**\n             * Translate from a linear axis value to the corresponding ordinal axis\n             * position. If there are no gaps in the ordinal axis this will be the\n             * same. The translated value is the value that the point would have if\n             * the axis was linear, using the same min and max.\n             *\n             * @private\n             * @function Highcharts.Axis#val2lin\n             * @param {number} val\n             * The axis value.\n             * @param {boolean} [toIndex]\n             * Whether to return the index in the ordinalPositions or the new value.\n             */\n            function val2lin(val, toIndex) {\n                const axis = this, ordinal = axis.ordinal, ordinalPositions = ordinal.positions;\n                let slope = ordinal.slope, extendedOrdinalPositions;\n                if (!ordinalPositions) {\n                    return val;\n                }\n                const ordinalLength = ordinalPositions.length;\n                let ordinalIndex;\n                // If the searched value is inside visible plotArea, ivastigate the\n                // value basing on ordinalPositions.\n                if (ordinalPositions[0] <= val &&\n                    ordinalPositions[ordinalLength - 1] >= val) {\n                    ordinalIndex = getIndexInArray(ordinalPositions, val);\n                    // Final return value is based on ordinalIndex\n                }\n                else {\n                    extendedOrdinalPositions =\n                        ordinal.getExtendedPositions &&\n                            ordinal.getExtendedPositions();\n                    if (!(extendedOrdinalPositions && extendedOrdinalPositions.length)) {\n                        return val;\n                    }\n                    const length = extendedOrdinalPositions.length;\n                    if (!slope) {\n                        slope =\n                            (extendedOrdinalPositions[length - 1] -\n                                extendedOrdinalPositions[0]) /\n                                length;\n                    }\n                    // `originalPointReference` is equal to the index of first point of\n                    // ordinalPositions in extendedOrdinalPositions.\n                    const originalPositionsReference = getIndexInArray(extendedOrdinalPositions, ordinalPositions[0]);\n                    // If the searched value is outside the visiblePlotArea,\n                    // check if it is inside extendedOrdinalPositions.\n                    if (val >= extendedOrdinalPositions[0] &&\n                        val <=\n                            extendedOrdinalPositions[length - 1]) {\n                        // Return Value\n                        ordinalIndex = getIndexInArray(extendedOrdinalPositions, val) -\n                            originalPositionsReference;\n                    }\n                    else {\n                        if (!toIndex) {\n                            // If the value is outside positions array,\n                            // return initial value, #16784\n                            return val;\n                        }\n                        // Since ordinal.slope is the average distance between 2\n                        // points on visible plotArea, this can be used to calculate\n                        // the approximate position of the point, which is outside\n                        // the extendedOrdinalPositions.\n                        if (val < extendedOrdinalPositions[0]) {\n                            const diff = extendedOrdinalPositions[0] - val, approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                -originalPositionsReference -\n                                    approximateIndexOffset;\n                        }\n                        else {\n                            const diff = val -\n                                extendedOrdinalPositions[length - 1], approximateIndexOffset = diff / slope;\n                            ordinalIndex =\n                                approximateIndexOffset +\n                                    length -\n                                    originalPositionsReference;\n                        }\n                    }\n                }\n                return toIndex ? ordinalIndex : slope * (ordinalIndex || 0) +\n                    ordinal.offset;\n            }\n            /* *\n             *\n             *  Classes\n             *\n             * */\n            /**\n             * @private\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                constructor(axis) {\n                    this.index = {};\n                    this.axis = axis;\n                }\n                /* *\n                *\n                *  Functions\n                *\n                * */\n                /**\n                 * Calculate the ordinal positions before tick positions are calculated.\n                 * @private\n                 */\n                beforeSetTickPositions() {\n                    const axis = this.axis, ordinal = axis.ordinal, extremes = axis.getExtremes(), min = extremes.min, max = extremes.max, hasBreaks = axis.brokenAxis?.hasBreaks, isOrdinal = axis.options.ordinal;\n                    let len, uniqueOrdinalPositions, dist, minIndex, maxIndex, slope, i, ordinalPositions = [], overscrollPointsRange = Number.MAX_VALUE, useOrdinal = false, adjustOrdinalExtremesPoints = false, isBoosted = false;\n                    // Apply the ordinal logic\n                    if (isOrdinal || hasBreaks) { // #4167 YAxis is never ordinal ?\n                        let distanceBetweenPoint = 0;\n                        axis.series.forEach(function (series, i) {\n                            uniqueOrdinalPositions = [];\n                            // For an axis with multiple series, check if the distance\n                            // between points is identical throughout all series.\n                            if (i > 0 &&\n                                series.options.id !== 'highcharts-navigator-series' &&\n                                series.processedXData.length > 1) {\n                                adjustOrdinalExtremesPoints =\n                                    distanceBetweenPoint !== series.processedXData[1] -\n                                        series.processedXData[0];\n                            }\n                            distanceBetweenPoint =\n                                series.processedXData[1] - series.processedXData[0];\n                            if (series.boosted) {\n                                isBoosted = series.boosted;\n                            }\n                            if (series.reserveSpace() &&\n                                (series\n                                    .takeOrdinalPosition !== false || hasBreaks)) {\n                                // Concatenate the processed X data into the existing\n                                // positions, or the empty array\n                                ordinalPositions = ordinalPositions.concat(series.processedXData);\n                                len = ordinalPositions.length;\n                                // Remove duplicates (#1588)\n                                ordinalPositions.sort(function (a, b) {\n                                    // Without a custom function it is sorted as strings\n                                    return a - b;\n                                });\n                                overscrollPointsRange = Math.min(overscrollPointsRange, pick(\n                                // Check for a single-point series:\n                                series.closestPointRange, overscrollPointsRange));\n                                if (len) {\n                                    i = 0;\n                                    while (i < len - 1) {\n                                        if (ordinalPositions[i] !==\n                                            ordinalPositions[i + 1]) {\n                                            uniqueOrdinalPositions.push(ordinalPositions[i + 1]);\n                                        }\n                                        i++;\n                                    }\n                                    // Check first item:\n                                    if (uniqueOrdinalPositions[0] !==\n                                        ordinalPositions[0]) {\n                                        uniqueOrdinalPositions.unshift(ordinalPositions[0]);\n                                    }\n                                    ordinalPositions = uniqueOrdinalPositions;\n                                }\n                            }\n                        });\n                        if (!axis.ordinal.originalOrdinalRange) {\n                            // Calculate current originalOrdinalRange\n                            axis.ordinal.originalOrdinalRange =\n                                (ordinalPositions.length - 1) * overscrollPointsRange;\n                        }\n                        // If the distance between points is not identical throughout\n                        // all series, remove the first and last ordinal position to\n                        // avoid enabling ordinal logic when it is not needed, #17405.\n                        // Only for boosted series because changes are negligible.\n                        if (adjustOrdinalExtremesPoints && isBoosted) {\n                            ordinalPositions.pop();\n                            ordinalPositions.shift();\n                        }\n                        // Cache the length\n                        len = ordinalPositions.length;\n                        // Check if we really need the overhead of mapping axis data\n                        // against the ordinal positions. If the series consist of\n                        // evenly spaced data any way, we don't need any ordinal logic.\n                        if (len > 2) { // Two points have equal distance by default\n                            dist = ordinalPositions[1] - ordinalPositions[0];\n                            i = len - 1;\n                            while (i-- && !useOrdinal) {\n                                if (ordinalPositions[i + 1] - ordinalPositions[i] !==\n                                    dist) {\n                                    useOrdinal = true;\n                                }\n                            }\n                            // When zooming in on a week, prevent axis padding for\n                            // weekends even though the data within the week is evenly\n                            // spaced.\n                            if (!axis.options.keepOrdinalPadding &&\n                                (ordinalPositions[0] - min > dist ||\n                                    (max -\n                                        ordinalPositions[ordinalPositions.length - 1]) > dist)) {\n                                useOrdinal = true;\n                            }\n                        }\n                        else if (axis.options.overscroll) {\n                            if (len === 2) {\n                                // Exactly two points, distance for overscroll is fixed:\n                                overscrollPointsRange =\n                                    ordinalPositions[1] - ordinalPositions[0];\n                            }\n                            else if (len === 1) {\n                                // We have just one point, closest distance is unknown.\n                                // Assume then it is last point and overscrolled range:\n                                overscrollPointsRange = axis.ordinal.convertOverscroll(axis.options.overscroll);\n                                ordinalPositions = [\n                                    ordinalPositions[0],\n                                    ordinalPositions[0] + overscrollPointsRange\n                                ];\n                            }\n                            else {\n                                // In case of zooming in on overscrolled range, stick to\n                                // the old range:\n                                overscrollPointsRange = ordinal.overscrollPointsRange;\n                            }\n                        }\n                        // Record the slope and offset to compute the linear values from\n                        // the array index. Since the ordinal positions may exceed the\n                        // current range, get the start and end positions within it\n                        // (#719, #665b)\n                        if (useOrdinal || axis.forceOrdinal) {\n                            if (axis.options.overscroll) {\n                                ordinal.overscrollPointsRange = overscrollPointsRange;\n                                ordinalPositions = ordinalPositions.concat(ordinal.getOverscrollPositions());\n                            }\n                            // Register\n                            ordinal.positions = ordinalPositions;\n                            // This relies on the ordinalPositions being set. Use\n                            // Math.max and Math.min to prevent padding on either sides\n                            // of the data.\n                            minIndex = axis.ordinal2lin(// #5979\n                            Math.max(min, ordinalPositions[0]), true);\n                            maxIndex = Math.max(axis.ordinal2lin(Math.min(max, ordinalPositions[ordinalPositions.length - 1]), true), 1); // #3339\n                            // Set the slope and offset of the values compared to the\n                            // indices in the ordinal positions.\n                            ordinal.slope = slope =\n                                (max - min) / (maxIndex - minIndex);\n                            ordinal.offset = min - (minIndex * slope);\n                        }\n                        else {\n                            ordinal.overscrollPointsRange = pick(axis.closestPointRange, ordinal.overscrollPointsRange);\n                            ordinal.positions = axis.ordinal.slope = ordinal.offset =\n                                void 0;\n                        }\n                    }\n                    axis.isOrdinal = isOrdinal && useOrdinal; // #3818, #4196, #4926\n                    ordinal.groupIntervalFactor = null; // Reset for next run\n                }\n                /**\n                 * Faster way of using the Array.indexOf method.\n                 * Works for sorted arrays only with unique values.\n                 *\n                 * @param {Array} sortedArray\n                 *        The sorted array inside which we are looking for.\n                 * @param {number} key\n                 *        The key to being found.\n                 * @param {boolean} indirectSearch\n                 *        In case of lack of the point in the array, should return\n                 *        value be equal to -1 or the closest smaller index.\n                 *  @private\n                 */\n                static findIndexOf(sortedArray, key, indirectSearch) {\n                    let start = 0, end = sortedArray.length - 1, middle;\n                    while (start < end) {\n                        middle = Math.ceil((start + end) / 2);\n                        // Key found as the middle element.\n                        if (sortedArray[middle] <= key) {\n                            // Continue searching to the right.\n                            start = middle;\n                        }\n                        else {\n                            // Continue searching to the left.\n                            end = middle - 1;\n                        }\n                    }\n                    if (sortedArray[start] === key) {\n                        return start;\n                    }\n                    // Key could not be found.\n                    return !indirectSearch ? -1 : start;\n                }\n                /**\n                 * Get the ordinal positions for the entire data set. This is necessary\n                 * in chart panning because we need to find out what points or data\n                 * groups are available outside the visible range. When a panning\n                 * operation starts, if an index for the given grouping does not exists,\n                 * it is created and cached. This index is deleted on updated data, so\n                 * it will be regenerated the next time a panning operation starts.\n                 * @private\n                 */\n                getExtendedPositions(withOverscroll = true) {\n                    const ordinal = this, axis = ordinal.axis, axisProto = axis.constructor.prototype, chart = axis.chart, grouping = axis.series[0]?.currentDataGrouping, key = grouping ?\n                        grouping.count + grouping.unitName :\n                        'raw', overscroll = withOverscroll ?\n                        axis.ordinal.convertOverscroll(axis.options.overscroll) : 0, extremes = axis.getExtremes();\n                    let fakeAxis, fakeSeries = void 0, ordinalIndex = ordinal.index;\n                    // If this is the first time, or the ordinal index is deleted by\n                    // updatedData,\n                    // create it.\n                    if (!ordinalIndex) {\n                        ordinalIndex = ordinal.index = {};\n                    }\n                    if (!ordinalIndex[key]) {\n                        // Create a fake axis object where the extended ordinal\n                        // positions are emulated\n                        fakeAxis = {\n                            series: [],\n                            chart: chart,\n                            forceOrdinal: false,\n                            getExtremes: function () {\n                                return {\n                                    min: extremes.dataMin,\n                                    max: extremes.dataMax + overscroll\n                                };\n                            },\n                            applyGrouping: axisProto.applyGrouping,\n                            getGroupPixelWidth: axisProto.getGroupPixelWidth,\n                            getTimeTicks: axisProto.getTimeTicks,\n                            options: {\n                                ordinal: true\n                            },\n                            ordinal: {\n                                getGroupIntervalFactor: this.getGroupIntervalFactor\n                            },\n                            ordinal2lin: axisProto.ordinal2lin, // #6276\n                            getIndexOfPoint: axisProto.getIndexOfPoint,\n                            val2lin: axisProto.val2lin // #2590\n                        };\n                        fakeAxis.ordinal.axis = fakeAxis;\n                        // Add the fake series to hold the full data, then apply\n                        // processData to it\n                        axis.series.forEach(function (series) {\n                            fakeSeries = {\n                                xAxis: fakeAxis,\n                                xData: series.xData.slice(),\n                                chart: chart,\n                                groupPixelWidth: series.groupPixelWidth,\n                                destroyGroupedData: H.noop,\n                                getProcessedData: Series.prototype.getProcessedData,\n                                applyGrouping: Series.prototype.applyGrouping,\n                                reserveSpace: Series.prototype.reserveSpace,\n                                visible: series.visible\n                            };\n                            if (withOverscroll) {\n                                fakeSeries.xData = fakeSeries.xData.concat(ordinal.getOverscrollPositions());\n                            }\n                            fakeSeries.options = {\n                                dataGrouping: grouping ? {\n                                    firstAnchor: series.options.dataGrouping?.firstAnchor,\n                                    anchor: series.options.dataGrouping?.anchor,\n                                    lastAnchor: series.options.dataGrouping?.firstAnchor,\n                                    enabled: true,\n                                    forced: true,\n                                    // Doesn't matter which, use the fastest\n                                    approximation: 'open',\n                                    units: [[\n                                            grouping.unitName,\n                                            [grouping.count]\n                                        ]]\n                                } : {\n                                    enabled: false\n                                }\n                            };\n                            fakeAxis.series.push(fakeSeries);\n                            series.processData.apply(fakeSeries);\n                        });\n                        fakeAxis.applyGrouping({ hasExtremesChanged: true });\n                        // Force to use the ordinal when points are evenly spaced (e.g.\n                        // weeks), #3825.\n                        if ((fakeSeries?.closestPointRange !==\n                            fakeSeries?.basePointRange) &&\n                            fakeSeries.currentDataGrouping) {\n                            fakeAxis.forceOrdinal = true;\n                        }\n                        // Run beforeSetTickPositions to compute the ordinalPositions\n                        axis.ordinal.beforeSetTickPositions.apply({ axis: fakeAxis });\n                        if (!axis.ordinal.originalOrdinalRange &&\n                            fakeAxis.ordinal.originalOrdinalRange) {\n                            axis.ordinal.originalOrdinalRange =\n                                fakeAxis.ordinal.originalOrdinalRange;\n                        }\n                        // Cache it\n                        ordinalIndex[key] = fakeAxis.ordinal.positions;\n                    }\n                    return ordinalIndex[key];\n                }\n                /**\n                 * Find the factor to estimate how wide the plot area would have been if\n                 * ordinal gaps were included. This value is used to compute an imagined\n                 * plot width in order to establish the data grouping interval.\n                 *\n                 * A real world case is the intraday-candlestick example. Without this\n                 * logic, it would show the correct data grouping when viewing a range\n                 * within each day, but once moving the range to include the gap between\n                 * two days, the interval would include the cut-away night hours and the\n                 * data grouping would be wrong. So the below method tries to compensate\n                 * by identifying the most common point interval, in this case days.\n                 *\n                 * An opposite case is presented in issue #718. We have a long array of\n                 * daily data, then one point is appended one hour after the last point.\n                 * We expect the data grouping not to change.\n                 *\n                 * In the future, if we find cases where this estimation doesn't work\n                 * optimally, we might need to add a second pass to the data grouping\n                 * logic, where we do another run with a greater interval if the number\n                 * of data groups is more than a certain fraction of the desired group\n                 * count.\n                 * @private\n                 */\n                getGroupIntervalFactor(xMin, xMax, series) {\n                    const ordinal = this, processedXData = series.processedXData, len = processedXData.length, distances = [];\n                    let median, i, groupIntervalFactor = ordinal.groupIntervalFactor;\n                    // Only do this computation for the first series, let the other\n                    // inherit it (#2416)\n                    if (!groupIntervalFactor) {\n                        // Register all the distances in an array\n                        for (i = 0; i < len - 1; i++) {\n                            distances[i] = (processedXData[i + 1] -\n                                processedXData[i]);\n                        }\n                        // Sort them and find the median\n                        distances.sort(function (a, b) {\n                            return a - b;\n                        });\n                        median = distances[Math.floor(len / 2)];\n                        // Compensate for series that don't extend through the entire\n                        // axis extent. #1675.\n                        xMin = Math.max(xMin, processedXData[0]);\n                        xMax = Math.min(xMax, processedXData[len - 1]);\n                        ordinal.groupIntervalFactor = groupIntervalFactor =\n                            (len * median) / (xMax - xMin);\n                    }\n                    // Return the factor needed for data grouping\n                    return groupIntervalFactor;\n                }\n                /**\n                 * Get index of point inside the ordinal positions array.\n                 *\n                 * @private\n                 * @param {number} val\n                 * The pixel value of a point.\n                 *\n                 * @param {Array<number>} [ordinalArray]\n                 * An array of all points available on the axis for the given data set.\n                 * Either ordinalPositions if the value is inside the plotArea or\n                 * extendedOrdinalPositions if not.\n                 */\n                getIndexOfPoint(val, ordinalArray) {\n                    const ordinal = this, axis = ordinal.axis;\n                    let firstPointVal = 0;\n                    // Check whether the series has at least one point inside the chart\n                    const hasPointsInside = function (series) {\n                        const { min, max } = axis;\n                        if (defined(min) && defined(max)) {\n                            return series.points.some((point) => point.x >= min && point.x <= max);\n                        }\n                        return false;\n                    };\n                    let firstPointX;\n                    // When more series assign to axis, find the smallest one, #15987.\n                    axis.series.forEach((series) => {\n                        const firstPoint = series.points?.[0];\n                        if (defined(firstPoint?.plotX) &&\n                            (firstPoint.plotX < firstPointX ||\n                                !defined(firstPointX)) &&\n                            hasPointsInside(series)) {\n                            firstPointX = firstPoint.plotX;\n                            firstPointVal = firstPoint.x;\n                        }\n                    });\n                    // If undefined, give a default value\n                    firstPointX ?? (firstPointX = axis.minPixelPadding);\n                    // Distance in pixels between two points on the ordinal axis in the\n                    // current zoom.\n                    const ordinalPointPixelInterval = axis.translationSlope * (ordinal.slope ||\n                        axis.closestPointRange ||\n                        ordinal.overscrollPointsRange), \n                    // `toValue` for the first point.\n                    shiftIndex = correctFloat((val - firstPointX) / ordinalPointPixelInterval);\n                    return Additions.findIndexOf(ordinalArray, firstPointVal, true) + shiftIndex;\n                }\n                /**\n                 * Get ticks for an ordinal axis within a range where points don't\n                 * exist. It is required when overscroll is enabled. We can't base on\n                 * points, because we may not have any, so we use approximated\n                 * pointRange and generate these ticks between Axis.dataMax,\n                 * Axis.dataMax + Axis.overscroll evenly spaced. Used in panning and\n                 * navigator scrolling.\n                 * @private\n                 */\n                getOverscrollPositions() {\n                    const ordinal = this, axis = ordinal.axis, extraRange = ordinal.convertOverscroll(axis.options.overscroll), distance = ordinal.overscrollPointsRange, positions = [];\n                    let max = axis.dataMax;\n                    if (defined(distance)) {\n                        // Max + pointRange because we need to scroll to the last\n                        while (max <= axis.dataMax + extraRange) {\n                            max += distance;\n                            positions.push(max);\n                        }\n                    }\n                    return positions;\n                }\n                /**\n                 * Make the tick intervals closer because the ordinal gaps make the\n                 * ticks spread out or cluster.\n                 * @private\n                 */\n                postProcessTickInterval(tickInterval) {\n                    // Problem: https://jsfiddle.net/highcharts/FQm4E/1/. This is a case\n                    // where this algorithm doesn't work optimally. In this case, the\n                    // tick labels are spread out per week, but all the gaps reside\n                    // within weeks. So we have a situation where the labels are courser\n                    // than the ordinal gaps, and thus the tick interval should not be\n                    // altered.\n                    const ordinal = this, axis = ordinal.axis, ordinalSlope = ordinal.slope;\n                    let ret;\n                    if (ordinalSlope) {\n                        if (!axis.options.breaks) {\n                            ret = (tickInterval /\n                                (ordinalSlope / axis.closestPointRange));\n                        }\n                        else {\n                            ret = axis.closestPointRange || tickInterval; // #7275\n                        }\n                    }\n                    else {\n                        ret = tickInterval;\n                    }\n                    return ret;\n                }\n                /**\n                 * If overscroll is pixel or pecentage value, convert it to axis range.\n                 *\n                 * @private\n                 * @param {number | string} overscroll\n                 * Overscroll value in axis range, pixels or percentage value.\n                 * @return {number}\n                 * Overscroll value in axis range.\n                 */\n                convertOverscroll(overscroll = 0) {\n                    const ordinal = this, axis = ordinal.axis, calculateOverscroll = function (overscrollPercentage) {\n                        return pick(ordinal.originalOrdinalRange, defined(axis.dataMax) && defined(axis.dataMin) ?\n                            axis.dataMax - axis.dataMin : 0) * overscrollPercentage;\n                    };\n                    if (isString(overscroll)) {\n                        const overscrollValue = parseInt(overscroll, 10);\n                        if (/%$/.test(overscroll)) {\n                            // If overscroll is percentage\n                            return calculateOverscroll(overscrollValue / 100);\n                        }\n                        if (/px/.test(overscroll)) {\n                            // If overscroll is pixels, it is limited to 90% of the axis\n                            // length to prevent division by zero\n                            const limitedOverscrollValue = Math.min(overscrollValue, axis.len * 0.9), pixelToPercent = limitedOverscrollValue / axis.len;\n                            return calculateOverscroll(pixelToPercent / (1 - pixelToPercent));\n                        }\n                        // If overscroll is a string but not pixels or percentage,\n                        // return 0 as no overscroll\n                        return 0;\n                    }\n                    return overscroll;\n                }\n            }\n            OrdinalAxis.Additions = Additions;\n        })(OrdinalAxis || (OrdinalAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OrdinalAxis;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Declarations\n         *\n         * */\n        /**\n         * Language object. The language object is global and it can't be set\n         * on each chart initialization. Instead, use `Highcharts.setOptions` to\n         * set it before any chart is initialized.\n         *\n         * ```js\n         * Highcharts.setOptions({\n         *     lang: {\n         *         months: [\n         *             'Janvier', 'Février', 'Mars', 'Avril',\n         *             'Mai', 'Juin', 'Juillet', 'Août',\n         *             'Septembre', 'Octobre', 'Novembre', 'Décembre'\n         *         ],\n         *         weekdays: [\n         *             'Dimanche', 'Lundi', 'Mardi', 'Mercredi',\n         *             'Jeudi', 'Vendredi', 'Samedi'\n         *         ]\n         *     }\n         * });\n         * ```\n         *\n         * @optionparent lang\n         */\n        const lang = {\n            /**\n             * The text for the label for the range selector buttons.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorZoom: 'Zoom',\n            /**\n             * The text for the label for the \"from\" input box in the range\n             * selector. Since v9.0, this string is empty as the label is not\n             * rendered by default.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorFrom: '',\n            /**\n             * The text for the label for the \"to\" input box in the range selector.\n             *\n             * @product highstock gantt\n             */\n            rangeSelectorTo: '→'\n        };\n        /**\n         * The range selector is a tool for selecting ranges to display within\n         * the chart. It provides buttons to select preconfigured ranges in\n         * the chart, like 1 day, 1 week, 1 month etc. It also provides input\n         * boxes where min and max dates can be manually input.\n         *\n         * @product      highstock gantt\n         * @optionparent rangeSelector\n         */\n        const rangeSelector = {\n            /**\n             * Whether to enable all buttons from the start. By default buttons are\n             * only enabled if the corresponding time range exists on the X axis,\n             * but enabling all buttons allows for dynamically loading different\n             * time ranges.\n             *\n             * @sample {highstock} stock/rangeselector/allbuttonsenabled-true/\n             *         All buttons enabled\n             *\n             * @since     2.0.3\n             */\n            allButtonsEnabled: false,\n            /**\n             * An array of configuration objects for the buttons.\n             *\n             * Defaults to:\n             * ```js\n             * buttons: [{\n             *     type: 'month',\n             *     count: 1,\n             *     text: '1m',\n             *     title: 'View 1 month'\n             * }, {\n             *     type: 'month',\n             *     count: 3,\n             *     text: '3m',\n             *     title: 'View 3 months'\n             * }, {\n             *     type: 'month',\n             *     count: 6,\n             *     text: '6m',\n             *     title: 'View 6 months'\n             * }, {\n             *     type: 'ytd',\n             *     text: 'YTD',\n             *     title: 'View year to date'\n             * }, {\n             *     type: 'year',\n             *     count: 1,\n             *     text: '1y',\n             *     title: 'View 1 year'\n             * }, {\n             *     type: 'all',\n             *     text: 'All',\n             *     title: 'View all'\n             * }]\n             * ```\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by buttons\n             *\n             * @type      {Array<*>}\n             */\n            buttons: void 0,\n            /**\n             * How many units of the defined type the button should span. If `type`\n             * is \"month\" and `count` is 3, the button spans three months.\n             *\n             * @type      {number}\n             * @default   1\n             * @apioption rangeSelector.buttons.count\n             */\n            /**\n             * Fires when clicking on the rangeSelector button. One parameter,\n             * event, is passed to the function, containing common event\n             * information.\n             *\n             * ```js\n             * click: function(e) {\n             *   console.log(this);\n             * }\n             * ```\n             *\n             * Return false to stop default button's click action.\n             *\n             * @sample {highstock} stock/rangeselector/button-click/\n             *         Click event on the button\n             *\n             * @type      {Highcharts.RangeSelectorClickCallbackFunction}\n             * @apioption rangeSelector.buttons.events.click\n             */\n            /**\n             * Additional range (in milliseconds) added to the end of the calculated\n             * time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMax\n             */\n            /**\n             * Additional range (in milliseconds) added to the start of the\n             * calculated time span.\n             *\n             * @sample {highstock} stock/rangeselector/min-max-offsets/\n             *         Button offsets\n             *\n             * @type      {number}\n             * @default   0\n             * @since     6.0.0\n             * @apioption rangeSelector.buttons.offsetMin\n             */\n            /**\n             * When buttons apply dataGrouping on a series, by default zooming\n             * in/out will deselect buttons and unset dataGrouping. Enable this\n             * option to keep buttons selected when extremes change.\n             *\n             * @sample {highstock} stock/rangeselector/preserve-datagrouping/\n             *         Different preserveDataGrouping settings\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     6.1.2\n             * @apioption rangeSelector.buttons.preserveDataGrouping\n             */\n            /**\n             * A custom data grouping object for each button.\n             *\n             * @see [series.dataGrouping](#plotOptions.series.dataGrouping)\n             *\n             * @sample {highstock} stock/demo/rangeselector-datagrouping/\n             *         Data grouping by range selector buttons\n             *\n             * @type      {*}\n             * @extends   plotOptions.series.dataGrouping\n             * @apioption rangeSelector.buttons.dataGrouping\n             */\n            /**\n             * The text for the button itself.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.text\n             */\n            /**\n             * Explanation for the button, shown as a tooltip on hover, and used by\n             * assistive technology.\n             *\n             * @type      {string}\n             * @apioption rangeSelector.buttons.title\n             */\n            /**\n             * Defined the time span for the button. Can be one of `millisecond`,\n             * `second`, `minute`, `hour`, `day`, `week`, `month`, `year`, `ytd`,\n             * and `all`.\n             *\n             * @type       {Highcharts.RangeSelectorButtonTypeValue}\n             * @apioption  rangeSelector.buttons.type\n             */\n            /**\n             * The space in pixels between the buttons in the range selector.\n             */\n            buttonSpacing: 5,\n            /**\n             * Whether to collapse the range selector buttons into a dropdown when\n             * there is not enough room to show everything in a single row, instead\n             * of dividing the range selector into multiple rows.\n             * Can be one of the following:\n             *  - `always`: Always collapse\n             *  - `responsive`: Only collapse when there is not enough room\n             *  - `never`: Never collapse\n             *\n             * @sample {highstock} stock/rangeselector/dropdown/\n             *         Dropdown option\n             *\n             * @validvalue [\"always\", \"responsive\", \"never\"]\n             * @since 9.0.0\n             */\n            dropdown: 'responsive',\n            /**\n             * Enable or disable the range selector. Default to `true` for stock\n             * charts, using the `stockChart` factory.\n             *\n             * @sample {highstock} stock/rangeselector/enabled/\n             *         Disable the range selector\n             *\n             * @type {boolean|undefined}\n             * @default {highstock} true\n             */\n            enabled: void 0,\n            /**\n             * The vertical alignment of the rangeselector box. Allowed properties\n             * are `top`, `middle`, `bottom`.\n             *\n             * @sample {highstock} stock/rangeselector/vertical-align-middle/\n             *         Middle\n             * @sample {highstock} stock/rangeselector/vertical-align-bottom/\n             *         Bottom\n             *\n             * @type  {Highcharts.VerticalAlignValue}\n             * @since 6.0.0\n             */\n            verticalAlign: 'top',\n            /**\n             * A collection of attributes for the buttons. The object takes SVG\n             * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n             * a collection of CSS properties for the text.\n             *\n             * The object can also be extended with states, so you can set\n             * presentational options for `hover`, `select` or `disabled` button\n             * states.\n             *\n             * CSS styles for the text label.\n             *\n             * In styled mode, the buttons are styled by the\n             * `.highcharts-range-selector-buttons .highcharts-button` rule with its\n             * different states.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.SVGAttributes}\n             */\n            buttonTheme: {\n                /** @ignore */\n                width: 28,\n                /** @ignore */\n                height: 18,\n                /** @ignore */\n                padding: 2,\n                /** @ignore */\n                zIndex: 7 // #484, #852\n            },\n            /**\n             * When the rangeselector is floating, the plot area does not reserve\n             * space for it. This opens for positioning anywhere on the chart.\n             *\n             * @sample {highstock} stock/rangeselector/floating/\n             *         Placing the range selector between the plot area and the\n             *         navigator\n             *\n             * @since 6.0.0\n             */\n            floating: false,\n            /**\n             * The x offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            x: 0,\n            /**\n             * The y offset of the range selector relative to its horizontal\n             * alignment within `chart.spacingLeft` and `chart.spacingRight`.\n             *\n             * @since 6.0.0\n             */\n            y: 0,\n            /**\n             * Deprecated. The height of the range selector. Currently it is\n             * calculated dynamically.\n             *\n             * @deprecated\n             * @type  {number|undefined}\n             * @since 2.1.9\n             */\n            height: void 0, // Reserved space for buttons and input\n            /**\n             * The border color of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.ColorString}\n             * @since     1.3.7\n             */\n            inputBoxBorderColor: 'none',\n            /**\n             * The pixel height of the date input boxes.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @since     1.3.7\n             */\n            inputBoxHeight: 17,\n            /**\n             * The pixel width of the date input boxes. When `undefined`, the width\n             * is fitted to the rendered content.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type   {number|undefined}\n             * @since  1.3.7\n             */\n            inputBoxWidth: void 0,\n            /**\n             * The date format in the input boxes when not selected for editing.\n             * Defaults to `%e %b %Y`.\n             *\n             * This is used to determine which type of input to show,\n             * `datetime-local`, `date` or `time` and falling back to `text` when\n             * the browser does not support the input type or the format contains\n             * milliseconds.\n             *\n             * @sample {highstock} stock/rangeselector/input-type/\n             *         Input types\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputDateFormat: '%e %b %Y',\n            /**\n             * A custom callback function to parse values entered in the input boxes\n             * and return a valid JavaScript time as milliseconds since 1970.\n             * The first argument passed is a value to parse,\n             * second is a boolean indicating use of the UTC time.\n             *\n             * This will only get called for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             * @type      {Highcharts.RangeSelectorParseCallbackFunction}\n             * @since     1.3.3\n             */\n            inputDateParser: void 0,\n            /**\n             * The date format in the input boxes when they are selected for\n             * editing. This must be a format that is recognized by JavaScript\n             * Date.parse.\n             *\n             * This will only be used for inputs of type `text`. Since v8.2.3,\n             * the input type is dynamically determined based on the granularity\n             * of the `inputDateFormat` and the browser support.\n             *\n             * @sample {highstock} stock/rangeselector/input-format/\n             *         Milliseconds in the range selector\n             *\n             */\n            inputEditDateFormat: '%Y-%m-%d',\n            /**\n             * Enable or disable the date input boxes.\n             */\n            inputEnabled: true,\n            /**\n             * Positioning for the input boxes. Allowed properties are `align`,\n             *  `x` and `y`.\n             *\n             * @since 1.2.4\n             */\n            inputPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'right',\n                /**\n                 * X offset of the input row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the input row.\n                 */\n                y: 0\n            },\n            /**\n             * The space in pixels between the labels and the date input boxes in\n             * the range selector.\n             *\n             * @since 9.0.0\n             */\n            inputSpacing: 5,\n            /**\n             * The index of the button to appear pre-selected. If the selected range\n             * exceeds the total data range and the 'all' option is available,\n             * the 'all' option, showing the full range, is automatically selected.\n             *\n             * @type      {number}\n             */\n            selected: void 0,\n            /**\n             * Positioning for the button row.\n             *\n             * @since 1.2.4\n             */\n            buttonPosition: {\n                /**\n                 * The alignment of the input box. Allowed properties are `left`,\n                 * `center`, `right`.\n                 *\n                 * @sample {highstock} stock/rangeselector/input-button-position/\n                 *         Alignment\n                 *\n                 * @type  {Highcharts.AlignValue}\n                 * @since 6.0.0\n                 */\n                align: 'left',\n                /**\n                 * X offset of the button row.\n                 */\n                x: 0,\n                /**\n                 * Y offset of the button row.\n                 */\n                y: 0\n            },\n            /**\n             * CSS for the HTML inputs in the range selector.\n             *\n             * In styled mode, the inputs are styled by the\n             * `.highcharts-range-input text` rule in SVG mode, and\n             * `input.highcharts-range-selector` when active.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type      {Highcharts.CSSObject}\n             * @apioption rangeSelector.inputStyle\n             */\n            inputStyle: {\n                /** @ignore */\n                color: \"#334eff\" /* Palette.highlightColor80 */,\n                /** @ignore */\n                cursor: 'pointer',\n                /** @ignore */\n                fontSize: '0.8em'\n            },\n            /**\n             * CSS styles for the labels - the Zoom, From and To texts.\n             *\n             * In styled mode, the labels are styled by the\n             * `.highcharts-range-label` class.\n             *\n             * @sample {highstock} stock/rangeselector/styling/\n             *         Styling the buttons and inputs\n             *\n             * @type {Highcharts.CSSObject}\n             */\n            labelStyle: {\n                /** @ignore */\n                color: \"#666666\" /* Palette.neutralColor60 */,\n                /** @ignore */\n                fontSize: '0.8em'\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorDefaults = {\n            lang,\n            rangeSelector\n        };\n\n        return RangeSelectorDefaults;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelectorComposition.js', [_modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Stock/RangeSelector/RangeSelectorDefaults.js'], _modules['Core/Utilities.js']], function (D, H, RangeSelectorDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { composed } = H;\n        const { addEvent, defined, extend, isNumber, merge, pick, pushUnique } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const chartDestroyEvents = [];\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let RangeSelectorConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the axis min value based on the range option and the current max. For\n         * stock charts this is extended via the {@link RangeSelector} so that if the\n         * selected range is a multiple of months or years, it is compensated for\n         * various month lengths.\n         *\n         * @private\n         * @function Highcharts.Axis#minFromRange\n         * @return {number|undefined}\n         *         The new minimum value.\n         */\n        function axisMinFromRange() {\n            const rangeOptions = this.range, type = rangeOptions.type, max = this.max, time = this.chart.time, \n            // Get the true range from a start date\n            getTrueRange = function (base, count) {\n                const timeName = type === 'year' ?\n                    'FullYear' : 'Month';\n                const date = new time.Date(base);\n                const basePeriod = time.get(timeName, date);\n                time.set(timeName, date, basePeriod + count);\n                if (basePeriod === time.get(timeName, date)) {\n                    time.set('Date', date, 0); // #6537\n                }\n                return date.getTime() - base;\n            };\n            let min, range;\n            if (isNumber(rangeOptions)) {\n                min = max - rangeOptions;\n                range = rangeOptions;\n            }\n            else if (rangeOptions) {\n                min = max + getTrueRange(max, -(rangeOptions.count || 1));\n                // Let the fixedRange reflect initial settings (#5930)\n                if (this.chart) {\n                    this.chart.setFixedRange(max - min);\n                }\n            }\n            const dataMin = pick(this.dataMin, Number.MIN_VALUE);\n            if (!isNumber(min)) {\n                min = dataMin;\n            }\n            if (min <= dataMin) {\n                min = dataMin;\n                if (typeof range === 'undefined') { // #4501\n                    range = getTrueRange(min, rangeOptions.count);\n                }\n                this.newMax = Math.min(min + range, pick(this.dataMax, Number.MAX_VALUE));\n            }\n            if (!isNumber(max)) {\n                min = void 0;\n            }\n            else if (!isNumber(rangeOptions) &&\n                rangeOptions &&\n                rangeOptions._offsetMin) {\n                min += rangeOptions._offsetMin;\n            }\n            return min;\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass, ChartClass, RangeSelectorClass) {\n            RangeSelectorConstructor = RangeSelectorClass;\n            if (pushUnique(composed, 'RangeSelector')) {\n                const chartProto = ChartClass.prototype;\n                AxisClass.prototype.minFromRange = axisMinFromRange;\n                addEvent(ChartClass, 'afterGetContainer', createRangeSelector);\n                addEvent(ChartClass, 'beforeRender', onChartBeforeRender);\n                addEvent(ChartClass, 'destroy', onChartDestroy);\n                addEvent(ChartClass, 'getMargins', onChartGetMargins);\n                addEvent(ChartClass, 'redraw', redrawRangeSelector);\n                addEvent(ChartClass, 'update', onChartUpdate);\n                chartProto.callbacks.push(redrawRangeSelector);\n                extend(defaultOptions, { rangeSelector: RangeSelectorDefaults.rangeSelector });\n                extend(defaultOptions.lang, RangeSelectorDefaults.lang);\n            }\n        }\n        /**\n         * Initialize rangeselector for stock charts\n         * @private\n         */\n        function createRangeSelector() {\n            if (this.options.rangeSelector &&\n                this.options.rangeSelector.enabled) {\n                this.rangeSelector = new RangeSelectorConstructor(this);\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartBeforeRender() {\n            const chart = this, rangeSelector = chart.rangeSelector;\n            if (rangeSelector) {\n                if (isNumber(rangeSelector.deferredYTDClick)) {\n                    rangeSelector.clickButton(rangeSelector.deferredYTDClick);\n                    delete rangeSelector.deferredYTDClick;\n                }\n                const verticalAlign = rangeSelector.options.verticalAlign;\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n            }\n        }\n        function redrawRangeSelector() {\n            const chart = this;\n            const rangeSelector = this.rangeSelector;\n            if (!rangeSelector) {\n                return;\n            }\n            let alignTo;\n            const extremes = chart.xAxis[0].getExtremes();\n            const legend = chart.legend;\n            const verticalAlign = (rangeSelector &&\n                rangeSelector.options.verticalAlign);\n            if (isNumber(extremes.min)) {\n                rangeSelector.render(extremes.min, extremes.max);\n            }\n            // Re-align the legend so that it's below the rangeselector\n            if (legend.display &&\n                verticalAlign === 'top' &&\n                verticalAlign === legend.options.verticalAlign) {\n                // Create a new alignment box for the legend.\n                alignTo = merge(chart.spacingBox);\n                if (legend.options.layout === 'vertical') {\n                    alignTo.y = chart.plotTop;\n                }\n                else {\n                    alignTo.y += rangeSelector.getHeight();\n                }\n                legend.group.placed = false; // Don't animate the alignment.\n                legend.align(alignTo);\n            }\n        }\n        /**\n         * Remove resize/afterSetExtremes at chart destroy.\n         * @private\n         */\n        function onChartDestroy() {\n            for (let i = 0, iEnd = chartDestroyEvents.length; i < iEnd; ++i) {\n                const events = chartDestroyEvents[i];\n                if (events[0] === this) {\n                    events[1].forEach((unbind) => unbind());\n                    chartDestroyEvents.splice(i, 1);\n                    return;\n                }\n            }\n        }\n        /**\n         *\n         */\n        function onChartGetMargins() {\n            const rangeSelector = this.rangeSelector;\n            if (rangeSelector) {\n                const rangeSelectorHeight = rangeSelector.getHeight();\n                if (this.extraTopMargin) {\n                    this.plotTop += rangeSelectorHeight;\n                }\n                if (this.extraBottomMargin) {\n                    this.marginBottom += rangeSelectorHeight;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartUpdate(e) {\n            const chart = this, options = e.options, optionsRangeSelector = options.rangeSelector, extraBottomMarginWas = this.extraBottomMargin, extraTopMarginWas = this.extraTopMargin;\n            let rangeSelector = chart.rangeSelector;\n            if (optionsRangeSelector &&\n                optionsRangeSelector.enabled &&\n                !defined(rangeSelector) &&\n                this.options.rangeSelector) {\n                this.options.rangeSelector.enabled = true;\n                this.rangeSelector = rangeSelector = new RangeSelectorConstructor(this);\n            }\n            this.extraBottomMargin = false;\n            this.extraTopMargin = false;\n            if (rangeSelector) {\n                const verticalAlign = (optionsRangeSelector &&\n                    optionsRangeSelector.verticalAlign) || (rangeSelector.options && rangeSelector.options.verticalAlign);\n                if (!rangeSelector.options.floating) {\n                    if (verticalAlign === 'bottom') {\n                        this.extraBottomMargin = true;\n                    }\n                    else if (verticalAlign !== 'middle') {\n                        this.extraTopMargin = true;\n                    }\n                }\n                if (this.extraBottomMargin !== extraBottomMarginWas ||\n                    this.extraTopMargin !== extraTopMarginWas) {\n                    this.isDirtyBox = true;\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const RangeSelectorComposition = {\n            compose\n        };\n\n        return RangeSelectorComposition;\n    });\n    _registerModule(_modules, 'Stock/RangeSelector/RangeSelector.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Defaults.js'], _modules['Core/Globals.js'], _modules['Stock/RangeSelector/RangeSelectorComposition.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js'], _modules['Core/Axis/OrdinalAxis.js']], function (Axis, D, H, RangeSelectorComposition, SVGElement, U, OrdinalAxis) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, createElement, css, defined, destroyObjectProperties, discardElement, extend, fireEvent, isNumber, merge, objectEach, pad, pick, pInt, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get the preferred input type based on a date format string.\n         *\n         * @private\n         * @function preferredInputType\n         */\n        function preferredInputType(format) {\n            const ms = format.indexOf('%L') !== -1;\n            if (ms) {\n                return 'text';\n            }\n            const date = ['a', 'A', 'd', 'e', 'w', 'b', 'B', 'm', 'o', 'y', 'Y']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            const time = ['H', 'k', 'I', 'l', 'M', 'S']\n                .some((char) => format.indexOf('%' + char) !== -1);\n            if (date && time) {\n                return 'datetime-local';\n            }\n            if (date) {\n                return 'date';\n            }\n            if (time) {\n                return 'time';\n            }\n            return 'text';\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The range selector.\n         *\n         * @private\n         * @class\n         * @name Highcharts.RangeSelector\n         * @param {Highcharts.Chart} chart\n         */\n        class RangeSelector {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass, ChartClass) {\n                RangeSelectorComposition.compose(AxisClass, ChartClass, RangeSelector);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart) {\n                this.buttonOptions = RangeSelector.prototype.defaultButtons;\n                this.initialButtonGroupWidth = 0;\n                this.init(chart);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * The method to run when one of the buttons in the range selectors is\n             * clicked\n             *\n             * @private\n             * @function Highcharts.RangeSelector#clickButton\n             * @param {number} i\n             *        The index of the button\n             * @param {boolean} [redraw]\n             */\n            clickButton(i, redraw) {\n                const rangeSelector = this, chart = rangeSelector.chart, rangeOptions = rangeSelector.buttonOptions[i], baseAxis = chart.xAxis[0], unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || baseAxis || {}, type = rangeOptions.type, dataGrouping = rangeOptions.dataGrouping;\n                let dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, newMin, newMax = baseAxis && Math.round(Math.min(baseAxis.max, pick(dataMax, baseAxis.max))), // #1568\n                baseXAxisOptions, range = rangeOptions._range, rangeMin, ctx, ytdExtremes, addOffsetMin = true;\n                // Chart has no data, base series is removed\n                if (dataMin === null || dataMax === null) {\n                    return;\n                }\n                rangeSelector.setSelected(i);\n                // Apply dataGrouping associated to button\n                if (dataGrouping) {\n                    this.forcedDataGrouping = true;\n                    Axis.prototype.setDataGrouping.call(baseAxis || { chart: this.chart }, dataGrouping, false);\n                    this.frozenStates = rangeOptions.preserveDataGrouping;\n                }\n                // Apply range\n                if (type === 'month' || type === 'year') {\n                    if (!baseAxis) {\n                        // This is set to the user options and picked up later when the\n                        // axis is instantiated so that we know the min and max.\n                        range = rangeOptions;\n                    }\n                    else {\n                        ctx = {\n                            range: rangeOptions,\n                            max: newMax,\n                            chart: chart,\n                            dataMin: dataMin,\n                            dataMax: dataMax\n                        };\n                        newMin = baseAxis.minFromRange.call(ctx);\n                        if (isNumber(ctx.newMax)) {\n                            newMax = ctx.newMax;\n                        }\n                        // #15799: offsetMin is added in minFromRange so that it works\n                        // with pre-selected buttons as well\n                        addOffsetMin = false;\n                    }\n                    // Fixed times like minutes, hours, days\n                }\n                else if (range) {\n                    newMin = Math.max(newMax - range, dataMin);\n                    newMax = Math.min(newMin + range, dataMax);\n                    addOffsetMin = false;\n                }\n                else if (type === 'ytd') {\n                    // On user clicks on the buttons, or a delayed action running from\n                    // the beforeRender event (below), the baseAxis is defined.\n                    if (baseAxis) {\n                        // When \"ytd\" is the pre-selected button for the initial view,\n                        // its calculation is delayed and rerun in the beforeRender\n                        // event (below). When the series are initialized, but before\n                        // the chart is rendered, we have access to the xData array\n                        // (#942).\n                        if (typeof dataMax === 'undefined' ||\n                            typeof dataMin === 'undefined') {\n                            dataMin = Number.MAX_VALUE;\n                            dataMax = Number.MIN_VALUE;\n                            chart.series.forEach((series) => {\n                                // Reassign it to the last item\n                                const xData = series.xData;\n                                if (xData) {\n                                    dataMin = Math.min(xData[0], dataMin);\n                                    dataMax = Math.max(xData[xData.length - 1], dataMax);\n                                }\n                            });\n                            redraw = false;\n                        }\n                        ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC);\n                        newMin = rangeMin = ytdExtremes.min;\n                        newMax = ytdExtremes.max;\n                        // \"ytd\" is pre-selected. We don't yet have access to processed\n                        // point and extremes data (things like pointStart and pointInterval\n                        // are missing), so we delay the process (#942)\n                    }\n                    else {\n                        rangeSelector.deferredYTDClick = i;\n                        return;\n                    }\n                }\n                else if (type === 'all' && baseAxis) {\n                    // If the navigator exist and the axis range is declared reset that\n                    // range and from now on only use the range set by a user, #14742.\n                    if (chart.navigator && chart.navigator.baseSeries[0]) {\n                        chart.navigator.baseSeries[0].xAxis.options.range = void 0;\n                    }\n                    newMin = dataMin;\n                    newMax = dataMax;\n                }\n                if (addOffsetMin && rangeOptions._offsetMin && defined(newMin)) {\n                    newMin += rangeOptions._offsetMin;\n                }\n                if (rangeOptions._offsetMax && defined(newMax)) {\n                    newMax += rangeOptions._offsetMax;\n                }\n                if (this.dropdown) {\n                    this.dropdown.selectedIndex = i + 1;\n                }\n                // Update the chart\n                if (!baseAxis) {\n                    // Axis not yet instantiated. Temporarily set min and range\n                    // options and axes once defined and remove them on\n                    // chart load (#4317 & #20529).\n                    baseXAxisOptions = splat(chart.options.xAxis)[0];\n                    const axisRangeUpdateEvent = addEvent(chart, 'afterGetAxes', function () {\n                        const xAxis = chart.xAxis[0];\n                        xAxis.range = xAxis.options.range = range;\n                        xAxis.min = xAxis.options.min = rangeMin;\n                    });\n                    addEvent(chart, 'load', function resetMinAndRange() {\n                        const xAxis = chart.xAxis[0];\n                        chart.setFixedRange(rangeOptions._range);\n                        xAxis.options.range = baseXAxisOptions.range;\n                        xAxis.options.min = baseXAxisOptions.min;\n                        axisRangeUpdateEvent(); // Remove event\n                    });\n                }\n                else {\n                    // Existing axis object. Set extremes after render time.\n                    baseAxis.setExtremes(newMin, newMax, pick(redraw, true), void 0, // Auto animation\n                    {\n                        trigger: 'rangeSelectorButton',\n                        rangeSelectorButton: rangeOptions\n                    });\n                    chart.setFixedRange(rangeOptions._range);\n                }\n                fireEvent(this, 'afterBtnClick');\n            }\n            /**\n             * Set the selected option. This method only sets the internal flag, it\n             * doesn't update the buttons or the actual zoomed range.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setSelected\n             * @param {number} [selected]\n             */\n            setSelected(selected) {\n                this.selected = this.options.selected = selected;\n            }\n            /**\n             * Initialize the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#init\n             * @param {Highcharts.Chart} chart\n             */\n            init(chart) {\n                const rangeSelector = this, options = chart.options.rangeSelector, buttonOptions = (options.buttons || rangeSelector.defaultButtons.slice()), selectedOption = options.selected, blurInputs = function () {\n                    const minInput = rangeSelector.minInput, maxInput = rangeSelector.maxInput;\n                    // #3274 in some case blur is not defined\n                    if (minInput && !!minInput.blur) {\n                        fireEvent(minInput, 'blur');\n                    }\n                    if (maxInput && !!maxInput.blur) {\n                        fireEvent(maxInput, 'blur');\n                    }\n                };\n                rangeSelector.chart = chart;\n                rangeSelector.options = options;\n                rangeSelector.buttons = [];\n                rangeSelector.buttonOptions = buttonOptions;\n                this.eventsToUnbind = [];\n                this.eventsToUnbind.push(addEvent(chart.container, 'mousedown', blurInputs));\n                this.eventsToUnbind.push(addEvent(chart, 'resize', blurInputs));\n                // Extend the buttonOptions with actual range\n                buttonOptions.forEach(rangeSelector.computeButtonRange);\n                // Zoomed range based on a pre-selected button index\n                if (typeof selectedOption !== 'undefined' &&\n                    buttonOptions[selectedOption]) {\n                    this.clickButton(selectedOption, false);\n                }\n                this.eventsToUnbind.push(addEvent(chart, 'load', function () {\n                    // If a data grouping is applied to the current button, release it\n                    // when extremes change\n                    if (chart.xAxis && chart.xAxis[0]) {\n                        addEvent(chart.xAxis[0], 'setExtremes', function (e) {\n                            if (isNumber(this.max) &&\n                                isNumber(this.min) &&\n                                this.max - this.min !== chart.fixedRange &&\n                                e.trigger !== 'rangeSelectorButton' &&\n                                e.trigger !== 'updatedData' &&\n                                rangeSelector.forcedDataGrouping &&\n                                !rangeSelector.frozenStates) {\n                                this.setDataGrouping(false, false);\n                            }\n                        });\n                    }\n                }));\n                this.createElements();\n            }\n            /**\n             * Dynamically update the range selector buttons after a new range has been\n             * set\n             *\n             * @private\n             * @function Highcharts.RangeSelector#updateButtonStates\n             */\n            updateButtonStates() {\n                const rangeSelector = this, chart = this.chart, dropdown = this.dropdown, dropdownLabel = this.dropdownLabel, baseAxis = chart.xAxis[0], actualRange = Math.round(baseAxis.max - baseAxis.min), hasNoData = !baseAxis.hasVisibleSeries, day = 24 * 36e5, // A single day in milliseconds\n                unionExtremes = (chart.scroller &&\n                    chart.scroller.getUnionExtremes()) || baseAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, ytdExtremes = rangeSelector.getYTDExtremes(dataMax, dataMin, chart.time.useUTC), ytdMin = ytdExtremes.min, ytdMax = ytdExtremes.max, selected = rangeSelector.selected, allButtonsEnabled = rangeSelector.options.allButtonsEnabled, buttonStates = new Array(rangeSelector.buttonOptions.length)\n                    .fill(0), selectedExists = isNumber(selected), buttons = rangeSelector.buttons;\n                let isSelectedTooGreat = false, selectedIndex = null;\n                rangeSelector.buttonOptions.forEach((rangeOptions, i) => {\n                    const range = rangeOptions._range, type = rangeOptions.type, count = rangeOptions.count || 1, offsetRange = rangeOptions._offsetMax -\n                        rangeOptions._offsetMin, isSelected = i === selected, \n                    // Disable buttons where the range exceeds what is allowed i;\n                    // the current view\n                    isTooGreatRange = range >\n                        dataMax - dataMin, \n                    // Disable buttons where the range is smaller than the minimum\n                    // range\n                    isTooSmallRange = range < baseAxis.minRange;\n                    // Do not select the YTD button if not explicitly told so\n                    let isYTDButNotSelected = false, \n                    // Disable the All button if we're already showing all\n                    isSameRange = range === actualRange;\n                    if (isSelected && isTooGreatRange) {\n                        isSelectedTooGreat = true;\n                    }\n                    if (baseAxis.isOrdinal &&\n                        baseAxis.ordinal?.positions &&\n                        range &&\n                        actualRange < range) {\n                        // Handle ordinal ranges\n                        const positions = baseAxis.ordinal.positions, prevOrdinalPosition = OrdinalAxis.Additions.findIndexOf(positions, baseAxis.min, true), nextOrdinalPosition = Math.min(OrdinalAxis.Additions.findIndexOf(positions, baseAxis.max, true) + 1, positions.length - 1);\n                        if (positions[nextOrdinalPosition] -\n                            positions[prevOrdinalPosition] > range) {\n                            isSameRange = true;\n                        }\n                    }\n                    else if (\n                    // Months and years have variable range so we check the extremes\n                    (type === 'month' || type === 'year') &&\n                        (actualRange + 36e5 >=\n                            { month: 28, year: 365 }[type] * day * count - offsetRange) &&\n                        (actualRange - 36e5 <=\n                            { month: 31, year: 366 }[type] * day * count + offsetRange)) {\n                        isSameRange = true;\n                    }\n                    else if (type === 'ytd') {\n                        isSameRange = (ytdMax - ytdMin + offsetRange) === actualRange;\n                        isYTDButNotSelected = !isSelected;\n                    }\n                    else if (type === 'all') {\n                        isSameRange = (baseAxis.max - baseAxis.min >=\n                            dataMax - dataMin);\n                    }\n                    // The new zoom area happens to match the range for a button - mark\n                    // it selected. This happens when scrolling across an ordinal gap.\n                    // It can be seen in the intraday demos when selecting 1h and scroll\n                    // across the night gap.\n                    const disable = (!allButtonsEnabled &&\n                        !(isSelectedTooGreat && type === 'all') &&\n                        (isTooGreatRange ||\n                            isTooSmallRange ||\n                            hasNoData));\n                    const select = ((isSelectedTooGreat && type === 'all') ||\n                        (isYTDButNotSelected ? false : isSameRange) ||\n                        (isSelected && rangeSelector.frozenStates));\n                    if (disable) {\n                        buttonStates[i] = 3;\n                    }\n                    else if (select) {\n                        if (!selectedExists || i === selected) {\n                            selectedIndex = i;\n                        }\n                    }\n                });\n                if (selectedIndex !== null) {\n                    buttonStates[selectedIndex] = 2;\n                    rangeSelector.setSelected(selectedIndex);\n                }\n                else {\n                    rangeSelector.setSelected();\n                    if (dropdownLabel) {\n                        dropdownLabel.setState(0);\n                        dropdownLabel.attr({\n                            text: (defaultOptions.lang.rangeSelectorZoom || '') + ' ▾'\n                        });\n                    }\n                }\n                for (let i = 0; i < buttonStates.length; i++) {\n                    const state = buttonStates[i];\n                    const button = buttons[i];\n                    if (button.state !== state) {\n                        button.setState(state);\n                        if (dropdown) {\n                            dropdown.options[i + 1].disabled = (state === 3);\n                            if (state === 2) {\n                                if (dropdownLabel) {\n                                    dropdownLabel.setState(2);\n                                    dropdownLabel.attr({\n                                        text: rangeSelector.buttonOptions[i].text + ' ▾'\n                                    });\n                                }\n                                dropdown.selectedIndex = i + 1;\n                            }\n                            const bbox = dropdownLabel.getBBox();\n                            css(dropdown, {\n                                width: `${bbox.width}px`,\n                                height: `${bbox.height}px`\n                            });\n                        }\n                    }\n                }\n            }\n            /**\n             * Compute and cache the range for an individual button\n             *\n             * @private\n             * @function Highcharts.RangeSelector#computeButtonRange\n             * @param {Highcharts.RangeSelectorButtonsOptions} rangeOptions\n             */\n            computeButtonRange(rangeOptions) {\n                const type = rangeOptions.type, count = rangeOptions.count || 1, \n                // These time intervals have a fixed number of milliseconds, as\n                // opposed to month, ytd and year\n                fixedTimes = {\n                    millisecond: 1,\n                    second: 1000,\n                    minute: 60 * 1000,\n                    hour: 3600 * 1000,\n                    day: 24 * 3600 * 1000,\n                    week: 7 * 24 * 3600 * 1000\n                };\n                // Store the range on the button object\n                if (fixedTimes[type]) {\n                    rangeOptions._range = fixedTimes[type] * count;\n                }\n                else if (type === 'month' || type === 'year') {\n                    rangeOptions._range = {\n                        month: 30,\n                        year: 365\n                    }[type] * 24 * 36e5 * count;\n                }\n                rangeOptions._offsetMin = pick(rangeOptions.offsetMin, 0);\n                rangeOptions._offsetMax = pick(rangeOptions.offsetMax, 0);\n                rangeOptions._range +=\n                    rangeOptions._offsetMax - rangeOptions._offsetMin;\n            }\n            /**\n             * Get the unix timestamp of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getInputValue\n             */\n            getInputValue(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                const options = this.chart.options\n                    .rangeSelector;\n                const time = this.chart.time;\n                if (input) {\n                    return ((input.type === 'text' && options.inputDateParser) ||\n                        this.defaultInputDateParser)(input.value, time.useUTC, time);\n                }\n                return 0;\n            }\n            /**\n             * Set the internal and displayed value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputValue\n             */\n            setInputValue(name, inputTime) {\n                const options = this.options, time = this.chart.time, input = name === 'min' ? this.minInput : this.maxInput, dateBox = name === 'min' ? this.minDateBox : this.maxDateBox;\n                if (input) {\n                    const hcTimeAttr = input.getAttribute('data-hc-time');\n                    let updatedTime = defined(hcTimeAttr) ? Number(hcTimeAttr) : void 0;\n                    if (defined(inputTime)) {\n                        const previousTime = updatedTime;\n                        if (defined(previousTime)) {\n                            input.setAttribute('data-hc-time-previous', previousTime);\n                        }\n                        input.setAttribute('data-hc-time', inputTime);\n                        updatedTime = inputTime;\n                    }\n                    input.value = time.dateFormat((this.inputTypeFormats[input.type] ||\n                        options.inputEditDateFormat), updatedTime);\n                    if (dateBox) {\n                        dateBox.attr({\n                            text: time.dateFormat(options.inputDateFormat, updatedTime)\n                        });\n                    }\n                }\n            }\n            /**\n             * Set the min and max value of a HTML input for the dates\n             *\n             * @private\n             * @function Highcharts.RangeSelector#setInputExtremes\n             */\n            setInputExtremes(name, min, max) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    const format = this.inputTypeFormats[input.type];\n                    const time = this.chart.time;\n                    if (format) {\n                        const newMin = time.dateFormat(format, min);\n                        if (input.min !== newMin) {\n                            input.min = newMin;\n                        }\n                        const newMax = time.dateFormat(format, max);\n                        if (input.max !== newMax) {\n                            input.max = newMax;\n                        }\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#showInput\n             * @param {string} name\n             */\n            showInput(name) {\n                const dateBox = name === 'min' ? this.minDateBox : this.maxDateBox, input = name === 'min' ? this.minInput : this.maxInput;\n                if (input && dateBox && this.inputGroup) {\n                    const isTextInput = input.type === 'text', { translateX = 0, translateY = 0 } = this.inputGroup, { x = 0, width = 0, height = 0 } = dateBox, { inputBoxWidth } = this.options;\n                    css(input, {\n                        width: isTextInput ?\n                            ((width + (inputBoxWidth ? -2 : 20)) + 'px') :\n                            'auto',\n                        height: (height - 2) + 'px',\n                        border: '2px solid silver'\n                    });\n                    if (isTextInput && inputBoxWidth) {\n                        css(input, {\n                            left: (translateX + x) + 'px',\n                            top: translateY + 'px'\n                        });\n                        // Inputs of types date, time or datetime-local should be centered\n                        // on top of the dateBox\n                    }\n                    else {\n                        css(input, {\n                            left: Math.min(Math.round(x +\n                                translateX -\n                                (input.offsetWidth - width) / 2), this.chart.chartWidth - input.offsetWidth) + 'px',\n                            top: (translateY - (input.offsetHeight - height) / 2) + 'px'\n                        });\n                    }\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideInput\n             * @param {string} name\n             */\n            hideInput(name) {\n                const input = name === 'min' ? this.minInput : this.maxInput;\n                if (input) {\n                    css(input, {\n                        top: '-9999em',\n                        border: 0,\n                        width: '1px',\n                        height: '1px'\n                    });\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#defaultInputDateParser\n             */\n            defaultInputDateParser(inputDate, useUTC, time) {\n                const hasTimezone = (str) => str.length > 6 &&\n                    (str.lastIndexOf('-') === str.length - 6 ||\n                        str.lastIndexOf('+') === str.length - 6);\n                let input = inputDate.split('/').join('-').split(' ').join('T');\n                if (input.indexOf('T') === -1) {\n                    input += 'T00:00';\n                }\n                if (useUTC) {\n                    input += 'Z';\n                }\n                else if (H.isSafari && !hasTimezone(input)) {\n                    const offset = new Date(input).getTimezoneOffset() / 60;\n                    input += offset <= 0 ? `+${pad(-offset)}:00` : `-${pad(offset)}:00`;\n                }\n                let date = Date.parse(input);\n                // If the value isn't parsed directly to a value by the\n                // browser's Date.parse method, try\n                // parsing it a different way\n                if (!isNumber(date)) {\n                    const parts = inputDate.split('-');\n                    date = Date.UTC(pInt(parts[0]), pInt(parts[1]) - 1, pInt(parts[2]));\n                }\n                if (time && useUTC && isNumber(date)) {\n                    date += time.getTimezoneOffset(date);\n                }\n                return date;\n            }\n            /**\n             * Draw either the 'from' or the 'to' HTML input box of the range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#drawInput\n             */\n            drawInput(name) {\n                const { chart, div, inputGroup } = this;\n                const rangeSelector = this, chartStyle = chart.renderer.style || {}, renderer = chart.renderer, options = chart.options.rangeSelector, lang = defaultOptions.lang, isMin = name === 'min';\n                /**\n                 * @private\n                 */\n                function updateExtremes(name) {\n                    const { maxInput, minInput } = rangeSelector, chartAxis = chart.xAxis[0], unionExtremes = chart.scroller?.getUnionExtremes() || chartAxis, dataMin = unionExtremes.dataMin, dataMax = unionExtremes.dataMax, currentExtreme = chart.xAxis[0].getExtremes()[name];\n                    let value = rangeSelector.getInputValue(name);\n                    if (isNumber(value) && value !== currentExtreme) {\n                        // Validate the extremes. If it goes beyond the data min or\n                        // max, use the actual data extreme (#2438).\n                        if (isMin && maxInput && isNumber(dataMin)) {\n                            if (value > Number(maxInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value < dataMin) {\n                                value = dataMin;\n                            }\n                        }\n                        else if (minInput && isNumber(dataMax)) {\n                            if (value < Number(minInput.getAttribute('data-hc-time'))) {\n                                value = void 0;\n                            }\n                            else if (value > dataMax) {\n                                value = dataMax;\n                            }\n                        }\n                        // Set the extremes\n                        if (typeof value !== 'undefined') { // @todo typeof undefined\n                            chartAxis.setExtremes(isMin ? value : chartAxis.min, isMin ? chartAxis.max : value, void 0, void 0, { trigger: 'rangeSelectorInput' });\n                        }\n                    }\n                }\n                // Create the text label\n                const text = lang[isMin ? 'rangeSelectorFrom' : 'rangeSelectorTo'] || '';\n                const label = renderer\n                    .label(text, 0)\n                    .addClass('highcharts-range-label')\n                    .attr({\n                    padding: text ? 2 : 0,\n                    height: text ? options.inputBoxHeight : 0\n                })\n                    .add(inputGroup);\n                // Create an SVG label that shows updated date ranges and records click\n                // events that bring in the HTML input.\n                const dateBox = renderer\n                    .label('', 0)\n                    .addClass('highcharts-range-input')\n                    .attr({\n                    padding: 2,\n                    width: options.inputBoxWidth,\n                    height: options.inputBoxHeight,\n                    'text-align': 'center'\n                })\n                    .on('click', function () {\n                    // If it is already focused, the onfocus event doesn't fire\n                    // (#3713)\n                    rangeSelector.showInput(name);\n                    rangeSelector[name + 'Input'].focus();\n                });\n                if (!chart.styledMode) {\n                    dateBox.attr({\n                        stroke: options.inputBoxBorderColor,\n                        'stroke-width': 1\n                    });\n                }\n                dateBox.add(inputGroup);\n                // Create the HTML input element. This is rendered as 1x1 pixel then set\n                // to the right size when focused.\n                const input = createElement('input', {\n                    name: name,\n                    className: 'highcharts-range-selector'\n                }, void 0, div);\n                // #14788: Setting input.type to an unsupported type throws in IE, so\n                // we need to use setAttribute instead\n                input.setAttribute('type', preferredInputType(options.inputDateFormat || '%e %b %Y'));\n                if (!chart.styledMode) {\n                    // Styles\n                    label.css(merge(chartStyle, options.labelStyle));\n                    dateBox.css(merge({\n                        color: \"#333333\" /* Palette.neutralColor80 */\n                    }, chartStyle, options.inputStyle));\n                    css(input, extend({\n                        position: 'absolute',\n                        border: 0,\n                        boxShadow: '0 0 15px rgba(0,0,0,0.3)',\n                        width: '1px', // Chrome needs a pixel to see it\n                        height: '1px',\n                        padding: 0,\n                        textAlign: 'center',\n                        fontSize: chartStyle.fontSize,\n                        fontFamily: chartStyle.fontFamily,\n                        top: '-9999em' // #4798\n                    }, options.inputStyle));\n                }\n                // Blow up the input box\n                input.onfocus = () => {\n                    rangeSelector.showInput(name);\n                };\n                // Hide away the input box\n                input.onblur = () => {\n                    // Update extremes only when inputs are active\n                    if (input === H.doc.activeElement) { // Only when focused\n                        // Update also when no `change` event is triggered, like when\n                        // clicking inside the SVG (#4710)\n                        updateExtremes(name);\n                    }\n                    // #10404 - move hide and blur outside focus\n                    rangeSelector.hideInput(name);\n                    rangeSelector.setInputValue(name);\n                    input.blur(); // #4606\n                };\n                let keyDown = false;\n                // Handle changes in the input boxes\n                input.onchange = () => {\n                    // Update extremes and blur input when clicking date input calendar\n                    if (!keyDown) {\n                        updateExtremes(name);\n                        rangeSelector.hideInput(name);\n                        input.blur();\n                    }\n                };\n                input.onkeypress = (event) => {\n                    // IE does not fire onchange on enter\n                    if (event.keyCode === 13) {\n                        updateExtremes(name);\n                    }\n                };\n                input.onkeydown = (event) => {\n                    keyDown = true;\n                    // Arrow keys\n                    if (event.key === 'ArrowUp' ||\n                        event.key === 'ArrowDown' ||\n                        event.key === 'Tab') {\n                        updateExtremes(name);\n                    }\n                };\n                input.onkeyup = () => {\n                    keyDown = false;\n                };\n                return { dateBox, input, label };\n            }\n            /**\n             * Get the position of the range selector buttons and inputs. This can be\n             * overridden from outside for custom positioning.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getPosition\n             */\n            getPosition() {\n                const chart = this.chart, options = chart.options.rangeSelector, top = options.verticalAlign === 'top' ?\n                    chart.plotTop - chart.axisOffset[0] :\n                    0; // Set offset only for verticalAlign top\n                return {\n                    buttonTop: top + options.buttonPosition.y,\n                    inputTop: top + options.inputPosition.y - 10\n                };\n            }\n            /**\n             * Get the extremes of YTD. Will choose dataMax if its value is lower than\n             * the current timestamp. Will choose dataMin if its value is higher than\n             * the timestamp for the start of current year.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getYTDExtremes\n             * @return {*}\n             * Returns min and max for the YTD\n             */\n            getYTDExtremes(dataMax, dataMin, useUTC) {\n                const time = this.chart.time, now = new time.Date(dataMax), year = time.get('FullYear', now), startOfYear = useUTC ?\n                    time.Date.UTC(year, 0, 1) : // eslint-disable-line new-cap\n                    +new time.Date(year, 0, 1), min = Math.max(dataMin, startOfYear), ts = now.getTime();\n                return {\n                    max: Math.min(dataMax || ts, ts),\n                    min\n                };\n            }\n            createElements() {\n                const chart = this.chart, renderer = chart.renderer, container = chart.container, chartOptions = chart.options, options = chartOptions.rangeSelector, inputEnabled = options.inputEnabled, inputsZIndex = pick(chartOptions.chart.style?.zIndex, 0) + 1;\n                if (options.enabled === false) {\n                    return;\n                }\n                this.group = renderer.g('range-selector-group')\n                    .attr({\n                    zIndex: 7\n                })\n                    .add();\n                this.div = createElement('div', void 0, {\n                    position: 'relative',\n                    height: 0,\n                    zIndex: inputsZIndex\n                });\n                if (this.buttonOptions.length) {\n                    this.renderButtons();\n                }\n                // First create a wrapper outside the container in order to make\n                // the inputs work and make export correct\n                if (container.parentNode) {\n                    container.parentNode.insertBefore(this.div, container);\n                }\n                if (inputEnabled) {\n                    // Create the group to keep the inputs\n                    this.inputGroup = renderer.g('input-group').add(this.group);\n                    const minElems = this.drawInput('min');\n                    this.minDateBox = minElems.dateBox;\n                    this.minLabel = minElems.label;\n                    this.minInput = minElems.input;\n                    const maxElems = this.drawInput('max');\n                    this.maxDateBox = maxElems.dateBox;\n                    this.maxLabel = maxElems.label;\n                    this.maxInput = maxElems.input;\n                }\n            }\n            /**\n             * Render the range selector including the buttons and the inputs. The first\n             * time render is called, the elements are created and positioned. On\n             * subsequent calls, they are moved and updated.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#render\n             * @param {number} [min]\n             *        X axis minimum\n             * @param {number} [max]\n             *        X axis maximum\n             */\n            render(min, max) {\n                const chart = this.chart, chartOptions = chart.options, options = chartOptions.rangeSelector, \n                // Place inputs above the container\n                inputEnabled = options.inputEnabled;\n                if (options.enabled === false) {\n                    return;\n                }\n                if (inputEnabled) {\n                    // Set or reset the input values\n                    this.setInputValue('min', min);\n                    this.setInputValue('max', max);\n                    const unionExtremes = (chart.scroller && chart.scroller.getUnionExtremes()) || chart.xAxis[0] || {};\n                    if (defined(unionExtremes.dataMin) &&\n                        defined(unionExtremes.dataMax)) {\n                        const minRange = chart.xAxis[0].minRange || 0;\n                        this.setInputExtremes('min', unionExtremes.dataMin, Math.min(unionExtremes.dataMax, this.getInputValue('max')) - minRange);\n                        this.setInputExtremes('max', Math.max(unionExtremes.dataMin, this.getInputValue('min')) + minRange, unionExtremes.dataMax);\n                    }\n                    // Reflow\n                    if (this.inputGroup) {\n                        let x = 0;\n                        [\n                            this.minLabel,\n                            this.minDateBox,\n                            this.maxLabel,\n                            this.maxDateBox\n                        ].forEach((label) => {\n                            if (label) {\n                                const { width } = label.getBBox();\n                                if (width) {\n                                    label.attr({ x });\n                                    x += width + options.inputSpacing;\n                                }\n                            }\n                        });\n                    }\n                }\n                this.alignElements();\n                this.updateButtonStates();\n            }\n            /**\n             * Render the range buttons. This only runs the first time, later the\n             * positioning is laid out in alignElements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#renderButtons\n             */\n            renderButtons() {\n                const { buttons, chart, options } = this;\n                const lang = defaultOptions.lang;\n                const renderer = chart.renderer;\n                const buttonTheme = merge(options.buttonTheme);\n                const states = buttonTheme && buttonTheme.states;\n                // Prevent the button from resetting the width when the button state\n                // changes since we need more control over the width when collapsing\n                // the buttons\n                const width = buttonTheme.width || 28;\n                delete buttonTheme.width;\n                delete buttonTheme.states;\n                this.buttonGroup = renderer.g('range-selector-buttons').add(this.group);\n                const dropdown = this.dropdown = createElement('select', void 0, {\n                    position: 'absolute',\n                    padding: 0,\n                    border: 0,\n                    cursor: 'pointer',\n                    opacity: 0.0001\n                }, this.div);\n                // Create a label for dropdown select element\n                const userButtonTheme = chart.userOptions.rangeSelector?.buttonTheme;\n                this.dropdownLabel = renderer.button('', 0, 0, () => { }, merge(buttonTheme, {\n                    'stroke-width': pick(buttonTheme['stroke-width'], 0),\n                    width: 'auto',\n                    paddingLeft: pick(options.buttonTheme.paddingLeft, userButtonTheme?.padding, 8),\n                    paddingRight: pick(options.buttonTheme.paddingRight, userButtonTheme?.padding, 8)\n                }), states && states.hover, states && states.select, states && states.disabled)\n                    .hide()\n                    .add(this.group);\n                // Prevent page zoom on iPhone\n                addEvent(dropdown, 'touchstart', () => {\n                    dropdown.style.fontSize = '16px';\n                });\n                // Forward events from select to button\n                const mouseOver = H.isMS ? 'mouseover' : 'mouseenter', mouseOut = H.isMS ? 'mouseout' : 'mouseleave';\n                addEvent(dropdown, mouseOver, () => {\n                    fireEvent(this.dropdownLabel.element, mouseOver);\n                });\n                addEvent(dropdown, mouseOut, () => {\n                    fireEvent(this.dropdownLabel.element, mouseOut);\n                });\n                addEvent(dropdown, 'change', () => {\n                    const button = this.buttons[dropdown.selectedIndex - 1];\n                    fireEvent(button.element, 'click');\n                });\n                this.zoomText = renderer\n                    .label(lang.rangeSelectorZoom || '', 0)\n                    .attr({\n                    padding: options.buttonTheme.padding,\n                    height: options.buttonTheme.height,\n                    paddingLeft: 0,\n                    paddingRight: 0\n                })\n                    .add(this.buttonGroup);\n                if (!this.chart.styledMode) {\n                    this.zoomText.css(options.labelStyle);\n                    buttonTheme['stroke-width'] = pick(buttonTheme['stroke-width'], 0);\n                }\n                createElement('option', {\n                    textContent: this.zoomText.textStr,\n                    disabled: true\n                }, void 0, dropdown);\n                this.buttonOptions.forEach((rangeOptions, i) => {\n                    createElement('option', {\n                        textContent: rangeOptions.title || rangeOptions.text\n                    }, void 0, dropdown);\n                    buttons[i] = renderer\n                        .button(rangeOptions.text, 0, 0, (e) => {\n                        // Extract events from button object and call\n                        const buttonEvents = (rangeOptions.events && rangeOptions.events.click);\n                        let callDefaultEvent;\n                        if (buttonEvents) {\n                            callDefaultEvent =\n                                buttonEvents.call(rangeOptions, e);\n                        }\n                        if (callDefaultEvent !== false) {\n                            this.clickButton(i);\n                        }\n                        this.isActive = true;\n                    }, buttonTheme, states && states.hover, states && states.select, states && states.disabled)\n                        .attr({\n                        'text-align': 'center',\n                        width\n                    })\n                        .add(this.buttonGroup);\n                    if (rangeOptions.title) {\n                        buttons[i].attr('title', rangeOptions.title);\n                    }\n                });\n            }\n            /**\n             * Align the elements horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignElements\n             */\n            alignElements() {\n                const { buttonGroup, buttons, chart, group, inputGroup, options, zoomText } = this;\n                const chartOptions = chart.options;\n                const navButtonOptions = (chartOptions.exporting &&\n                    chartOptions.exporting.enabled !== false &&\n                    chartOptions.navigation &&\n                    chartOptions.navigation.buttonOptions);\n                const { buttonPosition, inputPosition, verticalAlign } = options;\n                // Get the X offset required to avoid overlapping with the exporting\n                // button. This is used both by the buttonGroup and the inputGroup.\n                const getXOffsetForExportButton = (group, position) => {\n                    if (navButtonOptions &&\n                        this.titleCollision(chart) &&\n                        verticalAlign === 'top' &&\n                        position.align === 'right' && ((position.y -\n                        group.getBBox().height - 12) <\n                        ((navButtonOptions.y || 0) +\n                            (navButtonOptions.height || 0) +\n                            chart.spacing[0]))) {\n                        return -40;\n                    }\n                    return 0;\n                };\n                let plotLeft = chart.plotLeft;\n                if (group && buttonPosition && inputPosition) {\n                    let translateX = buttonPosition.x - chart.spacing[3];\n                    if (buttonGroup) {\n                        this.positionButtons();\n                        if (!this.initialButtonGroupWidth) {\n                            let width = 0;\n                            if (zoomText) {\n                                width += zoomText.getBBox().width + 5;\n                            }\n                            buttons.forEach((button, i) => {\n                                width += button.width || 0;\n                                if (i !== buttons.length - 1) {\n                                    width += options.buttonSpacing;\n                                }\n                            });\n                            this.initialButtonGroupWidth = width;\n                        }\n                        plotLeft -= chart.spacing[3];\n                        // Detect collision between button group and exporting\n                        const xOffsetForExportButton = getXOffsetForExportButton(buttonGroup, buttonPosition);\n                        this.alignButtonGroup(xOffsetForExportButton);\n                        if (this.buttonGroup?.translateY) {\n                            this.dropdownLabel\n                                .attr({ y: this.buttonGroup.translateY });\n                        }\n                        // Skip animation\n                        group.placed = buttonGroup.placed = chart.hasLoaded;\n                    }\n                    let xOffsetForExportButton = 0;\n                    if (inputGroup) {\n                        // Detect collision between the input group and exporting button\n                        xOffsetForExportButton = getXOffsetForExportButton(inputGroup, inputPosition);\n                        if (inputPosition.align === 'left') {\n                            translateX = plotLeft;\n                        }\n                        else if (inputPosition.align === 'right') {\n                            translateX = -Math.max(chart.axisOffset[1], -xOffsetForExportButton);\n                        }\n                        // Update the alignment to the updated spacing box\n                        inputGroup.align({\n                            y: inputPosition.y,\n                            width: inputGroup.getBBox().width,\n                            align: inputPosition.align,\n                            // Fix wrong getBBox() value on right align\n                            x: inputPosition.x + translateX - 2\n                        }, true, chart.spacingBox);\n                        // Skip animation\n                        inputGroup.placed = chart.hasLoaded;\n                    }\n                    this.handleCollision(xOffsetForExportButton);\n                    // Vertical align\n                    group.align({\n                        verticalAlign\n                    }, true, chart.spacingBox);\n                    const alignTranslateY = group.alignAttr.translateY;\n                    // Set position\n                    let groupHeight = group.getBBox().height + 20; // # 20 padding\n                    let translateY = 0;\n                    // Calculate bottom position\n                    if (verticalAlign === 'bottom') {\n                        const legendOptions = chart.legend && chart.legend.options;\n                        const legendHeight = (legendOptions &&\n                            legendOptions.verticalAlign === 'bottom' &&\n                            legendOptions.enabled &&\n                            !legendOptions.floating ?\n                            (chart.legend.legendHeight +\n                                pick(legendOptions.margin, 10)) :\n                            0);\n                        groupHeight = groupHeight + legendHeight - 20;\n                        translateY = (alignTranslateY -\n                            groupHeight -\n                            (options.floating ? 0 : options.y) -\n                            (chart.titleOffset ? chart.titleOffset[2] : 0) -\n                            10 // 10 spacing\n                        );\n                    }\n                    if (verticalAlign === 'top') {\n                        if (options.floating) {\n                            translateY = 0;\n                        }\n                        if (chart.titleOffset && chart.titleOffset[0]) {\n                            translateY = chart.titleOffset[0];\n                        }\n                        translateY += ((chart.margin[0] - chart.spacing[0]) || 0);\n                    }\n                    else if (verticalAlign === 'middle') {\n                        if (inputPosition.y === buttonPosition.y) {\n                            translateY = alignTranslateY;\n                        }\n                        else if (inputPosition.y || buttonPosition.y) {\n                            if (inputPosition.y < 0 ||\n                                buttonPosition.y < 0) {\n                                translateY -= Math.min(inputPosition.y, buttonPosition.y);\n                            }\n                            else {\n                                translateY = alignTranslateY - groupHeight;\n                            }\n                        }\n                    }\n                    group.translate(options.x, options.y + Math.floor(translateY));\n                    // Translate HTML inputs\n                    const { minInput, maxInput, dropdown } = this;\n                    if (options.inputEnabled && minInput && maxInput) {\n                        minInput.style.marginTop = group.translateY + 'px';\n                        maxInput.style.marginTop = group.translateY + 'px';\n                    }\n                    if (dropdown) {\n                        dropdown.style.marginTop = group.translateY + 'px';\n                    }\n                }\n            }\n            /**\n             * Align the button group horizontally and vertically.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#alignButtonGroup\n             * @param {number} xOffsetForExportButton\n             * @param {number} [width]\n             */\n            alignButtonGroup(xOffsetForExportButton, width) {\n                const { chart, options, buttonGroup } = this;\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft - chart.spacing[3];\n                let translateX = buttonPosition.x - chart.spacing[3];\n                if (buttonPosition.align === 'right') {\n                    translateX += xOffsetForExportButton - plotLeft; // #13014\n                }\n                else if (buttonPosition.align === 'center') {\n                    translateX -= plotLeft / 2;\n                }\n                if (buttonGroup) {\n                    // Align button group\n                    buttonGroup.align({\n                        y: buttonPosition.y,\n                        width: pick(width, this.initialButtonGroupWidth),\n                        align: buttonPosition.align,\n                        x: translateX\n                    }, true, chart.spacingBox);\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#positionButtons\n             */\n            positionButtons() {\n                const { buttons, chart, options, zoomText } = this;\n                const verb = chart.hasLoaded ? 'animate' : 'attr';\n                const { buttonPosition } = options;\n                const plotLeft = chart.plotLeft;\n                let buttonLeft = plotLeft;\n                if (zoomText && zoomText.visibility !== 'hidden') {\n                    // #8769, allow dynamically updating margins\n                    zoomText[verb]({\n                        x: pick(plotLeft + buttonPosition.x, plotLeft)\n                    });\n                    // Button start position\n                    buttonLeft += buttonPosition.x +\n                        zoomText.getBBox().width + 5;\n                }\n                for (let i = 0, iEnd = this.buttonOptions.length; i < iEnd; ++i) {\n                    if (buttons[i].visibility !== 'hidden') {\n                        buttons[i][verb]({ x: buttonLeft });\n                        // Increase the button position for the next button\n                        buttonLeft += (buttons[i].width || 0) + options.buttonSpacing;\n                    }\n                    else {\n                        buttons[i][verb]({ x: plotLeft });\n                    }\n                }\n            }\n            /**\n             * Handle collision between the button group and the input group\n             *\n             * @private\n             * @function Highcharts.RangeSelector#handleCollision\n             *\n             * @param  {number} xOffsetForExportButton\n             *                  The X offset of the group required to make room for the\n             *                  exporting button\n             */\n            handleCollision(xOffsetForExportButton) {\n                const { chart, buttonGroup, inputGroup } = this;\n                const { buttonPosition, dropdown, inputPosition } = this.options;\n                const maxButtonWidth = () => {\n                    let buttonWidth = 0;\n                    this.buttons.forEach((button) => {\n                        const bBox = button.getBBox();\n                        if (bBox.width > buttonWidth) {\n                            buttonWidth = bBox.width;\n                        }\n                    });\n                    return buttonWidth;\n                };\n                const groupsOverlap = (buttonGroupWidth) => {\n                    if (inputGroup?.alignOptions && buttonGroup) {\n                        const inputGroupX = (inputGroup.alignAttr.translateX +\n                            inputGroup.alignOptions.x -\n                            xOffsetForExportButton +\n                            // `getBBox` for detecing left margin\n                            inputGroup.getBBox().x +\n                            // 2px padding to not overlap input and label\n                            2);\n                        const inputGroupWidth = inputGroup.alignOptions.width || 0;\n                        const buttonGroupX = buttonGroup.alignAttr.translateX +\n                            buttonGroup.getBBox().x;\n                        return (buttonGroupX + buttonGroupWidth > inputGroupX) &&\n                            (inputGroupX + inputGroupWidth > buttonGroupX) &&\n                            (buttonPosition.y <\n                                (inputPosition.y +\n                                    inputGroup.getBBox().height));\n                    }\n                    return false;\n                };\n                const moveInputsDown = () => {\n                    if (inputGroup && buttonGroup) {\n                        inputGroup.attr({\n                            translateX: inputGroup.alignAttr.translateX + (chart.axisOffset[1] >= -xOffsetForExportButton ?\n                                0 :\n                                -xOffsetForExportButton),\n                            translateY: inputGroup.alignAttr.translateY +\n                                buttonGroup.getBBox().height + 10\n                        });\n                    }\n                };\n                if (buttonGroup) {\n                    if (dropdown === 'always') {\n                        this.collapseButtons();\n                        if (groupsOverlap(maxButtonWidth())) {\n                            // Move the inputs down if there is still a collision\n                            // after collapsing the buttons\n                            moveInputsDown();\n                        }\n                        return;\n                    }\n                    if (dropdown === 'never') {\n                        this.expandButtons();\n                    }\n                }\n                // Detect collision\n                if (inputGroup && buttonGroup) {\n                    if ((inputPosition.align === buttonPosition.align) ||\n                        // 20 is minimal spacing between elements\n                        groupsOverlap(this.initialButtonGroupWidth + 20)) {\n                        if (dropdown === 'responsive') {\n                            this.collapseButtons();\n                            if (groupsOverlap(maxButtonWidth())) {\n                                moveInputsDown();\n                            }\n                        }\n                        else {\n                            moveInputsDown();\n                        }\n                    }\n                    else if (dropdown === 'responsive') {\n                        this.expandButtons();\n                    }\n                }\n                else if (buttonGroup && dropdown === 'responsive') {\n                    if (this.initialButtonGroupWidth > chart.plotWidth) {\n                        this.collapseButtons();\n                    }\n                    else {\n                        this.expandButtons();\n                    }\n                }\n            }\n            /**\n             * Collapse the buttons and show the select element.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#collapseButtons\n             * @param {number} xOffsetForExportButton\n             */\n            collapseButtons() {\n                const { buttons, zoomText } = this;\n                if (this.isCollapsed === true) {\n                    return;\n                }\n                this.isCollapsed = true;\n                zoomText.hide();\n                buttons.forEach((button) => void button.hide());\n                this.showDropdown();\n            }\n            /**\n             * Show all the buttons and hide the select element.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#expandButtons\n             */\n            expandButtons() {\n                const { buttons, zoomText } = this;\n                if (this.isCollapsed === false) {\n                    return;\n                }\n                this.isCollapsed = false;\n                this.hideDropdown();\n                zoomText.show();\n                buttons.forEach((button) => void button.show());\n                this.positionButtons();\n            }\n            /**\n             * Position the select element on top of the button.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#showDropdown\n             */\n            showDropdown() {\n                const { buttonGroup, chart, dropdownLabel, dropdown } = this;\n                if (buttonGroup && dropdown) {\n                    const { translateX = 0, translateY = 0 } = buttonGroup, left = chart.plotLeft + translateX, top = translateY;\n                    dropdownLabel\n                        .attr({ x: left, y: top })\n                        .show();\n                    css(dropdown, {\n                        left: left + 'px',\n                        top: top + 'px',\n                        visibility: 'inherit'\n                    });\n                    this.hasVisibleDropdown = true;\n                }\n            }\n            /**\n             * @private\n             * @function Highcharts.RangeSelector#hideDropdown\n             */\n            hideDropdown() {\n                const { dropdown } = this;\n                if (dropdown) {\n                    this.dropdownLabel.hide();\n                    css(dropdown, {\n                        visibility: 'hidden',\n                        width: '1px',\n                        height: '1px'\n                    });\n                    this.hasVisibleDropdown = false;\n                }\n            }\n            /**\n             * Extracts height of range selector\n             *\n             * @private\n             * @function Highcharts.RangeSelector#getHeight\n             * @return {number}\n             * Returns rangeSelector height\n             */\n            getHeight() {\n                const rangeSelector = this, options = rangeSelector.options, rangeSelectorGroup = rangeSelector.group, inputPosition = options.inputPosition, buttonPosition = options.buttonPosition, yPosition = options.y, buttonPositionY = buttonPosition.y, inputPositionY = inputPosition.y;\n                let rangeSelectorHeight = 0;\n                if (options.height) {\n                    return options.height;\n                }\n                // Align the elements before we read the height in case we're switching\n                // between wrapped and non-wrapped layout\n                this.alignElements();\n                rangeSelectorHeight = rangeSelectorGroup ?\n                    // 13px to keep back compatibility\n                    (rangeSelectorGroup.getBBox(true).height) + 13 +\n                        yPosition :\n                    0;\n                const minPosition = Math.min(inputPositionY, buttonPositionY);\n                if ((inputPositionY < 0 && buttonPositionY < 0) ||\n                    (inputPositionY > 0 && buttonPositionY > 0)) {\n                    rangeSelectorHeight += Math.abs(minPosition);\n                }\n                return rangeSelectorHeight;\n            }\n            /**\n             * Detect collision with title or subtitle\n             *\n             * @private\n             * @function Highcharts.RangeSelector#titleCollision\n             * @return {boolean}\n             * Returns collision status\n             */\n            titleCollision(chart) {\n                return !(chart.options.title.text ||\n                    chart.options.subtitle.text);\n            }\n            /**\n             * Update the range selector with new options\n             *\n             * @private\n             * @function Highcharts.RangeSelector#update\n             * @param {Highcharts.RangeSelectorOptions} options\n             */\n            update(options, redraw = true) {\n                const chart = this.chart;\n                merge(true, chart.options.rangeSelector, options);\n                this.destroy();\n                this.init(chart);\n                if (redraw) {\n                    this.render();\n                }\n            }\n            /**\n             * Destroys allocated elements.\n             *\n             * @private\n             * @function Highcharts.RangeSelector#destroy\n             */\n            destroy() {\n                const rSelector = this, minInput = rSelector.minInput, maxInput = rSelector.maxInput;\n                if (rSelector.eventsToUnbind) {\n                    rSelector.eventsToUnbind.forEach((unbind) => unbind());\n                    rSelector.eventsToUnbind = void 0;\n                }\n                // Destroy elements in collections\n                destroyObjectProperties(rSelector.buttons);\n                // Clear input element events\n                if (minInput) {\n                    minInput.onfocus = minInput.onblur = minInput.onchange = null;\n                }\n                if (maxInput) {\n                    maxInput.onfocus = maxInput.onblur = maxInput.onchange = null;\n                }\n                // Destroy HTML and SVG elements\n                objectEach(rSelector, function (val, key) {\n                    if (val && key !== 'chart') {\n                        if (val instanceof SVGElement) {\n                            // SVGElement\n                            val.destroy();\n                        }\n                        else if (val instanceof window.HTMLElement) {\n                            // HTML element\n                            discardElement(val);\n                        }\n                    }\n                    if (val !== RangeSelector.prototype[key]) {\n                        rSelector[key] = null;\n                    }\n                }, this);\n            }\n        }\n        extend(RangeSelector.prototype, {\n            /**\n             * The default buttons for pre-selecting time frames.\n             * @private\n             */\n            defaultButtons: [{\n                    type: 'month',\n                    count: 1,\n                    text: '1m',\n                    title: 'View 1 month'\n                }, {\n                    type: 'month',\n                    count: 3,\n                    text: '3m',\n                    title: 'View 3 months'\n                }, {\n                    type: 'month',\n                    count: 6,\n                    text: '6m',\n                    title: 'View 6 months'\n                }, {\n                    type: 'ytd',\n                    text: 'YTD',\n                    title: 'View year to date'\n                }, {\n                    type: 'year',\n                    count: 1,\n                    text: '1y',\n                    title: 'View 1 year'\n                }, {\n                    type: 'all',\n                    text: 'All',\n                    title: 'View all'\n                }],\n            /**\n             * The date formats to use when setting min, max and value on date inputs.\n             * @private\n             */\n            inputTypeFormats: {\n                'datetime-local': '%Y-%m-%dT%H:%M:%S',\n                'date': '%Y-%m-%d',\n                'time': '%H:%M:%S'\n            }\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Define the time span for the button\n         *\n         * @typedef {\"all\"|\"day\"|\"hour\"|\"millisecond\"|\"minute\"|\"month\"|\"second\"|\"week\"|\"year\"|\"ytd\"} Highcharts.RangeSelectorButtonTypeValue\n         */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.RangeSelectorClickCallbackFunction\n         *\n         * @param {global.Event} e\n         *        Event arguments.\n         *\n         * @param {boolean|undefined}\n         *        Return false to cancel the default button event.\n         */\n        /**\n         * Callback function to parse values entered in the input boxes and return a\n         * valid JavaScript time as milliseconds since 1970.\n         *\n         * @callback Highcharts.RangeSelectorParseCallbackFunction\n         *\n         * @param {string} value\n         *        Input value to parse.\n         *\n         * @return {number}\n         *         Parsed JavaScript time value.\n         */\n        (''); // Keeps doclets above in JS file\n\n        return RangeSelector;\n    });\n    _registerModule(_modules, 'Core/Chart/StockChart.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Templating.js'], _modules['Core/Defaults.js'], _modules['Stock/Navigator/NavigatorDefaults.js'], _modules['Stock/RangeSelector/RangeSelectorDefaults.js'], _modules['Stock/Scrollbar/ScrollbarDefaults.js'], _modules['Stock/Utilities/StockUtilities.js'], _modules['Core/Utilities.js']], function (Chart, F, D, NavigatorDefaults, RangeSelectorDefaults, ScrollbarDefaults, StockUtilities, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { format } = F;\n        const { getOptions } = D;\n        const { setFixedRange } = StockUtilities;\n        const { addEvent, clamp, crisp, defined, extend, find, isNumber, isString, merge, pick, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get stock-specific default axis options.\n         *\n         * @private\n         * @function getDefaultAxisOptions\n         */\n        function getDefaultAxisOptions(coll, options, defaultOptions) {\n            if (coll === 'xAxis') {\n                return {\n                    minPadding: 0,\n                    maxPadding: 0,\n                    overscroll: 0,\n                    ordinal: true\n                };\n            }\n            if (coll === 'yAxis') {\n                return {\n                    labels: {\n                        y: -2\n                    },\n                    opposite: defaultOptions.opposite ?? options.opposite ?? true,\n                    showLastLabel: !!(\n                    // #6104, show last label by default for category axes\n                    options.categories ||\n                        options.type === 'category'),\n                    title: {\n                        text: defaultOptions.title?.text !== 'Values' ?\n                            defaultOptions.title?.text :\n                            null\n                    }\n                };\n            }\n            return {};\n        }\n        /**\n         * Get stock-specific forced axis options.\n         *\n         * @private\n         * @function getForcedAxisOptions\n         */\n        function getForcedAxisOptions(type, chartOptions) {\n            if (type === 'xAxis') {\n                // Always disable startOnTick:true on the main axis when the navigator\n                // is enabled (#1090)\n                const navigatorEnabled = pick(chartOptions.navigator && chartOptions.navigator.enabled, NavigatorDefaults.enabled, true);\n                const axisOptions = {\n                    type: 'datetime',\n                    categories: void 0\n                };\n                if (navigatorEnabled) {\n                    axisOptions.startOnTick = false;\n                    axisOptions.endOnTick = false;\n                }\n                return axisOptions;\n            }\n            return {};\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Stock-optimized chart. Use {@link Highcharts.Chart|Chart} for common charts.\n         *\n         * @requires modules/stock\n         *\n         * @class\n         * @name Highcharts.StockChart\n         * @extends Highcharts.Chart\n         */\n        class StockChart extends Chart {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initializes the chart. The constructor's arguments are passed on\n             * directly.\n             *\n             * @function Highcharts.StockChart#init\n             *\n             * @param {Highcharts.Options} userOptions\n             *        Custom options.\n             *\n             * @param {Function} [callback]\n             *        Function to run when the chart has loaded and all external\n             *        images are loaded.\n             *\n             *\n             * @emits Highcharts.StockChart#event:init\n             * @emits Highcharts.StockChart#event:afterInit\n             */\n            init(userOptions, callback) {\n                const defaultOptions = getOptions(), xAxisOptions = userOptions.xAxis, yAxisOptions = userOptions.yAxis, \n                // Always disable startOnTick:true on the main axis when the\n                // navigator is enabled (#1090)\n                navigatorEnabled = pick(userOptions.navigator && userOptions.navigator.enabled, NavigatorDefaults.enabled, true);\n                // Avoid doing these twice\n                userOptions.xAxis = userOptions.yAxis = void 0;\n                const options = merge({\n                    chart: {\n                        panning: {\n                            enabled: true,\n                            type: 'x'\n                        },\n                        zooming: {\n                            pinchType: 'x',\n                            mouseWheel: {\n                                type: 'x'\n                            }\n                        }\n                    },\n                    navigator: {\n                        enabled: navigatorEnabled\n                    },\n                    scrollbar: {\n                        // #4988 - check if setOptions was called\n                        enabled: pick(ScrollbarDefaults.enabled, true)\n                    },\n                    rangeSelector: {\n                        // #4988 - check if setOptions was called\n                        enabled: pick(RangeSelectorDefaults.rangeSelector.enabled, true)\n                    },\n                    title: {\n                        text: null\n                    },\n                    tooltip: {\n                        split: pick(defaultOptions.tooltip && defaultOptions.tooltip.split, true),\n                        crosshairs: true\n                    },\n                    legend: {\n                        enabled: false\n                    }\n                }, userOptions, // User's options\n                {\n                    isStock: true // Internal flag\n                });\n                userOptions.xAxis = xAxisOptions;\n                userOptions.yAxis = yAxisOptions;\n                // Apply X axis options to both single and multi y axes\n                options.xAxis = splat(userOptions.xAxis || {}).map((xAxisOptions) => merge(getDefaultAxisOptions('xAxis', xAxisOptions, defaultOptions.xAxis), \n                // #7690\n                xAxisOptions, // User options\n                getForcedAxisOptions('xAxis', userOptions)));\n                // Apply Y axis options to both single and multi y axes\n                options.yAxis = splat(userOptions.yAxis || {}).map((yAxisOptions) => merge(getDefaultAxisOptions('yAxis', yAxisOptions, defaultOptions.yAxis), \n                // #7690\n                yAxisOptions // User options\n                ));\n                super.init(options, callback);\n            }\n            /**\n             * Factory for creating different axis types.\n             * Extended to add stock defaults.\n             *\n             * @private\n             * @function Highcharts.StockChart#createAxis\n             * @param {string} coll\n             * An axis type.\n             * @param {Chart.CreateAxisOptionsObject} options\n             * The axis creation options.\n             */\n            createAxis(coll, options) {\n                options.axis = merge(getDefaultAxisOptions(coll, options.axis, getOptions()[coll]), options.axis, getForcedAxisOptions(coll, this.userOptions));\n                return super.createAxis(coll, options);\n            }\n        }\n        addEvent(Chart, 'update', function (e) {\n            const chart = this, options = e.options;\n            // Use case: enabling scrollbar from a disabled state.\n            // Scrollbar needs to be initialized from a controller, Navigator in this\n            // case (#6615)\n            if ('scrollbar' in options && chart.navigator) {\n                merge(true, chart.options.scrollbar, options.scrollbar);\n                chart.navigator.update({ enabled: !!chart.navigator.navigatorEnabled });\n                delete options.scrollbar;\n            }\n        });\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        (function (StockChart) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /** @private */\n            function compose(ChartClass, AxisClass, SeriesClass, SVGRendererClass) {\n                const seriesProto = SeriesClass.prototype;\n                if (!seriesProto.forceCropping) {\n                    addEvent(AxisClass, 'afterDrawCrosshair', onAxisAfterDrawCrosshair);\n                    addEvent(AxisClass, 'afterHideCrosshair', onAxisAfterHideCrosshair);\n                    addEvent(AxisClass, 'autoLabelAlign', onAxisAutoLabelAlign);\n                    addEvent(AxisClass, 'destroy', onAxisDestroy);\n                    addEvent(AxisClass, 'getPlotLinePath', onAxisGetPlotLinePath);\n                    ChartClass.prototype.setFixedRange = setFixedRange;\n                    seriesProto.forceCropping = seriesForceCropping;\n                    addEvent(SeriesClass, 'setOptions', onSeriesSetOptions);\n                    SVGRendererClass.prototype.crispPolyLine = svgRendererCrispPolyLine;\n                }\n            }\n            StockChart.compose = compose;\n            /**\n             * Extend crosshairs to also draw the label.\n             * @private\n             */\n            function onAxisAfterDrawCrosshair(event) {\n                const axis = this;\n                // Check if the label has to be drawn\n                if (!axis.crosshair ||\n                    !axis.crosshair.label ||\n                    !axis.crosshair.label.enabled ||\n                    !axis.cross ||\n                    !isNumber(axis.min) ||\n                    !isNumber(axis.max)) {\n                    return;\n                }\n                const chart = axis.chart, log = axis.logarithmic, options = axis.crosshair.label, // The label's options\n                horiz = axis.horiz, // Axis orientation\n                opposite = axis.opposite, // Axis position\n                left = axis.left, // Left position\n                top = axis.top, // Top position\n                width = axis.width, tickInside = axis.options.tickPosition === 'inside', snap = axis.crosshair.snap !== false, e = event.e || (axis.cross && axis.cross.e), point = event.point;\n                let crossLabel = axis.crossLabel, // The svgElement\n                posx, posy, formatOption = options.format, formatFormat = '', limit, offset = 0, \n                // Use last available event (#5287)\n                min = axis.min, max = axis.max;\n                if (log) {\n                    min = log.lin2log(axis.min);\n                    max = log.lin2log(axis.max);\n                }\n                const align = (horiz ? 'center' : opposite ?\n                    (axis.labelAlign === 'right' ? 'right' : 'left') :\n                    (axis.labelAlign === 'left' ? 'left' : 'center'));\n                // If the label does not exist yet, create it.\n                if (!crossLabel) {\n                    crossLabel = axis.crossLabel = chart.renderer\n                        .label('', 0, void 0, options.shape || 'callout')\n                        .addClass('highcharts-crosshair-label highcharts-color-' + (point && point.series ?\n                        point.series.colorIndex :\n                        axis.series[0] && this.series[0].colorIndex))\n                        .attr({\n                        align: options.align || align,\n                        padding: pick(options.padding, 8),\n                        r: pick(options.borderRadius, 3),\n                        zIndex: 2\n                    })\n                        .add(axis.labelGroup);\n                    // Presentational\n                    if (!chart.styledMode) {\n                        crossLabel\n                            .attr({\n                            fill: options.backgroundColor ||\n                                ( // #14888\n                                point && point.series &&\n                                    point.series.color) ||\n                                \"#666666\" /* Palette.neutralColor60 */,\n                            stroke: options.borderColor || '',\n                            'stroke-width': options.borderWidth || 0\n                        })\n                            .css(extend({\n                            color: \"#ffffff\" /* Palette.backgroundColor */,\n                            fontWeight: 'normal',\n                            fontSize: '0.7em',\n                            textAlign: 'center'\n                        }, options.style || {}));\n                    }\n                }\n                if (horiz) {\n                    posx = snap ? (point.plotX || 0) + left : e.chartX;\n                    posy = top + (opposite ? 0 : axis.height);\n                }\n                else {\n                    posx = left + axis.offset + (opposite ? width : 0);\n                    posy = snap ? (point.plotY || 0) + top : e.chartY;\n                }\n                if (!formatOption && !options.formatter) {\n                    if (axis.dateTime) {\n                        formatFormat = '%b %d, %Y';\n                    }\n                    formatOption =\n                        '{value' + (formatFormat ? ':' + formatFormat : '') + '}';\n                }\n                // Show the label\n                const value = snap ?\n                    (axis.isXAxis ? point.x : point.y) :\n                    axis.toValue(horiz ? e.chartX : e.chartY);\n                // Crosshair should be rendered within Axis range (#7219) and the point\n                // of currentPriceIndicator should be inside the plot area (#14879).\n                const isInside = point && point.series ?\n                    point.series.isPointInside(point) :\n                    (isNumber(value) && value > min && value < max);\n                let text = '';\n                if (formatOption) {\n                    text = format(formatOption, { value }, chart);\n                }\n                else if (options.formatter && isNumber(value)) {\n                    text = options.formatter.call(axis, value);\n                }\n                crossLabel.attr({\n                    text,\n                    x: posx,\n                    y: posy,\n                    visibility: isInside ? 'inherit' : 'hidden'\n                });\n                const crossBox = crossLabel.getBBox();\n                // Now it is placed we can correct its position\n                if (isNumber(crossLabel.x) && !horiz && !opposite) {\n                    posx = crossLabel.x - (crossBox.width / 2);\n                }\n                if (isNumber(crossLabel.y)) {\n                    if (horiz) {\n                        if ((tickInside && !opposite) || (!tickInside && opposite)) {\n                            posy = crossLabel.y - crossBox.height;\n                        }\n                    }\n                    else {\n                        posy = crossLabel.y - (crossBox.height / 2);\n                    }\n                }\n                // Check the edges\n                if (horiz) {\n                    limit = {\n                        left,\n                        right: left + axis.width\n                    };\n                }\n                else {\n                    limit = {\n                        left: axis.labelAlign === 'left' ? left : 0,\n                        right: axis.labelAlign === 'right' ?\n                            left + axis.width :\n                            chart.chartWidth\n                    };\n                }\n                const translateX = crossLabel.translateX || 0;\n                // Left edge\n                if (translateX < limit.left) {\n                    offset = limit.left - translateX;\n                }\n                // Right edge\n                if (translateX + crossBox.width >= limit.right) {\n                    offset = -(translateX + crossBox.width - limit.right);\n                }\n                // Show the crosslabel\n                crossLabel.attr({\n                    x: posx + offset,\n                    y: posy,\n                    // First set x and y, then anchorX and anchorY, when box is actually\n                    // calculated, #5702\n                    anchorX: horiz ?\n                        posx :\n                        (axis.opposite ? 0 : chart.chartWidth),\n                    anchorY: horiz ?\n                        (axis.opposite ? chart.chartHeight : 0) :\n                        posy + crossBox.height / 2\n                });\n            }\n            /**\n             * Wrapper to hide the label.\n             * @private\n             */\n            function onAxisAfterHideCrosshair() {\n                const axis = this;\n                if (axis.crossLabel) {\n                    axis.crossLabel = axis.crossLabel.hide();\n                }\n            }\n            /**\n             * Override the automatic label alignment so that the first Y axis' labels\n             * are drawn on top of the grid line, and subsequent axes are drawn outside.\n             * @private\n             */\n            function onAxisAutoLabelAlign(e) {\n                const axis = this, chart = axis.chart, options = axis.options, panes = chart._labelPanes = chart._labelPanes || {}, labelOptions = options.labels;\n                if (chart.options.isStock && axis.coll === 'yAxis') {\n                    const key = options.top + ',' + options.height;\n                    // Do it only for the first Y axis of each pane\n                    if (!panes[key] && labelOptions.enabled) {\n                        if (labelOptions.distance === 15 && // Default\n                            axis.side === 1) {\n                            labelOptions.distance = 0;\n                        }\n                        if (typeof labelOptions.align === 'undefined') {\n                            labelOptions.align = 'right';\n                        }\n                        panes[key] = axis;\n                        e.align = 'right';\n                        e.preventDefault();\n                    }\n                }\n            }\n            /**\n             * Clear axis from label panes. (#6071)\n             * @private\n             */\n            function onAxisDestroy() {\n                const axis = this, chart = axis.chart, key = (axis.options &&\n                    (axis.options.top + ',' + axis.options.height));\n                if (key && chart._labelPanes && chart._labelPanes[key] === axis) {\n                    delete chart._labelPanes[key];\n                }\n            }\n            /**\n             * Override getPlotLinePath to allow for multipane charts.\n             * @private\n             */\n            function onAxisGetPlotLinePath(e) {\n                const axis = this, series = (axis.isLinked && !axis.series && axis.linkedParent ?\n                    axis.linkedParent.series :\n                    axis.series), chart = axis.chart, renderer = chart.renderer, axisLeft = axis.left, axisTop = axis.top, result = [], translatedValue = e.translatedValue, value = e.value, force = e.force, \n                /**\n                 * Return the other axis based on either the axis option or on\n                 * related series.\n                 * @private\n                 */\n                getAxis = (coll) => {\n                    const otherColl = coll === 'xAxis' ? 'yAxis' : 'xAxis', opt = axis.options[otherColl];\n                    // Other axis indexed by number\n                    if (isNumber(opt)) {\n                        return [chart[otherColl][opt]];\n                    }\n                    // Other axis indexed by id (like navigator)\n                    if (isString(opt)) {\n                        return [chart.get(opt)];\n                    }\n                    // Auto detect based on existing series\n                    return series.map((s) => s[otherColl]);\n                };\n                let x1, y1, x2, y2, axes = [], // #3416 need a default array\n                axes2, uniqueAxes, transVal;\n                if ( // For stock chart, by default render paths across the panes\n                // except the case when `acrossPanes` is disabled by user (#6644)\n                (chart.options.isStock && e.acrossPanes !== false) &&\n                    // Ignore in case of colorAxis or zAxis. #3360, #3524, #6720\n                    axis.coll === 'xAxis' || axis.coll === 'yAxis') {\n                    e.preventDefault();\n                    // Get the related axes based on series\n                    axes = getAxis(axis.coll);\n                    // Get the related axes based options.*Axis setting #2810\n                    axes2 = (axis.isXAxis ? chart.yAxis : chart.xAxis);\n                    for (const A of axes2) {\n                        if (!A.options.isInternal) {\n                            const a = (A.isXAxis ? 'yAxis' : 'xAxis'), relatedAxis = (defined(A.options[a]) ?\n                                chart[a][A.options[a]] :\n                                chart[a][0]);\n                            if (axis === relatedAxis) {\n                                axes.push(A);\n                            }\n                        }\n                    }\n                    // Remove duplicates in the axes array. If there are no axes in the\n                    // axes array, we are adding an axis without data, so we need to\n                    // populate this with grid lines (#2796).\n                    uniqueAxes = axes.length ?\n                        [] :\n                        [axis.isXAxis ? chart.yAxis[0] : chart.xAxis[0]]; // #3742\n                    for (const axis2 of axes) {\n                        if (uniqueAxes.indexOf(axis2) === -1 &&\n                            // Do not draw on axis which overlap completely. #5424\n                            !find(uniqueAxes, (unique) => (unique.pos === axis2.pos &&\n                                unique.len === axis2.len))) {\n                            uniqueAxes.push(axis2);\n                        }\n                    }\n                    transVal = pick(translatedValue, axis.translate(value || 0, void 0, void 0, e.old));\n                    if (isNumber(transVal)) {\n                        if (axis.horiz) {\n                            for (const axis2 of uniqueAxes) {\n                                let skip;\n                                y1 = axis2.pos;\n                                y2 = y1 + axis2.len;\n                                x1 = x2 = Math.round(transVal + axis.transB);\n                                // Outside plot area\n                                if (force !== 'pass' &&\n                                    (x1 < axisLeft || x1 > axisLeft + axis.width)) {\n                                    if (force) {\n                                        x1 = x2 = clamp(x1, axisLeft, axisLeft + axis.width);\n                                    }\n                                    else {\n                                        skip = true;\n                                    }\n                                }\n                                if (!skip) {\n                                    result.push(['M', x1, y1], ['L', x2, y2]);\n                                }\n                            }\n                        }\n                        else {\n                            for (const axis2 of uniqueAxes) {\n                                let skip;\n                                x1 = axis2.pos;\n                                x2 = x1 + axis2.len;\n                                y1 = y2 = Math.round(axisTop + axis.height - transVal);\n                                // Outside plot area\n                                if (force !== 'pass' &&\n                                    (y1 < axisTop || y1 > axisTop + axis.height)) {\n                                    if (force) {\n                                        y1 = y2 = clamp(y1, axisTop, axisTop + axis.height);\n                                    }\n                                    else {\n                                        skip = true;\n                                    }\n                                }\n                                if (!skip) {\n                                    result.push(['M', x1, y1], ['L', x2, y2]);\n                                }\n                            }\n                        }\n                    }\n                    e.path = result.length > 0 ?\n                        renderer.crispPolyLine(result, e.lineWidth || 1) :\n                        // #3557 getPlotLinePath in regular Highcharts also returns null\n                        void 0;\n                }\n            }\n            /**\n             * Handle som Stock-specific series defaults, override the plotOptions\n             * before series options are handled.\n             * @private\n             */\n            function onSeriesSetOptions(e) {\n                const series = this;\n                if (series.chart.options.isStock) {\n                    let overrides;\n                    if (series.is('column') || series.is('columnrange')) {\n                        overrides = {\n                            borderWidth: 0,\n                            shadow: false\n                        };\n                    }\n                    else if (!series.is('scatter') && !series.is('sma')) {\n                        overrides = {\n                            marker: {\n                                enabled: false,\n                                radius: 2\n                            }\n                        };\n                    }\n                    if (overrides) {\n                        e.plotOptions[series.type] = merge(e.plotOptions[series.type], overrides);\n                    }\n                }\n            }\n            /**\n             * Based on the data grouping options decides whether\n             * the data should be cropped while processing.\n             *\n             * @ignore\n             * @function Highcharts.Series#forceCropping\n             */\n            function seriesForceCropping() {\n                const series = this, chart = series.chart, options = series.options, dataGroupingOptions = options.dataGrouping, groupingEnabled = (series.allowDG !== false &&\n                    dataGroupingOptions &&\n                    pick(dataGroupingOptions.enabled, chart.options.isStock));\n                return groupingEnabled;\n            }\n            /* eslint-disable jsdoc/check-param-names */\n            /**\n             * Factory function for creating new stock charts. Creates a new\n             * {@link Highcharts.StockChart|StockChart} object with different default\n             * options than the basic Chart.\n             *\n             * @example\n             * let chart = Highcharts.stockChart('container', {\n             *     series: [{\n             *         data: [1, 2, 3, 4, 5, 6, 7, 8, 9],\n             *         pointInterval: 24 * 60 * 60 * 1000\n             *     }]\n             * });\n             *\n             * @function Highcharts.stockChart\n             *\n             * @param {string|Highcharts.HTMLDOMElement} [renderTo]\n             *        The DOM element to render to, or its id.\n             *\n             * @param {Highcharts.Options} options\n             *        The chart options structure as described in the\n             *        [options reference](https://api.highcharts.com/highstock).\n             *\n             * @param {Highcharts.ChartCallbackFunction} [callback]\n             *        A function to execute when the chart object is finished\n             *        rendering and all external image files (`chart.backgroundImage`,\n             *        `chart.plotBackgroundImage` etc) are loaded. Defining a\n             *        [chart.events.load](https://api.highcharts.com/highstock/chart.events.load)\n             *        handler is equivalent.\n             *\n             * @return {Highcharts.StockChart}\n             *         The chart object.\n             */\n            function stockChart(a, b, c) {\n                return new StockChart(a, b, c);\n            }\n            StockChart.stockChart = stockChart;\n            /* eslint-enable jsdoc/check-param-names */\n            /**\n             * Function to crisp a line with multiple segments\n             *\n             * @private\n             * @function Highcharts.SVGRenderer#crispPolyLine\n             */\n            function svgRendererCrispPolyLine(points, width) {\n                // Points format: [['M', 0, 0], ['L', 100, 0]]\n                // normalize to a crisp line\n                for (let i = 0; i < points.length; i = i + 2) {\n                    const start = points[i], end = points[i + 1];\n                    if (defined(start[1]) && start[1] === end[1]) {\n                        start[1] = end[1] = crisp(start[1], width);\n                    }\n                    if (defined(start[2]) && start[2] === end[2]) {\n                        start[2] = end[2] = crisp(start[2], width);\n                    }\n                }\n                return points;\n            }\n        })(StockChart || (StockChart = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return StockChart;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: { pointClass: ColumnPoint } } } = SeriesRegistry.seriesTypes;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class HLCPoint extends ColumnPoint {\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCPoint;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An HLC chart is a style of financial chart used to describe price\n         * movements over time. It displays high, low and close values per\n         * data point.\n         *\n         * @sample stock/demo/hlc/\n         *         HLC chart\n         *\n         * @extends      plotOptions.column\n         * @excluding    borderColor, borderRadius, borderWidth, crisp, stacking,\n         *               stack\n         * @product      highstock\n         * @optionparent plotOptions.hlc\n         */\n        const HLCSeriesDefaults = {\n            /**\n             * The approximate pixel width of each group. If for example a series\n             * with 30 points is displayed over a 600 pixel wide plot area, no\n             * grouping is performed. If however the series contains so many points\n             * that the spacing is less than the groupPixelWidth, Highcharts will\n             * try to group it into appropriate groups so that each is more or less\n             * two pixels wide. Defaults to `5`.\n             *\n             * @type      {number}\n             * @default   5\n             * @product   highstock\n             * @apioption plotOptions.hlc.dataGrouping.groupPixelWidth\n             */\n            /**\n             * @type      {Highcharts.DataGroupingApproximationValue|Function}\n             * @default   hlc\n             * @product   highstock\n             * @apioption plotOptions.hlc.dataGrouping.approximation\n             */\n            /**\n             * @default   close\n             * @apioption plotOptions.hlc.colorKey\n             */\n            /**\n             * The pixel width of the line/border. Defaults to `1`.\n             *\n             * @sample {highstock} stock/plotoptions/hlc-linewidth/\n             *         A greater line width\n             *\n             * @type    {number}\n             * @default 1\n             * @product highstock\n             *\n             * @public\n             */\n            lineWidth: 1,\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                    '<b> {series.name}</b><br/>' +\n                    'High: {point.high}<br/>' +\n                    'Low: {point.low}<br/>' +\n                    'Close: {point.close}<br/>'\n            },\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            states: {\n                /**\n                 * @extends plotOptions.column.states.hover\n                 * @product highstock\n                 */\n                hover: {\n                    /**\n                     * The pixel width of the line representing the HLC point.\n                     *\n                     * @type    {number}\n                     * @default 3\n                     * @product highstock\n                     */\n                    lineWidth: 3\n                }\n            },\n            /**\n             * Determines which one of  `high`, `low`, `close` values should\n             * be represented as `point.y`, which is later used to set dataLabel\n             * position and [compare](#plotOptions.series.compare).\n             *\n             * @sample {highstock} stock/plotoptions/hlc-pointvalkey/\n             *         Possible values\n             *\n             * @declare    Highcharts.OptionsHLCPointValKeyValue\n             * @type       {string}\n             * @default    close\n             * @validvalue [\"high\", \"low\", \"close\"]\n             * @product    highstock\n             * @apioption  plotOptions.hlc.pointValKey\n             */\n            /**\n             * @default   close\n             * @apioption plotOptions.hlc.colorKey\n             */\n            stickyTracking: true\n        };\n        /**\n         * A `hlc` series. If the [type](#series.hlc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.hlc\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @apioption series.hlc\n         */\n        /**\n         * An array of data points for the series. For the `hlc` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 4 or 3 values. In this case, the values correspond\n         *    to `x,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length of 3\\.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 5, 6, 7],\n         *        [1, 4, 8, 2],\n         *        [2, 3, 4, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.hlc.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        high: 4,\n         *        low: 5,\n         *        close: 2,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        high: 3,\n         *        low: 6,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number>|Array<(number|string),number,number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding y, marker\n         * @product   highstock\n         * @apioption series.hlc.data\n         */\n        /**\n         * The closing value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.hlc.data.close\n         */\n        (''); // Keeps doclets above in JS file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/HLC/HLCSeries.js', [_modules['Series/HLC/HLCPoint.js'], _modules['Series/HLC/HLCSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (HLCPoint, HLCSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { crisp, extend, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The hlc series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.hlc\n         *\n         * @augments Highcharts.Series\n         */\n        class HLCSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extend the path if close is not between high and low.\n             *\n             * @param {SVGPath} path the path array of the point\n             * @param {number} halfStrokeWidth\n             * @param {number} value value of the point to which the stem should be extended\n             */\n            extendStem(path, halfStrokeWidth, value) {\n                const start = path[0];\n                const end = path[1];\n                // We don't need to worry about crisp - close value\n                // is already crisped and halfStrokeWidth should remove it.\n                if (typeof start[2] === 'number') {\n                    start[2] = Math.max(value + halfStrokeWidth, start[2]);\n                }\n                if (typeof end[2] === 'number') {\n                    end[2] = Math.min(value - halfStrokeWidth, end[2]);\n                }\n            }\n            /**\n             * Function to create SVGPath of the point based on the\n             * plot positions of this point.\n             * @private\n             */\n            getPointPath(point, graphic) {\n                // Crisp vector coordinates\n                const strokeWidth = graphic.strokeWidth(), series = point.series, \n                // #2596:\n                crispX = crisp(point.plotX || 0, strokeWidth), halfWidth = Math.round(point.shapeArgs.width / 2);\n                // The vertical stem\n                const path = [\n                    ['M', crispX, Math.round(point.yBottom)],\n                    ['L', crispX, Math.round(point.plotHigh)]\n                ];\n                // Close\n                if (point.close !== null) {\n                    const plotClose = crisp(point.plotClose, strokeWidth);\n                    path.push(['M', crispX, plotClose], ['L', crispX + halfWidth, plotClose]);\n                    series.extendStem(path, strokeWidth / 2, plotClose);\n                }\n                return path;\n            }\n            /**\n             * Draw single point\n             * @private\n             */\n            drawSinglePoint(point) {\n                const series = point.series, chart = series.chart;\n                let path, graphic = point.graphic;\n                if (typeof point.plotY !== 'undefined') {\n                    // Create and/or update the graphic\n                    if (!graphic) {\n                        point.graphic = graphic = chart.renderer.path()\n                            .add(series.group);\n                    }\n                    if (!chart.styledMode) {\n                        graphic.attr(series.pointAttribs(point, (point.selected && 'select'))); // #3897\n                    }\n                    // Crisp vector coordinates\n                    path = series.getPointPath(point, graphic);\n                    graphic[!graphic ? 'attr' : 'animate']({ d: path })\n                        .addClass(point.getClassName(), true);\n                }\n            }\n            /**\n             * Draw the data points\n             * @private\n             */\n            drawPoints() {\n                this.points.forEach(this.drawSinglePoint);\n            }\n            /**\n             * @private\n             * @function Highcharts.seriesTypes.hlc#init\n             */\n            init() {\n                super.init.apply(this, arguments);\n                this.options.stacking = void 0; // #8817\n            }\n            /**\n             * Postprocess mapping between options and SVG attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                const attribs = super.pointAttribs.call(this, point, state);\n                delete attribs.fill;\n                return attribs;\n            }\n            toYData(point) {\n                // Return a plain array for speedy calculation\n                return [point.high, point.low, point.close];\n            }\n            /**\n             * Translate data points from raw values x and y to plotX and plotY\n             *\n             * @private\n             * @function Highcharts.seriesTypes.hlc#translate\n             */\n            translate() {\n                const series = this, yAxis = series.yAxis, names = (this.pointArrayMap && this.pointArrayMap.slice()) || [], translated = names.map((name) => `plot${name.charAt(0).toUpperCase() + name.slice(1)}`);\n                translated.push('yBottom');\n                names.push('low');\n                super.translate.apply(series);\n                // Do the translation\n                series.points.forEach(function (point) {\n                    names.forEach(function (name, i) {\n                        let value = point[name];\n                        if (value !== null) {\n                            if (series.dataModify) {\n                                value = series.dataModify.modifyValue(value);\n                            }\n                            point[translated[i]] =\n                                yAxis.toPixels(value, true);\n                        }\n                    });\n                    // Align the tooltip to the high value to avoid covering the\n                    // point\n                    point.tooltipPos[1] =\n                        point.plotHigh + yAxis.pos - series.chart.plotTop;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        HLCSeries.defaultOptions = merge(ColumnSeries.defaultOptions, HLCSeriesDefaults);\n        extend(HLCSeries.prototype, {\n            pointClass: HLCPoint,\n            animate: null, // Disable animation\n            directTouch: false,\n            pointArrayMap: ['high', 'low', 'close'],\n            pointAttrToOptions: {\n                stroke: 'color',\n                'stroke-width': 'lineWidth'\n            },\n            pointValKey: 'close'\n        });\n        SeriesRegistry.registerSeriesType('hlc', HLCSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HLCSeries;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCPoint.js', [_modules['Core/Series/SeriesRegistry.js']], function (SeriesRegistry) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { hlc: HLCSeries } } = SeriesRegistry;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class OHLCPoint extends HLCSeries.prototype.pointClass {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Extend the parent method by adding up or down to the class name.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#getClassName\n             */\n            getClassName() {\n                return super.getClassName.call(this) +\n                    (this.open < this.close ?\n                        ' highcharts-point-up' :\n                        ' highcharts-point-down');\n            }\n            /**\n             * Save upColor as point color (#14826).\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#resolveUpColor\n             */\n            resolveUpColor() {\n                if (this.open < this.close &&\n                    !this.options.color &&\n                    this.series.options.upColor) {\n                    this.color = this.series.options.upColor;\n                }\n            }\n            /**\n             * Extend the parent method by saving upColor.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#resolveColor\n             */\n            resolveColor() {\n                super.resolveColor();\n                if (!this.series.is('heikinashi')) {\n                    this.resolveUpColor();\n                }\n            }\n            /**\n             * Extend the parent method by saving upColor.\n             * @private\n             * @function Highcharts.seriesTypes.ohlc#getZone\n             *\n             * @return {Highcharts.SeriesZonesOptionsObject}\n             *         The zone item.\n             */\n            getZone() {\n                const zone = super.getZone();\n                this.resolveUpColor();\n                return zone;\n            }\n            /**\n             * Extend the parent method by resolving up/down colors (#15849)\n             * @private\n             **/\n            applyOptions() {\n                super.applyOptions.apply(this, arguments);\n                if (this.resolveColor) {\n                    this.resolveColor();\n                }\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCPoint;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * An OHLC chart is a style of financial chart used to describe price\n         * movements over time. It displays open, high, low and close values per\n         * data point.\n         *\n         * @sample stock/demo/ohlc\n         *         OHLC chart\n         *\n         * @extends      plotOptions.hlc\n         * @product      highstock\n         * @optionparent plotOptions.ohlc\n         */\n        const OHLCSeriesDefaults = {\n            /**\n             * @type      {Highcharts.DataGroupingApproximationValue|Function}\n             * @default   ohlc\n             * @product   highstock\n             * @apioption plotOptions.ohlc.dataGrouping.approximation\n             */\n            /**\n             * Determines which one of  `open`, `high`, `low`, `close` values should\n             * be represented as `point.y`, which is later used to set dataLabel\n             * position and [compare](#plotOptions.series.compare).\n             *\n             * @declare    Highcharts.OptionsPointValKeyValue\n             * @default    close\n             * @validvalue [\"open\", \"high\", \"low\", \"close\"]\n             * @product    highstock\n             * @apioption  plotOptions.ohlc.pointValKey\n             */\n            /**\n             * Line color for up points.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product   highstock\n             * @apioption plotOptions.ohlc.upColor\n             */\n            tooltip: {\n                pointFormat: '<span style=\"color:{point.color}\">\\u25CF</span> ' +\n                    '<b> {series.name}</b><br/>' +\n                    'Open: {point.open}<br/>' +\n                    'High: {point.high}<br/>' +\n                    'Low: {point.low}<br/>' +\n                    'Close: {point.close}<br/>'\n            }\n        };\n        /**\n         * The parameter allows setting line series type and use OHLC indicators.\n         * Data in OHLC format is required.\n         *\n         * @sample {highstock} stock/indicators/use-ohlc-data\n         *         Use OHLC data format to plot line chart\n         *\n         * @type      {boolean}\n         * @product   highstock\n         * @apioption plotOptions.line.useOhlcData\n         */\n        /**\n         * A `ohlc` series. If the [type](#series.ohlc.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.ohlc\n         * @excluding dataParser, dataURL\n         * @product   highstock\n         * @apioption series.ohlc\n         */\n        /**\n         * An array of data points for the series. For the `ohlc` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 5 or 4 values. In this case, the values correspond\n         *    to `x,open,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length 4\\.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 6, 5, 6, 7],\n         *        [1, 9, 4, 8, 2],\n         *        [2, 6, 3, 4, 10]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.ohlc.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        open: 3,\n         *        high: 4,\n         *        low: 5,\n         *        close: 2,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        open: 4,\n         *        high: 3,\n         *        low: 6,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number,number>|Array<(number|string),number,number,number,number>|*>}\n         * @extends   series.arearange.data\n         * @excluding y, marker\n         * @product   highstock\n         * @apioption series.ohlc.data\n         */\n        /**\n         * The closing value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.ohlc.data.close\n         */\n        /**\n         * The opening value of each data point.\n         *\n         * @type      {number}\n         * @product   highstock\n         * @apioption series.ohlc.data.open\n         */\n        ''; // Adds doclets above to transpiled\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/OHLC/OHLCSeries.js', [_modules['Core/Globals.js'], _modules['Series/OHLC/OHLCPoint.js'], _modules['Series/OHLC/OHLCSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (H, OHLCPoint, OHLCSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { hlc: HLCSeries } = SeriesRegistry.seriesTypes;\n        const { addEvent, crisp, extend, merge, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onSeriesAfterSetOptions(e) {\n            const options = e.options, dataGrouping = options.dataGrouping;\n            if (dataGrouping &&\n                options.useOhlcData &&\n                options.id !== 'highcharts-navigator-series') {\n                dataGrouping.approximation = 'ohlc';\n            }\n        }\n        /**\n         * Add useOhlcData option\n         * @private\n         */\n        function onSeriesInit(eventOptions) {\n            // eslint-disable-next-line no-invalid-this\n            const series = this, options = eventOptions.options;\n            if (options.useOhlcData &&\n                options.id !== 'highcharts-navigator-series') {\n                extend(series, {\n                    pointValKey: OHLCSeries.prototype.pointValKey,\n                    // Keys: ohlcProto.keys, // @todo potentially nonsense\n                    pointArrayMap: OHLCSeries.prototype.pointArrayMap,\n                    toYData: OHLCSeries.prototype.toYData\n                });\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The ohlc series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.ohlc\n         *\n         * @augments Highcharts.Series\n         */\n        class OHLCSeries extends HLCSeries {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(SeriesClass, ..._args) {\n                if (pushUnique(composed, 'OHLCSeries')) {\n                    addEvent(SeriesClass, 'afterSetOptions', onSeriesAfterSetOptions);\n                    addEvent(SeriesClass, 'init', onSeriesInit);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getPointPath(point, graphic) {\n                const path = super.getPointPath(point, graphic), strokeWidth = graphic.strokeWidth(), crispX = crisp(point.plotX || 0, strokeWidth), halfWidth = Math.round(point.shapeArgs.width / 2);\n                if (point.open !== null) {\n                    const plotOpen = crisp(point.plotOpen, strokeWidth);\n                    path.push(['M', crispX, plotOpen], ['L', crispX - halfWidth, plotOpen]);\n                    super.extendStem(path, strokeWidth / 2, plotOpen);\n                }\n                return path;\n            }\n            /**\n             * Postprocess mapping between options and SVG attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                const attribs = super.pointAttribs.call(this, point, state), options = this.options;\n                delete attribs.fill;\n                if (!point.options.color &&\n                    options.upColor &&\n                    point.open < point.close) {\n                    attribs.stroke = options.upColor;\n                }\n                return attribs;\n            }\n            toYData(point) {\n                // Return a plain array for speedy calculation\n                return [point.open, point.high, point.low, point.close];\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        OHLCSeries.defaultOptions = merge(HLCSeries.defaultOptions, OHLCSeriesDefaults);\n        extend(OHLCSeries.prototype, {\n            pointClass: OHLCPoint,\n            pointArrayMap: ['open', 'high', 'low', 'close']\n        });\n        SeriesRegistry.registerSeriesType('ohlc', OHLCSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OHLCSeries;\n    });\n    _registerModule(_modules, 'Series/Candlestick/CandlestickSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A candlestick chart is a style of financial chart used to describe\n         * price movements over time.\n         *\n         * @sample stock/demo/candlestick/\n         *         Candlestick chart\n         *\n         * @extends      plotOptions.ohlc\n         * @excluding    borderColor,borderRadius,borderWidth\n         * @product      highstock\n         * @optionparent plotOptions.candlestick\n         */\n        const CandlestickSeriesDefaults = {\n            /**\n             * The specific line color for up candle sticks. The default is to\n             * inherit the general `lineColor` setting.\n             *\n             * @sample {highstock} stock/plotoptions/candlestick-linecolor/\n             *         Candlestick line colors\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     1.3.6\n             * @product   highstock\n             * @apioption plotOptions.candlestick.upLineColor\n             */\n            states: {\n                /**\n                 * @extends plotOptions.column.states.hover\n                 * @product highstock\n                 */\n                hover: {\n                    /**\n                     * The pixel width of the line/border around the\n                     * candlestick.\n                     *\n                     * @product highstock\n                     */\n                    lineWidth: 2\n                }\n            },\n            /**\n             * @type    {number|null}\n             * @product highstock\n             */\n            threshold: null,\n            /**\n             * The color of the line/border of the candlestick.\n             *\n             * In styled mode, the line stroke can be set with the\n             * `.highcharts-candlestick-series .highcahrts-point` rule.\n             *\n             * @see [upLineColor](#plotOptions.candlestick.upLineColor)\n             *\n             * @sample {highstock} stock/plotoptions/candlestick-linecolor/\n             *         Candlestick line colors\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #000000\n             * @product highstock\n             */\n            lineColor: \"#000000\" /* Palette.neutralColor100 */,\n            /**\n             * The pixel width of the candlestick line/border. Defaults to `1`.\n             *\n             *\n             * In styled mode, the line stroke width can be set with the\n             * `.highcharts-candlestick-series .highcahrts-point` rule.\n             *\n             * @product highstock\n             */\n            lineWidth: 1,\n            /**\n             * The fill color of the candlestick when values are rising.\n             *\n             * In styled mode, the up color can be set with the\n             * `.highcharts-candlestick-series .highcharts-point-up` rule.\n             *\n             * @sample {highstock} stock/plotoptions/candlestick-color/\n             *         Custom colors\n             * @sample {highstock} highcharts/css/candlestick/\n             *         Colors in styled mode\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default #ffffff\n             * @product highstock\n            */\n            upColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * @product highstock\n             */\n            stickyTracking: true\n        };\n        /**\n         * A `candlestick` series. If the [type](#series.candlestick.type)\n         * option is not specified, it is inherited from [chart.type](\n         * #chart.type).\n         *\n         * @type      {*}\n         * @extends   series,plotOptions.candlestick\n         * @excluding dataParser, dataURL, marker\n         * @product   highstock\n         * @apioption series.candlestick\n         */\n        /**\n         * An array of data points for the series. For the `candlestick` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of arrays with 5 or 4 values. In this case, the values correspond\n         *    to `x,open,high,low,close`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred. The `x` value can\n         *    also be omitted, in which case the inner arrays should be of length 4.\n         *    Then the `x` value is automatically calculated, either starting at 0 and\n         *    incremented by 1, or from `pointStart` and `pointInterval` given in the\n         *    series options.\n         *    ```js\n         *    data: [\n         *        [0, 7, 2, 0, 4],\n         *        [1, 1, 4, 2, 8],\n         *        [2, 3, 3, 9, 3]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.candlestick.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        open: 9,\n         *        high: 2,\n         *        low: 4,\n         *        close: 6,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *    }, {\n         *        x: 1,\n         *        open: 1,\n         *        high: 4,\n         *        low: 7,\n         *        close: 7,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<Array<(number|string),number,number,number>|Array<(number|string),number,number,number,number>|*>}\n         * @extends   series.ohlc.data\n         * @excluding y\n         * @product   highstock\n         * @apioption series.candlestick.data\n         */\n        ''; // Adds doclets above to transpiled\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CandlestickSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Candlestick/CandlestickSeries.js', [_modules['Series/Candlestick/CandlestickSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (CandlestickSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries, ohlc: OHLCSeries } = SeriesRegistry.seriesTypes;\n        const { crisp, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The candlestick series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.candlestick\n         *\n         * @augments Highcharts.seriesTypes.ohlc\n         */\n        class CandlestickSeries extends OHLCSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Postprocess mapping between options and SVG attributes\n             *\n             * @private\n             * @function Highcharts.seriesTypes.candlestick#pointAttribs\n             */\n            pointAttribs(point, state) {\n                const attribs = ColumnSeries.prototype.pointAttribs.call(this, point, state), options = this.options, isUp = point.open < point.close, stroke = options.lineColor || this.color, color = point.color || this.color; // (#14826)\n                attribs['stroke-width'] = options.lineWidth;\n                attribs.fill = point.options.color ||\n                    (isUp ? (options.upColor || color) : color);\n                attribs.stroke = point.options.lineColor ||\n                    (isUp ? (options.upLineColor || stroke) : stroke);\n                // Select or hover states\n                if (state) {\n                    const stateOptions = options.states[state];\n                    attribs.fill = stateOptions.color || attribs.fill;\n                    attribs.stroke = stateOptions.lineColor || attribs.stroke;\n                    attribs['stroke-width'] =\n                        stateOptions.lineWidth || attribs['stroke-width'];\n                }\n                return attribs;\n            }\n            /**\n             * Draw the data points.\n             *\n             * @private\n             * @function Highcharts.seriesTypes.candlestick#drawPoints\n             */\n            drawPoints() {\n                const series = this, points = series.points, chart = series.chart, reversedYAxis = series.yAxis.reversed;\n                for (const point of points) {\n                    let graphic = point.graphic, plotOpen, plotClose, topBox, bottomBox, hasTopWhisker, hasBottomWhisker, crispX, path, halfWidth;\n                    const isNew = !graphic;\n                    if (typeof point.plotY !== 'undefined') {\n                        if (!graphic) {\n                            point.graphic = graphic = chart.renderer.path()\n                                .add(series.group);\n                        }\n                        if (!series.chart.styledMode) {\n                            graphic\n                                .attr(series.pointAttribs(point, (point.selected && 'select'))) // #3897\n                                .shadow(series.options.shadow);\n                        }\n                        // Crisp vector coordinates\n                        const strokeWidth = graphic.strokeWidth();\n                        // #2596:\n                        crispX = crisp(point.plotX || 0, strokeWidth);\n                        plotOpen = point.plotOpen;\n                        plotClose = point.plotClose;\n                        topBox = Math.min(plotOpen, plotClose);\n                        bottomBox = Math.max(plotOpen, plotClose);\n                        halfWidth = Math.round(point.shapeArgs.width / 2);\n                        hasTopWhisker = reversedYAxis ?\n                            bottomBox !== point.yBottom :\n                            Math.round(topBox) !==\n                                Math.round(point.plotHigh || 0);\n                        hasBottomWhisker = reversedYAxis ?\n                            Math.round(topBox) !==\n                                Math.round(point.plotHigh || 0) :\n                            bottomBox !== point.yBottom;\n                        topBox = crisp(topBox, strokeWidth);\n                        bottomBox = crisp(bottomBox, strokeWidth);\n                        // Create the path. Due to a bug in Chrome 49, the path is\n                        // first instantiated with no values, then the values\n                        // pushed. For unknown reasons, instantiating the path array\n                        // with all the values would lead to a crash when updating\n                        // frequently (#5193).\n                        path = [];\n                        path.push(['M', crispX - halfWidth, bottomBox], ['L', crispX - halfWidth, topBox], ['L', crispX + halfWidth, topBox], ['L', crispX + halfWidth, bottomBox], ['Z'], // Ensure a nice rectangle #2602\n                        ['M', crispX, topBox], [\n                            'L',\n                            // #460, #2094\n                            crispX,\n                            hasTopWhisker ?\n                                Math.round(reversedYAxis ?\n                                    point.yBottom :\n                                    point.plotHigh) :\n                                topBox\n                        ], ['M', crispX, bottomBox], [\n                            'L',\n                            // #460, #2094\n                            crispX,\n                            hasBottomWhisker ?\n                                Math.round(reversedYAxis ?\n                                    point.plotHigh :\n                                    point.yBottom) :\n                                bottomBox\n                        ]);\n                        graphic[isNew ? 'attr' : 'animate']({ d: path })\n                            .addClass(point.getClassName(), true);\n                    }\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CandlestickSeries.defaultOptions = merge(OHLCSeries.defaultOptions, { tooltip: OHLCSeries.defaultOptions.tooltip }, CandlestickSeriesDefaults);\n        SeriesRegistry.registerSeriesType('candlestick', CandlestickSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CandlestickSeries;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: { pointClass: ColumnPoint } } } = SeriesRegistry.seriesTypes;\n        const { isNumber } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class FlagsPoint extends ColumnPoint {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.ttBelow = false;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            isValid() {\n                // #9233 - Prevent from treating flags as null points (even if\n                // they have no y values defined).\n                return isNumber(this.y) || typeof this.y === 'undefined';\n            }\n            /**\n             * @private\n             */\n            hasNewShapeType() {\n                const shape = this.options.shape || this.series.options.shape;\n                return this.graphic && shape && shape !== this.graphic.symbolKey;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsPoint;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Flags are used to mark events in stock charts. They can be added on the\n         * timeline, or attached to a specific series.\n         *\n         * @sample stock/demo/flags-general/\n         *         Flags on a line series\n         *\n         * @extends      plotOptions.column\n         * @excluding    animation, borderColor, borderWidth,\n         *               colorByPoint, cropThreshold, dataGrouping, pointPadding,\n         *               pointWidth, turboThreshold\n         * @product      highstock\n         * @optionparent plotOptions.flags\n         */\n        const FlagsSeriesDefaults = {\n            /**\n             * The corner radius of the border surrounding each flag. For `squarepin`\n             * shaped flags only. A number signifies pixels. A percentage string, like\n             * for example 50%, signifies a relative size.\n             */\n            borderRadius: 0,\n            /**\n             * In case the flag is placed on a series, on what point key to place\n             * it. Line and columns have one key, `y`. In range or OHLC-type series,\n             * however, the flag can optionally be placed on the `open`, `high`,\n             * `low` or `close` key.\n             *\n             * @sample {highstock} stock/plotoptions/flags-onkey/\n             *         Range series, flag on high\n             *\n             * @type       {string}\n             * @default    y\n             * @since      4.2.2\n             * @product    highstock\n             * @validvalue [\"y\", \"open\", \"high\", \"low\", \"close\"]\n             * @apioption  plotOptions.flags.onKey\n             */\n            /**\n             * The id of the series that the flags should be drawn on. If no id\n             * is given, the flags are drawn on the x axis.\n             *\n             * @sample {highstock} stock/plotoptions/flags/\n             *         Flags on series and on x axis\n             *\n             * @type      {string}\n             * @product   highstock\n             * @apioption plotOptions.flags.onSeries\n             */\n            pointRange: 0, // #673\n            /**\n             * Whether the flags are allowed to overlap sideways. If `false`, the\n             * flags are moved sideways using an algorithm that seeks to place every\n             * flag as close as possible to its original position.\n             *\n             * @sample {highstock} stock/plotoptions/flags-allowoverlapx\n             *         Allow sideways overlap\n             *\n             * @since 6.0.4\n             */\n            allowOverlapX: false,\n            /**\n             * The shape of the marker. Can be one of \"flag\", \"circlepin\",\n             * \"squarepin\", or an image of the format `url(/path-to-image.jpg)`.\n             * Individual shapes can also be set for each point.\n             *\n             * @sample {highstock} stock/plotoptions/flags/\n             *         Different shapes\n             *\n             * @type    {Highcharts.FlagsShapeValue}\n             * @product highstock\n             */\n            shape: 'flag',\n            /**\n             * When multiple flags in the same series fall on the same value, this\n             * number determines the vertical offset between them.\n             *\n             * @sample {highstock} stock/plotoptions/flags-stackdistance/\n             *         A greater stack distance\n             *\n             * @product highstock\n             */\n            stackDistance: 12,\n            /**\n             * Text alignment for the text inside the flag.\n             *\n             * @since      5.0.0\n             * @product    highstock\n             * @validvalue [\"left\", \"center\", \"right\"]\n             */\n            textAlign: 'center',\n            /**\n             * Specific tooltip options for flag series. Flag series tooltips are\n             * different from most other types in that a flag doesn't have a data\n             * value, so the tooltip rather displays the `text` option for each\n             * point.\n             *\n             * @extends   plotOptions.series.tooltip\n             * @excluding changeDecimals, valueDecimals, valuePrefix, valueSuffix\n             * @product   highstock\n             */\n            tooltip: {\n                pointFormat: '{point.text}'\n            },\n            /**\n             * @type {number|null}\n             */\n            threshold: null,\n            /**\n             * The text to display on each flag. This can be defined on series\n             * level, or individually for each point. Defaults to `\"A\"`.\n             *\n             * @type      {string}\n             * @default   A\n             * @product   highstock\n             * @apioption plotOptions.flags.title\n             */\n            /**\n             * The y position of the top left corner of the flag relative to either\n             * the series (if onSeries is defined), or the x axis. Defaults to\n             * `-30`.\n             *\n             * @product highstock\n             */\n            y: -30,\n            /**\n             * Whether to use HTML to render the flag texts. Using HTML allows for\n             * advanced formatting, images and reliable bi-directional text\n             * rendering. Note that exported images won't respect the HTML, and that\n             * HTML won't respect Z-index settings.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     1.3\n             * @product   highstock\n             * @apioption plotOptions.flags.useHTML\n             */\n            /**\n             * Fixed width of the flag's shape. By default, width is autocalculated\n             * according to the flag's title.\n             *\n             * @sample {highstock} stock/demo/flags-shapes/\n             *         Flags with fixed width\n             *\n             * @type      {number}\n             * @product   highstock\n             * @apioption plotOptions.flags.width\n             */\n            /**\n             * Fixed height of the flag's shape. By default, height is\n             * autocalculated according to the flag's title.\n             *\n             * @type      {number}\n             * @product   highstock\n             * @apioption plotOptions.flags.height\n             */\n            /**\n             * The fill color for the flags.\n             *\n             * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @product highstock\n             */\n            fillColor: \"#ffffff\" /* Palette.backgroundColor */,\n            /**\n             * The color of the line/border of the flag.\n             *\n             * In styled mode, the stroke is set in the\n             * `.highcharts-flag-series.highcharts-point` rule.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @default   #000000\n             * @product   highstock\n             * @apioption plotOptions.flags.lineColor\n             */\n            /**\n             * The pixel width of the flag's line/border.\n             *\n             * @product highstock\n             */\n            lineWidth: 1,\n            states: {\n                /**\n                 * @extends plotOptions.column.states.hover\n                 * @product highstock\n                 */\n                hover: {\n                    /**\n                     * The color of the line/border of the flag.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @product highstock\n                     */\n                    lineColor: \"#000000\" /* Palette.neutralColor100 */,\n                    /**\n                     * The fill or background color of the flag.\n                     *\n                     * @type    {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @product highstock\n                     */\n                    fillColor: \"#ccd3ff\" /* Palette.highlightColor20 */\n                }\n            },\n            /**\n             * The text styles of the flag.\n             *\n             * In styled mode, the styles are set in the\n             * `.highcharts-flag-series .highcharts-point` rule.\n             *\n             * @type    {Highcharts.CSSObject}\n             * @default {\"fontSize\": \"11px\", \"fontWeight\": \"bold\"}\n             * @product highstock\n             */\n            style: {\n                /** @ignore-option */\n                fontSize: '0.7em',\n                /** @ignore-option */\n                fontWeight: 'bold'\n            }\n        };\n        /**\n         * A `flags` series. If the [type](#series.flags.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.flags\n         * @excluding animation, borderColor, borderRadius, borderWidth, colorByPoint,\n         *            connectNulls, cropThreshold, dashStyle, dataGrouping, dataParser,\n         *            dataURL, gapSize, gapUnit, linecap, lineWidth, marker,\n         *            pointPadding, pointWidth, step, turboThreshold, useOhlcData\n         * @product   highstock\n         * @apioption series.flags\n         */\n        /**\n         * An array of data points for the series. For the `flags` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.flags.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 1,\n         *        title: \"A\",\n         *        text: \"First event\"\n         *    }, {\n         *        x: 1,\n         *        title: \"B\",\n         *        text: \"Second event\"\n         *    }]\n         *    ```\n         *\n         * @type      {Array<*>}\n         * @extends   series.line.data\n         * @excluding dataLabels, marker, name, y\n         * @product   highstock\n         * @apioption series.flags.data\n         */\n        /**\n         * The fill color of an individual flag. By default it inherits from\n         * the series color.\n         *\n         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n         * @product   highstock\n         * @apioption series.flags.data.fillColor\n         */\n        /**\n         * The longer text to be shown in the flag's tooltip.\n         *\n         * @type      {string}\n         * @product   highstock\n         * @apioption series.flags.data.text\n         */\n        /**\n         * The short text to be shown on the flag.\n         *\n         * @type      {string}\n         * @product   highstock\n         * @apioption series.flags.data.title\n         */\n        ''; // Keeps doclets above in transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSymbols.js', [_modules['Core/Renderer/RendererRegistry.js']], function (RendererRegistry) {\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var FlagsSymbols;\n        (function (FlagsSymbols) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const modifiedMembers = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SVGRendererClass) {\n                if (modifiedMembers.indexOf(SVGRendererClass) === -1) {\n                    modifiedMembers.push(SVGRendererClass);\n                    const symbols = SVGRendererClass.prototype.symbols;\n                    symbols.flag = flag;\n                    createPinSymbol(symbols, 'circle');\n                    createPinSymbol(symbols, 'square');\n                }\n                const RendererClass = RendererRegistry.getRendererType();\n                // The symbol callbacks are generated on the SVGRenderer object in all\n                // browsers.\n                if (modifiedMembers.indexOf(RendererClass)) {\n                    modifiedMembers.push(RendererClass);\n                }\n            }\n            FlagsSymbols.compose = compose;\n            /**\n             * Create the flag icon with anchor.\n             * @private\n             */\n            function flag(x, y, w, h, options) {\n                const anchorX = (options && options.anchorX) || x, anchorY = (options && options.anchorY) || y;\n                // To do: unwanted any cast because symbols.circle has wrong type, it\n                // actually returns an SVGPathArray\n                const path = this.circle(anchorX - 1, anchorY - 1, 2, 2);\n                path.push(['M', anchorX, anchorY], ['L', x, y + h], ['L', x, y], ['L', x + w, y], ['L', x + w, y + h], ['L', x, y + h], ['Z']);\n                return path;\n            }\n            /**\n             * Create the circlepin and squarepin icons with anchor.\n             * @private\n             */\n            function createPinSymbol(symbols, shape) {\n                symbols[(shape + 'pin')] = function (x, y, w, h, options) {\n                    const anchorX = options && options.anchorX, anchorY = options && options.anchorY;\n                    let path;\n                    // For single-letter flags, make sure circular flags are not taller\n                    // than their width\n                    if (shape === 'circle' && h > w) {\n                        x -= Math.round((h - w) / 2);\n                        w = h;\n                    }\n                    path = (symbols[shape])(x, y, w, h, options);\n                    if (anchorX && anchorY) {\n                        /**\n                         * If the label is below the anchor, draw the connecting line\n                         * from the top edge of the label, otherwise start drawing from\n                         * the bottom edge\n                         */\n                        let labelX = anchorX;\n                        if (shape === 'circle') {\n                            labelX = x + w / 2;\n                        }\n                        else {\n                            const startSeg = path[0];\n                            const endSeg = path[1];\n                            if (startSeg[0] === 'M' && endSeg[0] === 'L') {\n                                labelX = (startSeg[1] + endSeg[1]) / 2;\n                            }\n                        }\n                        const labelY = (y > anchorY) ? y : y + h;\n                        path.push([\n                            'M',\n                            labelX,\n                            labelY\n                        ], [\n                            'L',\n                            anchorX,\n                            anchorY\n                        ]);\n                        path = path.concat(symbols.circle(anchorX - 1, anchorY - 1, 2, 2));\n                    }\n                    return path;\n                };\n            }\n        })(FlagsSymbols || (FlagsSymbols = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return FlagsSymbols;\n    });\n    _registerModule(_modules, 'Series/OnSeriesComposition.js', [_modules['Series/Column/ColumnSeries.js'], _modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (ColumnSeries, H, Series, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { prototype: columnProto } = ColumnSeries;\n        const { prototype: seriesProto } = Series;\n        const { defined, pushUnique, stableSort } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var OnSeriesComposition;\n        (function (OnSeriesComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                if (pushUnique(composed, 'OnSeries')) {\n                    const seriesProto = SeriesClass.prototype;\n                    seriesProto.getPlotBox = getPlotBox;\n                    seriesProto.translate = translate;\n                }\n                return SeriesClass;\n            }\n            OnSeriesComposition.compose = compose;\n            /**\n             * Override getPlotBox. If the onSeries option is valid, return the plot box\n             * of the onSeries, otherwise proceed as usual.\n             *\n             * @private\n             */\n            function getPlotBox(name) {\n                return seriesProto.getPlotBox.call((this.options.onSeries &&\n                    this.chart.get(this.options.onSeries)) || this, name);\n            }\n            OnSeriesComposition.getPlotBox = getPlotBox;\n            /**\n             * Extend the translate method by placing the point on the related series\n             *\n             * @private\n             */\n            function translate() {\n                columnProto.translate.apply(this);\n                const series = this, options = series.options, chart = series.chart, points = series.points, optionsOnSeries = options.onSeries, onSeries = (optionsOnSeries &&\n                    chart.get(optionsOnSeries)), step = onSeries && onSeries.options.step, onData = (onSeries && onSeries.points), inverted = chart.inverted, xAxis = series.xAxis, yAxis = series.yAxis;\n                let cursor = points.length - 1, point, lastPoint, onKey = options.onKey || 'y', i = onData && onData.length, xOffset = 0, leftPoint, lastX, rightPoint, currentDataGrouping, distanceRatio;\n                // Relate to a master series\n                if (onSeries && onSeries.visible && i) {\n                    xOffset = (onSeries.pointXOffset || 0) + (onSeries.barW || 0) / 2;\n                    currentDataGrouping = onSeries.currentDataGrouping;\n                    lastX = (onData[i - 1].x +\n                        (currentDataGrouping ? currentDataGrouping.totalRange : 0)); // #2374\n                    // sort the data points\n                    stableSort(points, (a, b) => (a.x - b.x));\n                    onKey = 'plot' + onKey[0].toUpperCase() + onKey.substr(1);\n                    while (i-- && points[cursor]) {\n                        leftPoint = onData[i];\n                        point = points[cursor];\n                        point.y = leftPoint.y;\n                        if (leftPoint.x <= point.x &&\n                            typeof leftPoint[onKey] !== 'undefined') {\n                            if (point.x <= lastX) { // #803\n                                point.plotY = leftPoint[onKey];\n                                // Interpolate between points, #666\n                                if (leftPoint.x < point.x &&\n                                    !step) {\n                                    rightPoint = onData[i + 1];\n                                    if (rightPoint &&\n                                        typeof rightPoint[onKey] !== 'undefined') {\n                                        // If the series is spline, calculate Y of the\n                                        // point on the bezier line. #19264\n                                        if (defined(point.plotX) &&\n                                            onSeries.is('spline')) {\n                                            leftPoint = leftPoint;\n                                            rightPoint = rightPoint;\n                                            const p0 = [\n                                                leftPoint.plotX || 0,\n                                                leftPoint.plotY || 0\n                                            ], p3 = [\n                                                rightPoint.plotX || 0,\n                                                rightPoint.plotY || 0\n                                            ], p1 = (leftPoint.controlPoints?.high ||\n                                                p0), p2 = (rightPoint.controlPoints?.low ||\n                                                p3), pixelThreshold = 0.25, maxIterations = 100, calculateCoord = (t, key) => (\n                                            // The parametric formula for the\n                                            // cubic Bezier curve.\n                                            Math.pow(1 - t, 3) * p0[key] +\n                                                3 * (1 - t) * (1 - t) * t *\n                                                    p1[key] + 3 * (1 - t) * t * t *\n                                                p2[key] + t * t * t * p3[key]);\n                                            let tMin = 0, tMax = 1, t;\n                                            // Find `t` of the parametric function of\n                                            // the bezier curve for the given `plotX`.\n                                            for (let i = 0; i < maxIterations; i++) {\n                                                const tMid = (tMin + tMax) / 2;\n                                                const xMid = calculateCoord(tMid, 0);\n                                                if (xMid === null) {\n                                                    break;\n                                                }\n                                                if (Math.abs(xMid - point.plotX) < pixelThreshold) {\n                                                    t = tMid;\n                                                    break;\n                                                }\n                                                if (xMid < point.plotX) {\n                                                    tMin = tMid;\n                                                }\n                                                else {\n                                                    tMax = tMid;\n                                                }\n                                            }\n                                            if (defined(t)) {\n                                                point.plotY =\n                                                    calculateCoord(t, 1);\n                                                point.y =\n                                                    yAxis.toValue(point.plotY, true);\n                                            }\n                                        }\n                                        else {\n                                            // The distance ratio, between 0 and 1\n                                            distanceRatio =\n                                                (point.x - leftPoint.x) /\n                                                    (rightPoint.x - leftPoint.x);\n                                            point.plotY +=\n                                                distanceRatio *\n                                                    // The plotY distance\n                                                    (rightPoint[onKey] - leftPoint[onKey]);\n                                            point.y +=\n                                                distanceRatio *\n                                                    (rightPoint.y - leftPoint.y);\n                                        }\n                                    }\n                                }\n                            }\n                            cursor--;\n                            i++; // Check again for points in the same x position\n                            if (cursor < 0) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                // Add plotY position and handle stacking\n                points.forEach((point, i) => {\n                    let stackIndex;\n                    point.plotX += xOffset; // #2049\n                    // Undefined plotY means the point is either on axis, outside series\n                    // range or hidden series. If the series is outside the range of the\n                    // x axis it should fall through with an undefined plotY, but then\n                    // we must remove the shapeArgs (#847). For inverted charts, we need\n                    // to calculate position anyway, because series.invertGroups is not\n                    // defined\n                    if (typeof point.plotY === 'undefined' || inverted) {\n                        if (point.plotX >= 0 &&\n                            point.plotX <= xAxis.len) {\n                            // We're inside xAxis range\n                            if (inverted) {\n                                point.plotY = xAxis.translate(point.x, 0, 1, 0, 1);\n                                point.plotX = defined(point.y) ?\n                                    yAxis.translate(point.y, 0, 0, 0, 1) :\n                                    0;\n                            }\n                            else {\n                                point.plotY = (xAxis.opposite ? 0 : series.yAxis.len) +\n                                    xAxis.offset; // For the windbarb demo\n                            }\n                        }\n                        else {\n                            point.shapeArgs = {}; // 847\n                        }\n                    }\n                    // If multiple flags appear at the same x, order them into a stack\n                    lastPoint = points[i - 1];\n                    if (lastPoint && lastPoint.plotX === point.plotX) {\n                        if (typeof lastPoint.stackIndex === 'undefined') {\n                            lastPoint.stackIndex = 0;\n                        }\n                        stackIndex = lastPoint.stackIndex + 1;\n                    }\n                    point.stackIndex = stackIndex; // #3639\n                });\n                this.onSeries = onSeries;\n            }\n            OnSeriesComposition.translate = translate;\n        })(OnSeriesComposition || (OnSeriesComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OnSeriesComposition;\n    });\n    _registerModule(_modules, 'Series/Flags/FlagsSeries.js', [_modules['Series/Flags/FlagsPoint.js'], _modules['Series/Flags/FlagsSeriesDefaults.js'], _modules['Series/Flags/FlagsSymbols.js'], _modules['Core/Globals.js'], _modules['Series/OnSeriesComposition.js'], _modules['Core/Renderer/RendererUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (FlagsPoint, FlagsSeriesDefaults, FlagsSymbols, H, OnSeriesComposition, R, SeriesRegistry, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { distribute } = R;\n        const { series: Series, seriesTypes: { column: ColumnSeries } } = SeriesRegistry;\n        const { addEvent, defined, extend, isNumber, merge, objectEach, wrap } = U;\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * The Flags series.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.flags\n         *\n         * @augments Highcharts.Series\n         */\n        class FlagsSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Disable animation, but keep clipping (#8546).\n             * @private\n             */\n            animate(init) {\n                if (init) {\n                    this.setClip();\n                }\n            }\n            /**\n             * Draw the markers.\n             * @private\n             */\n            drawPoints() {\n                const series = this, points = series.points, chart = series.chart, renderer = chart.renderer, inverted = chart.inverted, options = series.options, optionsY = options.y, yAxis = series.yAxis, boxesMap = {}, boxes = [], borderRadius = isNumber(options.borderRadius) ?\n                    options.borderRadius : 0;\n                let plotX, plotY, shape, i, point, graphic, stackIndex, anchorY, attribs, outsideRight, centered;\n                i = points.length;\n                while (i--) {\n                    point = points[i];\n                    outsideRight =\n                        (inverted ? point.plotY : point.plotX) >\n                            series.xAxis.len;\n                    plotX = point.plotX;\n                    stackIndex = point.stackIndex;\n                    shape = point.options.shape || options.shape;\n                    plotY = point.plotY;\n                    if (typeof plotY !== 'undefined') {\n                        plotY = point.plotY + optionsY -\n                            (typeof stackIndex !== 'undefined' &&\n                                (stackIndex * options.stackDistance));\n                    }\n                    // Skip connectors for higher level stacked points\n                    point.anchorX = stackIndex ? void 0 : point.plotX;\n                    anchorY = stackIndex ? void 0 : point.plotY;\n                    centered = shape !== 'flag';\n                    graphic = point.graphic;\n                    // Only draw the point if y is defined and the flag is within\n                    // the visible area\n                    if (typeof plotY !== 'undefined' &&\n                        plotX >= 0 &&\n                        !outsideRight) {\n                        // #15384\n                        if (graphic && point.hasNewShapeType()) {\n                            graphic = graphic.destroy();\n                        }\n                        // Create the flag\n                        if (!graphic) {\n                            graphic = point.graphic = renderer.label('', 0, void 0, shape, void 0, void 0, options.useHTML)\n                                .addClass('highcharts-point')\n                                .add(series.markerGroup);\n                            // Add reference to the point for tracker (#6303)\n                            if (point.graphic.div) {\n                                point.graphic.div.point = point;\n                            }\n                            graphic.isNew = true;\n                        }\n                        graphic.attr({\n                            align: centered ? 'center' : 'left',\n                            width: options.width,\n                            height: options.height,\n                            'text-align': options.textAlign,\n                            r: borderRadius\n                        });\n                        if (!chart.styledMode) {\n                            graphic\n                                .attr(series.pointAttribs(point))\n                                .css(merge(options.style, point.style))\n                                .shadow(options.shadow);\n                        }\n                        if (plotX > 0) { // #3119\n                            plotX -= graphic.strokeWidth() % 2; // #4285\n                        }\n                        // Plant the flag\n                        attribs = {\n                            y: plotY,\n                            anchorY: anchorY\n                        };\n                        if (options.allowOverlapX) {\n                            attribs.x = plotX;\n                            attribs.anchorX = point.anchorX;\n                        }\n                        graphic.attr({\n                            // Allow empty string as a flag title (#20549)\n                            text: point.options.title ?? options.title ?? 'A'\n                        })[graphic.isNew ? 'attr' : 'animate'](attribs);\n                        // Rig for the distribute function\n                        if (!options.allowOverlapX) {\n                            if (!boxesMap[point.plotX]) {\n                                boxesMap[point.plotX] = {\n                                    align: centered ? 0.5 : 0,\n                                    size: graphic.width || 0,\n                                    target: plotX,\n                                    anchorX: plotX\n                                };\n                            }\n                            else {\n                                boxesMap[point.plotX].size = Math.max(boxesMap[point.plotX].size, graphic.width || 0);\n                            }\n                        }\n                        // Set the tooltip anchor position\n                        point.tooltipPos = [\n                            plotX,\n                            plotY + yAxis.pos - chart.plotTop\n                        ]; // #6327\n                    }\n                    else if (graphic) {\n                        point.graphic = graphic.destroy();\n                    }\n                }\n                // Handle X-dimension overlapping\n                if (!options.allowOverlapX) {\n                    let maxDistance = 100;\n                    objectEach(boxesMap, function (box) {\n                        box.plotX = box.anchorX;\n                        boxes.push(box);\n                        maxDistance = Math.max(box.size, maxDistance);\n                    });\n                    // If necessary (for overlapping or long labels)  distribute it\n                    // depending on the label width or a hardcoded value, #16041.\n                    distribute(boxes, inverted ? yAxis.len : this.xAxis.len, maxDistance);\n                    for (const point of points) {\n                        const plotX = point.plotX, graphic = point.graphic, box = graphic && boxesMap[plotX];\n                        if (box && graphic) {\n                            // Hide flag when its box position is not specified\n                            // (#8573, #9299)\n                            if (!defined(box.pos)) {\n                                graphic.hide().isNew = true;\n                            }\n                            else {\n                                graphic[graphic.isNew ? 'attr' : 'animate']({\n                                    x: box.pos + (box.align || 0) * box.size,\n                                    anchorX: point.anchorX\n                                }).show().isNew = false;\n                            }\n                        }\n                    }\n                }\n                // Can be a mix of SVG and HTML and we need events for both (#6303)\n                if (options.useHTML && series.markerGroup) {\n                    wrap(series.markerGroup, 'on', function (proceed) {\n                        return SVGElement.prototype.on.apply(\n                        // For HTML\n                        // eslint-disable-next-line no-invalid-this\n                        proceed.apply(this, [].slice.call(arguments, 1)), \n                        // And for SVG\n                        [].slice.call(arguments, 1));\n                    });\n                }\n            }\n            /**\n             * Extend the column trackers with listeners to expand and contract\n             * stacks.\n             * @private\n             */\n            drawTracker() {\n                const series = this, points = series.points;\n                super.drawTracker();\n                /* *\n                * Bring each stacked flag up on mouse over, this allows readability\n                * of vertically stacked elements as well as tight points on the x\n                * axis. #1924.\n                */\n                for (const point of points) {\n                    const graphic = point.graphic;\n                    if (graphic) {\n                        if (point.unbindMouseOver) {\n                            point.unbindMouseOver();\n                        }\n                        point.unbindMouseOver = addEvent(graphic.element, 'mouseover', function () {\n                            // Raise this point\n                            if (point.stackIndex > 0 &&\n                                !point.raised) {\n                                point._y = graphic.y;\n                                graphic.attr({\n                                    y: point._y - 8\n                                });\n                                point.raised = true;\n                            }\n                            // Revert other raised points\n                            for (const otherPoint of points) {\n                                if (otherPoint !== point &&\n                                    otherPoint.raised &&\n                                    otherPoint.graphic) {\n                                    otherPoint.graphic.attr({\n                                        y: otherPoint._y\n                                    });\n                                    otherPoint.raised = false;\n                                }\n                            }\n                        });\n                    }\n                }\n            }\n            /**\n             * Get presentational attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                const options = this.options, color = (point && point.color) || this.color;\n                let lineColor = options.lineColor, lineWidth = (point && point.lineWidth), fill = (point && point.fillColor) || options.fillColor;\n                if (state) {\n                    fill = options.states[state].fillColor;\n                    lineColor = options.states[state].lineColor;\n                    lineWidth = options.states[state].lineWidth;\n                }\n                return {\n                    fill: fill || color,\n                    stroke: lineColor || color,\n                    'stroke-width': lineWidth || options.lineWidth || 0\n                };\n            }\n            /**\n             * @private\n             */\n            setClip() {\n                Series.prototype.setClip.apply(this, arguments);\n                if (this.options.clip !== false &&\n                    this.sharedClipKey &&\n                    this.markerGroup) {\n                    this.markerGroup.clip(this.chart.sharedClips[this.sharedClipKey]);\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        FlagsSeries.compose = FlagsSymbols.compose;\n        FlagsSeries.defaultOptions = merge(ColumnSeries.defaultOptions, FlagsSeriesDefaults);\n        OnSeriesComposition.compose(FlagsSeries);\n        extend(FlagsSeries.prototype, {\n            allowDG: false,\n            forceCrop: true,\n            invertible: false, // Flags series group should not be invertible (#14063).\n            noSharedTooltip: true,\n            pointClass: FlagsPoint,\n            sorted: false,\n            takeOrdinalPosition: false, // #1074\n            trackerGroups: ['markerGroup'],\n            buildKDTree: noop,\n            /**\n             * Inherit the initialization from base Series.\n             * @private\n             */\n            init: Series.prototype.init\n        });\n        SeriesRegistry.registerSeriesType('flags', FlagsSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"circlepin\"|\"flag\"|\"squarepin\"} Highcharts.FlagsShapeValue\n         */\n        ''; // Detach doclets above\n\n        return FlagsSeries;\n    });\n    _registerModule(_modules, 'Core/Axis/BrokenAxis.js', [_modules['Core/Axis/Stacking/StackItem.js'], _modules['Core/Utilities.js']], function (StackItem, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, find, fireEvent, isArray, isNumber, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Axis with support of broken data rows.\n         * @private\n         */\n        var BrokenAxis;\n        (function (BrokenAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds support for broken axes.\n             * @private\n             */\n            function compose(AxisClass, SeriesClass) {\n                if (!AxisClass.keepProps.includes('brokenAxis')) {\n                    AxisClass.keepProps.push('brokenAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterSetTickPositions', onAxisAfterSetTickPositions);\n                    addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                    const seriesProto = SeriesClass.prototype;\n                    seriesProto.drawBreaks = seriesDrawBreaks;\n                    seriesProto.gappedPath = seriesGappedPath;\n                    addEvent(SeriesClass, 'afterGeneratePoints', onSeriesAfterGeneratePoints);\n                    addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n                }\n                return AxisClass;\n            }\n            BrokenAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterInit() {\n                if (typeof this.brokenAxis !== 'undefined') {\n                    this.brokenAxis.setBreaks(this.options.breaks, false);\n                }\n            }\n            /**\n             * Force Axis to be not-ordinal when breaks are defined.\n             * @private\n             */\n            function onAxisAfterSetOptions() {\n                const axis = this;\n                if (axis.brokenAxis?.hasBreaks) {\n                    axis.options.ordinal = false;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterSetTickPositions() {\n                const axis = this, brokenAxis = axis.brokenAxis;\n                if (brokenAxis?.hasBreaks) {\n                    const tickPositions = axis.tickPositions, info = axis.tickPositions.info, newPositions = [];\n                    for (let i = 0; i < tickPositions.length; i++) {\n                        if (!brokenAxis.isInAnyBreak(tickPositions[i])) {\n                            newPositions.push(tickPositions[i]);\n                        }\n                    }\n                    axis.tickPositions = newPositions;\n                    axis.tickPositions.info = info;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                const axis = this;\n                if (!axis.brokenAxis) {\n                    axis.brokenAxis = new Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterGeneratePoints() {\n                const { isDirty, options: { connectNulls }, points, xAxis, yAxis } = this;\n                // Set, or reset visibility of the points. Axis.setBreaks marks\n                // the series as isDirty\n                if (isDirty) {\n                    let i = points.length;\n                    while (i--) {\n                        const point = points[i];\n                        // Respect nulls inside the break (#4275)\n                        const nullGap = point.y === null && connectNulls === false;\n                        const isPointInBreak = (!nullGap && (xAxis?.brokenAxis?.isInAnyBreak(point.x, true) ||\n                            yAxis?.brokenAxis?.isInAnyBreak(point.y, true)));\n                        // Set point.visible if in any break.\n                        // If not in break, reset visible to original value.\n                        point.visible = isPointInBreak ?\n                            false :\n                            point.options.visible !== false;\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterRender() {\n                this.drawBreaks(this.xAxis, ['x']);\n                this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));\n            }\n            /**\n             * @private\n             */\n            function seriesDrawBreaks(axis, keys) {\n                const series = this, points = series.points;\n                let breaks, threshold, y;\n                if (axis?.brokenAxis?.hasBreaks) {\n                    const brokenAxis = axis.brokenAxis;\n                    keys.forEach(function (key) {\n                        breaks = brokenAxis?.breakArray || [];\n                        threshold = axis.isXAxis ?\n                            axis.min :\n                            pick(series.options.threshold, axis.min);\n                        // Array of breaks that have been \"zoomed-out\" which means that\n                        // they were shown previously, but now after zoom, they are not\n                        // (#19885).\n                        const breaksOutOfRange = axis?.options?.breaks?.filter(function (brk) {\n                            let isOut = true;\n                            // Iterate to see if \"brk\" is in axis range\n                            for (let i = 0; i < breaks.length; i++) {\n                                const otherBreak = breaks[i];\n                                if (otherBreak.from === brk.from &&\n                                    otherBreak.to === brk.to) {\n                                    isOut = false;\n                                    break;\n                                }\n                            }\n                            return isOut;\n                        });\n                        points.forEach(function (point) {\n                            y = pick(point['stack' + key.toUpperCase()], point[key]);\n                            breaks.forEach(function (brk) {\n                                if (isNumber(threshold) && isNumber(y)) {\n                                    let eventName = '';\n                                    if ((threshold < brk.from && y > brk.to) ||\n                                        (threshold > brk.from && y < brk.from)) {\n                                        eventName = 'pointBreak';\n                                    }\n                                    else if ((threshold < brk.from &&\n                                        y > brk.from &&\n                                        y < brk.to) || (threshold > brk.from &&\n                                        y > brk.to &&\n                                        y < brk.from)) {\n                                        eventName = 'pointInBreak';\n                                    }\n                                    if (eventName) {\n                                        fireEvent(axis, eventName, { point, brk });\n                                    }\n                                }\n                            });\n                            breaksOutOfRange?.forEach(function (brk) {\n                                fireEvent(axis, 'pointOutsideOfBreak', { point, brk });\n                            });\n                        });\n                    });\n                }\n            }\n            /**\n             * Extend getGraphPath by identifying gaps in the data so that we\n             * can draw a gap in the line or area. This was moved from ordinal\n             * axis module to broken axis module as of #5045.\n             *\n             * @private\n             * @function Highcharts.Series#gappedPath\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Gapped path\n             */\n            function seriesGappedPath() {\n                const currentDataGrouping = this.currentDataGrouping, groupingSize = currentDataGrouping?.gapSize, points = this.points.slice(), yAxis = this.yAxis;\n                let gapSize = this.options.gapSize, i = points.length - 1, stack;\n                /**\n                 * Defines when to display a gap in the graph, together with the\n                 * [gapUnit](plotOptions.series.gapUnit) option.\n                 *\n                 * In case when `dataGrouping` is enabled, points can be grouped\n                 * into a larger time span. This can make the grouped points to\n                 * have a greater distance than the absolute value of `gapSize`\n                 * property, which will result in disappearing graph completely.\n                 * To prevent this situation the mentioned distance between\n                 * grouped points is used instead of previously defined\n                 * `gapSize`.\n                 *\n                 * In practice, this option is most often used to visualize gaps\n                 * in time series. In a stock chart, intraday data is available\n                 * for daytime hours, while gaps will appear in nights and\n                 * weekends.\n                 *\n                 * @see [gapUnit](plotOptions.series.gapUnit)\n                 * @see [xAxis.breaks](#xAxis.breaks)\n                 *\n                 * @sample {highstock} stock/plotoptions/series-gapsize/\n                 * Setting the gap size to 2 introduces gaps for weekends in\n                 * daily datasets.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @product   highstock\n                 * @requires  modules/broken-axis\n                 * @apioption plotOptions.series.gapSize\n                 */\n                /**\n                 * Together with [gapSize](plotOptions.series.gapSize), this\n                 * option defines where to draw gaps in the graph.\n                 *\n                 * When the `gapUnit` is `\"relative\"` (default), a gap size of 5\n                 * means that if the distance between two points is greater than\n                 * 5 times that of the two closest points, the graph will be\n                 * broken.\n                 *\n                 * When the `gapUnit` is `\"value\"`, the gap is based on absolute\n                 * axis values, which on a datetime axis is milliseconds. This\n                 * also applies to the navigator series that inherits gap\n                 * options from the base series.\n                 *\n                 * @see [gapSize](plotOptions.series.gapSize)\n                 *\n                 * @type       {string}\n                 * @default    relative\n                 * @since      5.0.13\n                 * @product    highstock\n                 * @validvalue [\"relative\", \"value\"]\n                 * @requires   modules/broken-axis\n                 * @apioption  plotOptions.series.gapUnit\n                 */\n                if (gapSize && i > 0) { // #5008\n                    // Gap unit is relative\n                    if (this.options.gapUnit !== 'value') {\n                        gapSize *= this.basePointRange;\n                    }\n                    // Setting a new gapSize in case dataGrouping is enabled\n                    // (#7686)\n                    if (groupingSize &&\n                        groupingSize > gapSize &&\n                        // Except when DG is forced (e.g. from other series)\n                        // and has lower granularity than actual points (#11351)\n                        groupingSize >= this.basePointRange) {\n                        gapSize = groupingSize;\n                    }\n                    // Extension for ordinal breaks\n                    let current, next;\n                    while (i--) {\n                        // Reassign next if it is not visible\n                        if (!(next && next.visible !== false)) {\n                            next = points[i + 1];\n                        }\n                        current = points[i];\n                        // Skip iteration if one of the points is not visible\n                        if (next.visible === false || current.visible === false) {\n                            continue;\n                        }\n                        if (next.x - current.x > gapSize) {\n                            const xRange = (current.x + next.x) / 2;\n                            points.splice(// Insert after this one\n                            i + 1, 0, {\n                                isNull: true,\n                                x: xRange\n                            });\n                            // For stacked chart generate empty stack items, #6546\n                            if (yAxis.stacking && this.options.stacking) {\n                                stack = yAxis.stacking.stacks[this.stackKey][xRange] = new StackItem(yAxis, yAxis.options.stackLabels, false, xRange, this.stack);\n                                stack.total = 0;\n                            }\n                        }\n                        // Assign current to next for the upcoming iteration\n                        next = current;\n                    }\n                }\n                // Call base method\n                return this.getGraphPath(points);\n            }\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Provides support for broken axes.\n             * @private\n             * @class\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                static isInBreak(brk, val) {\n                    const repeat = brk.repeat || Infinity, from = brk.from, length = brk.to - brk.from, test = (val >= from ?\n                        (val - from) % repeat :\n                        repeat - ((from - val) % repeat));\n                    let ret;\n                    if (!brk.inclusive) {\n                        ret = test < length && test !== 0;\n                    }\n                    else {\n                        ret = test <= length;\n                    }\n                    return ret;\n                }\n                /**\n                 * @private\n                 */\n                static lin2Val(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.from >= nval) {\n                            break;\n                        }\n                        else if (brk.to < nval) {\n                            nval += brk.len;\n                        }\n                        else if (Additions.isInBreak(brk, nval)) {\n                            nval += brk.len;\n                        }\n                    }\n                    return nval;\n                }\n                /**\n                 * @private\n                 */\n                static val2Lin(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.to <= val) {\n                            nval -= brk.len;\n                        }\n                        else if (brk.from >= val) {\n                            break;\n                        }\n                        else if (Additions.isInBreak(brk, val)) {\n                            nval -= (val - brk.from);\n                            break;\n                        }\n                    }\n                    return nval;\n                }\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                constructor(axis) {\n                    this.hasBreaks = false;\n                    this.axis = axis;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Returns the first break found where the x is larger then break.from\n                 * and smaller then break.to.\n                 *\n                 * @param {number} x\n                 * The number which should be within a break.\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} breaks\n                 * The array of breaks to search within.\n                 *\n                 * @return {Highcharts.XAxisBreaksOptions|undefined}\n                 * Returns the first break found that matches, returns false if no break\n                 * is found.\n                 */\n                findBreakAt(x, breaks) {\n                    return find(breaks, function (b) {\n                        return b.from < x && x < b.to;\n                    });\n                }\n                /**\n                 * @private\n                 */\n                isInAnyBreak(val, testKeep) {\n                    const brokenAxis = this, axis = brokenAxis.axis, breaks = axis.options.breaks || [];\n                    let i = breaks.length, inbrk, keep, ret;\n                    if (i && isNumber(val)) {\n                        while (i--) {\n                            if (Additions.isInBreak(breaks[i], val)) {\n                                inbrk = true;\n                                if (!keep) {\n                                    keep = pick(breaks[i].showPoints, !axis.isXAxis);\n                                }\n                            }\n                        }\n                        if (inbrk && testKeep) {\n                            ret = inbrk && !keep;\n                        }\n                        else {\n                            ret = inbrk;\n                        }\n                    }\n                    return ret;\n                }\n                /**\n                 * Dynamically set or unset breaks in an axis. This function in lighter\n                 * than using Axis.update, and it also preserves animation.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#setBreaks\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} [breaks]\n                 * The breaks to add. When `undefined` it removes existing breaks.\n                 *\n                 * @param {boolean} [redraw=true]\n                 * Whether to redraw the chart immediately.\n                 */\n                setBreaks(breaks, redraw) {\n                    const brokenAxis = this;\n                    const axis = brokenAxis.axis;\n                    const hasBreaks = isArray(breaks) &&\n                        !!breaks.length &&\n                        !!Object.keys(breaks[0]).length; // Check for [{}], #16368.\n                    axis.isDirty = brokenAxis.hasBreaks !== hasBreaks;\n                    brokenAxis.hasBreaks = hasBreaks;\n                    if (breaks !== axis.options.breaks) {\n                        axis.options.breaks = axis.userOptions.breaks = breaks;\n                    }\n                    axis.forceRedraw = true; // Force recalculation in setScale\n                    // Recalculate series related to the axis.\n                    axis.series.forEach(function (series) {\n                        series.isDirty = true;\n                    });\n                    if (!hasBreaks && axis.val2lin === Additions.val2Lin) {\n                        // Revert to prototype functions\n                        delete axis.val2lin;\n                        delete axis.lin2val;\n                    }\n                    if (hasBreaks) {\n                        axis.userOptions.ordinal = false;\n                        axis.lin2val = Additions.lin2Val;\n                        axis.val2lin = Additions.val2Lin;\n                        axis.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {\n                            // If trying to set extremes inside a break, extend min to\n                            // after, and max to before the break ( #3857 )\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = (this.options.breaks || []);\n                                let axisBreak;\n                                while ((axisBreak = brokenAxis.findBreakAt(newMin, breaks))) {\n                                    newMin = axisBreak.to;\n                                }\n                                while ((axisBreak = brokenAxis.findBreakAt(newMax, breaks))) {\n                                    newMax = axisBreak.from;\n                                }\n                                // If both min and max is within the same break.\n                                if (newMax < newMin) {\n                                    newMax = newMin;\n                                }\n                            }\n                            axis.constructor.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);\n                        };\n                        axis.setAxisTranslation = function () {\n                            axis.constructor.prototype.setAxisTranslation.call(this);\n                            brokenAxis.unitLength = void 0;\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = axis.options.breaks || [], \n                                // Temporary one:\n                                breakArrayT = [], breakArray = [], pointRangePadding = pick(axis.pointRangePadding, 0);\n                                let length = 0, inBrk, repeat, min = axis.userMin || axis.min, max = axis.userMax || axis.max, start, i;\n                                // Min & max check (#4247)\n                                breaks.forEach(function (brk) {\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        if (Additions.isInBreak(brk, min)) {\n                                            min += ((brk.to % repeat) -\n                                                (min % repeat));\n                                        }\n                                        if (Additions.isInBreak(brk, max)) {\n                                            max -= ((max % repeat) -\n                                                (brk.from % repeat));\n                                        }\n                                    }\n                                });\n                                // Construct an array holding all breaks in the axis\n                                breaks.forEach(function (brk) {\n                                    start = brk.from;\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        while (start - repeat > min) {\n                                            start -= repeat;\n                                        }\n                                        while (start < min) {\n                                            start += repeat;\n                                        }\n                                        for (i = start; i < max; i += repeat) {\n                                            breakArrayT.push({\n                                                value: i,\n                                                move: 'in'\n                                            });\n                                            breakArrayT.push({\n                                                value: i + brk.to - brk.from,\n                                                move: 'out',\n                                                size: brk.breakSize\n                                            });\n                                        }\n                                    }\n                                });\n                                breakArrayT.sort(function (a, b) {\n                                    return ((a.value === b.value) ?\n                                        ((a.move === 'in' ? 0 : 1) -\n                                            (b.move === 'in' ? 0 : 1)) :\n                                        a.value - b.value);\n                                });\n                                // Simplify the breaks\n                                inBrk = 0;\n                                start = min;\n                                breakArrayT.forEach(function (brk) {\n                                    inBrk += (brk.move === 'in' ? 1 : -1);\n                                    if (inBrk === 1 && brk.move === 'in') {\n                                        start = brk.value;\n                                    }\n                                    if (inBrk === 0 && isNumber(start)) {\n                                        breakArray.push({\n                                            from: start,\n                                            to: brk.value,\n                                            len: brk.value - start - (brk.size || 0)\n                                        });\n                                        length += (brk.value -\n                                            start -\n                                            (brk.size || 0));\n                                    }\n                                });\n                                brokenAxis.breakArray = breakArray;\n                                // Used with staticScale, and below the actual axis\n                                // length, when breaks are subtracted.\n                                if (isNumber(min) &&\n                                    isNumber(max) &&\n                                    isNumber(axis.min)) {\n                                    brokenAxis.unitLength = max - min - length +\n                                        pointRangePadding;\n                                    fireEvent(axis, 'afterBreaks');\n                                    if (axis.staticScale) {\n                                        axis.transA = axis.staticScale;\n                                    }\n                                    else if (brokenAxis.unitLength) {\n                                        axis.transA *=\n                                            (max - axis.min + pointRangePadding) /\n                                                brokenAxis.unitLength;\n                                    }\n                                    if (pointRangePadding) {\n                                        axis.minPixelPadding =\n                                            axis.transA * (axis.minPointOffset || 0);\n                                    }\n                                    axis.min = min;\n                                    axis.max = max;\n                                }\n                            }\n                        };\n                    }\n                    if (pick(redraw, true)) {\n                        axis.chart.redraw();\n                    }\n                }\n            }\n            BrokenAxis.Additions = Additions;\n        })(BrokenAxis || (BrokenAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BrokenAxis;\n    });\n    _registerModule(_modules, 'masters/modules/broken-axis.src.js', [_modules['Core/Globals.js'], _modules['Core/Axis/BrokenAxis.js']], function (Highcharts, BrokenAxis) {\n\n        const G = Highcharts;\n        G.BrokenAxis = G.BrokenAxis || BrokenAxis;\n        G.BrokenAxis.compose(G.Axis, G.Series);\n\n        return Highcharts;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationRegistry.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Define the available approximation types. The data grouping\n         * approximations takes an array or numbers as the first parameter. In case\n         * of ohlc, four arrays are sent in as four parameters. Each array consists\n         * only of numbers. In case null values belong to the group, the property\n         * .hasNulls will be set to true on the array.\n         *\n         * @product highstock\n         *\n         * @private\n         */\n        const ApproximationRegistry = {\n        // Approximations added programmatically\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ApproximationRegistry;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/ApproximationDefaults.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { arrayMax, arrayMin, correctFloat, extend, isNumber } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function average(arr) {\n            const len = arr.length;\n            let ret = sum(arr);\n            // If we have a number, return it divided by the length. If not,\n            // return null or undefined based on what the sum method finds.\n            if (isNumber(ret) && len) {\n                ret = correctFloat(ret / len);\n            }\n            return ret;\n        }\n        /**\n         * The same as average, but for series with multiple values, like area ranges.\n         * @private\n         */\n        function averages() {\n            const ret = [];\n            [].forEach.call(arguments, function (arr) {\n                ret.push(average(arr));\n            });\n            // Return undefined when first elem. is undefined and let\n            // sum method handle null (#7377)\n            return typeof ret[0] === 'undefined' ? void 0 : ret;\n        }\n        /**\n         * @private\n         */\n        function close(arr) {\n            return arr.length ?\n                arr[arr.length - 1] :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function high(arr) {\n            return arr.length ?\n                arrayMax(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * HLC, OHLC and range are special cases where a multidimensional array is input\n         * and an array is output.\n         * @private\n         */\n        function hlc(high, low, close) {\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function low(arr) {\n            return arr.length ?\n                arrayMin(arr) :\n                (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function ohlc(open, high, low, close) {\n            open = ApproximationRegistry.open(open);\n            high = ApproximationRegistry.high(high);\n            low = ApproximationRegistry.low(low);\n            close = ApproximationRegistry.close(close);\n            if (isNumber(open) ||\n                isNumber(high) ||\n                isNumber(low) ||\n                isNumber(close)) {\n                return [open, high, low, close];\n            }\n        }\n        /**\n         * @private\n         */\n        function open(arr) {\n            return arr.length ? arr[0] : (arr.hasNulls ? null : void 0);\n        }\n        /**\n         * @private\n         */\n        function range(low, high) {\n            low = ApproximationRegistry.low(low);\n            high = ApproximationRegistry.high(high);\n            if (isNumber(low) || isNumber(high)) {\n                return [low, high];\n            }\n            if (low === null && high === null) {\n                return null;\n            }\n            // Else, return is undefined\n        }\n        /**\n         * @private\n         */\n        function sum(arr) {\n            let len = arr.length, ret;\n            // 1. it consists of nulls exclusive\n            if (!len && arr.hasNulls) {\n                ret = null;\n                // 2. it has a length and real values\n            }\n            else if (len) {\n                ret = 0;\n                while (len--) {\n                    ret += arr[len];\n                }\n            }\n            // 3. it has zero length, so just return undefined\n            // => doNothing()\n            return ret;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ApproximationDefaults = {\n            average,\n            averages,\n            close,\n            high,\n            hlc,\n            low,\n            ohlc,\n            open,\n            range,\n            sum\n        };\n        extend(ApproximationRegistry, ApproximationDefaults);\n\n        return ApproximationDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Common options\n         * @private\n         */\n        const common = {\n            /// enabled: null, // (true for stock charts, false for basic),\n            // forced: undefined,\n            groupPixelWidth: 2,\n            // The first one is the point or start value, the second is the start\n            // value if we're dealing with range, the third one is the end value if\n            // dealing with a range\n            dateTimeLabelFormats: {\n                millisecond: [\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '%A, %e %b, %H:%M:%S.%L',\n                    '-%H:%M:%S.%L'\n                ],\n                second: [\n                    '%A, %e %b, %H:%M:%S',\n                    '%A, %e %b, %H:%M:%S',\n                    '-%H:%M:%S'\n                ],\n                minute: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                hour: [\n                    '%A, %e %b, %H:%M',\n                    '%A, %e %b, %H:%M',\n                    '-%H:%M'\n                ],\n                day: [\n                    '%A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                week: [\n                    'Week from %A, %e %b %Y',\n                    '%A, %e %b',\n                    '-%A, %e %b %Y'\n                ],\n                month: [\n                    '%B %Y',\n                    '%B',\n                    '-%B %Y'\n                ],\n                year: [\n                    '%Y',\n                    '%Y',\n                    '-%Y'\n                ]\n            }\n            /// smoothed = false, // enable this for navigator series only\n        };\n        /**\n         * Extends common options\n         * @private\n         */\n        const seriesSpecific = {\n            line: {},\n            spline: {},\n            area: {},\n            areaspline: {},\n            arearange: {},\n            column: {\n                groupPixelWidth: 10\n            },\n            columnrange: {\n                groupPixelWidth: 10\n            },\n            candlestick: {\n                groupPixelWidth: 10\n            },\n            ohlc: {\n                groupPixelWidth: 5\n            },\n            hlc: {\n                groupPixelWidth: 5\n                // Move to HeikinAshiSeries.ts after refactoring data grouping.\n            },\n            heikinashi: {\n                groupPixelWidth: 10\n            }\n        };\n        /**\n         * Units are defined in a separate array to allow complete overriding in\n         * case of a user option.\n         * @private\n         */\n        const units = [\n            [\n                'millisecond', // Unit name\n                [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // Allowed multiples\n            ], [\n                'second',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'minute',\n                [1, 2, 5, 10, 15, 30]\n            ], [\n                'hour',\n                [1, 2, 3, 4, 6, 8, 12]\n            ], [\n                'day',\n                [1]\n            ], [\n                'week',\n                [1]\n            ], [\n                'month',\n                [1, 3, 6]\n            ], [\n                'year',\n                null\n            ]\n        ];\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingDefaults = {\n            common,\n            seriesSpecific,\n            units\n        };\n\n        return DataGroupingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingAxisComposition.js', [_modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Utilities.js']], function (DataGroupingDefaults, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, extend, merge, pick } = U;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let AxisConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Check the groupPixelWidth and apply the grouping if needed.\n         * Fired only after processing the data.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#applyGrouping\n         */\n        function applyGrouping(e) {\n            const axis = this, series = axis.series;\n            // Reset the groupPixelWidth for all series, #17141.\n            series.forEach(function (series) {\n                series.groupPixelWidth = void 0; // #2110\n            });\n            series.forEach(function (series) {\n                series.groupPixelWidth = (axis.getGroupPixelWidth &&\n                    axis.getGroupPixelWidth());\n                if (series.groupPixelWidth) {\n                    series.hasProcessed = true; // #2692\n                }\n                // Fire independing on series.groupPixelWidth to always set a proper\n                // dataGrouping state, (#16238)\n                series.applyGrouping(!!e.hasExtremesChanged);\n            });\n        }\n        /**\n         * @private\n         */\n        function compose(AxisClass) {\n            AxisConstructor = AxisClass;\n            const axisProto = AxisClass.prototype;\n            if (!axisProto.applyGrouping) {\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                // When all series are processed, calculate the group pixel width and\n                // then if this value is different than zero apply groupings.\n                addEvent(AxisClass, 'postProcessData', applyGrouping);\n                extend(axisProto, {\n                    applyGrouping,\n                    getGroupPixelWidth,\n                    setDataGrouping\n                });\n            }\n        }\n        /**\n         * Get the data grouping pixel width based on the greatest defined individual\n         * width of the axis' series, and if whether one of the axes need grouping.\n         * @private\n         */\n        function getGroupPixelWidth() {\n            const series = this.series;\n            let i = series.length, groupPixelWidth = 0, doGrouping = false, dataLength, dgOptions;\n            // If one of the series needs grouping, apply it to all (#1634)\n            while (i--) {\n                dgOptions = series[i].options.dataGrouping;\n                if (dgOptions) { // #2692\n                    // If multiple series are compared on the same x axis, give them the\n                    // same group pixel width (#334)\n                    groupPixelWidth = Math.max(groupPixelWidth, \n                    // Fallback to commonOptions (#9693)\n                    pick(dgOptions.groupPixelWidth, DataGroupingDefaults.common.groupPixelWidth));\n                    dataLength = (series[i].processedXData || series[i].data).length;\n                    // Execute grouping if the amount of points is greater than the\n                    // limit defined in groupPixelWidth\n                    if (series[i].groupPixelWidth ||\n                        (dataLength >\n                            (this.chart.plotSizeX / groupPixelWidth)) ||\n                        (dataLength && dgOptions.forced)) {\n                        doGrouping = true;\n                    }\n                }\n            }\n            return doGrouping ? groupPixelWidth : 0;\n        }\n        /**\n         * When resetting the scale reset the hasProcessed flag to avoid taking\n         * previous data grouping of neighbour series into account when determining\n         * group pixel width (#2692).\n         * @private\n         */\n        function onAfterSetScale() {\n            this.series.forEach(function (series) {\n                series.hasProcessed = false;\n            });\n        }\n        /**\n         * Highcharts Stock only. Force data grouping on all the axis' series.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Axis#setDataGrouping\n         *\n         * @param {boolean|Highcharts.DataGroupingOptionsObject} [dataGrouping]\n         *        A `dataGrouping` configuration. Use `false` to disable data grouping\n         *        dynamically.\n         *\n         * @param {boolean} [redraw=true]\n         *        Whether to redraw the chart or wait for a later call to\n         *        {@link Chart#redraw}.\n         */\n        function setDataGrouping(dataGrouping, redraw) {\n            const axis = this;\n            let i;\n            redraw = pick(redraw, true);\n            if (!dataGrouping) {\n                dataGrouping = {\n                    forced: false,\n                    units: null\n                };\n            }\n            // Axis is instantiated, update all series\n            if (this instanceof AxisConstructor) {\n                i = this.series.length;\n                while (i--) {\n                    this.series[i].update({\n                        dataGrouping: dataGrouping\n                    }, false);\n                }\n                // Axis not yet instantiated, alter series options\n            }\n            else {\n                this.chart.options.series.forEach(function (seriesOptions) {\n                    // Merging dataGrouping options with already defined options #16759\n                    seriesOptions.dataGrouping = typeof dataGrouping === 'boolean' ?\n                        dataGrouping :\n                        merge(dataGrouping, seriesOptions.dataGrouping);\n                });\n            }\n            // Clear ordinal slope, so we won't accidentally use the old one (#7827)\n            if (axis.ordinal) {\n                axis.ordinal.slope = void 0;\n            }\n            if (redraw) {\n                this.chart.redraw();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingAxisComposition = {\n            compose\n        };\n\n        return DataGroupingAxisComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGroupingSeriesComposition.js', [_modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Core/Axis/DateTimeAxis.js'], _modules['Core/Defaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (ApproximationRegistry, DataGroupingDefaults, DateTimeAxis, D, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: seriesProto } } = SeriesRegistry;\n        const { addEvent, defined, error, extend, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const baseGeneratePoints = seriesProto.generatePoints;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function adjustExtremes(xAxis, groupedXData) {\n            // Make sure the X axis extends to show the first group (#2533)\n            // But only for visible series (#5493, #6393)\n            if (defined(groupedXData[0]) &&\n                isNumber(xAxis.min) &&\n                isNumber(xAxis.dataMin) &&\n                groupedXData[0] < xAxis.min) {\n                if ((!defined(xAxis.options.min) &&\n                    xAxis.min <= xAxis.dataMin) ||\n                    xAxis.min === xAxis.dataMin) {\n                    xAxis.min = Math.min(groupedXData[0], xAxis.min);\n                }\n                xAxis.dataMin = Math.min(groupedXData[0], xAxis.dataMin);\n            }\n            // When the last anchor set, change the extremes that\n            // the last point is visible (#12455).\n            if (defined(groupedXData[groupedXData.length - 1]) &&\n                isNumber(xAxis.max) &&\n                isNumber(xAxis.dataMax) &&\n                groupedXData[groupedXData.length - 1] > xAxis.max) {\n                if ((!defined(xAxis.options.max) &&\n                    isNumber(xAxis.dataMax) &&\n                    xAxis.max >= xAxis.dataMax) || xAxis.max === xAxis.dataMax) {\n                    xAxis.max = Math.max(groupedXData[groupedXData.length - 1], xAxis.max);\n                }\n                xAxis.dataMax = Math.max(groupedXData[groupedXData.length - 1], xAxis.dataMax);\n            }\n        }\n        /**\n         * @private\n         */\n        function anchorPoints(series, groupedXData, xMax) {\n            const options = series.options, dataGroupingOptions = options.dataGrouping, totalRange = (series.currentDataGrouping && series.currentDataGrouping.gapSize);\n            if (!(dataGroupingOptions &&\n                series.xData &&\n                totalRange &&\n                series.groupMap)) {\n                return;\n            }\n            const groupedDataLastIndex = groupedXData.length - 1, anchor = dataGroupingOptions.anchor, firstAnchor = dataGroupingOptions.firstAnchor, lastAnchor = dataGroupingOptions.lastAnchor;\n            let anchorIndexIterator = groupedXData.length - 1, anchorFirstIndex = 0;\n            // Change the first point position, but only when it is\n            // the first point in the data set not in the current zoom.\n            if (firstAnchor && series.xData[0] >= groupedXData[0]) {\n                anchorFirstIndex++;\n                const groupStart = series.groupMap[0].start, groupLength = series.groupMap[0].length;\n                let firstGroupEnd;\n                if (isNumber(groupStart) && isNumber(groupLength)) {\n                    firstGroupEnd = groupStart + (groupLength - 1);\n                }\n                groupedXData[0] = {\n                    start: groupedXData[0],\n                    middle: groupedXData[0] + 0.5 * totalRange,\n                    end: groupedXData[0] + totalRange,\n                    firstPoint: series.xData[0],\n                    lastPoint: firstGroupEnd && series.xData[firstGroupEnd]\n                }[firstAnchor];\n            }\n            // Change the last point position but only when it is\n            // the last point in the data set not in the current zoom,\n            // or if it is not the 1st point simultaneously.\n            if (groupedDataLastIndex > 0 &&\n                lastAnchor &&\n                totalRange &&\n                groupedXData[groupedDataLastIndex] >= xMax - totalRange) {\n                anchorIndexIterator--;\n                const lastGroupStart = series.groupMap[series.groupMap.length - 1].start;\n                groupedXData[groupedDataLastIndex] = {\n                    start: groupedXData[groupedDataLastIndex],\n                    middle: groupedXData[groupedDataLastIndex] + 0.5 * totalRange,\n                    end: groupedXData[groupedDataLastIndex] + totalRange,\n                    firstPoint: lastGroupStart && series.xData[lastGroupStart],\n                    lastPoint: series.xData[series.xData.length - 1]\n                }[lastAnchor];\n            }\n            if (anchor && anchor !== 'start') {\n                const shiftInterval = (totalRange *\n                    { middle: 0.5, end: 1 }[anchor]);\n                // Anchor the rest of the points apart from the ones, that were\n                // previously moved.\n                while (anchorIndexIterator >= anchorFirstIndex) {\n                    groupedXData[anchorIndexIterator] += shiftInterval;\n                    anchorIndexIterator--;\n                }\n            }\n        }\n        /**\n         * For the processed data, calculate the grouped data if needed.\n         *\n         * @private\n         * @function Highcharts.Series#applyGrouping\n         */\n        function applyGrouping(hasExtremesChanged) {\n            const series = this, chart = series.chart, options = series.options, dataGroupingOptions = options.dataGrouping, groupingEnabled = series.allowDG !== false && dataGroupingOptions &&\n                pick(dataGroupingOptions.enabled, chart.options.isStock), reserveSpace = series.reserveSpace(), lastDataGrouping = this.currentDataGrouping;\n            let currentDataGrouping, croppedData, revertRequireSorting = false;\n            // Data needs to be sorted for dataGrouping\n            if (groupingEnabled && !series.requireSorting) {\n                series.requireSorting = revertRequireSorting = true;\n            }\n            // Skip if skipDataGrouping method returns false or if grouping is disabled\n            // (in that order).\n            const skip = skipDataGrouping(series, hasExtremesChanged) === false || !groupingEnabled;\n            // Revert original requireSorting value if changed\n            if (revertRequireSorting) {\n                series.requireSorting = false;\n            }\n            if (skip) {\n                return;\n            }\n            series.destroyGroupedData();\n            const processedXData = dataGroupingOptions.groupAll ?\n                series.xData :\n                series.processedXData, processedYData = dataGroupingOptions.groupAll ?\n                series.yData :\n                series.processedYData, plotSizeX = chart.plotSizeX, xAxis = series.xAxis, ordinal = xAxis.options.ordinal, groupPixelWidth = series.groupPixelWidth;\n            let i, hasGroupedData;\n            // Execute grouping if the amount of points is greater than the limit\n            // defined in groupPixelWidth\n            if (groupPixelWidth &&\n                processedXData &&\n                processedXData.length &&\n                plotSizeX) {\n                hasGroupedData = true;\n                // Force recreation of point instances in series.translate, #5699\n                series.isDirty = true;\n                series.points = null; // #6709\n                const extremes = xAxis.getExtremes(), xMin = extremes.min, xMax = extremes.max, groupIntervalFactor = (ordinal &&\n                    xAxis.ordinal &&\n                    xAxis.ordinal.getGroupIntervalFactor(xMin, xMax, series)) || 1, interval = (groupPixelWidth * (xMax - xMin) / plotSizeX) *\n                    groupIntervalFactor, groupPositions = xAxis.getTimeTicks(DateTimeAxis.Additions.prototype.normalizeTimeTickInterval(interval, dataGroupingOptions.units ||\n                    DataGroupingDefaults.units), \n                // Processed data may extend beyond axis (#4907)\n                Math.min(xMin, processedXData[0]), Math.max(xMax, processedXData[processedXData.length - 1]), xAxis.options.startOfWeek, processedXData, series.closestPointRange), groupedData = seriesProto.groupData.apply(series, [\n                    processedXData,\n                    processedYData,\n                    groupPositions,\n                    dataGroupingOptions.approximation\n                ]);\n                let groupedXData = groupedData.groupedXData, groupedYData = groupedData.groupedYData, gapSize = 0;\n                // The smoothed option is deprecated, instead, there is a fallback\n                // to the new anchoring mechanism. #12455.\n                if (dataGroupingOptions &&\n                    dataGroupingOptions.smoothed &&\n                    groupedXData.length) {\n                    dataGroupingOptions.firstAnchor = 'firstPoint';\n                    dataGroupingOptions.anchor = 'middle';\n                    dataGroupingOptions.lastAnchor = 'lastPoint';\n                    error(32, false, chart, {\n                        'dataGrouping.smoothed': 'use dataGrouping.anchor'\n                    });\n                }\n                // Record what data grouping values were used\n                for (i = 1; i < groupPositions.length; i++) {\n                    // The grouped gapSize needs to be the largest distance between\n                    // the group to capture varying group sizes like months or DST\n                    // crossing (#10000). Also check that the gap is not at the\n                    // start of a segment.\n                    if (!groupPositions.info.segmentStarts ||\n                        groupPositions.info.segmentStarts.indexOf(i) === -1) {\n                        gapSize = Math.max(groupPositions[i] - groupPositions[i - 1], gapSize);\n                    }\n                }\n                currentDataGrouping = groupPositions.info;\n                currentDataGrouping.gapSize = gapSize;\n                series.closestPointRange = groupPositions.info.totalRange;\n                series.groupMap = groupedData.groupMap;\n                series.currentDataGrouping = currentDataGrouping;\n                anchorPoints(series, groupedXData, xMax);\n                if (reserveSpace) {\n                    adjustExtremes(xAxis, groupedXData);\n                }\n                // We calculated all group positions but we should render\n                // only the ones within the visible range\n                if (dataGroupingOptions.groupAll) {\n                    // Keep the reference to all grouped points\n                    // for further calculation (eg. heikinashi).\n                    series.allGroupedData = groupedYData;\n                    croppedData = series.cropData(groupedXData, groupedYData, xAxis.min, xAxis.max);\n                    groupedXData = croppedData.xData;\n                    groupedYData = croppedData.yData;\n                    series.cropStart = croppedData.start; // #15005\n                }\n                // Set series props\n                series.processedXData = groupedXData;\n                series.processedYData = groupedYData;\n            }\n            else {\n                series.groupMap = null;\n                series.currentDataGrouping = void 0;\n            }\n            series.hasGroupedData = hasGroupedData;\n            series.preventGraphAnimation =\n                (lastDataGrouping && lastDataGrouping.totalRange) !==\n                    (currentDataGrouping && currentDataGrouping.totalRange);\n        }\n        /**\n         * @private\n         */\n        function compose(SeriesClass) {\n            const seriesProto = SeriesClass.prototype;\n            if (!seriesProto.applyGrouping) {\n                const PointClass = SeriesClass.prototype.pointClass;\n                // Override point prototype to throw a warning when trying to update\n                // grouped points.\n                addEvent(PointClass, 'update', function () {\n                    if (this.dataGroup) {\n                        error(24, false, this.series.chart);\n                        return false;\n                    }\n                });\n                addEvent(SeriesClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(SeriesClass, 'destroy', destroyGroupedData);\n                extend(seriesProto, {\n                    applyGrouping,\n                    destroyGroupedData,\n                    generatePoints,\n                    getDGApproximation,\n                    groupData\n                });\n            }\n        }\n        /**\n         * Destroy the grouped data points. #622, #740\n         * @private\n         */\n        function destroyGroupedData() {\n            // Clear previous groups\n            if (this.groupedData) {\n                this.groupedData.forEach(function (point, i) {\n                    if (point) {\n                        this.groupedData[i] = point.destroy ?\n                            point.destroy() : null;\n                    }\n                }, this);\n                // Clears all:\n                // - `this.groupedData`\n                // - `this.points`\n                // - `preserve` object in series.update()\n                this.groupedData.length = 0;\n                delete this.allGroupedData; // #19892\n            }\n        }\n        /**\n         * Override the generatePoints method by adding a reference to grouped data\n         * @private\n         */\n        function generatePoints() {\n            baseGeneratePoints.apply(this);\n            // Record grouped data in order to let it be destroyed the next time\n            // processData runs\n            this.destroyGroupedData(); // #622\n            this.groupedData = this.hasGroupedData ? this.points : null;\n        }\n        /**\n         * Set default approximations to the prototypes if present. Properties are\n         * inherited down. Can be overridden for individual series types.\n         * @private\n         */\n        function getDGApproximation() {\n            if (this.is('arearange')) {\n                return 'range';\n            }\n            if (this.is('ohlc')) {\n                return 'ohlc';\n            }\n            if (this.is('hlc')) {\n                return 'hlc';\n            }\n            if (\n            // #18974, default approximation for cumulative\n            // should be `sum` when `dataGrouping` is enabled\n            this.is('column') ||\n                this.options.cumulative) {\n                return 'sum';\n            }\n            return 'average';\n        }\n        /**\n         * Highcharts Stock only. Takes parallel arrays of x and y data and groups the\n         * data into intervals defined by groupPositions, a collection of starting x\n         * values for each group.\n         *\n         * @product highstock\n         *\n         * @function Highcharts.Series#groupData\n         * @param {Array<number>} xData\n         *        Parallel array of x data.\n         * @param {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>} yData\n         *        Parallel array of y data.\n         * @param {Array<number>} groupPositions\n         *        Group positions.\n         * @param {string|Function} [approximation]\n         *        Approximation to use.\n         * @return {Highcharts.DataGroupingResultObject}\n         *         Mapped groups.\n         */\n        function groupData(xData, yData, groupPositions, approximation) {\n            const series = this, data = series.data, dataOptions = series.options && series.options.data, groupedXData = [], groupedYData = [], groupMap = [], dataLength = xData.length, \n            // When grouping the fake extended axis for panning, we don't need to\n            // consider y\n            handleYData = !!yData, values = [], pointArrayMap = series.pointArrayMap, pointArrayMapLength = pointArrayMap && pointArrayMap.length, extendedPointArrayMap = ['x'].concat(pointArrayMap || ['y']), groupAll = (this.options.dataGrouping &&\n                this.options.dataGrouping.groupAll);\n            let pointX, pointY, groupedY, pos = 0, start = 0;\n            const approximationFn = (typeof approximation === 'function' ?\n                approximation :\n                approximation && ApproximationRegistry[approximation] ?\n                    ApproximationRegistry[approximation] :\n                    ApproximationRegistry[(series.getDGApproximation && series.getDGApproximation() ||\n                        'average')]);\n            // Calculate values array size from pointArrayMap length\n            if (pointArrayMapLength) {\n                let len = pointArrayMap.length;\n                while (len--) {\n                    values.push([]);\n                }\n            }\n            else {\n                values.push([]);\n            }\n            const valuesLen = pointArrayMapLength || 1;\n            for (let i = 0; i <= dataLength; i++) {\n                // Start with the first point within the X axis range (#2696)\n                if (xData[i] < groupPositions[0]) {\n                    continue; // With next point\n                }\n                // When a new group is entered, summarize and initialize\n                // the previous group\n                while ((typeof groupPositions[pos + 1] !== 'undefined' &&\n                    xData[i] >= groupPositions[pos + 1]) ||\n                    i === dataLength) { // Get the last group\n                    // get group x and y\n                    pointX = groupPositions[pos];\n                    series.dataGroupInfo = {\n                        start: groupAll ? start : (series.cropStart + start),\n                        length: values[0].length,\n                        groupStart: pointX\n                    };\n                    groupedY = approximationFn.apply(series, values);\n                    // By default, let options of the first grouped point be passed over\n                    // to the grouped point. This allows preserving properties like\n                    // `name` and `color` or custom properties. Implementers can\n                    // override this from the approximation function, where they can\n                    // write custom options to `this.dataGroupInfo.options`.\n                    if (series.pointClass && !defined(series.dataGroupInfo.options)) {\n                        // Convert numbers and arrays into objects\n                        series.dataGroupInfo.options = merge(series.pointClass.prototype\n                            .optionsToObject.call({ series: series }, series.options.data[series.cropStart + start]));\n                        // Make sure the raw data (x, y, open, high etc) is not copied\n                        // over and overwriting approximated data.\n                        extendedPointArrayMap.forEach(function (key) {\n                            delete series.dataGroupInfo.options[key];\n                        });\n                    }\n                    // Push the grouped data\n                    if (typeof groupedY !== 'undefined') {\n                        groupedXData.push(pointX);\n                        groupedYData.push(groupedY);\n                        groupMap.push(series.dataGroupInfo);\n                    }\n                    // Reset the aggregate arrays\n                    start = i;\n                    for (let j = 0; j < valuesLen; j++) {\n                        values[j].length = 0; // Faster than values[j] = []\n                        values[j].hasNulls = false;\n                    }\n                    // Advance on the group positions\n                    pos += 1;\n                    // Don't loop beyond the last group\n                    if (i === dataLength) {\n                        break;\n                    }\n                }\n                // Break out\n                if (i === dataLength) {\n                    break;\n                }\n                // For each raw data point, push it to an array that contains all values\n                // for this specific group\n                if (pointArrayMap) {\n                    const index = (series.options.dataGrouping &&\n                        series.options.dataGrouping.groupAll ?\n                        i : series.cropStart + i), point = (data && data[index]) ||\n                        series.pointClass.prototype.applyOptions.apply({\n                            series: series\n                        }, [dataOptions[index]]);\n                    let val;\n                    for (let j = 0; j < pointArrayMapLength; j++) {\n                        val = point[pointArrayMap[j]];\n                        if (isNumber(val)) {\n                            values[j].push(val);\n                        }\n                        else if (val === null) {\n                            values[j].hasNulls = true;\n                        }\n                    }\n                }\n                else {\n                    pointY = handleYData ? yData[i] : null;\n                    if (isNumber(pointY)) {\n                        values[0].push(pointY);\n                    }\n                    else if (pointY === null) {\n                        values[0].hasNulls = true;\n                    }\n                }\n            }\n            return {\n                groupedXData,\n                groupedYData,\n                groupMap\n            };\n        }\n        /**\n         * Handle default options for data grouping. This must be set at runtime because\n         * some series types are defined after this.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            const options = e.options, type = this.type, plotOptions = this.chart.options.plotOptions, \n            // External series, for example technical indicators should also inherit\n            // commonOptions which are not available outside this module\n            baseOptions = (this.useCommonDataGrouping &&\n                DataGroupingDefaults.common), seriesSpecific = DataGroupingDefaults.seriesSpecific;\n            let defaultOptions = D.defaultOptions.plotOptions[type].dataGrouping;\n            if (plotOptions && (seriesSpecific[type] || baseOptions)) { // #1284\n                const rangeSelector = this.chart.rangeSelector;\n                if (!defaultOptions) {\n                    defaultOptions = merge(DataGroupingDefaults.common, seriesSpecific[type]);\n                }\n                options.dataGrouping = merge(baseOptions, defaultOptions, plotOptions.series && plotOptions.series.dataGrouping, // #1228\n                // Set by the StockChart constructor:\n                plotOptions[type].dataGrouping, this.userOptions.dataGrouping, !options.isInternal &&\n                    rangeSelector &&\n                    isNumber(rangeSelector.selected) &&\n                    rangeSelector.buttonOptions[rangeSelector.selected].dataGrouping);\n            }\n        }\n        /**\n         * @private\n         */\n        function skipDataGrouping(series, force) {\n            return !(series.isCartesian &&\n                !series.isDirty &&\n                !series.xAxis.isDirty &&\n                !series.yAxis.isDirty &&\n                !force);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingSeriesComposition = {\n            compose,\n            groupData\n        };\n\n        return DataGroupingSeriesComposition;\n    });\n    _registerModule(_modules, 'Extensions/DataGrouping/DataGrouping.js', [_modules['Extensions/DataGrouping/DataGroupingAxisComposition.js'], _modules['Extensions/DataGrouping/DataGroupingDefaults.js'], _modules['Extensions/DataGrouping/DataGroupingSeriesComposition.js'], _modules['Core/Templating.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (DataGroupingAxisComposition, DataGroupingDefaults, DataGroupingSeriesComposition, F, H, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { format } = F;\n        const { composed } = H;\n        const { addEvent, extend, isNumber, pick, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, SeriesClass, TooltipClass) {\n            DataGroupingAxisComposition.compose(AxisClass);\n            DataGroupingSeriesComposition.compose(SeriesClass);\n            if (TooltipClass &&\n                pushUnique(composed, 'DataGrouping')) {\n                addEvent(TooltipClass, 'headerFormatter', onTooltipHeaderFormatter);\n            }\n        }\n        /**\n         * Extend the original method, make the tooltip's header reflect the grouped\n         * range.\n         * @private\n         */\n        function onTooltipHeaderFormatter(e) {\n            const chart = this.chart, time = chart.time, labelConfig = e.labelConfig, series = labelConfig.series, point = labelConfig.point, options = series.options, tooltipOptions = series.tooltipOptions, dataGroupingOptions = options.dataGrouping, xAxis = series.xAxis;\n            let xDateFormat = tooltipOptions.xDateFormat, xDateFormatEnd, currentDataGrouping, dateTimeLabelFormats, labelFormats, formattedKey, formatString = tooltipOptions[e.isFooter ? 'footerFormat' : 'headerFormat'];\n            // Apply only to grouped series\n            if (xAxis &&\n                xAxis.options.type === 'datetime' &&\n                dataGroupingOptions &&\n                isNumber(labelConfig.key)) {\n                // Set variables\n                currentDataGrouping = series.currentDataGrouping;\n                dateTimeLabelFormats = dataGroupingOptions.dateTimeLabelFormats ||\n                    // Fallback to commonOptions (#9693)\n                    DataGroupingDefaults.common.dateTimeLabelFormats;\n                // If we have grouped data, use the grouping information to get the\n                // right format\n                if (currentDataGrouping) {\n                    labelFormats = dateTimeLabelFormats[currentDataGrouping.unitName];\n                    if (currentDataGrouping.count === 1) {\n                        xDateFormat = labelFormats[0];\n                    }\n                    else {\n                        xDateFormat = labelFormats[1];\n                        xDateFormatEnd = labelFormats[2];\n                    }\n                    // If not grouped, and we don't have set the xDateFormat option, get the\n                    // best fit, so if the least distance between points is one minute, show\n                    // it, but if the least distance is one day, skip hours and minutes etc.\n                }\n                else if (!xDateFormat && dateTimeLabelFormats && xAxis.dateTime) {\n                    xDateFormat = xAxis.dateTime.getXDateFormat(labelConfig.x, tooltipOptions.dateTimeLabelFormats);\n                }\n                const groupStart = pick(series.groupMap?.[point.index].groupStart, labelConfig.key), groupEnd = groupStart + currentDataGrouping?.totalRange - 1;\n                formattedKey = time.dateFormat(xDateFormat, groupStart);\n                if (xDateFormatEnd) {\n                    formattedKey += time.dateFormat(xDateFormatEnd, groupEnd);\n                }\n                // Replace default header style with class name\n                if (series.chart.styledMode) {\n                    formatString = this.styledModeFormat(formatString);\n                }\n                // Return the replaced format\n                e.text = format(formatString, {\n                    point: extend(labelConfig.point, { key: formattedKey }),\n                    series: series\n                }, chart);\n                e.preventDefault();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DataGroupingComposition = {\n            compose,\n            groupData: DataGroupingSeriesComposition.groupData\n        };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @typedef {\"average\"|\"averages\"|\"open\"|\"high\"|\"low\"|\"close\"|\"sum\"} Highcharts.DataGroupingApproximationValue\n         */\n        /**\n         * The position of the point inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"} Highcharts.DataGroupingAnchor\n         */\n        /**\n         * The position of the first or last point in the series inside the group.\n         *\n         * @typedef    {\"start\"|\"middle\"|\"end\"|\"firstPoint\"|\"lastPoint\"} Highcharts.DataGroupingAnchorExtremes\n         */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingInfoObject\n         */ /**\n        * @name Highcharts.DataGroupingInfoObject#length\n        * @type {number}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#options\n        * @type {Highcharts.SeriesOptionsType|undefined}\n        */ /**\n        * @name Highcharts.DataGroupingInfoObject#start\n        * @type {number}\n        */\n        /**\n         * Highcharts Stock only.\n         *\n         * @product highstock\n         * @interface Highcharts.DataGroupingResultObject\n         */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedXData\n        * @type {Array<number>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupedYData\n        * @type {Array<(number|null|undefined)>|Array<Array<(number|null|undefined)>>}\n        */ /**\n        * @name Highcharts.DataGroupingResultObject#groupMap\n        * @type {Array<DataGroupingInfoObject>}\n        */\n        /**\n         * Highcharts Stock only. If a point object is created by data\n         * grouping, it doesn't reflect actual points in the raw\n         * data. In this case, the `dataGroup` property holds\n         * information that points back to the raw data.\n         *\n         * - `dataGroup.start` is the index of the first raw data\n         *   point in the group.\n         *\n         * - `dataGroup.length` is the amount of points in the\n         *   group.\n         *\n         * @sample stock/members/point-datagroup\n         *         Click to inspect raw data points\n         *\n         * @product highstock\n         *\n         * @name Highcharts.Point#dataGroup\n         * @type {Highcharts.DataGroupingInfoObject|undefined}\n         */\n        (''); // Detach doclets above\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Data grouping is the concept of sampling the data values into larger\n         * blocks in order to ease readability and increase performance of the\n         * JavaScript charts. Highcharts Stock by default applies data grouping when\n         * the points become closer than a certain pixel value, determined by\n         * the `groupPixelWidth` option.\n         *\n         * If data grouping is applied, the grouping information of grouped\n         * points can be read from the [Point.dataGroup](\n         * /class-reference/Highcharts.Point#dataGroup). If point options other than\n         * the data itself are set, for example `name` or `color` or custom properties,\n         * the grouping logic doesn't know how to group it. In this case the options of\n         * the first point instance are copied over to the group point. This can be\n         * altered through a custom `approximation` callback function.\n         *\n         * @declare   Highcharts.DataGroupingOptionsObject\n         * @product   highstock\n         * @requires  modules/stock\n         * @apioption plotOptions.series.dataGrouping\n         */\n        /**\n         * Specifies how the points should be located on the X axis inside the group.\n         * Points that are extremes can be set separately. Available options:\n         *\n         * - `start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * - `middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * - `end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-anchor\n         *         Changing the point x-coordinate inside the group.\n         *\n         * @see [dataGrouping.firstAnchor](#plotOptions.series.dataGrouping.firstAnchor)\n         * @see [dataGrouping.lastAnchor](#plotOptions.series.dataGrouping.lastAnchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchor}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.anchor\n         */\n        /**\n         * The method of approximation inside a group. When for example 30 days\n         * are grouped into one month, this determines what value should represent\n         * the group. Possible values are \"average\", \"averages\", \"open\", \"high\",\n         * \"low\", \"close\" and \"sum\". For OHLC and candlestick series the approximation\n         * is \"ohlc\" by default, which finds the open, high, low and close values\n         * within all the grouped data. For ranges, the approximation is \"range\",\n         * which finds the low and high values. For multi-dimensional data,\n         * like ranges and OHLC, \"averages\" will compute the average for each\n         * dimension.\n         *\n         * Custom aggregate methods can be added by assigning a callback function\n         * as the approximation. This function takes a numeric array as the\n         * argument and should return a single numeric value or `null`. Note\n         * that the numeric array will never contain null values, only true\n         * numbers. Instead, if null values are present in the raw data, the\n         * numeric array will have an `.hasNulls` property set to `true`. For\n         * single-value data sets the data is available in the first argument\n         * of the callback function. For OHLC data sets, all the open values\n         * are in the first argument, all high values in the second etc.\n         *\n         * Since v4.2.7, grouping meta data is available in the approximation\n         * callback from `this.dataGroupInfo`. It can be used to extract information\n         * from the raw data.\n         *\n         * Defaults to `average` for line-type series, `sum` for columns, `range`\n         * for range series, `hlc` for HLC, and `ohlc` for OHLC and candlestick.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-approximation\n         *         Approximation callback with custom data\n         * @sample {highstock} stock/plotoptions/series-datagrouping-simple-approximation\n         *         Simple approximation demo\n         *\n         * @type       {Highcharts.DataGroupingApproximationValue|Function}\n         * @apioption  plotOptions.series.dataGrouping.approximation\n         */\n        /**\n         * Datetime formats for the header of the tooltip in a stock chart.\n         * The format can vary within a chart depending on the currently selected\n         * time range and the current data grouping.\n         *\n         * The default formats are:\n         * ```js\n         * {\n         *     millisecond: [\n         *         '%A, %e %b, %H:%M:%S.%L', '%A, %e %b, %H:%M:%S.%L', '-%H:%M:%S.%L'\n         *     ],\n         *     second: ['%A, %e %b, %H:%M:%S', '%A, %e %b, %H:%M:%S', '-%H:%M:%S'],\n         *     minute: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     hour: ['%A, %e %b, %H:%M', '%A, %e %b, %H:%M', '-%H:%M'],\n         *     day: ['%A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     week: ['Week from %A, %e %b %Y', '%A, %e %b', '-%A, %e %b %Y'],\n         *     month: ['%B %Y', '%B', '-%B %Y'],\n         *     year: ['%Y', '%Y', '-%Y']\n         * }\n         * ```\n         *\n         * For each of these array definitions, the first item is the format\n         * used when the active time span is one unit. For instance, if the\n         * current data applies to one week, the first item of the week array\n         * is used. The second and third items are used when the active time\n         * span is more than two units. For instance, if the current data applies\n         * to two weeks, the second and third item of the week array are used,\n         *  and applied to the start and end date of the time span.\n         *\n         * @type      {Object}\n         * @apioption plotOptions.series.dataGrouping.dateTimeLabelFormats\n         */\n        /**\n         * Enable or disable data grouping.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @apioption plotOptions.series.dataGrouping.enabled\n         */\n        /**\n         * Specifies how the first grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.firstAnchor\n         */\n        /**\n         * When data grouping is forced, it runs no matter how small the intervals\n         * are. This can be handy for example when the sum should be calculated\n         * for values appearing at random times within each hour.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @apioption plotOptions.series.dataGrouping.forced\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. If multiple series with different group pixel widths\n         * are drawn on the same x axis, all series will take the greatest width.\n         * For example, line series have 2px default group width, while column\n         * series have 10px. If combined, both the line and the column will\n         * have 10px by default.\n         *\n         * @type      {number}\n         * @default   2\n         * @apioption plotOptions.series.dataGrouping.groupPixelWidth\n         */\n        /**\n         * By default only points within the visible range are grouped. Enabling this\n         * option will force data grouping to calculate all grouped points for a given\n         * dataset. That option prevents for example a column series from calculating\n         * a grouped point partially. The effect is similar to\n         * [Series.getExtremesFromAll](#plotOptions.series.getExtremesFromAll) but does\n         * not affect yAxis extremes.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-groupall/\n         *         Two series with the same data but different groupAll setting\n         *\n         * @type      {boolean}\n         * @default   false\n         * @since     6.1.0\n         * @apioption plotOptions.series.dataGrouping.groupAll\n         */\n        /**\n         * Specifies how the last grouped point is positioned on the xAxis.\n         * If firstAnchor and/or lastAnchor are defined, then those options take\n         * precedence over anchor for the first and/or last grouped points.\n         * Available options:\n         *\n         * -`start` places the point at the beginning of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 00:00:00)\n         *\n         * -`middle` places the point in the middle of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 12:00:00)\n         *\n         * -`end` places the point at the end of the group\n         * (e.g. range 00:00:00 - 23:59:59 -> 23:59:59)\n         *\n         * -`firstPoint` the first point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:13)\n         *\n         * -`lastPoint` the last point in the group\n         * (e.g. points at 00:13, 00:35, 00:59 -> 00:59)\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-first-anchor\n         *         Applying first and last anchor.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-last-anchor\n         *         Applying the last anchor in the chart with live data.\n         *\n         * @see [dataGrouping.anchor](#plotOptions.series.dataGrouping.anchor)\n         *\n         * @type       {Highcharts.DataGroupingAnchorExtremes}\n         * @since 9.1.0\n         * @default    start\n         * @apioption  plotOptions.series.dataGrouping.lastAnchor\n         */\n        /**\n         * Normally, a group is indexed by the start of that group, so for example\n         * when 30 daily values are grouped into one month, that month's x value\n         * will be the 1st of the month. This apparently shifts the data to\n         * the left. When the smoothed option is true, this is compensated for.\n         * The data is shifted to the middle of the group, and min and max\n         * values are preserved. Internally, this is used in the Navigator series.\n         *\n         * @type      {boolean}\n         * @default   false\n         * @deprecated\n         * @apioption plotOptions.series.dataGrouping.smoothed\n         */\n        /**\n         * An array determining what time intervals the data is allowed to be\n         * grouped to. Each array item is an array where the first value is\n         * the time unit and the second value another array of allowed multiples.\n         *\n         * Defaults to:\n         * ```js\n         * units: [[\n         *     'millisecond', // unit name\n         *     [1, 2, 5, 10, 20, 25, 50, 100, 200, 500] // allowed multiples\n         * ], [\n         *     'second',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'minute',\n         *     [1, 2, 5, 10, 15, 30]\n         * ], [\n         *     'hour',\n         *     [1, 2, 3, 4, 6, 8, 12]\n         * ], [\n         *     'day',\n         *     [1]\n         * ], [\n         *     'week',\n         *     [1]\n         * ], [\n         *     'month',\n         *     [1, 3, 6]\n         * ], [\n         *     'year',\n         *     null\n         * ]]\n         * ```\n         *\n         * @type      {Array<Array<string,(Array<number>|null)>>}\n         * @apioption plotOptions.series.dataGrouping.units\n         */\n        /**\n         * The approximate pixel width of each group. If for example a series\n         * with 30 points is displayed over a 600 pixel wide plot area, no grouping\n         * is performed. If however the series contains so many points that\n         * the spacing is less than the groupPixelWidth, Highcharts will try\n         * to group it into appropriate groups so that each is more or less\n         * two pixels wide. Defaults to `10`.\n         *\n         * @sample {highstock} stock/plotoptions/series-datagrouping-grouppixelwidth/\n         *         Two series with the same data density but different groupPixelWidth\n         *\n         * @type      {number}\n         * @default   10\n         * @apioption plotOptions.column.dataGrouping.groupPixelWidth\n         */\n        ''; // Required by JSDoc parsing\n\n        return DataGroupingComposition;\n    });\n    _registerModule(_modules, 'masters/modules/datagrouping.src.js', [_modules['Core/Globals.js'], _modules['Extensions/DataGrouping/ApproximationDefaults.js'], _modules['Extensions/DataGrouping/ApproximationRegistry.js'], _modules['Extensions/DataGrouping/DataGrouping.js']], function (Highcharts, ApproximationDefaults, ApproximationRegistry, DataGrouping) {\n\n        const G = Highcharts;\n        G.dataGrouping = G.dataGrouping || {};\n        G.dataGrouping.approximationDefaults = (G.dataGrouping.approximationDefaults ||\n            ApproximationDefaults);\n        G.dataGrouping.approximations = (G.dataGrouping.approximations ||\n            ApproximationRegistry);\n        DataGrouping.compose(G.Axis, G.Series, G.Tooltip);\n\n        return Highcharts;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/NavigationBindingsUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft, Black Label\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined, isNumber, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Define types for editable fields per annotation. There is no need to define\n         * numbers, because they won't change their type to string.\n         * @private\n         */\n        const annotationsFieldsTypes = {\n            backgroundColor: 'string',\n            borderColor: 'string',\n            borderRadius: 'string',\n            color: 'string',\n            fill: 'string',\n            fontSize: 'string',\n            labels: 'string',\n            name: 'string',\n            stroke: 'string',\n            title: 'string'\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Returns the first xAxis or yAxis that was clicked with its value.\n         *\n         * @private\n         *\n         * @param {Array<Highcharts.PointerAxisCoordinateObject>} coords\n         *        All the chart's x or y axes with a current pointer's axis value.\n         *\n         * @return {Highcharts.PointerAxisCoordinateObject}\n         *         Object with a first found axis and its value that pointer\n         *         is currently pointing.\n         */\n        function getAssignedAxis(coords) {\n            return coords.filter((coord) => {\n                const extremes = coord.axis.getExtremes(), axisMin = extremes.min, axisMax = extremes.max, \n                // Correct axis edges when axis has series\n                // with pointRange (like column)\n                minPointOffset = pick(coord.axis.minPointOffset, 0);\n                return isNumber(axisMin) && isNumber(axisMax) &&\n                    coord.value >= (axisMin - minPointOffset) &&\n                    coord.value <= (axisMax + minPointOffset) &&\n                    // Don't count navigator axis\n                    !coord.axis.options.isInternal;\n            })[0]; // If the axes overlap, return the first axis that was found.\n        }\n        /**\n         * Get field type according to value\n         *\n         * @private\n         *\n         * @param {'boolean'|'number'|'string'} value\n         * Atomic type (one of: string, number, boolean)\n         *\n         * @return {'checkbox'|'number'|'text'}\n         * Field type (one of: text, number, checkbox)\n         */\n        function getFieldType(key, value) {\n            const predefinedType = annotationsFieldsTypes[key];\n            let fieldType = typeof value;\n            if (defined(predefinedType)) {\n                fieldType = predefinedType;\n            }\n            return {\n                'string': 'text',\n                'number': 'number',\n                'boolean': 'checkbox'\n            }[fieldType];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigationBindingUtilities = {\n            annotationsFieldsTypes,\n            getAssignedAxis,\n            getFieldType\n        };\n\n        return NavigationBindingUtilities;\n    });\n    _registerModule(_modules, 'Extensions/MouseWheelZoom/MouseWheelZoom.js', [_modules['Core/Utilities.js'], _modules['Extensions/Annotations/NavigationBindingsUtilities.js']], function (U, NBU) {\n        /* *\n         *\n         *  (c) 2023 Torstein Honsi, Askel Eirik Johansson\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, isObject, pick, defined, merge } = U;\n        const { getAssignedAxis } = NBU;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const composedClasses = [], defaultOptions = {\n            enabled: true,\n            sensitivity: 1.1\n        };\n        let wheelTimer;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        const optionsToObject = (options) => {\n            if (!isObject(options)) {\n                options = {\n                    enabled: options ?? true\n                };\n            }\n            return merge(defaultOptions, options);\n        };\n        /**\n         * @private\n         */\n        const zoomBy = function (chart, howMuch, xAxis, yAxis, mouseX, mouseY, options) {\n            const type = pick(options.type, chart.zooming.type, '');\n            let axes = [];\n            if (type === 'x') {\n                axes = xAxis;\n            }\n            else if (type === 'y') {\n                axes = yAxis;\n            }\n            else if (type === 'xy') {\n                axes = chart.axes;\n            }\n            const hasZoomed = chart.transform({\n                axes,\n                // Create imaginary reference and target rectangles around the mouse\n                // point that scales up or down with `howMuch`;\n                to: {\n                    x: mouseX - 5,\n                    y: mouseY - 5,\n                    // Must use 10 to get passed the limit for too small reference.\n                    // Below this, the transform will default to a pan.\n                    width: 10,\n                    height: 10\n                },\n                from: {\n                    x: mouseX - 5 * howMuch,\n                    y: mouseY - 5 * howMuch,\n                    width: 10 * howMuch,\n                    height: 10 * howMuch\n                },\n                trigger: 'mousewheel'\n            });\n            if (hasZoomed) {\n                if (defined(wheelTimer)) {\n                    clearTimeout(wheelTimer);\n                }\n                // Some time after the last mousewheel event, run drop. In case any of\n                // the affected axes had `startOnTick` or `endOnTick`, they will be\n                // re-adjusted now.\n                wheelTimer = setTimeout(() => {\n                    chart.pointer?.drop();\n                }, 400);\n            }\n            return hasZoomed;\n        };\n        /**\n         * @private\n         */\n        function onAfterGetContainer() {\n            const wheelZoomOptions = optionsToObject(this.zooming.mouseWheel);\n            if (wheelZoomOptions.enabled) {\n                addEvent(this.container, 'wheel', (e) => {\n                    e = this.pointer?.normalize(e) || e;\n                    const { pointer } = this, allowZoom = pointer && !pointer.inClass(e.target, 'highcharts-no-mousewheel');\n                    // Firefox uses e.detail, WebKit and IE uses deltaX, deltaY, deltaZ.\n                    if (this.isInsidePlot(e.chartX - this.plotLeft, e.chartY - this.plotTop) && allowZoom) {\n                        const wheelSensitivity = wheelZoomOptions.sensitivity || 1.1, delta = e.detail || ((e.deltaY || 0) / 120), xAxisCoords = getAssignedAxis(pointer.getCoordinates(e).xAxis), yAxisCoords = getAssignedAxis(pointer.getCoordinates(e).yAxis);\n                        const hasZoomed = zoomBy(this, Math.pow(wheelSensitivity, delta), xAxisCoords ? [xAxisCoords.axis] : this.xAxis, yAxisCoords ? [yAxisCoords.axis] : this.yAxis, e.chartX, e.chartY, wheelZoomOptions);\n                        // Prevent page scroll\n                        if (hasZoomed) {\n                            e.preventDefault?.();\n                        }\n                    }\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function compose(ChartClass) {\n            if (composedClasses.indexOf(ChartClass) === -1) {\n                composedClasses.push(ChartClass);\n                addEvent(ChartClass, 'afterGetContainer', onAfterGetContainer);\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const MouseWheelZoomComposition = {\n            compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * The mouse wheel zoom is a feature included in Highcharts Stock, but is also\n         * available for Highcharts Core as a module. Zooming with the mouse wheel is\n         * enabled by default in Highcharts Stock. In Highcharts Core it is enabled if\n         * [chart.zooming.type](chart.zooming.type) is set. It can be disabled by\n         * setting this option to `false`.\n         *\n         * @type      {boolean|object}\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @sample    {highcharts} highcharts/mouse-wheel-zoom/enabled\n         *            Enable or disable\n         * @sample    {highstock} stock/mouse-wheel-zoom/enabled\n         *            Enable or disable\n         * @apioption chart.zooming.mouseWheel\n         */\n        /**\n         * Zooming with the mouse wheel can be disabled by setting this option to\n         * `false`.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @apioption chart.zooming.mouseWheel.enabled\n         */\n        /**\n         * Adjust the sensitivity of the zoom. Sensitivity of mouse wheel or trackpad\n         * scrolling. `1` is no sensitivity, while with `2`, one mouse wheel delta will\n         * zoom in `50%`.\n         *\n         * @type      {number}\n         * @default   1.1\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @sample    {highcharts} highcharts/mouse-wheel-zoom/sensitivity\n         *            Change mouse wheel zoom sensitivity\n         * @sample    {highstock} stock/mouse-wheel-zoom/sensitivity\n         *            Change mouse wheel zoom sensitivity\n         * @apioption chart.zooming.mouseWheel.sensitivity\n         */\n        /**\n         * Decides in what dimensions the user can zoom scrolling the wheel. Can be one\n         * of `x`, `y` or `xy`. In Highcharts Core, if not specified here, it will\n         * inherit the type from [chart.zooming.type](chart.zooming.type). In Highcharts\n         * Stock, it defaults to `x`.\n         *\n         * Note that particularly with mouse wheel in the y direction, the zoom is\n         * affected by the default [yAxis.startOnTick](#yAxis.startOnTick) and\n         * [endOnTick]((#yAxis.endOnTick)) settings. In order to respect these settings,\n         * the zoom level will adjust after the user has stopped zooming. To prevent\n         * this, consider setting `startOnTick` and `endOnTick` to `false`.\n         *\n         * @type      {string}\n         * @default   {highcharts} undefined\n         * @default   {highstock} x\n         * @validvalue [\"x\", \"y\", \"xy\"]\n         * @since 11.1.0\n         * @requires  modules/mouse-wheel-zoom\n         * @apioption chart.zooming.mouseWheel.type\n         */\n        (''); // Keeps doclets above in JS file\n\n        return MouseWheelZoomComposition;\n    });\n    _registerModule(_modules, 'masters/modules/mouse-wheel-zoom.src.js', [_modules['Core/Globals.js'], _modules['Extensions/MouseWheelZoom/MouseWheelZoom.js']], function (Highcharts, MouseWheelZoom) {\n\n        const G = Highcharts;\n        G.MouseWheelZoom = G.MouseWheelZoom || MouseWheelZoom;\n        G.MouseWheelZoom.compose(G.Chart);\n\n        return Highcharts;\n    });\n    _registerModule(_modules, 'masters/modules/stock.src.js', [_modules['Core/Globals.js'], _modules['Series/DataModifyComposition.js'], _modules['Stock/Navigator/Navigator.js'], _modules['Core/Axis/OrdinalAxis.js'], _modules['Stock/RangeSelector/RangeSelector.js'], _modules['Stock/Scrollbar/Scrollbar.js'], _modules['Core/Chart/StockChart.js'], _modules['Series/OHLC/OHLCSeries.js'], _modules['Series/Flags/FlagsSeries.js']], function (Highcharts, DataModifyComposition, Navigator, OrdinalAxis, RangeSelector, Scrollbar, StockChart, OHLCSeries, FlagsSeries) {\n\n        const G = Highcharts;\n        // Classes\n        G.Navigator = G.Navigator || Navigator;\n        G.OrdinalAxis = G.OrdinalAxis || OrdinalAxis;\n        G.RangeSelector = G.RangeSelector || RangeSelector;\n        G.Scrollbar = G.Scrollbar || Scrollbar;\n        // Functions\n        G.stockChart = G.stockChart || StockChart.stockChart;\n        G.StockChart = G.StockChart || G.stockChart;\n        G.extend(G.StockChart, StockChart);\n        // Compositions\n        DataModifyComposition.compose(G.Series, G.Axis, G.Point);\n        FlagsSeries.compose(G.Renderer);\n        OHLCSeries.compose(G.Series);\n        G.Navigator.compose(G.Chart, G.Axis, G.Series);\n        G.OrdinalAxis.compose(G.Axis, G.Series, G.Chart);\n        G.RangeSelector.compose(G.Axis, G.Chart);\n        G.Scrollbar.compose(G.Axis);\n        G.StockChart.compose(G.Chart, G.Axis, G.Series, G.SVGRenderer);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","Axis","Point","Series","U","DataModifyComposition","tooltipFormatter","pointTooltipFormatter","prototype","addEvent","arrayMax","arrayMin","correctFloat","defined","isArray","isNumber","isString","pick","setModifier","mode","modeState","redraw","isXAxis","series","forEach","setCompare","setCumulative","chart","pointFormat","point","numberFormatter","replace","value","tooltipOptions","changeDecimals","change","cumulativeSum","afterInit","dataModify","compare","options","cumulative","Additions","initCompare","initCumulative","afterGetExtremes","e","dataExtremes","activeYData","extremes","modifyValue","dataMin","dataMax","length","getCumulativeExtremes","seriesSetCompare","userOptions","update","points","afterProcessData","xAxis","processedYData","processedXData","compareStart","keyIndex","i","pointArrayMap","indexOf","pointValKey","compareValue","min","axisSetCompare","seriesSetCumulative","axisSetCumulative","compose","SeriesClass","AxisClass","PointClass","axisProto","pointProto","seriesProto","constructor","cumulativeDataMin","Infinity","cumulativeDataMax","reduce","prev","cur","sum","Math","max","index","compareBase","prevPoint","cumulativeStart","withinRange","x","H","NavigatorConstructor","isTouchDevice","merge","composedMembers","onChartAfterAddSeries","navigator","setBaseSeries","onChartAfterSetChartSize","legendOptions","yAxis","legend","scrollbarHeight","scrollButtonSize","inverted","left","opposite","chartWidth","height","spacing","top","plotTop","plotLeft","navigatorOptions","chartHeight","scrollbar","margin","rangeSelector","extraBottomMargin","getHeight","verticalAlign","layout","enabled","floating","legendHeight","titleOffset","setAxisSize","onChartAfterUpdate","event","scroller","animation","onChartBeforeRender","onChartBeforeShowResetZoom","chartOptions","zooming","type","pinchType","onChartCallback","getExtremes","render","onChartUpdate","scrollbarOptions","ChartClass","NavigatorClass","pushUnique","chartProto","callbacks","push","onAxisInit","axis","navigatorAxis","NavigatorAxisAdditions","onAxisSetExtremes","zoomed","zoomType","trigger","range","previousZoom","preventDefault","keepProps","includes","destroy","toFixedRange","pxMin","pxMax","fixedMin","fixedMax","halfPointRange","pointRange","newMin","translate","horiz","newMax","Color","SeriesRegistry","parse","color","seriesTypes","maskInside","handles","width","borderRadius","symbols","lineWidth","backgroundColor","borderColor","maskFill","setOpacity","get","outlineColor","outlineWidth","areaspline","fillOpacity","sonification","dataGrouping","approximation","groupPixelWidth","firstAnchor","anchor","lastAnchor","units","dataLabels","zIndex","id","className","lineColor","marker","threshold","tickLength","gridLineColor","gridLineWidth","tickPixelInterval","labels","align","style","fontSize","opacity","textOutline","y","crosshair","startOnTick","endOnTick","minPadding","maxPadding","title","text","tickWidth","rect","relativeLength","_x","_y","halfWidth","r","markerPosition","setFixedRange","fixedRange","D","NavigatorDefaults","NavigatorSymbols","RendererRegistry","StockUtilities","setOptions","composed","getRendererType","extend","onSeriesAfterUpdate","isInternal","ScrollbarAxis","Scrollbar","axisMin","axisMax","scrollMin","scrollMax","onAxisAfterGetOffset","scrollbarsOffsets","axisOffset","size","onAxisAfterInit","vertical","renderer","to","from","unitedMin","unitedMax","reversed","shouldUpdateExtremes","DOMType","animate","setExtremes","setRange","onAxisAfterRender","offsetsIndex","offset","axisTitleMargin","axisMargin","position","xPosition","isNaN","interval","ScrollbarClass","barBorderRadius","buttonBorderRadius","buttonsEnabled","liveRedraw","minWidth","step","barBackgroundColor","barBorderWidth","barBorderColor","buttonArrowColor","buttonBackgroundColor","buttonBorderColor","buttonBorderWidth","rifleColor","trackBackgroundColor","trackBorderColor","trackBorderRadius","trackBorderWidth","ScrollbarDefaults","defaultOptions","crisp","destroyObjectProperties","fireEvent","removeEvent","swapXY","seg","temp","len","_events","chartX","chartY","scrollbarButtons","scrollbarLeft","scrollbarStrokeWidth","scrollbarTop","init","addEvents","buttonsOrder","buttons","bar","scrollbarGroup","element","track","mouseDownHandler","bind","mouseMoveHandler","mouseUpHandler","buttonToMinClick","buttonToMaxClick","trackClick","ownerDocument","updatePosition","DOMEvent","cursorToScrollbarPosition","normalizedEvent","minWidthDifference","calculatedWidth","xOffset","barWidth","yOffset","removeEvents","prop","drawScrollbarButton","group","g","add","addClass","styledMode","attr","stroke","fill","strokeWidth","arrow","pointer","normalize","mousePosition","initPositions","grabbedCenter","direction","touches","chartPosition","hasDragged","method","rendered","show","translateX","translateY","hide","scrollbarRifles","fromPX","newSize","fullWidth","toPX","ceil","newPos","floor","newRiflesPos","showFull","eventType","svg","boosted","ChartNavigatorComposition","NavigatorComposition","SVGRenderer","clamp","erase","find","splat","numExt","extreme","numbers","filter","call","Navigator","isDirty","drawHandle","verb","round","parseInt","drawOutline","zoomedMin","zoomedMax","outline","halfOutline","outlineCorrection","navigatorSize","navigatorTop","lineTop","lineBtm","verticalMin","d","drawMasks","navigatorHeight","shades","shade","renderElements","mouseCursor","cursor","navigatorGroup","visibility","hasMask","css","handlesOptions","symbolName","symbolUrl","isImg","symbolFn","symbol","addMouseEvents","rotation","rotationOriginX","rotationOriginY","invertedUpdate","setOpposite","navigatorEnabled","adaptToUpdatedData","baseSeries","updatedDataHandler","eventsToUnbind","offsets","getXAxisOffsets","scrollbarXAxis","fake","minRange","maxRange","navigatorWidth","plotWidth","plotHeight","toPixels","abs","toValue","currentRange","grabbedLeft","grabbedRight","fixedWidth","container","onMouseMove","onMouseUp","getPartsEvents","renderTo","concat","modifyNavigatorAxisExtremes","eventName","events","name","navigatorItem","shadesMousedown","navigatorPosition","ext","dragOffset","reversedExtremes","getUnionExtremes","eventArguments","handlesMousedown","baseXAxis","reverse","otherHandlePos","fixedExtreme","pageX","setTimeout","unionExtremes","triggerOp","Object","keys","unbind","removeBaseSeriesEvents","modifyBaseAxisExtremes","scrollbarEnabled","xAxisIndex","yAxisIndex","baseXaxis","isDirtyBox","breaks","ordinal","overscroll","keepOrdinalPadding","zoomEnabled","alignTicks","data","updateNavigatorSeries","unbindRedraw","scrollTrackWidth","valueRange","addBaseSeriesEvents","addChartEvents","Boolean","returnFalseOnNoBaseSeries","ret","baseAxis","navAxis","navAxisOptions","baseAxisOptions","baseSeriesOptions","s","showInNavigator","navSeriesMixin","enableMouseTracking","linkedTo","padXAxis","showInLegend","stacking","states","inactive","navigatorSeries","navSeries","base","baseOptions","mergedNavSeriesOptions","chartNavigatorSeriesOptions","baseNavigatorOptions","linkedNavSeries","userNavOptions","visible","plotOptions","navigatorSeriesData","hasNavigatorData","slice","initSeries","setSortedData","userSeriesOptions","colors","setVisible","remove","getBaseSeriesMin","currentSeriesMin","xData","baseExtremes","baseMin","baseMax","baseDataMin","baseDataMax","stickToMin","stickToMax","convertOverscroll","hasSetExtremes","eventArgs","Number","MAX_VALUE","userMin","userMax","shouldStickToMax","shouldStickToMin","pointStart","setData","xDataMin","marginName","axes","coll","OrdinalAxis","error","timeUnits","getTimeTicks","normalizedInterval","startOfWeek","positions","closestDistance","findHigherRanks","higherRanks","tickPixelIntervalOption","time","segmentStarts","end","segmentPositions","hasCrossedHigherRank","info","outsideMax","start","groupPositions","lastGroupPosition","arguments","posLength","shift","unitRange","hour","dateFormat","translatedArr","distances","itemToRemove","translated","lastTranslated","medianDistance","distance","sort","a","b","splice","index2val","ordinalPositions","lin2val","val","localMin","old","localA","transA","getExtendedPositions","pixelVal","minPixelPadding","getIndexOfPoint","mantissa","leftNeighbour","rightNeighbour","getIndexInArray","findIndexOf","percent","onAxisFoundExtremes","originalOrdinalRange","onAxisAfterSetScale","isOrdinal","onAxisInitialAxisTranslation","beforeSetTickPositions","tickInterval","postProcessTickInterval","onChartPan","originalEvent","panning","runBase","trimmedRange","mouseDownX","hoverPoints","closestPointRange","overscrollPointsRange","movedUnits","translationSlope","slope","extendedOrdinalPositions","extendedAxis","val2lin","setState","test","onSeriesUpdatedData","toIndex","ordinalIndex","ordinalLength","originalPositionsReference","diff","approximateIndexOffset","ordinal2lin","hasBreaks","brokenAxis","uniqueOrdinalPositions","dist","minIndex","maxIndex","useOrdinal","adjustOrdinalExtremesPoints","isBoosted","distanceBetweenPoint","reserveSpace","takeOrdinalPosition","unshift","pop","forceOrdinal","getOverscrollPositions","groupIntervalFactor","sortedArray","key","indirectSearch","middle","withOverscroll","grouping","currentDataGrouping","count","unitName","fakeAxis","fakeSeries","applyGrouping","getGroupPixelWidth","getGroupIntervalFactor","destroyGroupedData","noop","getProcessedData","forced","processData","hasExtremesChanged","basePointRange","xMin","xMax","median","ordinalArray","firstPointX","firstPointVal","hasPointsInside","some","firstPoint","plotX","ordinalPointPixelInterval","shiftIndex","extraRange","ordinalSlope","calculateOverscroll","overscrollPercentage","overscrollValue","pixelToPercent","limitedOverscrollValue","lang","rangeSelectorZoom","rangeSelectorFrom","rangeSelectorTo","allButtonsEnabled","buttonSpacing","dropdown","buttonTheme","padding","inputBoxBorderColor","inputBoxHeight","inputBoxWidth","inputDateFormat","inputDateParser","inputEditDateFormat","inputEnabled","inputPosition","inputSpacing","selected","buttonPosition","inputStyle","labelStyle","RangeSelectorDefaults","RangeSelectorConstructor","chartDestroyEvents","axisMinFromRange","rangeOptions","getTrueRange","timeName","date","Date","basePeriod","set","getTime","MIN_VALUE","_offsetMin","createRangeSelector","deferredYTDClick","clickButton","extraTopMargin","redrawRangeSelector","alignTo","display","spacingBox","placed","onChartDestroy","iEnd","onChartGetMargins","rangeSelectorHeight","marginBottom","optionsRangeSelector","extraBottomMarginWas","extraTopMarginWas","RangeSelectorClass","minFromRange","RangeSelectorComposition","SVGElement","createElement","discardElement","objectEach","pad","pInt","RangeSelector","buttonOptions","defaultButtons","initialButtonGroupWidth","baseXAxisOptions","_range","rangeMin","ctx","ytdExtremes","addOffsetMin","setSelected","forcedDataGrouping","setDataGrouping","frozenStates","preserveDataGrouping","getYTDExtremes","useUTC","_offsetMax","selectedIndex","rangeSelectorButton","axisRangeUpdateEvent","selectedOption","blurInputs","minInput","maxInput","blur","computeButtonRange","createElements","updateButtonStates","dropdownLabel","actualRange","hasNoData","hasVisibleSeries","day","ytdMin","ytdMax","buttonStates","Array","selectedExists","isSelectedTooGreat","offsetRange","isSelected","isTooGreatRange","isTooSmallRange","isYTDButNotSelected","isSameRange","prevOrdinalPosition","nextOrdinalPosition","month","year","disable","select","state","button","disabled","bbox","getBBox","fixedTimes","millisecond","second","minute","week","offsetMin","offsetMax","getInputValue","input","defaultInputDateParser","setInputValue","inputTime","dateBox","minDateBox","maxDateBox","hcTimeAttr","getAttribute","updatedTime","previousTime","setAttribute","inputTypeFormats","setInputExtremes","format","showInput","inputGroup","isTextInput","border","offsetWidth","offsetHeight","hideInput","inputDate","split","join","str","isSafari","lastIndexOf","getTimezoneOffset","parts","UTC","drawInput","div","chartStyle","isMin","updateExtremes","chartAxis","currentExtreme","label","on","focus","preferredInputType","char","boxShadow","textAlign","fontFamily","onfocus","onblur","doc","activeElement","keyDown","onchange","onkeypress","keyCode","onkeydown","onkeyup","getPosition","buttonTop","inputTop","now","ts","inputsZIndex","renderButtons","parentNode","insertBefore","minElems","minLabel","maxElems","maxLabel","alignElements","buttonGroup","userButtonTheme","paddingLeft","paddingRight","hover","mouseOver","isMS","mouseOut","zoomText","textContent","textStr","callDefaultEvent","buttonEvents","click","isActive","navButtonOptions","exporting","navigation","getXOffsetForExportButton","titleCollision","positionButtons","xOffsetForExportButton","alignButtonGroup","hasLoaded","handleCollision","alignTranslateY","alignAttr","groupHeight","marginTop","buttonLeft","maxButtonWidth","buttonWidth","bBox","groupsOverlap","buttonGroupWidth","alignOptions","inputGroupX","inputGroupWidth","buttonGroupX","moveInputsDown","collapseButtons","expandButtons","isCollapsed","showDropdown","hideDropdown","hasVisibleDropdown","rangeSelectorGroup","yPosition","buttonPositionY","inputPositionY","minPosition","subtitle","rSelector","window","HTMLElement","Chart","F","getOptions","getDefaultAxisOptions","showLastLabel","categories","getForcedAxisOptions","axisOptions","StockChart","callback","xAxisOptions","yAxisOptions","mouseWheel","tooltip","crosshairs","isStock","map","createAxis","onAxisAfterDrawCrosshair","cross","log","logarithmic","tickInside","tickPosition","snap","crossLabel","posx","posy","formatOption","formatFormat","limit","lin2log","labelAlign","shape","colorIndex","labelGroup","borderWidth","fontWeight","plotY","formatter","dateTime","isInside","isPointInside","crossBox","right","anchorX","anchorY","onAxisAfterHideCrosshair","onAxisAutoLabelAlign","panes","_labelPanes","labelOptions","side","onAxisDestroy","onAxisGetPlotLinePath","isLinked","linkedParent","axisLeft","axisTop","result","translatedValue","force","x1","y1","x2","y2","uniqueAxes","transVal","acrossPanes","A","getAxis","otherColl","opt","axis2","unique","pos","skip","transB","crispPolyLine","onSeriesSetOptions","overrides","is","shadow","radius","seriesForceCropping","dataGroupingOptions","allowDG","svgRendererCrispPolyLine","SVGRendererClass","forceCropping","stockChart","c","column","pointClass","ColumnPoint","stickyTracking","HLCPoint","HLCSeriesDefaults","ColumnSeries","HLCSeries","extendStem","halfStrokeWidth","getPointPath","graphic","crispX","shapeArgs","yBottom","plotHigh","close","plotClose","drawSinglePoint","pointAttribs","getClassName","drawPoints","attribs","toYData","high","low","names","charAt","toUpperCase","tooltipPos","directTouch","pointAttrToOptions","registerSeriesType","hlc","OHLCPoint","open","resolveUpColor","upColor","resolveColor","getZone","zone","applyOptions","OHLCSeriesDefaults","onSeriesAfterSetOptions","useOhlcData","onSeriesInit","eventOptions","OHLCSeries","_args","plotOpen","CandlestickSeriesDefaults","ohlc","CandlestickSeries","isUp","upLineColor","stateOptions","reversedYAxis","topBox","bottomBox","hasTopWhisker","hasBottomWhisker","isNew","ttBelow","isValid","hasNewShapeType","symbolKey","allowOverlapX","stackDistance","fillColor","FlagsSymbols","modifiedMembers","flag","w","h","circle","createPinSymbol","labelX","startSeg","endSeg","labelY","RendererClass","OnSeriesComposition","columnProto","stableSort","getPlotBox","onSeries","optionsOnSeries","onData","lastPoint","onKey","leftPoint","lastX","rightPoint","distanceRatio","pointXOffset","barW","totalRange","substr","p0","p3","p1","controlPoints","p2","calculateCoord","t","pow","tMin","tMax","tMid","xMid","stackIndex","FlagsPoint","FlagsSeriesDefaults","R","distribute","wrap","FlagsSeries","setClip","outsideRight","centered","optionsY","boxesMap","boxes","useHTML","markerGroup","target","maxDistance","box","proceed","drawTracker","unbindMouseOver","otherPoint","raised","clip","sharedClipKey","sharedClips","forceCrop","invertible","noSharedTooltip","sorted","trackerGroups","buildKDTree","StackItem","BrokenAxis","setBreaks","onAxisAfterSetOptions","onAxisAfterSetTickPositions","tickPositions","newPositions","isInAnyBreak","onSeriesAfterGeneratePoints","connectNulls","isPointInBreak","onSeriesAfterRender","drawBreaks","seriesDrawBreaks","breakArray","breaksOutOfRange","brk","isOut","otherBreak","seriesGappedPath","groupingSize","gapSize","current","next","gapUnit","xRange","isNull","stack","stacks","stackKey","stackLabels","total","getGraphPath","gappedPath","isInBreak","repeat","inclusive","lin2Val","nval","val2Lin","findBreakAt","testKeep","inbrk","keep","showPoints","forceRedraw","axisBreak","setAxisTranslation","unitLength","breakArrayT","pointRangePadding","inBrk","move","breakSize","staticScale","minPointOffset","G","ApproximationRegistry","average","arr","hasNulls","ApproximationDefaults","averages","common","dateTimeLabelFormats","seriesSpecific","line","spline","area","arearange","columnrange","candlestick","heikinashi","DataGroupingDefaults","AxisConstructor","hasProcessed","doGrouping","dataLength","dgOptions","plotSizeX","onAfterSetScale","seriesOptions","DateTimeAxis","baseGeneratePoints","generatePoints","groupedXData","hasGroupedData","groupingEnabled","lastDataGrouping","croppedData","revertRequireSorting","requireSorting","skipDataGrouping","isCartesian","groupAll","yData","normalizeTimeTickInterval","groupedData","groupData","groupedYData","smoothed","groupMap","anchorPoints","groupedDataLastIndex","anchorIndexIterator","anchorFirstIndex","firstGroupEnd","groupStart","groupLength","lastGroupStart","shiftInterval","allGroupedData","cropData","cropStart","preventGraphAnimation","getDGApproximation","dataOptions","handleYData","values","pointArrayMapLength","extendedPointArrayMap","pointX","pointY","groupedY","approximationFn","valuesLen","dataGroupInfo","optionsToObject","j","onAfterSetOptions","useCommonDataGrouping","dataGroup","DataGroupingAxisComposition","DataGroupingSeriesComposition","onTooltipHeaderFormatter","labelConfig","xDateFormat","xDateFormatEnd","labelFormats","formattedKey","formatString","isFooter","getXDateFormat","groupEnd","styledModeFormat","TooltipClass","DataGrouping","approximationDefaults","approximations","Tooltip","annotationsFieldsTypes","getAssignedAxis","coords","coord","getFieldType","predefinedType","fieldType","NBU","wheelTimer","isObject","composedClasses","sensitivity","zoomBy","howMuch","mouseX","mouseY","hasZoomed","transform","clearTimeout","drop","onAfterGetContainer","wheelZoomOptions","allowZoom","inClass","isInsidePlot","wheelSensitivity","delta","deltaY","xAxisCoords","getCoordinates","yAxisCoords","MouseWheelZoom","Renderer"],"mappings":"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"}