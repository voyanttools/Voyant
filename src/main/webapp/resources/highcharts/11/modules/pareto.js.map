{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * Pareto series type for Highcharts\n *\n * (c) 2010-2024 Sebastian Bochan\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/pareto', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/DerivedComposition.js', [_modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (H, Series, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { addEvent, defined } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Provides methods for auto setting/updating series data based on the based\n         * series data.\n         * @private\n         */\n        var DerivedComposition;\n        (function (DerivedComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            DerivedComposition.hasDerivedData = true;\n            /**\n             * Method to be implemented - inside the method the series has already\n             * access to the base series via m `this.baseSeries` and the bases data is\n             * initialised. It should return data in the format accepted by\n             * `Series.setData()` method\n             * @private\n             */\n            DerivedComposition.setDerivedData = noop;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                const seriesProto = SeriesClass.prototype;\n                seriesProto.addBaseSeriesEvents = addBaseSeriesEvents;\n                seriesProto.addEvents = addEvents;\n                seriesProto.destroy = destroy;\n                seriesProto.init = init;\n                seriesProto.setBaseSeries = setBaseSeries;\n                return SeriesClass;\n            }\n            DerivedComposition.compose = compose;\n            /**\n             * Initialise series\n             * @private\n             */\n            function init() {\n                Series.prototype.init.apply(this, arguments);\n                this.initialised = false;\n                this.baseSeries = null;\n                this.eventRemovers = [];\n                this.addEvents();\n            }\n            DerivedComposition.init = init;\n            /**\n             * Sets base series for the series\n             * @private\n             */\n            function setBaseSeries() {\n                const chart = this.chart, baseSeriesOptions = this.options.baseSeries, baseSeries = (defined(baseSeriesOptions) &&\n                    (chart.series[baseSeriesOptions] ||\n                        chart.get(baseSeriesOptions)));\n                this.baseSeries = baseSeries || null;\n            }\n            DerivedComposition.setBaseSeries = setBaseSeries;\n            /**\n             * Adds events for the series\n             * @private\n             */\n            function addEvents() {\n                this.eventRemovers.push(addEvent(this.chart, 'afterLinkSeries', () => {\n                    this.setBaseSeries();\n                    if (this.baseSeries && !this.initialised) {\n                        this.setDerivedData();\n                        this.addBaseSeriesEvents();\n                        this.initialised = true;\n                    }\n                }));\n            }\n            DerivedComposition.addEvents = addEvents;\n            /**\n             * Adds events to the base series - it required for recalculating the data\n             * in the series if the base series is updated / removed / etc.\n             * @private\n             */\n            function addBaseSeriesEvents() {\n                this.eventRemovers.push(addEvent(this.baseSeries, 'updatedData', () => {\n                    this.setDerivedData();\n                }), addEvent(this.baseSeries, 'destroy', () => {\n                    this.baseSeries = null;\n                    this.initialised = false;\n                }));\n            }\n            DerivedComposition.addBaseSeriesEvents = addBaseSeriesEvents;\n            /**\n             * Destroys the series\n             * @private\n             */\n            function destroy() {\n                this.eventRemovers.forEach((remover) => {\n                    remover();\n                });\n                Series.prototype.destroy.apply(this, arguments);\n            }\n            DerivedComposition.destroy = destroy;\n        })(DerivedComposition || (DerivedComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DerivedComposition;\n    });\n    _registerModule(_modules, 'Series/ParetoSeries/ParetoSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A pareto diagram is a type of chart that contains both bars and a line\n         * graph, where individual values are represented in descending order by\n         * bars, and the cumulative total is represented by the line.\n         *\n         * @sample {highcharts} highcharts/demo/pareto/\n         *         Pareto diagram\n         *\n         * @extends      plotOptions.line\n         * @since        6.0.0\n         * @product      highcharts\n         * @excluding    allAreas, boostThreshold, borderColor, borderRadius,\n         *               borderWidth, crisp, colorAxis, depth, data, dragDrop,\n         *               edgeColor, edgeWidth, findNearestPointBy, gapSize, gapUnit,\n         *               grouping, groupPadding, groupZPadding, maxPointWidth, keys,\n         *               negativeColor, pointInterval, pointIntervalUnit,\n         *               pointPadding, pointPlacement, pointRange, pointStart,\n         *               pointWidth, shadow, step, softThreshold, stacking,\n         *               threshold, zoneAxis, zones, boostBlending\n         * @requires     modules/pareto\n         * @optionparent plotOptions.pareto\n         */\n        const ParetoSeriesDefaults = {\n            /**\n             * Higher zIndex than column series to draw line above shapes.\n             */\n            zIndex: 3\n        };\n        /**\n         * A `pareto` series. If the [type](#series.pareto.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.pareto\n         * @since     6.0.0\n         * @product   highcharts\n         * @excluding data, dataParser, dataURL, boostThreshold, boostBlending\n         * @requires  modules/pareto\n         * @apioption series.pareto\n         */\n        /**\n         * An integer identifying the index to use for the base series, or a string\n         * representing the id of the series.\n         *\n         * @type      {number|string}\n         * @default   undefined\n         * @apioption series.pareto.baseSeries\n         */\n        /**\n         * An array of data points for the series. For the `pareto` series type,\n         * points are calculated dynamically.\n         *\n         * @type      {Array<Array<number|string>|*>}\n         * @extends   series.column.data\n         * @since     6.0.0\n         * @product   highcharts\n         * @apioption series.pareto.data\n         */\n        ''; // Keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ParetoSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/ParetoSeries/ParetoSeries.js', [_modules['Series/DerivedComposition.js'], _modules['Series/ParetoSeries/ParetoSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (DerivedComposition, ParetoSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { line: LineSeries } = SeriesRegistry.seriesTypes;\n        const { correctFloat, merge, extend } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The pareto series type.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.pareto\n         *\n         * @augments Highcharts.Series\n         */\n        class ParetoSeries extends LineSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Calculate y sum and each percent point.\n             *\n             * @private\n             * @function Highcharts.Series#sumPointsPercents\n             *\n             * @param {Array<number>} yValues\n             * Y values\n             *\n             * @param {Array<number>} xValues\n             * X values\n             *\n             * @param {number} sum\n             * Sum of all y values\n             *\n             * @param {boolean} [isSum]\n             * Declares if calculate sum of all points\n             *\n             * @return {number|Array<number,number>}\n             * Returns sum of points or array of points [x,sum]\n             *\n             * @requires modules/pareto\n             */\n            sumPointsPercents(yValues, xValues, sum, isSum) {\n                const percentPoints = [];\n                let i = 0, sumY = 0, sumPercent = 0, percentPoint;\n                for (const point of yValues) {\n                    if (point !== null) {\n                        if (isSum) {\n                            sumY += point;\n                        }\n                        else {\n                            percentPoint = (point / sum) * 100;\n                            percentPoints.push([\n                                xValues[i],\n                                correctFloat(sumPercent + percentPoint)\n                            ]);\n                            sumPercent += percentPoint;\n                        }\n                    }\n                    ++i;\n                }\n                return (isSum ? sumY : percentPoints);\n            }\n            /**\n             * Calculate sum and return percent points.\n             *\n             * @private\n             * @function Highcharts.Series#setDerivedData\n             * @requires modules/pareto\n             */\n            setDerivedData() {\n                const xValues = this.baseSeries.xData, yValues = this.baseSeries.yData, sum = this.sumPointsPercents(yValues, xValues, null, true);\n                this.setData(this.sumPointsPercents(yValues, xValues, sum, false), false);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        ParetoSeries.defaultOptions = merge(LineSeries.defaultOptions, ParetoSeriesDefaults);\n        extend(ParetoSeries.prototype, {\n            hasDerivedData: DerivedComposition.hasDerivedData\n        });\n        DerivedComposition.compose(ParetoSeries);\n        SeriesRegistry.registerSeriesType('pareto', ParetoSeries);\n        /* *\n         *\n         *  Default export\n         *\n         * */\n\n        return ParetoSeries;\n    });\n    _registerModule(_modules, 'masters/modules/pareto.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","H","Series","U","DerivedComposition","noop","addEvent","defined","init","prototype","arguments","initialised","baseSeries","eventRemovers","addEvents","setBaseSeries","chart","baseSeriesOptions","options","series","get","push","setDerivedData","addBaseSeriesEvents","destroy","forEach","remover","hasDerivedData","compose","SeriesClass","seriesProto","zIndex","ParetoSeriesDefaults","SeriesRegistry","line","LineSeries","seriesTypes","correctFloat","merge","extend","ParetoSeries","sumPointsPercents","yValues","xValues","sum","isSum","percentPoints","i","sumY","sumPercent","percentPoint","point","xData","yData","setData","defaultOptions","registerSeriesType"],"mappings":"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"}