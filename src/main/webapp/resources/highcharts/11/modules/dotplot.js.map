{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * Dot plot series type for Highcharts\n *\n * (c) 2010-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/dotplot', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/DotPlot/DotPlotSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  Dot plot series type for Highcharts\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const DotPlotSeriesDefaults = {\n            itemPadding: 0.1,\n            marker: {\n                symbol: 'circle',\n                states: {\n                    hover: {},\n                    select: {}\n                }\n            },\n            slotsPerBar: void 0\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DotPlotSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/DotPlot/DotPlotSeries.js', [_modules['Series/DotPlot/DotPlotSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (DotPlotSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  Dot plot series type for Highcharts\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /**\n         * @private\n         * @todo\n         * - Check update, remove etc.\n         * - Custom icons like persons, carts etc. Either as images, font icons or\n         *   Highcharts symbols.\n         */\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { extend, isNumber, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.dotplot\n         *\n         * @augments Highcharts.Series\n         */\n        class DotPlotSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            drawPoints() {\n                const series = this, options = series.options, renderer = series.chart.renderer, seriesMarkerOptions = options.marker, total = this.points.reduce((acc, point) => acc + Math.abs(point.y || 0), 0), totalHeight = this.points.reduce((acc, point) => acc + (point.shapeArgs?.height || 0), 0), itemPadding = options.itemPadding || 0, columnWidth = this.points[0]?.shapeArgs?.width || 0;\n                let slotsPerBar = options.slotsPerBar, slotWidth = columnWidth;\n                // Find the suitable number of slots per column\n                if (!isNumber(slotsPerBar)) {\n                    slotsPerBar = 1;\n                    while (slotsPerBar < total) {\n                        if (total / slotsPerBar <\n                            (totalHeight / slotWidth) * 1.2) {\n                            break;\n                        }\n                        slotsPerBar++;\n                        slotWidth = columnWidth / slotsPerBar;\n                    }\n                }\n                const height = (totalHeight * slotsPerBar) / total;\n                for (const point of series.points) {\n                    const pointMarkerOptions = point.marker || {}, symbol = (pointMarkerOptions.symbol ||\n                        seriesMarkerOptions.symbol), radius = pick(pointMarkerOptions.radius, seriesMarkerOptions.radius), isSquare = symbol !== 'rect', width = isSquare ? height : slotWidth, shapeArgs = point.shapeArgs || {}, startX = (shapeArgs.x || 0) + ((shapeArgs.width || 0) -\n                        slotsPerBar * width) / 2, positiveYValue = Math.abs(point.y ?? 0), shapeY = (shapeArgs.y || 0), shapeHeight = (shapeArgs.height || 0);\n                    let graphics, x = startX, y = point.negative ? shapeY : shapeY + shapeHeight - height, slotColumn = 0;\n                    point.graphics = graphics = point.graphics || [];\n                    const pointAttr = point.pointAttr ?\n                        (point.pointAttr[point.selected ? 'selected' : ''] ||\n                            series.pointAttr['']) :\n                        series.pointAttribs(point, point.selected && 'select');\n                    delete pointAttr.r;\n                    if (series.chart.styledMode) {\n                        delete pointAttr.stroke;\n                        delete pointAttr['stroke-width'];\n                    }\n                    if (typeof point.y === 'number') {\n                        if (!point.graphic) {\n                            point.graphic = renderer.g('point').add(series.group);\n                        }\n                        for (let val = 0; val < positiveYValue; val++) {\n                            const attr = {\n                                x: x + width * itemPadding,\n                                y: y + height * itemPadding,\n                                width: width * (1 - 2 * itemPadding),\n                                height: height * (1 - 2 * itemPadding),\n                                r: radius\n                            };\n                            let graphic = graphics[val];\n                            if (graphic) {\n                                graphic.animate(attr);\n                            }\n                            else {\n                                graphic = renderer\n                                    .symbol(symbol)\n                                    .attr(extend(attr, pointAttr))\n                                    .add(point.graphic);\n                            }\n                            graphic.isActive = true;\n                            graphics[val] = graphic;\n                            x += width;\n                            slotColumn++;\n                            if (slotColumn >= slotsPerBar) {\n                                slotColumn = 0;\n                                x = startX;\n                                y = point.negative ? y + height : y - height;\n                            }\n                        }\n                    }\n                    let i = -1;\n                    for (const graphic of graphics) {\n                        ++i;\n                        if (graphic) {\n                            if (!graphic.isActive) {\n                                graphic.destroy();\n                                graphics.splice(i, 1);\n                            }\n                            else {\n                                graphic.isActive = false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        DotPlotSeries.defaultOptions = merge(ColumnSeries.defaultOptions, DotPlotSeriesDefaults);\n        extend(DotPlotSeries.prototype, {\n            markerAttribs: void 0\n        });\n        SeriesRegistry.registerSeriesType('dotplot', DotPlotSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DotPlotSeries;\n    });\n    _registerModule(_modules, 'masters/modules/dotplot.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","itemPadding","marker","symbol","states","hover","select","slotsPerBar","DotPlotSeriesDefaults","SeriesRegistry","U","column","ColumnSeries","seriesTypes","extend","isNumber","merge","pick","DotPlotSeries","drawPoints","options","series","renderer","chart","seriesMarkerOptions","total","points","reduce","acc","point","Math","abs","y","totalHeight","shapeArgs","height","columnWidth","width","slotWidth","pointMarkerOptions","radius","isSquare","startX","x","positiveYValue","shapeY","shapeHeight","graphics","negative","slotColumn","pointAttr","selected","pointAttribs","r","styledMode","stroke","graphic","g","add","group","val","attr","animate","isActive","i","destroy","splice","defaultOptions","prototype","markerAttribs","registerSeriesType"],"mappings":"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"}