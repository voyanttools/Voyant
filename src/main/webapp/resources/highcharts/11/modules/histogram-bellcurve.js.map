{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * (c) 2010-2024 Highsoft AS\n * Author: Sebastian Domas\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/histogram-bellcurve', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/DerivedComposition.js', [_modules['Core/Globals.js'], _modules['Core/Series/Series.js'], _modules['Core/Utilities.js']], function (H, Series, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { noop } = H;\n        const { addEvent, defined } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Provides methods for auto setting/updating series data based on the based\n         * series data.\n         * @private\n         */\n        var DerivedComposition;\n        (function (DerivedComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            DerivedComposition.hasDerivedData = true;\n            /**\n             * Method to be implemented - inside the method the series has already\n             * access to the base series via m `this.baseSeries` and the bases data is\n             * initialised. It should return data in the format accepted by\n             * `Series.setData()` method\n             * @private\n             */\n            DerivedComposition.setDerivedData = noop;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                const seriesProto = SeriesClass.prototype;\n                seriesProto.addBaseSeriesEvents = addBaseSeriesEvents;\n                seriesProto.addEvents = addEvents;\n                seriesProto.destroy = destroy;\n                seriesProto.init = init;\n                seriesProto.setBaseSeries = setBaseSeries;\n                return SeriesClass;\n            }\n            DerivedComposition.compose = compose;\n            /**\n             * Initialise series\n             * @private\n             */\n            function init() {\n                Series.prototype.init.apply(this, arguments);\n                this.initialised = false;\n                this.baseSeries = null;\n                this.eventRemovers = [];\n                this.addEvents();\n            }\n            DerivedComposition.init = init;\n            /**\n             * Sets base series for the series\n             * @private\n             */\n            function setBaseSeries() {\n                const chart = this.chart, baseSeriesOptions = this.options.baseSeries, baseSeries = (defined(baseSeriesOptions) &&\n                    (chart.series[baseSeriesOptions] ||\n                        chart.get(baseSeriesOptions)));\n                this.baseSeries = baseSeries || null;\n            }\n            DerivedComposition.setBaseSeries = setBaseSeries;\n            /**\n             * Adds events for the series\n             * @private\n             */\n            function addEvents() {\n                this.eventRemovers.push(addEvent(this.chart, 'afterLinkSeries', () => {\n                    this.setBaseSeries();\n                    if (this.baseSeries && !this.initialised) {\n                        this.setDerivedData();\n                        this.addBaseSeriesEvents();\n                        this.initialised = true;\n                    }\n                }));\n            }\n            DerivedComposition.addEvents = addEvents;\n            /**\n             * Adds events to the base series - it required for recalculating the data\n             * in the series if the base series is updated / removed / etc.\n             * @private\n             */\n            function addBaseSeriesEvents() {\n                this.eventRemovers.push(addEvent(this.baseSeries, 'updatedData', () => {\n                    this.setDerivedData();\n                }), addEvent(this.baseSeries, 'destroy', () => {\n                    this.baseSeries = null;\n                    this.initialised = false;\n                }));\n            }\n            DerivedComposition.addBaseSeriesEvents = addBaseSeriesEvents;\n            /**\n             * Destroys the series\n             * @private\n             */\n            function destroy() {\n                this.eventRemovers.forEach((remover) => {\n                    remover();\n                });\n                Series.prototype.destroy.apply(this, arguments);\n            }\n            DerivedComposition.destroy = destroy;\n        })(DerivedComposition || (DerivedComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DerivedComposition;\n    });\n    _registerModule(_modules, 'Series/Histogram/HistogramSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *  Author: Sebastian Domas\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A histogram is a column series which represents the distribution of the\n         * data set in the base series. Histogram splits data into bins and shows\n         * their frequencies.\n         *\n         * @sample {highcharts} highcharts/demo/histogram/\n         *         Histogram\n         *\n         * @extends      plotOptions.column\n         * @excluding    boostThreshold, dragDrop, pointInterval, pointIntervalUnit,\n         *               stacking, boostBlending\n         * @product      highcharts\n         * @since        6.0.0\n         * @requires     modules/histogram-bellcurve\n         * @optionparent plotOptions.histogram\n         */\n        const HistogramSeriesDefaults = {\n            /**\n             * A preferable number of bins. It is a suggestion, so a histogram may\n             * have a different number of bins. By default it is set to the square\n             * root of the base series' data length. Available options are:\n             * `square-root`, `sturges`, `rice`. You can also define a function\n             * which takes a `baseSeries` as a parameter and should return a\n             * positive integer.\n             *\n             * @type {\"square-root\"|\"sturges\"|\"rice\"|number|Function}\n             */\n            binsNumber: 'square-root',\n            /**\n             * Width of each bin. By default the bin's width is calculated as\n             * `(max - min) / number of bins`. This option takes precedence over\n             * [binsNumber](#plotOptions.histogram.binsNumber).\n             *\n             * @type {number}\n             */\n            binWidth: void 0,\n            pointPadding: 0,\n            groupPadding: 0,\n            grouping: false,\n            pointPlacement: 'between',\n            tooltip: {\n                headerFormat: '',\n                pointFormat: ('<span style=\"font-size: 0.8em\">{point.x} - {point.x2}' +\n                    '</span><br/>' +\n                    '<span style=\"color:{point.color}\">\\u25CF</span>' +\n                    ' {series.name} <b>{point.y}</b><br/>')\n            }\n        };\n        /**\n         * A `histogram` series. If the [type](#series.histogram.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.histogram\n         * @excluding data, dataParser, dataURL, boostThreshold, boostBlending\n         * @product   highcharts\n         * @since     6.0.0\n         * @requires  modules/histogram-bellcurve\n         * @apioption series.histogram\n         */\n        /**\n         * An integer identifying the index to use for the base series, or a string\n         * representing the id of the series.\n         *\n         * @type      {number|string}\n         * @apioption series.histogram.baseSeries\n         */\n        ''; // Keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HistogramSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Histogram/HistogramSeries.js', [_modules['Series/DerivedComposition.js'], _modules['Series/Histogram/HistogramSeriesDefaults.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (DerivedComposition, HistogramSeriesDefaults, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *  Author: Sebastian Domas\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: ColumnSeries } = SeriesRegistry.seriesTypes;\n        const { arrayMax, arrayMin, correctFloat, extend, isNumber, merge } = U;\n        /* ************************************************************************** *\n         *  HISTOGRAM\n         * ************************************************************************** */\n        /**\n         * A dictionary with formulas for calculating number of bins based on the\n         * base series\n         **/\n        const binsNumberFormulas = {\n            'square-root': function (baseSeries) {\n                return Math.ceil(Math.sqrt(baseSeries.options.data.length));\n            },\n            'sturges': function (baseSeries) {\n                return Math.ceil(Math.log(baseSeries.options.data.length) * Math.LOG2E);\n            },\n            'rice': function (baseSeries) {\n                return Math.ceil(2 * Math.pow(baseSeries.options.data.length, 1 / 3));\n            }\n        };\n        /**\n         * Returns a function for mapping number to the closed (right opened) bins\n         * @private\n         * @param {Array<number>} bins\n         * Width of the bins\n         */\n        function fitToBinLeftClosed(bins) {\n            return function (y) {\n                let i = 1;\n                while (bins[i] <= y) {\n                    i++;\n                }\n                return bins[--i];\n            };\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Histogram class\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.histogram\n         * @augments Highcharts.Series\n         */\n        class HistogramSeries extends ColumnSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            binsNumber() {\n                const binsNumberOption = this.options.binsNumber;\n                const binsNumber = binsNumberFormulas[binsNumberOption] ||\n                    // #7457\n                    (typeof binsNumberOption === 'function' && binsNumberOption);\n                return Math.ceil((binsNumber && binsNumber(this.baseSeries)) ||\n                    (isNumber(binsNumberOption) ?\n                        binsNumberOption :\n                        binsNumberFormulas['square-root'](this.baseSeries)));\n            }\n            derivedData(baseData, binsNumber, binWidth) {\n                const series = this, max = correctFloat(arrayMax(baseData)), \n                // Float correction needed, because first frequency value is not\n                // corrected when generating frequencies (within for loop).\n                min = correctFloat(arrayMin(baseData)), frequencies = [], bins = {}, data = [];\n                let x;\n                binWidth = series.binWidth = (correctFloat(isNumber(binWidth) ?\n                    (binWidth || 1) :\n                    (max - min) / binsNumber));\n                // #12077 negative pointRange causes wrong calculations,\n                // browser hanging.\n                series.options.pointRange = Math.max(binWidth, 0);\n                // If binWidth is 0 then max and min are equaled,\n                // increment the x with some positive value to quit the loop\n                for (x = min; \n                // This condition is needed because of the margin of error while\n                // operating on decimal numbers. Without that, additional bin\n                // was sometimes noticeable on the graph, because of too small\n                // precision of float correction.\n                x < max &&\n                    (series.userOptions.binWidth ||\n                        correctFloat(max - x) >= binWidth ||\n                        // #13069 - Every add and subtract operation should\n                        // be corrected, due to general problems with\n                        // operations on float numbers in JS.\n                        correctFloat(correctFloat(min + (frequencies.length * binWidth)) -\n                            x) <= 0); x = correctFloat(x + binWidth)) {\n                    frequencies.push(x);\n                    bins[x] = 0;\n                }\n                if (bins[min] !== 0) {\n                    frequencies.push(min);\n                    bins[min] = 0;\n                }\n                const fitToBin = fitToBinLeftClosed(frequencies.map((elem) => parseFloat(elem)));\n                for (const y of baseData) {\n                    bins[correctFloat(fitToBin(y))]++;\n                }\n                for (const key of Object.keys(bins)) {\n                    data.push({\n                        x: Number(key),\n                        y: bins[key],\n                        x2: correctFloat(Number(key) + binWidth)\n                    });\n                }\n                data.sort((a, b) => (a.x - b.x));\n                data[data.length - 1].x2 = max;\n                return data;\n            }\n            setDerivedData() {\n                const yData = this.baseSeries.yData;\n                if (!yData.length) {\n                    this.setData([]);\n                    return;\n                }\n                const data = this.derivedData(yData, this.binsNumber(), this.options.binWidth);\n                this.setData(data, false);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        HistogramSeries.defaultOptions = merge(ColumnSeries.defaultOptions, HistogramSeriesDefaults);\n        extend(HistogramSeries.prototype, {\n            hasDerivedData: DerivedComposition.hasDerivedData\n        });\n        DerivedComposition.compose(HistogramSeries);\n        SeriesRegistry.registerSeriesType('histogram', HistogramSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HistogramSeries;\n    });\n    _registerModule(_modules, 'Series/Bellcurve/BellcurveSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  Author: Sebastian Domas\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Optiions\n         *\n         * */\n        /**\n         * A bell curve is an areaspline series which represents the probability\n         * density function of the normal distribution. It calculates mean and\n         * standard deviation of the base series data and plots the curve according\n         * to the calculated parameters.\n         *\n         * @sample {highcharts} highcharts/demo/bellcurve/\n         *         Bell curve\n         *\n         * @extends      plotOptions.areaspline\n         * @since        6.0.0\n         * @product      highcharts\n         * @excluding    boostThreshold, connectNulls, dragDrop, stacking,\n         *               pointInterval, pointIntervalUnit\n         * @requires     modules/histogram-bellcurve\n         * @optionparent plotOptions.bellcurve\n         */\n        const BellcurveSeriesDefaults = {\n            /**\n             * @see [fillColor](#plotOptions.bellcurve.fillColor)\n             * @see [fillOpacity](#plotOptions.bellcurve.fillOpacity)\n             *\n             * @apioption plotOptions.bellcurve.color\n             */\n            /**\n             * @see [color](#plotOptions.bellcurve.color)\n             * @see [fillOpacity](#plotOptions.bellcurve.fillOpacity)\n             *\n             * @apioption plotOptions.bellcurve.fillColor\n             */\n            /**\n             * @see [color](#plotOptions.bellcurve.color)\n             * @see [fillColor](#plotOptions.bellcurve.fillColor)\n             *\n             * @default   {highcharts} 0.75\n             * @default   {highstock} 0.75\n             * @apioption plotOptions.bellcurve.fillOpacity\n             */\n            /**\n             * This option allows to define the length of the bell curve. A unit of\n             * the length of the bell curve is standard deviation.\n             *\n             * @sample highcharts/plotoptions/bellcurve-intervals-pointsininterval\n             *         Intervals and points in interval\n             */\n            intervals: 3,\n            /**\n             * Defines how many points should be plotted within 1 interval. See\n             * `plotOptions.bellcurve.intervals`.\n             *\n             * @sample highcharts/plotoptions/bellcurve-intervals-pointsininterval\n             *         Intervals and points in interval\n             */\n            pointsInInterval: 3,\n            marker: {\n                enabled: false\n            }\n        };\n        /**\n         * A `bellcurve` series. If the [type](#series.bellcurve.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * For options that apply to multiple series, it is recommended to add\n         * them to the [plotOptions.series](#plotOptions.series) options structure.\n         * To apply to all series of this specific type, apply it to\n         * [plotOptions.bellcurve](#plotOptions.bellcurve).\n         *\n         * @extends   series,plotOptions.bellcurve\n         * @since     6.0.0\n         * @product   highcharts\n         * @excluding dataParser, dataURL, data, boostThreshold, boostBlending\n         * @requires  modules/histogram-bellcurve\n         * @apioption series.bellcurve\n         */\n        /**\n         * An integer identifying the index to use for the base series, or a string\n         * representing the id of the series.\n         *\n         * @type      {number|string}\n         * @apioption series.bellcurve.baseSeries\n         */\n        /**\n         * @see [fillColor](#series.bellcurve.fillColor)\n         * @see [fillOpacity](#series.bellcurve.fillOpacity)\n         *\n         * @apioption series.bellcurve.color\n         */\n        /**\n         * @see [color](#series.bellcurve.color)\n         * @see [fillOpacity](#series.bellcurve.fillOpacity)\n         *\n         * @apioption series.bellcurve.fillColor\n         */\n        /**\n         * @see [color](#series.bellcurve.color)\n         * @see [fillColor](#series.bellcurve.fillColor)\n         *\n         * @default   {highcharts} 0.75\n         * @default   {highstock} 0.75\n         * @apioption series.bellcurve.fillOpacity\n         */\n        ''; // Keeps doclets above separate\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BellcurveSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Bellcurve/BellcurveSeries.js', [_modules['Series/Bellcurve/BellcurveSeriesDefaults.js'], _modules['Series/DerivedComposition.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (BellcurveSeriesDefaults, DerivedComposition, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  Author: Sebastian Domas\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { areaspline: AreaSplineSeries } = SeriesRegistry.seriesTypes;\n        const { correctFloat, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Bell curve class\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.bellcurve\n         *\n         * @augments Highcharts.Series\n         */\n        class BellcurveSeries extends AreaSplineSeries {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /** @private */\n            static mean(data) {\n                const length = data.length, sum = data.reduce(function (sum, value) {\n                    return (sum += value);\n                }, 0);\n                return length > 0 && sum / length;\n            }\n            /** @private */\n            static standardDeviation(data, average) {\n                const len = data.length;\n                average = isNumber(average) ?\n                    average : BellcurveSeries.mean(data);\n                const sum = data.reduce((sum, value) => {\n                    const diff = value - average;\n                    return (sum += diff * diff);\n                }, 0);\n                return len > 1 && Math.sqrt(sum / (len - 1));\n            }\n            /** @private */\n            static normalDensity(x, mean, standardDeviation) {\n                const translation = x - mean;\n                return Math.exp(-(translation * translation) /\n                    (2 * standardDeviation * standardDeviation)) / (standardDeviation * Math.sqrt(2 * Math.PI));\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            derivedData(mean, standardDeviation) {\n                const options = this.options, intervals = options.intervals, pointsInInterval = options.pointsInInterval, stop = intervals * pointsInInterval * 2 + 1, increment = standardDeviation / pointsInInterval, data = [];\n                let x = mean - intervals * standardDeviation;\n                for (let i = 0; i < stop; i++) {\n                    data.push([x, BellcurveSeries.normalDensity(x, mean, standardDeviation)]);\n                    x += increment;\n                }\n                return data;\n            }\n            setDerivedData() {\n                const series = this;\n                if (series.baseSeries?.yData?.length || 0 > 1) {\n                    series.setMean();\n                    series.setStandardDeviation();\n                    series.setData(series.derivedData(series.mean || 0, series.standardDeviation || 0), false, void 0, false);\n                }\n                return (void 0);\n            }\n            setMean() {\n                const series = this;\n                series.mean = correctFloat(BellcurveSeries.mean(series.baseSeries.yData));\n            }\n            setStandardDeviation() {\n                const series = this;\n                series.standardDeviation = correctFloat(BellcurveSeries.standardDeviation(series.baseSeries.yData, series.mean));\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        BellcurveSeries.defaultOptions = merge(AreaSplineSeries.defaultOptions, BellcurveSeriesDefaults);\n        DerivedComposition.compose(BellcurveSeries);\n        SeriesRegistry.registerSeriesType('bellcurve', BellcurveSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BellcurveSeries;\n    });\n    _registerModule(_modules, 'masters/modules/histogram-bellcurve.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","H","Series","U","DerivedComposition","noop","addEvent","defined","init","prototype","arguments","initialised","baseSeries","eventRemovers","addEvents","setBaseSeries","chart","baseSeriesOptions","options","series","get","push","setDerivedData","addBaseSeriesEvents","destroy","forEach","remover","hasDerivedData","compose","SeriesClass","seriesProto","binsNumber","binWidth","pointPadding","groupPadding","grouping","pointPlacement","tooltip","headerFormat","pointFormat","HistogramSeriesDefaults","SeriesRegistry","column","ColumnSeries","seriesTypes","arrayMax","arrayMin","correctFloat","extend","isNumber","merge","binsNumberFormulas","Math","ceil","sqrt","data","length","log","LOG2E","pow","HistogramSeries","binsNumberOption","derivedData","baseData","bins","x","max","min","frequencies","pointRange","userOptions","fitToBin","map","elem","parseFloat","y","i","key","Object","keys","Number","x2","sort","a","b","yData","setData","defaultOptions","registerSeriesType","intervals","pointsInInterval","marker","enabled","BellcurveSeriesDefaults","areaspline","AreaSplineSeries","BellcurveSeries","mean","sum","reduce","value","standardDeviation","average","len","diff","normalDensity","translation","exp","PI","stop","increment","setMean","setStandardDeviation"],"mappings":"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"}