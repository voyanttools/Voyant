{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highstock JS v11.4.8 (2024-08-29)\n *\n * Drag-panes module\n *\n * (c) 2010-2024 Highsoft AS\n * Author: Kacper Madej\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/drag-panes', ['highcharts', 'highcharts/modules/stock'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/DragPanes/AxisResizerDefaults.js', [], function () {\n        /* *\n         *\n         *  Plugin for resizing axes / panes in a chart.\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  Author: Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const AxisResizerDefaults = {\n            /**\n             * Minimal size of a resizable axis. Could be set as a percent\n             * of plot area or pixel size.\n             *\n             * @sample {highstock} stock/yaxis/resize-min-max-length\n             *         minLength and maxLength\n             *\n             * @type      {number|string}\n             * @product   highstock\n             * @requires  modules/drag-panes\n             * @apioption yAxis.minLength\n             */\n            minLength: '10%',\n            /**\n             * Maximal size of a resizable axis. Could be set as a percent\n             * of plot area or pixel size.\n             *\n             * @sample {highstock} stock/yaxis/resize-min-max-length\n             *         minLength and maxLength\n             *\n             * @type      {number|string}\n             * @product   highstock\n             * @requires  modules/drag-panes\n             * @apioption yAxis.maxLength\n             */\n            maxLength: '100%',\n            /**\n             * Options for axis resizing. It adds a thick line between panes which\n             * the user can drag in order to resize the panes.\n             *\n             * @sample {highstock} stock/demo/candlestick-and-volume\n             *         Axis resizing enabled\n             *\n             * @product      highstock\n             * @requires     modules/drag-panes\n             * @optionparent yAxis.resize\n             */\n            resize: {\n                /**\n                 * Contains two arrays of axes that are controlled by control line\n                 * of the axis.\n                 *\n                 * @requires modules/drag-panes\n                 */\n                controlledAxis: {\n                    /**\n                     * Array of axes that should move out of the way of resizing\n                     * being done for the current axis. If not set, the next axis\n                     * will be used.\n                     *\n                     * @sample {highstock} stock/yaxis/multiple-resizers\n                     *         Three panes with resizers\n                     * @sample {highstock} stock/yaxis/resize-multiple-axes\n                     *         One resizer controlling multiple axes\n                     *\n                     * @type     {Array<number|string>}\n                     * @default  []\n                     * @requires modules/drag-panes\n                     */\n                    next: [],\n                    /**\n                     * Array of axes that should move with the current axis\n                     * while resizing.\n                     *\n                     * @sample {highstock} stock/yaxis/multiple-resizers\n                     *         Three panes with resizers\n                     * @sample {highstock} stock/yaxis/resize-multiple-axes\n                     *         One resizer controlling multiple axes\n                     *\n                     * @type     {Array<number|string>}\n                     * @default  []\n                     * @requires modules/drag-panes\n                     */\n                    prev: []\n                },\n                /**\n                 * Enable or disable resize by drag for the axis.\n                 *\n                 * @sample {highstock} stock/demo/candlestick-and-volume\n                 *         Enabled resizer\n                 *\n                 * @requires modules/drag-panes\n                 */\n                enabled: false,\n                /**\n                 * Cursor style for the control line.\n                 *\n                 * In styled mode use class `highcharts-axis-resizer` instead.\n                 *\n                 * @requires modules/drag-panes\n                 */\n                cursor: 'ns-resize',\n                /**\n                 * Color of the control line.\n                 *\n                 * In styled mode use class `highcharts-axis-resizer` instead.\n                 *\n                 * @sample {highstock} stock/yaxis/styled-resizer\n                 *         Styled resizer\n                 *\n                 * @type     {Highcharts.ColorString}\n                 * @requires modules/drag-panes\n                 */\n                lineColor: \"#cccccc\" /* Palette.neutralColor20 */,\n                /**\n                 * Dash style of the control line.\n                 *\n                 * In styled mode use class `highcharts-axis-resizer` instead.\n                 *\n                 * @see For supported options check [dashStyle](#plotOptions.series.dashStyle)\n                 *\n                 * @sample {highstock} stock/yaxis/styled-resizer\n                 *         Styled resizer\n                 *\n                 * @requires modules/drag-panes\n                 */\n                lineDashStyle: 'Solid',\n                /**\n                 * Width of the control line.\n                 *\n                 * In styled mode use class `highcharts-axis-resizer` instead.\n                 *\n                 * @sample {highstock} stock/yaxis/styled-resizer\n                 *         Styled resizer\n                 *\n                 * @requires modules/drag-panes\n                 */\n                lineWidth: 4,\n                /**\n                 * Horizontal offset of the control line.\n                 *\n                 * @sample {highstock} stock/yaxis/styled-resizer\n                 *         Styled resizer\n                 *\n                 * @requires modules/drag-panes\n                 */\n                x: 0,\n                /**\n                 * Vertical offset of the control line.\n                 *\n                 * @sample {highstock} stock/yaxis/styled-resizer\n                 *         Styled resizer\n                 *\n                 * @requires modules/drag-panes\n                 */\n                y: 0\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AxisResizerDefaults;\n    });\n    _registerModule(_modules, 'Extensions/DragPanes/AxisResizer.js', [_modules['Extensions/DragPanes/AxisResizerDefaults.js'], _modules['Core/Utilities.js']], function (AxisResizerDefaults, U) {\n        /* *\n         *\n         *  Plugin for resizing axes / panes in a chart.\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  Author: Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, clamp, isNumber, relativeLength } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The AxisResizer class.\n         *\n         * @private\n         * @class\n         * @name Highcharts.AxisResizer\n         *\n         * @param {Highcharts.Axis} axis\n         *        Main axis for the AxisResizer.\n         */\n        class AxisResizer {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(axis) {\n                this.init(axis);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initialize the AxisResizer object.\n             *\n             * @function Highcharts.AxisResizer#init\n             *\n             * @param {Highcharts.Axis} axis\n             *        Main axis for the AxisResizer.\n             */\n            init(axis, update) {\n                this.axis = axis;\n                this.options = axis.options.resize || {};\n                this.render();\n                if (!update) {\n                    // Add mouse events.\n                    this.addMouseEvents();\n                }\n            }\n            /**\n             * Render the AxisResizer\n             *\n             * @function Highcharts.AxisResizer#render\n             */\n            render() {\n                const resizer = this, axis = resizer.axis, chart = axis.chart, options = resizer.options, x = options.x || 0, y = options.y, \n                // Normalize control line position according to the plot area\n                pos = clamp(axis.top + axis.height + y, chart.plotTop, chart.plotTop + chart.plotHeight);\n                let attr = {};\n                if (!chart.styledMode) {\n                    attr = {\n                        cursor: options.cursor,\n                        stroke: options.lineColor,\n                        'stroke-width': options.lineWidth,\n                        dashstyle: options.lineDashStyle\n                    };\n                }\n                // Register current position for future reference.\n                resizer.lastPos = pos - y;\n                if (!resizer.controlLine) {\n                    resizer.controlLine = chart.renderer.path()\n                        .addClass('highcharts-axis-resizer');\n                }\n                // Add to axisGroup after axis update, because the group is recreated\n                // Do .add() before path is calculated because strokeWidth() needs it.\n                resizer.controlLine.add(axis.axisGroup);\n                const lineWidth = chart.styledMode ?\n                    resizer.controlLine.strokeWidth() :\n                    options.lineWidth;\n                attr.d = chart.renderer.crispLine([\n                    ['M', axis.left + x, pos],\n                    ['L', axis.left + axis.width + x, pos]\n                ], lineWidth);\n                resizer.controlLine.attr(attr);\n            }\n            /**\n             * Set up the mouse and touch events for the control line.\n             *\n             * @function Highcharts.AxisResizer#addMouseEvents\n             */\n            addMouseEvents() {\n                const resizer = this, ctrlLineElem = resizer.controlLine.element, container = resizer.axis.chart.container, eventsToUnbind = [];\n                let mouseMoveHandler, mouseUpHandler, mouseDownHandler;\n                // Create mouse events' handlers.\n                // Make them as separate functions to enable wrapping them:\n                resizer.mouseMoveHandler = mouseMoveHandler = (e) => (resizer.onMouseMove(e));\n                resizer.mouseUpHandler = mouseUpHandler = (e) => (resizer.onMouseUp(e));\n                resizer.mouseDownHandler = mouseDownHandler = () => (resizer.onMouseDown());\n                eventsToUnbind.push(\n                // Add mouse move and mouseup events. These are bind to doc/div,\n                // because resizer.grabbed flag is stored in mousedown events.\n                addEvent(container, 'mousemove', mouseMoveHandler), addEvent(container.ownerDocument, 'mouseup', mouseUpHandler), addEvent(ctrlLineElem, 'mousedown', mouseDownHandler), \n                // Touch events.\n                addEvent(container, 'touchmove', mouseMoveHandler), addEvent(container.ownerDocument, 'touchend', mouseUpHandler), addEvent(ctrlLineElem, 'touchstart', mouseDownHandler));\n                resizer.eventsToUnbind = eventsToUnbind;\n            }\n            /**\n             * Mouse move event based on x/y mouse position.\n             *\n             * @function Highcharts.AxisResizer#onMouseMove\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event.\n             */\n            onMouseMove(e) {\n                /*\n                 * In iOS, a mousemove event with e.pageX === 0 is fired when holding\n                 * the finger down in the center of the scrollbar. This should\n                 * be ignored. Borrowed from Navigator.\n                 */\n                if (!e.touches || e.touches[0].pageX !== 0) {\n                    const pointer = this.axis.chart.pointer;\n                    // Drag the control line\n                    if (this.grabbed && pointer) {\n                        this.hasDragged = true;\n                        this.updateAxes(pointer.normalize(e).chartY - (this.options.y || 0));\n                    }\n                }\n            }\n            /**\n             * Mouse up event based on x/y mouse position.\n             *\n             * @function Highcharts.AxisResizer#onMouseUp\n             *\n             * @param {Highcharts.PointerEventObject} e\n             *        Mouse event.\n             */\n            onMouseUp(e) {\n                const pointer = this.axis.chart.pointer;\n                if (this.hasDragged && pointer) {\n                    this.updateAxes(pointer.normalize(e).chartY - (this.options.y || 0));\n                }\n                // Restore runPointActions.\n                this.grabbed = this.hasDragged = this.axis.chart.activeResizer = void 0;\n            }\n            /**\n             * Mousedown on a control line.\n             * Will store necessary information for drag&drop.\n             *\n             * @function Highcharts.AxisResizer#onMouseDown\n             */\n            onMouseDown() {\n                // Clear all hover effects.\n                this.axis.chart.pointer?.reset(false, 0);\n                // Disable runPointActions.\n                this.grabbed = this.axis.chart.activeResizer = true;\n            }\n            /**\n             * Update all connected axes after a change of control line position\n             *\n             * @function Highcharts.AxisResizer#updateAxes\n             *\n             * @param {number} chartY\n             */\n            updateAxes(chartY) {\n                const resizer = this, chart = resizer.axis.chart, axes = resizer.options.controlledAxis, nextAxes = axes.next.length === 0 ?\n                    [chart.yAxis.indexOf(resizer.axis) + 1] : axes.next, \n                // Main axis is included in the prev array by default\n                prevAxes = [resizer.axis].concat(axes.prev), \n                // Prev and next configs\n                axesConfigs = [], plotTop = chart.plotTop, plotHeight = chart.plotHeight, plotBottom = plotTop + plotHeight, calculatePercent = (value) => (value * 100 / plotHeight + '%'), normalize = (val, min, max) => (Math.round(clamp(val, min, max)));\n                // Normalize chartY to plot area limits\n                chartY = clamp(chartY, plotTop, plotBottom);\n                let stopDrag = false, yDelta = chartY - resizer.lastPos;\n                // Update on changes of at least 1 pixel in the desired direction\n                if (yDelta * yDelta < 1) {\n                    return;\n                }\n                let isFirst = true;\n                // First gather info how axes should behave\n                for (const axesGroup of [prevAxes, nextAxes]) {\n                    for (const axisInfo of axesGroup) {\n                        // Axes given as array index, axis object or axis id\n                        const axis = isNumber(axisInfo) ?\n                            // If it's a number - it's an index\n                            chart.yAxis[axisInfo] :\n                            (\n                            // If it's first elem. in first group\n                            isFirst ?\n                                // Then it's an Axis object\n                                axisInfo :\n                                // Else it should be an id\n                                chart.get(axisInfo)), axisOptions = axis && axis.options, optionsToUpdate = {};\n                        let height, top;\n                        // Skip if axis is not found\n                        // or it is navigator's yAxis (#7732)\n                        if (!axisOptions || axisOptions.isInternal) {\n                            isFirst = false;\n                            continue;\n                        }\n                        top = axis.top;\n                        const minLength = Math.round(relativeLength(axisOptions.minLength || NaN, plotHeight)), maxLength = Math.round(relativeLength(axisOptions.maxLength || NaN, plotHeight));\n                        if (!isFirst) {\n                            // Try to change height first. yDelta could had changed\n                            yDelta = chartY - resizer.lastPos;\n                            // Normalize height to option limits\n                            height = normalize(axis.len - yDelta, minLength, maxLength);\n                            // Adjust top, so the axis looks like shrinked from top\n                            top = axis.top + yDelta;\n                            // Check for plot area limits\n                            if (top + height > plotBottom) {\n                                const hDelta = plotBottom - height - top;\n                                chartY += hDelta;\n                                top += hDelta;\n                            }\n                            // Fit to plot - when overflowing on top\n                            if (top < plotTop) {\n                                top = plotTop;\n                                if (top + height > plotBottom) {\n                                    height = plotHeight;\n                                }\n                            }\n                            // If next axis meets min length, stop dragging:\n                            if (height === minLength) {\n                                stopDrag = true;\n                            }\n                            axesConfigs.push({\n                                axis: axis,\n                                options: {\n                                    top: calculatePercent(top - plotTop),\n                                    height: calculatePercent(height)\n                                }\n                            });\n                        }\n                        else {\n                            // Normalize height to option limits\n                            height = normalize(chartY - top, minLength, maxLength);\n                            // If prev axis meets max length, stop dragging:\n                            if (height === maxLength) {\n                                stopDrag = true;\n                            }\n                            // Check axis size limits\n                            chartY = top + height;\n                            axesConfigs.push({\n                                axis: axis,\n                                options: {\n                                    height: calculatePercent(height)\n                                }\n                            });\n                        }\n                        isFirst = false;\n                        optionsToUpdate.height = height;\n                    }\n                }\n                // If we hit the min/maxLength with dragging, don't do anything:\n                if (!stopDrag) {\n                    // Now update axes:\n                    for (const config of axesConfigs) {\n                        config.axis.update(config.options, false);\n                    }\n                    chart.redraw(false);\n                }\n            }\n            /**\n             * Destroy AxisResizer. Clear outside references, clear events,\n             * destroy elements, nullify properties.\n             *\n             * @function Highcharts.AxisResizer#destroy\n             */\n            destroy() {\n                const resizer = this, axis = resizer.axis;\n                // Clear resizer in axis\n                delete axis.resizer;\n                // Clear control line events\n                if (this.eventsToUnbind) {\n                    this.eventsToUnbind.forEach((unbind) => unbind());\n                }\n                // Destroy AxisResizer elements\n                resizer.controlLine.destroy();\n                // Nullify properties\n                for (const key of Object.keys(resizer)) {\n                    resizer[key] = null;\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        // Default options for AxisResizer.\n        AxisResizer.resizerOptions = AxisResizerDefaults;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AxisResizer;\n    });\n    _registerModule(_modules, 'Extensions/DragPanes/DragPanes.js', [_modules['Extensions/DragPanes/AxisResizer.js'], _modules['Core/Defaults.js'], _modules['Core/Utilities.js']], function (AxisResizer, D, U) {\n        /* *\n         *\n         *  Plugin for resizing axes / panes in a chart.\n         *\n         *  (c) 2010-2024 Highsoft AS\n         *\n         *  Author: Kacper Madej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultOptions } = D;\n        const { addEvent, merge, wrap } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(AxisClass, PointerClass) {\n            if (!AxisClass.keepProps.includes('resizer')) {\n                merge(true, defaultOptions.yAxis, AxisResizer.resizerOptions);\n                // Keep resizer reference on axis update\n                AxisClass.keepProps.push('resizer');\n                addEvent(AxisClass, 'afterRender', onAxisAfterRender);\n                addEvent(AxisClass, 'destroy', onAxisDestroy);\n                wrap(PointerClass.prototype, 'runPointActions', wrapPointerRunPointActions);\n                wrap(PointerClass.prototype, 'drag', wrapPointerDrag);\n            }\n        }\n        /**\n         * Add new AxisResizer, update or remove it\n         * @private\n         */\n        function onAxisAfterRender() {\n            const axis = this, resizer = axis.resizer, resizerOptions = axis.options.resize;\n            if (resizerOptions) {\n                const enabled = resizerOptions.enabled !== false;\n                if (resizer) {\n                    // Resizer present and enabled\n                    if (enabled) {\n                        // Update options\n                        resizer.init(axis, true);\n                        // Resizer present, but disabled\n                    }\n                    else {\n                        // Destroy the resizer\n                        resizer.destroy();\n                    }\n                }\n                else {\n                    // Resizer not present and enabled\n                    if (enabled) {\n                        // Add new resizer\n                        axis.resizer = new AxisResizer(axis);\n                    }\n                    // Resizer not present and disabled, so do nothing\n                }\n            }\n        }\n        /**\n         * Clear resizer on axis remove.\n         * @private\n         */\n        function onAxisDestroy(e) {\n            const axis = this;\n            if (!e.keepEvents && axis.resizer) {\n                axis.resizer.destroy();\n            }\n        }\n        /**\n         * Prevent default drag action detection while dragging a control line of\n         * AxisResizer. (#7563)\n         * @private\n         */\n        function wrapPointerDrag(proceed) {\n            const pointer = this;\n            if (!pointer.chart.activeResizer) {\n                proceed.apply(pointer, [].slice.call(arguments, 1));\n            }\n        }\n        /**\n         * Prevent any hover effects while dragging a control line of AxisResizer.\n         * @private\n         */\n        function wrapPointerRunPointActions(proceed) {\n            const pointer = this;\n            if (!pointer.chart.activeResizer) {\n                proceed.apply(pointer, [].slice.call(arguments, 1));\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DragPanes = {\n            compose\n        };\n\n        return DragPanes;\n    });\n    _registerModule(_modules, 'masters/modules/drag-panes.src.js', [_modules['Core/Globals.js'], _modules['Extensions/DragPanes/AxisResizer.js'], _modules['Extensions/DragPanes/DragPanes.js']], function (Highcharts, AxisResizer, DragPanes) {\n\n        const G = Highcharts;\n        G.AxisResizer = AxisResizer;\n        DragPanes.compose(G.Axis, G.Pointer);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","minLength","maxLength","resize","controlledAxis","next","prev","enabled","cursor","lineColor","lineDashStyle","lineWidth","x","y","AxisResizerDefaults","U","addEvent","clamp","isNumber","relativeLength","AxisResizer","constructor","axis","init","update","options","render","addMouseEvents","resizer","chart","pos","top","height","plotTop","plotHeight","attr","styledMode","stroke","dashstyle","lastPos","controlLine","renderer","addClass","add","axisGroup","strokeWidth","d","crispLine","left","width","mouseMoveHandler","mouseUpHandler","mouseDownHandler","ctrlLineElem","element","container","eventsToUnbind","e","onMouseMove","onMouseUp","onMouseDown","push","ownerDocument","touches","pageX","pointer","grabbed","hasDragged","updateAxes","normalize","chartY","activeResizer","reset","axes","nextAxes","length","yAxis","indexOf","prevAxes","concat","axesConfigs","plotBottom","calculatePercent","value","val","min","max","Math","round","stopDrag","yDelta","isFirst","axesGroup","axisInfo","get","axisOptions","optionsToUpdate","isInternal","NaN","len","hDelta","config","redraw","destroy","key","forEach","unbind","Object","keys","resizerOptions","D","defaultOptions","merge","wrap","onAxisAfterRender","onAxisDestroy","keepEvents","wrapPointerDrag","proceed","slice","call","arguments","wrapPointerRunPointActions","compose","AxisClass","PointerClass","keepProps","includes","prototype","DragPanes","G","Axis","Pointer"],"mappings":"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"}