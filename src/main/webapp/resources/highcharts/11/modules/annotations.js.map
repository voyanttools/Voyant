{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * Annotations module\n *\n * (c) 2009-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/annotations', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/Annotations/AnnotationChart.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft, Black Label\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, erase, find, fireEvent, pick, wrap } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Add an annotation to the chart after render time.\n         *\n         * @sample highcharts/annotations/add-annotation/\n         *         Add annotation\n         *\n         * @function Highcharts.Chart#addAnnotation\n         *\n         * @param  {Highcharts.AnnotationsOptions} options\n         *         The annotation options for the new, detailed annotation.\n         *\n         * @param {boolean} [redraw]\n         *\n         * @return {Highcharts.Annotation}\n         *         The newly generated annotation.\n         */\n        function chartAddAnnotation(userOptions, redraw) {\n            const annotation = this.initAnnotation(userOptions);\n            this.options.annotations.push(annotation.options);\n            if (pick(redraw, true)) {\n                annotation.redraw();\n                annotation.graphic.attr({\n                    opacity: 1\n                });\n            }\n            return annotation;\n        }\n        /**\n         * @private\n         */\n        function chartCallback() {\n            const chart = this;\n            chart.plotBoxClip = this.renderer.clipRect(this.plotBox);\n            chart.controlPointsGroup = chart.renderer\n                .g('control-points')\n                .attr({ zIndex: 99 })\n                .clip(chart.plotBoxClip)\n                .add();\n            chart.options.annotations.forEach((annotationOptions, i) => {\n                if (\n                // Verify that it has not been previously added in a responsive rule\n                !chart.annotations.some((annotation) => annotation.options === annotationOptions)) {\n                    const annotation = chart.initAnnotation(annotationOptions);\n                    chart.options.annotations[i] = annotation.options;\n                }\n            });\n            chart.drawAnnotations();\n            addEvent(chart, 'redraw', chart.drawAnnotations);\n            addEvent(chart, 'destroy', function () {\n                chart.plotBoxClip.destroy();\n                chart.controlPointsGroup.destroy();\n            });\n            addEvent(chart, 'exportData', function (event) {\n                const annotations = chart.annotations, csvColumnHeaderFormatter = ((this.options.exporting &&\n                    this.options.exporting.csv) ||\n                    {}).columnHeaderFormatter, \n                // If second row doesn't have xValues\n                // then it is a title row thus multiple level header is in use.\n                multiLevelHeaders = !event.dataRows[1].xValues, annotationHeader = (chart.options.lang &&\n                    chart.options.lang.exportData &&\n                    chart.options.lang.exportData.annotationHeader), columnHeaderFormatter = function (index) {\n                    let s;\n                    if (csvColumnHeaderFormatter) {\n                        s = csvColumnHeaderFormatter(index);\n                        if (s !== false) {\n                            return s;\n                        }\n                    }\n                    s = annotationHeader + ' ' + index;\n                    if (multiLevelHeaders) {\n                        return {\n                            columnTitle: s,\n                            topLevelColumnTitle: s\n                        };\n                    }\n                    return s;\n                }, startRowLength = event.dataRows[0].length, annotationSeparator = (chart.options.exporting &&\n                    chart.options.exporting.csv &&\n                    chart.options.exporting.csv.annotations &&\n                    chart.options.exporting.csv.annotations.itemDelimiter), joinAnnotations = (chart.options.exporting &&\n                    chart.options.exporting.csv &&\n                    chart.options.exporting.csv.annotations &&\n                    chart.options.exporting.csv.annotations.join);\n                annotations.forEach((annotation) => {\n                    if (annotation.options.labelOptions &&\n                        annotation.options.labelOptions.includeInDataExport) {\n                        annotation.labels.forEach((label) => {\n                            if (label.options.text) {\n                                const annotationText = label.options.text;\n                                label.points.forEach((points) => {\n                                    const annotationX = points.x, xAxisIndex = points.series.xAxis ?\n                                        points.series.xAxis.index :\n                                        -1;\n                                    let wasAdded = false;\n                                    // Annotation not connected to any xAxis -\n                                    // add new row.\n                                    if (xAxisIndex === -1) {\n                                        const n = event.dataRows[0].length, newRow = new Array(n);\n                                        for (let i = 0; i < n; ++i) {\n                                            newRow[i] = '';\n                                        }\n                                        newRow.push(annotationText);\n                                        newRow.xValues = [];\n                                        newRow.xValues[xAxisIndex] = annotationX;\n                                        event.dataRows.push(newRow);\n                                        wasAdded = true;\n                                    }\n                                    // Annotation placed on a exported data point\n                                    // - add new column\n                                    if (!wasAdded) {\n                                        event.dataRows.forEach((row) => {\n                                            if (!wasAdded &&\n                                                row.xValues &&\n                                                xAxisIndex !== void 0 &&\n                                                annotationX === row.xValues[xAxisIndex]) {\n                                                if (joinAnnotations &&\n                                                    row.length > startRowLength) {\n                                                    row[row.length - 1] += (annotationSeparator +\n                                                        annotationText);\n                                                }\n                                                else {\n                                                    row.push(annotationText);\n                                                }\n                                                wasAdded = true;\n                                            }\n                                        });\n                                    }\n                                    // Annotation not placed on any exported data point,\n                                    // but connected to the xAxis - add new row\n                                    if (!wasAdded) {\n                                        const n = event.dataRows[0].length, newRow = new Array(n);\n                                        for (let i = 0; i < n; ++i) {\n                                            newRow[i] = '';\n                                        }\n                                        newRow[0] = annotationX;\n                                        newRow.push(annotationText);\n                                        newRow.xValues = [];\n                                        if (xAxisIndex !== void 0) {\n                                            newRow.xValues[xAxisIndex] = annotationX;\n                                        }\n                                        event.dataRows.push(newRow);\n                                    }\n                                });\n                            }\n                        });\n                    }\n                });\n                let maxRowLen = 0;\n                event.dataRows.forEach((row) => {\n                    maxRowLen = Math.max(maxRowLen, row.length);\n                });\n                const newRows = maxRowLen - event.dataRows[0].length;\n                for (let i = 0; i < newRows; i++) {\n                    const header = columnHeaderFormatter(i + 1);\n                    if (multiLevelHeaders) {\n                        event.dataRows[0].push(header.topLevelColumnTitle);\n                        event.dataRows[1].push(header.columnTitle);\n                    }\n                    else {\n                        event.dataRows[0].push(header);\n                    }\n                }\n            });\n        }\n        /**\n         * @private\n         */\n        function chartDrawAnnotations() {\n            this.plotBoxClip.attr(this.plotBox);\n            this.annotations.forEach((annotation) => {\n                annotation.redraw();\n                annotation.graphic.animate({\n                    opacity: 1\n                }, annotation.animationConfig);\n            });\n        }\n        /**\n         * Remove an annotation from the chart.\n         *\n         * @function Highcharts.Chart#removeAnnotation\n         *\n         * @param {number|string|Highcharts.Annotation} idOrAnnotation\n         *        The annotation's id or direct annotation object.\n         */\n        function chartRemoveAnnotation(idOrAnnotation) {\n            const annotations = this.annotations, annotation = (idOrAnnotation.coll === 'annotations') ?\n                idOrAnnotation :\n                find(annotations, function (annotation) {\n                    return annotation.options.id === idOrAnnotation;\n                });\n            if (annotation) {\n                fireEvent(annotation, 'remove');\n                erase(this.options.annotations, annotation.options);\n                erase(annotations, annotation);\n                annotation.destroy();\n            }\n        }\n        /**\n         * Create lookups initially\n         * @private\n         */\n        function onChartAfterInit() {\n            const chart = this;\n            chart.annotations = [];\n            if (!this.options.annotations) {\n                this.options.annotations = [];\n            }\n        }\n        /**\n         * @private\n         */\n        function wrapPointerOnContainerMouseDown(proceed) {\n            if (!this.chart.hasDraggedAnnotation) {\n                proceed.apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * @private\n         */\n        var AnnotationChart;\n        (function (AnnotationChart) {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(AnnotationClass, ChartClass, PointerClass) {\n                const chartProto = ChartClass.prototype;\n                if (!chartProto.addAnnotation) {\n                    const pointerProto = PointerClass.prototype;\n                    addEvent(ChartClass, 'afterInit', onChartAfterInit);\n                    chartProto.addAnnotation = chartAddAnnotation;\n                    chartProto.callbacks.push(chartCallback);\n                    chartProto.collectionsWithInit.annotations = [chartAddAnnotation];\n                    chartProto.collectionsWithUpdate.push('annotations');\n                    chartProto.drawAnnotations = chartDrawAnnotations;\n                    chartProto.removeAnnotation = chartRemoveAnnotation;\n                    chartProto.initAnnotation = function chartInitAnnotation(userOptions) {\n                        const Constructor = (AnnotationClass.types[userOptions.type] ||\n                            AnnotationClass), annotation = new Constructor(this, userOptions);\n                        this.annotations.push(annotation);\n                        return annotation;\n                    };\n                    wrap(pointerProto, 'onContainerMouseDown', wrapPointerOnContainerMouseDown);\n                }\n            }\n            AnnotationChart.compose = compose;\n        })(AnnotationChart || (AnnotationChart = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AnnotationChart;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/AnnotationDefaults.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { defined } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A basic type of an annotation. It allows to add custom labels\n         * or shapes. The items can be tied to points, axis coordinates\n         * or chart pixel coordinates.\n         *\n         * @sample highcharts/annotations/basic/\n         *         Basic annotations\n         * @sample highcharts/demo/annotations/\n         *         Advanced annotations\n         * @sample highcharts/css/annotations\n         *         Styled mode\n         * @sample highcharts/annotations-advanced/controllable\n         *         Controllable items\n         * @sample {highstock} stock/annotations/fibonacci-retracements\n         *         Custom annotation, Fibonacci retracement\n         *\n         * @type         {Array<*>}\n         * @since        6.0.0\n         * @requires     modules/annotations\n         * @optionparent annotations\n         */\n        const AnnotationDefaults = {\n            /**\n             * Sets an ID for an annotation. Can be user later when\n             * removing an annotation in [Chart#removeAnnotation(id)](\n             * /class-reference/Highcharts.Chart#removeAnnotation) method.\n             *\n             * @type      {number|string}\n             * @apioption annotations.id\n             */\n            /**\n             * Whether the annotation is visible.\n             *\n             * @sample highcharts/annotations/visible/\n             *         Set annotation visibility\n             */\n            visible: true,\n            /**\n             * Enable or disable the initial animation when a series is\n             * displayed for the `annotation`. The animation can also be set\n             * as a configuration object. Please note that this option only\n             * applies to the initial animation.\n             * For other animations, see [chart.animation](#chart.animation)\n             * and the animation parameter under the API methods.\n             * The following properties are supported:\n             *\n             * - `defer`: The animation delay time in milliseconds.\n             *\n             * @sample {highcharts} highcharts/annotations/defer/\n             *          Animation defer settings\n             * @type {boolean|Partial<Highcharts.AnimationOptionsObject>}\n             * @since 8.2.0\n             */\n            animation: {},\n            /**\n             * Whether to hide the part of the annotation\n             * that is outside the plot area.\n             *\n             * @sample highcharts/annotations/label-crop-overflow/\n             *         Crop line annotation\n             * @type  {boolean}\n             * @since 9.3.0\n             */\n            crop: true,\n            /**\n             * The animation delay time in milliseconds.\n             * Set to `0` renders annotation immediately.\n             * As `undefined` inherits defer time from the [series.animation.defer](#plotOptions.series.animation.defer).\n             *\n             * @type      {number}\n             * @since 8.2.0\n             * @apioption annotations.animation.defer\n             */\n            /**\n             * Allow an annotation to be draggable by a user. Possible\n             * values are `'x'`, `'xy'`, `'y'` and `''` (disabled).\n             *\n             * @sample highcharts/annotations/draggable/\n             *         Annotations draggable: 'xy'\n             *\n             * @type {Highcharts.AnnotationDraggableValue}\n             */\n            draggable: 'xy',\n            /**\n             * Options for annotation's labels. Each label inherits options\n             * from the labelOptions object. An option from the labelOptions\n             * can be overwritten by config for a specific label.\n             *\n             * @requires modules/annotations\n             */\n            labelOptions: {\n                /**\n                 * The alignment of the annotation's label. If right,\n                 * the right side of the label should be touching the point.\n                 *\n                 * @sample highcharts/annotations/label-position/\n                 *         Set labels position\n                 *\n                 * @type {Highcharts.AlignValue}\n                 */\n                align: 'center',\n                /**\n                 * Whether to allow the annotation's labels to overlap.\n                 * To make the labels less sensitive for overlapping,\n                 * the can be set to 0.\n                 *\n                 * @sample highcharts/annotations/tooltip-like/\n                 *         Hide overlapping labels\n                 */\n                allowOverlap: false,\n                /**\n                 * The background color or gradient for the annotation's\n                 * label.\n                 *\n                 * @sample highcharts/annotations/label-presentation/\n                 *         Set labels graphic options\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                backgroundColor: 'rgba(0, 0, 0, 0.75)',\n                /**\n                 * The border color for the annotation's label.\n                 *\n                 * @sample highcharts/annotations/label-presentation/\n                 *         Set labels graphic options\n                 *\n                 * @type {Highcharts.ColorString}\n                 */\n                borderColor: \"#000000\" /* Palette.neutralColor100 */,\n                /**\n                 * The border radius in pixels for the annotation's label.\n                 *\n                 * @sample highcharts/annotations/label-presentation/\n                 *         Set labels graphic options\n                 */\n                borderRadius: 3,\n                /**\n                 * The border width in pixels for the annotation's label\n                 *\n                 * @sample highcharts/annotations/label-presentation/\n                 *         Set labels graphic options\n                 */\n                borderWidth: 1,\n                /**\n                 * A class name for styling by CSS.\n                 *\n                 * @sample highcharts/css/annotations\n                 *         Styled mode annotations\n                 *\n                 * @since 6.0.5\n                 */\n                className: 'highcharts-no-tooltip',\n                /**\n                 * Whether to hide the annotation's label\n                 * that is outside the plot area.\n                 *\n                 * @sample highcharts/annotations/label-crop-overflow/\n                 *         Crop or justify labels\n                 */\n                crop: false,\n                /**\n                 * The label's pixel distance from the point.\n                 *\n                 * @sample highcharts/annotations/label-position/\n                 *         Set labels position\n                 *\n                 * @type      {number}\n                 * @apioption annotations.labelOptions.distance\n                 */\n                /**\n                 * A\n                 * [format](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting)\n                 * string for the data label.\n                 *\n                 * @see [plotOptions.series.dataLabels.format](plotOptions.series.dataLabels.format.html)\n                 *\n                 * @sample highcharts/annotations/label-text/\n                 *         Set labels text\n                 *\n                 * @type      {string}\n                 * @apioption annotations.labelOptions.format\n                 */\n                /**\n                 * Alias for the format option.\n                 *\n                 * @see [format](annotations.labelOptions.format.html)\n                 *\n                 * @sample highcharts/annotations/label-text/\n                 *         Set labels text\n                 *\n                 * @type      {string}\n                 * @apioption annotations.labelOptions.text\n                 */\n                /**\n                 * Callback JavaScript function to format the annotation's\n                 * label. Note that if a `format` or `text` are defined,\n                 * the format or text take precedence and the formatter is\n                 * ignored. `This` refers to a point object.\n                 *\n                 * @sample highcharts/annotations/label-text/\n                 *         Set labels text\n                 *\n                 * @type    {Highcharts.FormatterCallbackFunction<Highcharts.Point>}\n                 * @default function () { return defined(this.y) ? this.y : 'Annotation label'; }\n                 */\n                formatter: function () {\n                    return defined(this.y) ? '' + this.y : 'Annotation label';\n                },\n                /**\n                 * Whether the annotation is visible in the exported data\n                 * table.\n                 *\n                 * @sample highcharts/annotations/include-in-data-export/\n                 *         Do not include in the data export\n                 *\n                 * @since 8.2.0\n                 * @requires modules/export-data\n                 */\n                includeInDataExport: true,\n                /**\n                 * How to handle the annotation's label that flow outside\n                 * the plot area. The justify option aligns the label inside\n                 * the plot area.\n                 *\n                 * @sample highcharts/annotations/label-crop-overflow/\n                 *         Crop or justify labels\n                 *\n                 * @validvalue [\"allow\", \"justify\"]\n                 */\n                overflow: 'justify',\n                /**\n                 * When either the borderWidth or the backgroundColor is\n                 * set, this is the padding within the box.\n                 *\n                 * @sample highcharts/annotations/label-presentation/\n                 *         Set labels graphic options\n                 */\n                padding: 5,\n                /**\n                 * The shadow of the box. The shadow can be an object\n                 * configuration containing `color`, `offsetX`, `offsetY`,\n                 * `opacity` and `width`.\n                 *\n                 * @sample highcharts/annotations/label-presentation/\n                 *         Set labels graphic options\n                 *\n                 * @type {boolean|Highcharts.ShadowOptionsObject}\n                 */\n                shadow: false,\n                /**\n                 * The name of a symbol to use for the border around the\n                 * label. Symbols are predefined functions on the Renderer\n                 * object.\n                 *\n                 * @sample highcharts/annotations/shapes/\n                 *         Available shapes for labels\n                 */\n                shape: 'callout',\n                /**\n                 * Styles for the annotation's label.\n                 *\n                 * @see [plotOptions.series.dataLabels.style](plotOptions.series.dataLabels.style.html)\n                 *\n                 * @sample highcharts/annotations/label-presentation/\n                 *         Set labels graphic options\n                 *\n                 * @type {Highcharts.CSSObject}\n                 */\n                style: {\n                    /** @ignore */\n                    fontSize: '0.7em',\n                    /** @ignore */\n                    fontWeight: 'normal',\n                    /** @ignore */\n                    color: 'contrast'\n                },\n                /**\n                 * Whether to [use HTML](https://www.highcharts.com/docs/chart-concepts/labels-and-string-formatting#html)\n                 * to render the annotation's label.\n                 */\n                useHTML: false,\n                /**\n                 * The vertical alignment of the annotation's label.\n                 *\n                 * @sample highcharts/annotations/label-position/\n                 *         Set labels position\n                 *\n                 * @type {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'bottom',\n                /**\n                 * The x position offset of the label relative to the point.\n                 * Note that if a `distance` is defined, the distance takes\n                 * precedence over `x` and `y` options.\n                 *\n                 * @sample highcharts/annotations/label-position/\n                 *         Set labels position\n                 */\n                x: 0,\n                /**\n                 * The y position offset of the label relative to the point.\n                 * Note that if a `distance` is defined, the distance takes\n                 * precedence over `x` and `y` options.\n                 *\n                 * @sample highcharts/annotations/label-position/\n                 *         Set labels position\n                 */\n                y: -16\n            },\n            /**\n             * An array of labels for the annotation. For options that apply\n             * to multiple labels, they can be added to the\n             * [labelOptions](annotations.labelOptions.html).\n             *\n             * @type      {Array<*>}\n             * @extends   annotations.labelOptions\n             * @apioption annotations.labels\n             */\n            /**\n             * This option defines the point to which the label will be\n             * connected. It can be either the point which exists in the\n             * series - it is referenced by the point's id - or a new point\n             * with defined x, y properties and optionally axes.\n             *\n             * @sample highcharts/annotations/mock-point/\n             *         Attach annotation to a mock point\n             * @sample highcharts/annotations/mock-points/\n             *         Attach annotation to a mock point with different ways\n             *\n             * @declare   Highcharts.AnnotationMockPointOptionsObject\n             * @type      {\n             *               string|\n             *               Highcharts.AnnotationMockPointOptionsObject|\n             *               Highcharts.AnnotationMockPointFunction\n             *            }\n             * @requires  modules/annotations\n             * @apioption annotations.labels.point\n             */\n            /**\n             * An array of shapes for the annotation. For options that apply\n             * to multiple shapes, then can be added to the\n             * [shapeOptions](annotations.shapeOptions.html).\n             *\n             * @type      {Array<*>}\n             * @extends   annotations.shapeOptions\n             * @apioption annotations.shapes\n             */\n            /**\n             * This option defines the point to which the shape will be\n             * connected. It can be either the point which exists in the\n             * series - it is referenced by the point's id - or a new point\n             * with defined x, y properties and optionally axes.\n             *\n             * @sample highcharts/annotations/mock-points/\n             *         Attach annotation to a mock point with different ways\n             *\n             * @declare   Highcharts.AnnotationMockPointOptionsObject\n             * @type      {\n             *               string|\n             *               Highcharts.AnnotationMockPointOptionsObject|\n             *               Highcharts.AnnotationMockPointFunction\n             *            }\n             * @extends   annotations.labels.point\n             * @requires  modules/annotations\n             * @apioption annotations.shapes.point\n             */\n            /**\n             * An array of points for the shape\n             * or a callback function that returns that shape point.\n             *\n             * This option is available\n             * for shapes which can use multiple points such as path. A\n             * point can be either a point object or a point's id.\n             *\n             * @see [annotations.shapes.point](annotations.shapes.point.html)\n             *\n             * @type      {Array<Highcharts.AnnotationShapePointOptions>}\n             * @extends   annotations.labels.point\n             * @apioption annotations.shapes.points\n             */\n            /**\n             * The URL for an image to use as the annotation shape. Note,\n             * type has to be set to `'image'`.\n             *\n             * @see [annotations.shapes.type](annotations.shapes.type)\n             * @sample highcharts/annotations/shape-src/\n             *         Define a marker image url for annotations\n             *\n             * @type      {string}\n             * @apioption annotations.shapes.src\n             */\n            /**\n             * Id of the marker which will be drawn at the final vertex of\n             * the path. Custom markers can be defined in defs property.\n             *\n             * @see [defs.markers](defs.markers.html)\n             *\n             * @sample highcharts/annotations/custom-markers/\n             *         Define a custom marker for annotations\n             *\n             * @type      {string}\n             * @apioption annotations.shapes.markerEnd\n             */\n            /**\n             * Id of the marker which will be drawn at the first vertex of\n             * the path. Custom markers can be defined in defs property.\n             *\n             * @see [defs.markers](defs.markers.html)\n             *\n             * @sample {highcharts} highcharts/annotations/custom-markers/\n             *         Define a custom marker for annotations\n             *\n             * @type      {string}\n             * @apioption annotations.shapes.markerStart\n             */\n            /**\n             * Options for annotation's shapes. Each shape inherits options\n             * from the shapeOptions object. An option from the shapeOptions\n             * can be overwritten by config for a specific shape.\n             *\n             * @requires  modules/annotations\n             */\n            shapeOptions: {\n                /**\n                 *\n                 * The radius of the shape in y direction.\n                 * Used for the ellipse.\n                 *\n                 * @sample highcharts/annotations/ellipse/\n                 *         Ellipse annotation\n                 *\n                 * @type      {number}\n                 * @apioption annotations.shapeOptions.ry\n                 **/\n                /**\n                 *\n                 * The xAxis index to which the points should be attached.\n                 * Used for the ellipse.\n                 *\n                 * @type      {number}\n                 * @apioption annotations.shapeOptions.xAxis\n                 **/\n                /**\n                 * The yAxis index to which the points should be attached.\n                 * Used for the ellipse.\n                 *\n                 * @type      {number}\n                 * @apioption annotations.shapeOptions.yAxis\n                 **/\n                /**\n                 * The width of the shape.\n                 *\n                 * @sample highcharts/annotations/shape/\n                 *         Basic shape annotation\n                 *\n                 * @type      {number}\n                 * @apioption annotations.shapeOptions.width\n                 **/\n                /**\n                 * The height of the shape.\n                 *\n                 * @sample highcharts/annotations/shape/\n                 *         Basic shape annotation\n                 *\n                 * @type      {number}\n                 * @apioption annotations.shapeOptions.height\n                 */\n                /**\n                 * The type of the shape.\n                 * Available options are circle, rect and ellipse.\n                 *\n                 * @sample highcharts/annotations/shape/\n                 *         Basic shape annotation\n                 *\n                 * @sample highcharts/annotations/ellipse/\n                 *         Ellipse annotation\n                 *\n                 * @type      {string}\n                 * @default   rect\n                 * @apioption annotations.shapeOptions.type\n                 */\n                /**\n                 * The URL for an image to use as the annotation shape.\n                 * Note, type has to be set to `'image'`.\n                 *\n                 * @see [annotations.shapeOptions.type](annotations.shapeOptions.type)\n                 * @sample highcharts/annotations/shape-src/\n                 *         Define a marker image url for annotations\n                 *\n                 * @type      {string}\n                 * @apioption annotations.shapeOptions.src\n                 */\n                /**\n                 * Name of the dash style to use for the shape's stroke.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/series-dashstyle-all/\n                 *         Possible values demonstrated\n                 *\n                 * @type      {Highcharts.DashStyleValue}\n                 * @apioption annotations.shapeOptions.dashStyle\n                 */\n                /**\n                 * The color of the shape's stroke.\n                 *\n                 * @sample highcharts/annotations/shape/\n                 *         Basic shape annotation\n                 *\n                 * @type {Highcharts.ColorString}\n                 */\n                stroke: 'rgba(0, 0, 0, 0.75)',\n                /**\n                 * The pixel stroke width of the shape.\n                 *\n                 * @sample highcharts/annotations/shape/\n                 *         Basic shape annotation\n                 */\n                strokeWidth: 1,\n                /**\n                 * The color of the shape's fill.\n                 *\n                 * @sample highcharts/annotations/shape/\n                 *         Basic shape annotation\n                 *\n                 * @type {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                 */\n                fill: 'rgba(0, 0, 0, 0.75)',\n                /**\n                 * The radius of the shape.\n                 *\n                 * @sample highcharts/annotations/shape/\n                 *         Basic shape annotation\n                 */\n                r: 0,\n                /**\n                 * Defines additional snapping area around an annotation\n                 * making this annotation to focus. Defined in pixels.\n                 */\n                snap: 2\n            },\n            /**\n             * Options for annotation's control points. Each control point\n             * inherits options from controlPointOptions object.\n             * Options from the controlPointOptions can be overwritten\n             * by options in a specific control point.\n             *\n             * @declare  Highcharts.AnnotationControlPointOptionsObject\n             * @requires modules/annotations\n             */\n            controlPointOptions: {\n                /**\n                 * @type      {Highcharts.AnnotationControlPointPositionerFunction}\n                 * @apioption annotations.controlPointOptions.positioner\n                 */\n                /**\n                 * @type {Highcharts.Dictionary<Function>}\n                 */\n                events: {},\n                /**\n                 * @type {Highcharts.SVGAttributes}\n                 */\n                style: {\n                    cursor: 'pointer',\n                    fill: \"#ffffff\" /* Palette.backgroundColor */,\n                    stroke: \"#000000\" /* Palette.neutralColor100 */,\n                    'stroke-width': 2\n                },\n                height: 10,\n                symbol: 'circle',\n                visible: false,\n                width: 10\n            },\n            /**\n             * Event callback when annotation is added to the chart.\n             *\n             * @type      {Highcharts.EventCallbackFunction<Highcharts.Annotation>}\n             * @since     7.1.0\n             * @apioption annotations.events.add\n             */\n            /**\n             * Event callback when annotation is updated (e.g. drag and\n             * dropped or resized by control points).\n             *\n             * @type      {Highcharts.EventCallbackFunction<Highcharts.Annotation>}\n             * @since     7.1.0\n             * @apioption annotations.events.afterUpdate\n             */\n            /**\n             * Fires when the annotation is clicked.\n             *\n             * @type      {Highcharts.EventCallbackFunction<Highcharts.Annotation>}\n             * @since     7.1.0\n             * @apioption annotations.events.click\n             */\n            /**\n             * Fires when the annotation is dragged.\n             *\n             * @type      {Highcharts.EventCallbackFunction<Highcharts.Annotation>}\n             * @apioption annotations.events.drag\n             */\n            /**\n             * Event callback when annotation is removed from the chart.\n             *\n             * @type      {Highcharts.EventCallbackFunction<Highcharts.Annotation>}\n             * @since     7.1.0\n             * @apioption annotations.events.remove\n             */\n            /**\n             * Events available in annotations.\n             *\n             * @requires modules/annotations\n             */\n            events: {},\n            /**\n             * The Z index of the annotation.\n             */\n            zIndex: 6\n        }; // Type options are expected but not set\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AnnotationDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/EventEmitter.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft, Black Label\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { doc, isTouchDevice } = H;\n        const { addEvent, fireEvent, objectEach, pick, removeEvent } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         */\n        class EventEmitter {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add emitter events.\n             * @private\n             */\n            addEvents() {\n                const emitter = this, addMouseDownEvent = function (element) {\n                    addEvent(element, isTouchDevice ? 'touchstart' : 'mousedown', (e) => {\n                        emitter.onMouseDown(e);\n                    }, { passive: false });\n                };\n                addMouseDownEvent(this.graphic.element);\n                (emitter.labels || []).forEach((label) => {\n                    if (label.options.useHTML && label.graphic.text) {\n                        // Mousedown event bound to HTML element (#13070).\n                        addMouseDownEvent(label.graphic.text.element);\n                    }\n                });\n                objectEach(emitter.options.events, (event, type) => {\n                    const eventHandler = function (e) {\n                        if (type !== 'click' || !emitter.cancelClick) {\n                            event.call(emitter, emitter.chart.pointer?.normalize(e), emitter.target);\n                        }\n                    };\n                    if ((emitter.nonDOMEvents || []).indexOf(type) === -1) {\n                        addEvent(emitter.graphic.element, type, eventHandler, { passive: false });\n                        if (emitter.graphic.div) {\n                            addEvent(emitter.graphic.div, type, eventHandler, { passive: false });\n                        }\n                    }\n                    else {\n                        addEvent(emitter, type, eventHandler, { passive: false });\n                    }\n                });\n                if (emitter.options.draggable) {\n                    addEvent(emitter, 'drag', emitter.onDrag);\n                    if (!emitter.graphic.renderer.styledMode) {\n                        const cssPointer = {\n                            cursor: {\n                                x: 'ew-resize',\n                                y: 'ns-resize',\n                                xy: 'move'\n                            }[emitter.options.draggable]\n                        };\n                        emitter.graphic.css(cssPointer);\n                        (emitter.labels || []).forEach((label) => {\n                            if (label.options.useHTML && label.graphic.text) {\n                                label.graphic.text.css(cssPointer);\n                            }\n                        });\n                    }\n                }\n                if (!emitter.isUpdating) {\n                    fireEvent(emitter, 'add');\n                }\n            }\n            /**\n             * Destroy the event emitter.\n             */\n            destroy() {\n                this.removeDocEvents();\n                removeEvent(this);\n                this.hcEvents = null;\n            }\n            /**\n             * Map mouse move event to the radians.\n             * @private\n             */\n            mouseMoveToRadians(e, cx, cy) {\n                let prevDy = e.prevChartY - cy, prevDx = e.prevChartX - cx, dy = e.chartY - cy, dx = e.chartX - cx, temp;\n                if (this.chart.inverted) {\n                    temp = prevDx;\n                    prevDx = prevDy;\n                    prevDy = temp;\n                    temp = dx;\n                    dx = dy;\n                    dy = temp;\n                }\n                return Math.atan2(dy, dx) - Math.atan2(prevDy, prevDx);\n            }\n            /**\n             * Map mouse move to the scale factors.\n             * @private\n             */\n            mouseMoveToScale(e, cx, cy) {\n                const prevDx = e.prevChartX - cx, prevDy = e.prevChartY - cy, dx = e.chartX - cx, dy = e.chartY - cy;\n                let sx = (dx || 1) / (prevDx || 1), sy = (dy || 1) / (prevDy || 1);\n                if (this.chart.inverted) {\n                    const temp = sy;\n                    sy = sx;\n                    sx = temp;\n                }\n                return {\n                    x: sx,\n                    y: sy\n                };\n            }\n            /**\n             * Map mouse move event to the distance between two following events.\n             * @private\n             */\n            mouseMoveToTranslation(e) {\n                let dx = e.chartX - e.prevChartX, dy = e.chartY - e.prevChartY, temp;\n                if (this.chart.inverted) {\n                    temp = dy;\n                    dy = dx;\n                    dx = temp;\n                }\n                return {\n                    x: dx,\n                    y: dy\n                };\n            }\n            /**\n             * Drag and drop event. All basic annotations should share this\n             * capability as well as the extended ones.\n             * @private\n             */\n            onDrag(e) {\n                if (this.chart.isInsidePlot(e.chartX - this.chart.plotLeft, e.chartY - this.chart.plotTop, {\n                    visiblePlotOnly: true\n                })) {\n                    const translation = this.mouseMoveToTranslation(e);\n                    if (this.options.draggable === 'x') {\n                        translation.y = 0;\n                    }\n                    if (this.options.draggable === 'y') {\n                        translation.x = 0;\n                    }\n                    const emitter = this;\n                    if (emitter.points.length) {\n                        emitter.translate(translation.x, translation.y);\n                    }\n                    else {\n                        emitter.shapes.forEach((shape) => shape.translate(translation.x, translation.y));\n                        emitter.labels.forEach((label) => label.translate(translation.x, translation.y));\n                    }\n                    this.redraw(false);\n                }\n            }\n            /**\n             * Mouse down handler.\n             * @private\n             */\n            onMouseDown(e) {\n                if (e.preventDefault) {\n                    e.preventDefault();\n                }\n                // On right click, do nothing:\n                if (e.button === 2) {\n                    return;\n                }\n                const emitter = this, pointer = emitter.chart.pointer, \n                // Using experimental property on event object to check if event was\n                // created by touch on screen on hybrid device (#18122)\n                firesTouchEvents = (e?.sourceCapabilities?.firesTouchEvents) || false;\n                e = pointer?.normalize(e) || e;\n                let prevChartX = e.chartX, prevChartY = e.chartY;\n                emitter.cancelClick = false;\n                emitter.chart.hasDraggedAnnotation = true;\n                emitter.removeDrag = addEvent(doc, isTouchDevice || firesTouchEvents ? 'touchmove' : 'mousemove', function (e) {\n                    emitter.hasDragged = true;\n                    e = pointer?.normalize(e) || e;\n                    e.prevChartX = prevChartX;\n                    e.prevChartY = prevChartY;\n                    fireEvent(emitter, 'drag', e);\n                    prevChartX = e.chartX;\n                    prevChartY = e.chartY;\n                }, isTouchDevice || firesTouchEvents ? { passive: false } : void 0);\n                emitter.removeMouseUp = addEvent(doc, isTouchDevice || firesTouchEvents ? 'touchend' : 'mouseup', function () {\n                    // Sometimes the target is the annotation and sometimes its the\n                    // controllable\n                    const annotation = pick(emitter.target && emitter.target.annotation, emitter.target);\n                    if (annotation) {\n                        // Keep annotation selected after dragging control point\n                        annotation.cancelClick = emitter.hasDragged;\n                    }\n                    emitter.cancelClick = emitter.hasDragged;\n                    emitter.chart.hasDraggedAnnotation = false;\n                    if (emitter.hasDragged) {\n                        // ControlPoints vs Annotation:\n                        fireEvent(pick(annotation, // #15952\n                        emitter), 'afterUpdate');\n                    }\n                    emitter.hasDragged = false;\n                    emitter.onMouseUp();\n                }, isTouchDevice || firesTouchEvents ? { passive: false } : void 0);\n            }\n            /**\n             * Mouse up handler.\n             */\n            onMouseUp() {\n                this.removeDocEvents();\n            }\n            /**\n             * Remove emitter document events.\n             * @private\n             */\n            removeDocEvents() {\n                if (this.removeDrag) {\n                    this.removeDrag = this.removeDrag();\n                }\n                if (this.removeMouseUp) {\n                    this.removeMouseUp = this.removeMouseUp();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return EventEmitter;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/ControlPoint.js', [_modules['Extensions/Annotations/EventEmitter.js'], _modules['Core/Utilities.js']], function (EventEmitter, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * A control point class which is a connection between controllable\n         * transform methods and a user actions.\n         *\n         * @requires modules/annotations\n         *\n         * @class\n         * @name Highcharts.AnnotationControlPoint\n         *\n         * @hideconstructor\n         *\n         * @param {Highcharts.Chart} chart\n         * A chart instance.\n         *\n         * @param {Highcharts.AnnotationControllable} target\n         * A controllable instance which is a target for a control point.\n         *\n         * @param {Highcharts.AnnotationControlPointOptionsObject} options\n         * An options object.\n         *\n         * @param {number} [index]\n         * Point index.\n         */\n        class ControlPoint extends EventEmitter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart, target, options, index) {\n                super();\n                /**\n                 * List of events for `annotation.options.events` that should not be\n                 * added to `annotation.graphic` but to the `annotation`.\n                 * @private\n                 * @name Highcharts.AnnotationControlPoint#nonDOMEvents\n                 * @type {Array<string>}\n                 */\n                this.nonDOMEvents = ['drag'];\n                this.chart = chart;\n                this.target = target;\n                this.options = options;\n                this.index = pick(options.index, index);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Destroy the control point.\n             * @private\n             */\n            destroy() {\n                super.destroy();\n                if (this.graphic) {\n                    this.graphic = this.graphic.destroy();\n                }\n                this.chart = null;\n                this.target = null;\n                this.options = null;\n            }\n            /**\n             * Redraw the control point.\n             * @private\n             * @param {boolean} [animation]\n             */\n            redraw(animation) {\n                this.graphic[animation ? 'animate' : 'attr'](this.options.positioner.call(this, this.target));\n            }\n            /**\n             * Render the control point.\n             * @private\n             */\n            render() {\n                const chart = this.chart, options = this.options;\n                this.graphic = chart.renderer\n                    .symbol(options.symbol, 0, 0, options.width, options.height)\n                    .add(chart.controlPointsGroup)\n                    .css(options.style);\n                this.setVisibility(options.visible);\n                // `npm test -- --tests \"highcharts/annotations-advanced/*\"`\n                this.addEvents();\n            }\n            /**\n             * Set the visibility of the control point.\n             *\n             * @function Highcharts.AnnotationControlPoint#setVisibility\n             *\n             * @param {boolean} visible\n             * Visibility of the control point.\n             *\n             */\n            setVisibility(visible) {\n                this.graphic[visible ? 'show' : 'hide']();\n                this.options.visible = visible;\n            }\n            /**\n             * Update the control point.\n             *\n             * @function Highcharts.AnnotationControlPoint#update\n             *\n             * @param {Partial<Highcharts.AnnotationControlPointOptionsObject>} userOptions\n             * New options for the control point.\n             */\n            update(userOptions) {\n                const chart = this.chart, target = this.target, index = this.index, options = merge(true, this.options, userOptions);\n                this.destroy();\n                this.constructor(chart, target, options, index);\n                this.render(chart.controlPointsGroup);\n                this.redraw();\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Callback to modify annotation's positioner controls.\n         *\n         * @callback Highcharts.AnnotationControlPointPositionerFunction\n         * @param {Highcharts.AnnotationControlPoint} this\n         * @param {Highcharts.AnnotationControllable} target\n         * @return {Highcharts.PositionObject}\n         */\n        (''); // Keeps doclets above in JS file\n\n        return ControlPoint;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/MockPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: seriesProto } } = SeriesRegistry;\n        const { defined, fireEvent } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * A trimmed point object which imitates {@link Highchart.Point} class. It is\n         * created when there is a need of pointing to some chart's position using axis\n         * values or pixel values\n         *\n         * @requires modules/annotations\n         *\n         * @private\n         * @class\n         * @name Highcharts.AnnotationMockPoint\n         *\n         * @hideconstructor\n         *\n         * @param {Highcharts.Chart} chart\n         * The chart instance.\n         *\n         * @param {Highcharts.AnnotationControllable|null} target\n         * The related controllable.\n         *\n         * @param {Highcharts.AnnotationMockPointOptionsObject|Function} options\n         * The options object.\n         */\n        class MockPoint {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Create a mock point from a real Highcharts point.\n             *\n             * @private\n             * @static\n             *\n             * @param {Highcharts.Point} point\n             *\n             * @return {Highcharts.AnnotationMockPoint}\n             * A mock point instance.\n             */\n            static fromPoint(point) {\n                return new MockPoint(point.series.chart, null, {\n                    x: point.x,\n                    y: point.y,\n                    xAxis: point.series.xAxis,\n                    yAxis: point.series.yAxis\n                });\n            }\n            /**\n             * Get the pixel position from the point like object.\n             *\n             * @private\n             * @static\n             *\n             * @param {Highcharts.AnnotationPointType} point\n             *\n             * @param {boolean} [paneCoordinates]\n             *        Whether the pixel position should be relative\n             *\n             * @return {Highcharts.PositionObject} pixel position\n             */\n            static pointToPixels(point, paneCoordinates) {\n                const series = point.series, chart = series.chart;\n                let x = point.plotX || 0, y = point.plotY || 0, plotBox;\n                if (chart.inverted) {\n                    if (point.mock) {\n                        x = point.plotY;\n                        y = point.plotX;\n                    }\n                    else {\n                        x = chart.plotWidth - (point.plotY || 0);\n                        y = chart.plotHeight - (point.plotX || 0);\n                    }\n                }\n                if (series && !paneCoordinates) {\n                    plotBox = series.getPlotBox();\n                    x += plotBox.translateX;\n                    y += plotBox.translateY;\n                }\n                return {\n                    x: x,\n                    y: y\n                };\n            }\n            /**\n             * Get fresh mock point options from the point like object.\n             *\n             * @private\n             * @static\n             *\n             * @param {Highcharts.AnnotationPointType} point\n             *\n             * @return {Highcharts.AnnotationMockPointOptionsObject}\n             * A mock point's options.\n             */\n            static pointToOptions(point) {\n                return {\n                    x: point.x,\n                    y: point.y,\n                    xAxis: point.series.xAxis,\n                    yAxis: point.series.yAxis\n                };\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart, target, options) {\n                /* *\n                 *\n                 * Functions\n                 *\n                 * */\n                /**\n                 * A flag indicating that a point is not the real one.\n                 *\n                 * @type {boolean}\n                 * @default true\n                 */\n                this.mock = true;\n                /**\n                 * A mock series instance imitating a real series from a real point.\n                 *\n                 * @name Annotation.AnnotationMockPoint#series\n                 * @type {Highcharts.AnnotationMockSeries}\n                 */\n                this.series = {\n                    visible: true,\n                    chart: chart,\n                    getPlotBox: seriesProto.getPlotBox\n                };\n                /**\n                 * @name Annotation.AnnotationMockPoint#target\n                 * @type {Highcharts.AnnotationControllable|null}\n                 */\n                this.target = target || null;\n                /**\n                 * Options for the mock point.\n                 *\n                 * @name Annotation.AnnotationMockPoint#options\n                 * @type {Highcharts.AnnotationsMockPointOptionsObject}\n                 */\n                this.options = options;\n                /**\n                 * If an xAxis is set it represents the point's value in terms of the\n                 * xAxis.\n                 *\n                 * @name Annotation.AnnotationMockPoint#x\n                 * @type {number|undefined}\n                 */\n                /**\n                 * If an yAxis is set it represents the point's value in terms of the\n                 * yAxis.\n                 *\n                 * @name Annotation.AnnotationMockPoint#y\n                 * @type {number|undefined}\n                 */\n                /**\n                 * It represents the point's pixel x coordinate relative to its plot\n                 * box.\n                 *\n                 * @name Annotation.AnnotationMockPoint#plotX\n                 * @type {number|undefined}\n                 */\n                /**\n                 * It represents the point's pixel y position relative to its plot box.\n                 *\n                 * @name Annotation.AnnotationMockPoint#plotY\n                 * @type {number|undefined}\n                 */\n                /**\n                 * Whether the point is inside the plot box.\n                 *\n                 * @name Annotation.AnnotationMockPoint#isInside\n                 * @type {boolean|undefined}\n                 */\n                this.applyOptions(this.getOptions());\n            }\n            /**\n             * Apply options for the point.\n             * @private\n             * @param {Highcharts.AnnotationMockPointOptionsObject} options\n             */\n            applyOptions(options) {\n                this.command = options.command;\n                this.setAxis(options, 'x');\n                this.setAxis(options, 'y');\n                this.refresh();\n            }\n            /**\n             * Returns a label config object - the same as\n             * Highcharts.Point.prototype.getLabelConfig\n             * @private\n             * @return {Highcharts.AnnotationMockLabelOptionsObject}\n             * The point's label config\n             */\n            getLabelConfig() {\n                return {\n                    x: this.x,\n                    y: this.y,\n                    point: this\n                };\n            }\n            /**\n             * Get the point's options.\n             * @private\n             * @return {Highcharts.AnnotationMockPointOptionsObject}\n             * The mock point's options.\n             */\n            getOptions() {\n                return this.hasDynamicOptions() ?\n                    this.options(this.target) :\n                    this.options;\n            }\n            /**\n             * Check if the point has dynamic options.\n             * @private\n             * @return {boolean}\n             * A positive flag if the point has dynamic options.\n             */\n            hasDynamicOptions() {\n                return typeof this.options === 'function';\n            }\n            /**\n             * Check if the point is inside its pane.\n             * @private\n             * @return {boolean} A flag indicating whether the point is inside the pane.\n             */\n            isInsidePlot() {\n                const plotX = this.plotX, plotY = this.plotY, xAxis = this.series.xAxis, yAxis = this.series.yAxis, e = {\n                    x: plotX,\n                    y: plotY,\n                    isInsidePlot: true,\n                    options: {}\n                };\n                if (xAxis) {\n                    e.isInsidePlot = defined(plotX) && plotX >= 0 && plotX <= xAxis.len;\n                }\n                if (yAxis) {\n                    e.isInsidePlot =\n                        e.isInsidePlot &&\n                            defined(plotY) &&\n                            plotY >= 0 && plotY <= yAxis.len;\n                }\n                fireEvent(this.series.chart, 'afterIsInsidePlot', e);\n                return e.isInsidePlot;\n            }\n            /**\n             * Refresh point values and coordinates based on its options.\n             * @private\n             */\n            refresh() {\n                const series = this.series, xAxis = series.xAxis, yAxis = series.yAxis, options = this.getOptions();\n                if (xAxis) {\n                    this.x = options.x;\n                    this.plotX = xAxis.toPixels(options.x, true);\n                }\n                else {\n                    this.x = void 0;\n                    this.plotX = options.x;\n                }\n                if (yAxis) {\n                    this.y = options.y;\n                    this.plotY = yAxis.toPixels(options.y, true);\n                }\n                else {\n                    this.y = null;\n                    this.plotY = options.y;\n                }\n                this.isInside = this.isInsidePlot();\n            }\n            /**\n             * Refresh point options based on its plot coordinates.\n             * @private\n             */\n            refreshOptions() {\n                const series = this.series, xAxis = series.xAxis, yAxis = series.yAxis;\n                this.x = this.options.x = xAxis ?\n                    this.options.x = xAxis.toValue(this.plotX, true) :\n                    this.plotX;\n                this.y = this.options.y = yAxis ?\n                    yAxis.toValue(this.plotY, true) :\n                    this.plotY;\n            }\n            /**\n             * Rotate the point.\n             * @private\n             * @param {number} cx origin x rotation\n             * @param {number} cy origin y rotation\n             * @param {number} radians\n             */\n            rotate(cx, cy, radians) {\n                if (!this.hasDynamicOptions()) {\n                    const cos = Math.cos(radians), sin = Math.sin(radians), x = this.plotX - cx, y = this.plotY - cy, tx = x * cos - y * sin, ty = x * sin + y * cos;\n                    this.plotX = tx + cx;\n                    this.plotY = ty + cy;\n                    this.refreshOptions();\n                }\n            }\n            /**\n             * Scale the point.\n             *\n             * @private\n             *\n             * @param {number} cx\n             * Origin x transformation.\n             *\n             * @param {number} cy\n             * Origin y transformation.\n             *\n             * @param {number} sx\n             * Scale factor x.\n             *\n             * @param {number} sy\n             * Scale factor y.\n             */\n            scale(cx, cy, sx, sy) {\n                if (!this.hasDynamicOptions()) {\n                    const x = this.plotX * sx, y = this.plotY * sy, tx = (1 - sx) * cx, ty = (1 - sy) * cy;\n                    this.plotX = tx + x;\n                    this.plotY = ty + y;\n                    this.refreshOptions();\n                }\n            }\n            /**\n             * Set x or y axis.\n             * @private\n             * @param {Highcharts.AnnotationMockPointOptionsObject} options\n             * @param {string} xOrY\n             * 'x' or 'y' string literal\n             */\n            setAxis(options, xOrY) {\n                const axisName = (xOrY + 'Axis'), axisOptions = options[axisName], chart = this.series.chart;\n                this.series[axisName] =\n                    typeof axisOptions === 'object' ?\n                        axisOptions :\n                        defined(axisOptions) ?\n                            (chart[axisName][axisOptions] ||\n                                // @todo v--- (axisName)[axisOptions] ?\n                                chart.get(axisOptions)) :\n                            null;\n            }\n            /**\n             * Transform the mock point to an anchor (relative position on the chart).\n             * @private\n             * @return {Array<number>}\n             * A quadruple of numbers which denotes x, y, width and height of the box\n             **/\n            toAnchor() {\n                const anchor = [this.plotX, this.plotY, 0, 0];\n                if (this.series.chart.inverted) {\n                    anchor[0] = this.plotY;\n                    anchor[1] = this.plotX;\n                }\n                return anchor;\n            }\n            /**\n             * Translate the point.\n             *\n             * @private\n             *\n             * @param {number|undefined} cx\n             * Origin x transformation.\n             *\n             * @param {number|undefined} cy\n             * Origin y transformation.\n             *\n             * @param {number} dx\n             * Translation for x coordinate.\n             *\n             * @param {number} dy\n             * Translation for y coordinate.\n             **/\n            translate(_cx, _cy, dx, dy) {\n                if (!this.hasDynamicOptions()) {\n                    this.plotX += dx;\n                    this.plotY += dy;\n                    this.refreshOptions();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @private\n         * @interface Highcharts.AnnotationMockLabelOptionsObject\n         */ /**\n        * Point instance of the point.\n        * @name Highcharts.AnnotationMockLabelOptionsObject#point\n        * @type {Highcharts.AnnotationMockPoint}\n        */ /**\n        * X value translated to x axis scale.\n        * @name Highcharts.AnnotationMockLabelOptionsObject#x\n        * @type {number|null}\n        */ /**\n        * Y value translated to y axis scale.\n        * @name Highcharts.AnnotationMockLabelOptionsObject#y\n        * @type {number|null}\n        */\n        /**\n         * Object of shape point.\n         *\n         * @interface Highcharts.AnnotationMockPointOptionsObject\n         */ /**\n        * The x position of the point. Units can be either in axis\n        * or chart pixel coordinates.\n        *\n        * @type      {number}\n        * @name      Highcharts.AnnotationMockPointOptionsObject.x\n        */ /**\n        * The y position of the point. Units can be either in axis\n        * or chart pixel coordinates.\n        *\n        * @type      {number}\n        * @name      Highcharts.AnnotationMockPointOptionsObject.y\n        */ /**\n        * This number defines which xAxis the point is connected to.\n        * It refers to either the axis id or the index of the axis in\n        * the xAxis array. If the option is not configured or the axis\n        * is not found the point's x coordinate refers to the chart\n        * pixels.\n        *\n        * @type      {number|string|null}\n        * @name      Highcharts.AnnotationMockPointOptionsObject.xAxis\n        */ /**\n        * This number defines which yAxis the point is connected to.\n        * It refers to either the axis id or the index of the axis in\n        * the yAxis array. If the option is not configured or the axis\n        * is not found the point's y coordinate refers to the chart\n        * pixels.\n        *\n        * @type      {number|string|null}\n        * @name      Highcharts.AnnotationMockPointOptionsObject.yAxis\n        */\n        /**\n         * Callback function that returns the annotation shape point.\n         *\n         * @callback Highcharts.AnnotationMockPointFunction\n         *\n         * @param  {Highcharts.Annotation} annotation\n         *         An annotation instance.\n         *\n         * @return {Highcharts.AnnotationMockPointOptionsObject}\n         *         Annotations shape point.\n         */\n        /**\n         * A mock series instance imitating a real series from a real point.\n         * @private\n         * @interface Highcharts.AnnotationMockSeries\n         */ /**\n        * Whether a series is visible.\n        * @name Highcharts.AnnotationMockSeries#visible\n        * @type {boolean}\n        */ /**\n        * A chart instance.\n        * @name Highcharts.AnnotationMockSeries#chart\n        * @type {Highcharts.Chart}\n        */ /**\n        * @name Highcharts.AnnotationMockSeries#getPlotBox\n        * @type {Function}\n        */\n        /**\n         * Indicates if this is a mock point for an annotation.\n         * @name Highcharts.Point#mock\n         * @type {boolean|undefined}\n         */\n        (''); // Keeps doclets above in JS file\n\n        return MockPoint;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/ControlTarget.js', [_modules['Extensions/Annotations/ControlPoint.js'], _modules['Extensions/Annotations/MockPoint.js'], _modules['Core/Utilities.js']], function (ControlPoint, MockPoint, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Composition Namespace\n         *\n         * */\n        var ControlTarget;\n        (function (ControlTarget) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Add control points.\n             * @private\n             */\n            function addControlPoints() {\n                const controlPoints = this.controlPoints, controlPointsOptions = this.options.controlPoints || [];\n                controlPointsOptions.forEach((controlPointOptions, i) => {\n                    const options = U.merge(this.options.controlPointOptions, controlPointOptions);\n                    if (!options.index) {\n                        options.index = i;\n                    }\n                    controlPointsOptions[i] = options;\n                    controlPoints.push(new ControlPoint(this.chart, this, options));\n                });\n            }\n            /**\n             * Returns object which denotes anchor position - relative and absolute.\n             * @private\n             * @param {Highcharts.AnnotationPointType} point\n             * An annotation point.\n             *\n             * @return {Highcharts.AnnotationAnchorObject}\n             * An annotation anchor.\n             */\n            function anchor(point) {\n                const plotBox = point.series.getPlotBox(), chart = point.series.chart, box = point.mock ?\n                    point.toAnchor() :\n                    chart.tooltip &&\n                        chart.tooltip.getAnchor.call({\n                            chart: point.series.chart\n                        }, point) ||\n                        [0, 0, 0, 0], anchor = {\n                    x: box[0] + (this.options.x || 0),\n                    y: box[1] + (this.options.y || 0),\n                    height: box[2] || 0,\n                    width: box[3] || 0\n                };\n                return {\n                    relativePosition: anchor,\n                    absolutePosition: U.merge(anchor, {\n                        x: anchor.x + (point.mock ? plotBox.translateX : chart.plotLeft),\n                        y: anchor.y + (point.mock ? plotBox.translateY : chart.plotTop)\n                    })\n                };\n            }\n            /**\n             * Adds shared functions to be used with targets of ControlPoint.\n             * @private\n             */\n            function compose(ControlTargetClass) {\n                const controlProto = ControlTargetClass.prototype;\n                if (!controlProto.addControlPoints) {\n                    U.merge(true, controlProto, {\n                        addControlPoints,\n                        anchor,\n                        destroyControlTarget,\n                        getPointsOptions,\n                        linkPoints,\n                        point,\n                        redrawControlPoints,\n                        renderControlPoints,\n                        transform,\n                        transformPoint,\n                        translate,\n                        translatePoint\n                    });\n                }\n            }\n            ControlTarget.compose = compose;\n            /**\n             * Destroy control points.\n             * @private\n             */\n            function destroyControlTarget() {\n                this.controlPoints.forEach((controlPoint) => controlPoint.destroy());\n                this.chart = null;\n                this.controlPoints = null;\n                this.points = null;\n                this.options = null;\n                if (this.annotation) {\n                    this.annotation = null;\n                }\n            }\n            /**\n             * Get the points options.\n             * @private\n             * @return {Array<Highcharts.PointOptionsObject>}\n             * An array of points' options.\n             */\n            function getPointsOptions() {\n                const options = this.options;\n                return (options.points ||\n                    (options.point && U.splat(options.point)));\n            }\n            /**\n             * Find point-like objects based on points options.\n             * @private\n             * @return {Array<Annotation.PointLike>}\n             *         An array of point-like objects.\n             */\n            function linkPoints() {\n                const pointsOptions = this.getPointsOptions(), points = this.points, len = (pointsOptions && pointsOptions.length) || 0;\n                let i, point;\n                for (i = 0; i < len; i++) {\n                    point = this.point(pointsOptions[i], points[i]);\n                    if (!point) {\n                        points.length = 0;\n                        return;\n                    }\n                    if (point.mock) {\n                        point.refresh();\n                    }\n                    points[i] = point;\n                }\n                return points;\n            }\n            /**\n             * Map point's options to a point-like object.\n             * @private\n             * @param {string|Function|Highcharts.AnnotationMockPointOptionsObject|Highcharts.AnnotationPointType} pointOptions\n             *        Point's options.\n             * @param {Highcharts.AnnotationPointType} point\n             *        A point-like instance.\n             * @return {Highcharts.AnnotationPointType|null}\n             *         If the point is found/set returns this point, otherwise null\n             */\n            function point(pointOptions, point) {\n                if (pointOptions && pointOptions.series) {\n                    return pointOptions;\n                }\n                if (!point || point.series === null) {\n                    if (U.isObject(pointOptions)) {\n                        point = new MockPoint(this.chart, this, pointOptions);\n                    }\n                    else if (U.isString(pointOptions)) {\n                        point = this.chart.get(pointOptions) || null;\n                    }\n                    else if (typeof pointOptions === 'function') {\n                        const pointConfig = pointOptions.call(point, this);\n                        point = pointConfig.series ?\n                            pointConfig :\n                            new MockPoint(this.chart, this, pointOptions);\n                    }\n                }\n                return point;\n            }\n            /**\n             * Redraw control points.\n             * @private\n             */\n            function redrawControlPoints(animation) {\n                this.controlPoints.forEach((controlPoint) => controlPoint.redraw(animation));\n            }\n            /**\n             * Render control points.\n             * @private\n             */\n            function renderControlPoints() {\n                this.controlPoints.forEach((controlPoint) => controlPoint.render());\n            }\n            /**\n             * Transform control points with a specific transformation.\n             * @private\n             * @param {string} transformation\n             *        A transformation name\n             * @param {number|null} cx\n             *        Origin x transformation\n             * @param {number|null} cy\n             *        Origin y transformation\n             * @param {number} p1\n             *        Param for the transformation\n             * @param {number} [p2]\n             *        Param for the transformation\n             */\n            function transform(transformation, cx, cy, p1, p2) {\n                if (this.chart.inverted) {\n                    const temp = cx;\n                    cx = cy;\n                    cy = temp;\n                }\n                this.points.forEach((_point, i) => (this.transformPoint(transformation, cx, cy, p1, p2, i)), this);\n            }\n            /**\n             * Transform a point with a specific transformation\n             * If a transformed point is a real point it is replaced with\n             * the mock point.\n             * @private\n             * @param {string} transformation\n             *        A transformation name\n             * @param {number|null} cx\n             *        Origin x transformation\n             * @param {number|null} cy\n             *        Origin y transformation\n             * @param {number} p1\n             *        Param for the transformation\n             * @param {number|undefined} p2\n             *        Param for the transformation\n             * @param {number} i\n             *        Index of the point\n             */\n            function transformPoint(transformation, cx, cy, p1, p2, i) {\n                let point = this.points[i];\n                if (!point.mock) {\n                    point = this.points[i] = MockPoint.fromPoint(point);\n                }\n                point[transformation](cx, cy, p1, p2);\n            }\n            /**\n             * Translate control points.\n             * @private\n             * @param {number} dx\n             *        Translation for x coordinate\n             * @param {number} dy\n             *        Translation for y coordinate\n             **/\n            function translate(dx, dy) {\n                this.transform('translate', null, null, dx, dy);\n            }\n            /**\n             * Translate a specific control point.\n             * @private\n             * @param {number} dx\n             *        Translation for x coordinate\n             * @param {number} dy\n             *        Translation for y coordinate\n             * @param {number} i\n             *        Index of the point\n             **/\n            function translatePoint(dx, dy, i) {\n                this.transformPoint('translate', null, null, dx, dy, i);\n            }\n        })(ControlTarget || (ControlTarget = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ControlTarget;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Controllables/Controllable.js', [_modules['Extensions/Annotations/ControlTarget.js'], _modules['Core/Utilities.js']], function (ControlTarget, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * It provides methods for handling points, control points\n         * and points transformations.\n         * @private\n         */\n        class Controllable {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(annotation, options, index, itemType) {\n                this.annotation = annotation;\n                this.chart = annotation.chart;\n                this.collection = (itemType === 'label' ? 'labels' : 'shapes');\n                this.controlPoints = [];\n                this.options = options;\n                this.points = [];\n                this.index = index;\n                this.itemType = itemType;\n                this.init(annotation, options, index);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Redirect attr usage on the controllable graphic element.\n             * @private\n             */\n            attr(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            ..._args) {\n                this.graphic.attr.apply(this.graphic, arguments);\n            }\n            /**\n             * Utility function for mapping item's options\n             * to element's attribute\n             * @private\n             * @param {Highcharts.AnnotationsLabelsOptions|Highcharts.AnnotationsShapesOptions} options\n             * @return {Highcharts.SVGAttributes}\n             *         Mapped options.\n             */\n            attrsFromOptions(options) {\n                const map = this.constructor.attrsMap, attrs = {}, styledMode = this.chart.styledMode;\n                let key, mappedKey;\n                for (key in options) { // eslint-disable-line guard-for-in\n                    mappedKey = map[key];\n                    if (typeof map[key] !== 'undefined' &&\n                        (!styledMode ||\n                            ['fill', 'stroke', 'stroke-width']\n                                .indexOf(mappedKey) === -1)) {\n                        attrs[mappedKey] = options[key];\n                    }\n                }\n                return attrs;\n            }\n            /**\n             * Destroy a controllable.\n             * @private\n             */\n            destroy() {\n                if (this.graphic) {\n                    this.graphic = this.graphic.destroy();\n                }\n                if (this.tracker) {\n                    this.tracker = this.tracker.destroy();\n                }\n                this.destroyControlTarget();\n            }\n            /**\n             * Init the controllable\n             * @private\n             */\n            init(annotation, options, index) {\n                this.annotation = annotation;\n                this.chart = annotation.chart;\n                this.options = options;\n                this.points = [];\n                this.controlPoints = [];\n                this.index = index;\n                this.linkPoints();\n                this.addControlPoints();\n            }\n            /**\n             * Redraw a controllable.\n             * @private\n             */\n            redraw(animation) {\n                this.redrawControlPoints(animation);\n            }\n            /**\n             * Render a controllable.\n             * @private\n             */\n            render(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            _parentGroup) {\n                if (this.options.className && this.graphic) {\n                    this.graphic.addClass(this.options.className);\n                }\n                this.renderControlPoints();\n            }\n            /**\n             * Rotate a controllable.\n             * @private\n             * @param {number} cx\n             *        Origin x rotation\n             * @param {number} cy\n             *        Origin y rotation\n             * @param {number} radians\n             **/\n            rotate(cx, cy, radians) {\n                this.transform('rotate', cx, cy, radians);\n            }\n            /**\n             * Scale a controllable.\n             * @private\n             * @param {number} cx\n             *        Origin x rotation\n             * @param {number} cy\n             *        Origin y rotation\n             * @param {number} sx\n             *        Scale factor x\n             * @param {number} sy\n             *        Scale factor y\n             */\n            scale(cx, cy, sx, sy) {\n                this.transform('scale', cx, cy, sx, sy);\n            }\n            /**\n             * Set control points' visibility.\n             * @private\n             */\n            setControlPointsVisibility(visible) {\n                this.controlPoints.forEach((controlPoint) => {\n                    controlPoint.setVisibility(visible);\n                });\n            }\n            /**\n             * Check if a controllable should be rendered/redrawn.\n             * @private\n             * @return {boolean}\n             *         Whether a controllable should be drawn.\n             */\n            shouldBeDrawn() {\n                return !!this.points.length;\n            }\n            /**\n             * Translate shape within controllable item.\n             * Replaces `controllable.translate` method.\n             * @private\n             * @param {number} dx\n             *        Translation for x coordinate\n             * @param {number} dy\n             *        Translation for y coordinate\n             * @param {boolean|undefined} translateSecondPoint\n             *        If the shape has two points attached to it, this option allows you\n             *        to translate also the second point.\n             */\n            translateShape(dx, dy, translateSecondPoint) {\n                const chart = this.annotation.chart, \n                // Annotation.options\n                shapeOptions = this.annotation.userOptions, \n                // Chart.options.annotations\n                annotationIndex = chart.annotations.indexOf(this.annotation), chartOptions = chart.options.annotations[annotationIndex];\n                this.translatePoint(dx, dy, 0);\n                if (translateSecondPoint) {\n                    this.translatePoint(dx, dy, 1);\n                }\n                // Options stored in:\n                // - chart (for exporting)\n                // - current config (for redraws)\n                chartOptions[this.collection][this.index]\n                    .point = this.options.point;\n                shapeOptions[this.collection][this.index]\n                    .point = this.options.point;\n            }\n            /**\n             * Update a controllable.\n             * @private\n             */\n            update(newOptions) {\n                const annotation = this.annotation, options = merge(true, this.options, newOptions), parentGroup = this.graphic.parentGroup, Constructor = this.constructor;\n                this.destroy();\n                const newControllable = new Constructor(annotation, options, this.index, this.itemType);\n                merge(true, this, newControllable);\n                this.render(parentGroup);\n                this.redraw();\n            }\n        }\n        ControlTarget.compose(Controllable);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * An object which denotes a controllable's anchor positions - relative and\n         * absolute.\n         *\n         * @private\n         * @interface Highcharts.AnnotationAnchorObject\n         */ /**\n        * Relative to the plot area position\n        * @name Highcharts.AnnotationAnchorObject#relativePosition\n        * @type {Highcharts.BBoxObject}\n        */ /**\n        * Absolute position\n        * @name Highcharts.AnnotationAnchorObject#absolutePosition\n        * @type {Highcharts.BBoxObject}\n        */\n        /**\n         * @interface Highcharts.AnnotationControllable\n         */ /**\n        * @name Highcharts.AnnotationControllable#annotation\n        * @type {Highcharts.Annotation}\n        */ /**\n        * @name Highcharts.AnnotationControllable#chart\n        * @type {Highcharts.Chart}\n        */ /**\n        * @name Highcharts.AnnotationControllable#collection\n        * @type {string}\n        */ /**\n        * @private\n        * @name Highcharts.AnnotationControllable#controlPoints\n        * @type {Array<Highcharts.AnnotationControlPoint>}\n        */ /**\n        * @name Highcharts.AnnotationControllable#points\n        * @type {Array<Highcharts.Point>}\n        */\n        (''); // Keeps doclets above in JS file\n\n        return Controllable;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Controllables/ControllableDefaults.js', [], function () {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /**\n         * Options for configuring markers for annotations.\n         *\n         * An example of the arrow marker:\n         * <pre>\n         * {\n         *   arrow: {\n         *     id: 'arrow',\n         *     tagName: 'marker',\n         *     refY: 5,\n         *     refX: 5,\n         *     markerWidth: 10,\n         *     markerHeight: 10,\n         *     children: [{\n         *       tagName: 'path',\n         *       attrs: {\n         *         d: 'M 0 0 L 10 5 L 0 10 Z',\n         *         'stroke-width': 0\n         *       }\n         *     }]\n         *   }\n         * }\n         * </pre>\n         *\n         * @sample highcharts/annotations/custom-markers/\n         *         Define a custom marker for annotations\n         *\n         * @sample highcharts/css/annotations-markers/\n         *         Define markers in a styled mode\n         *\n         * @type         {Highcharts.Dictionary<Highcharts.ASTNode>}\n         * @since        6.0.0\n         * @optionparent defs\n         */\n        const defaultMarkers = {\n            /**\n             * @type {Highcharts.ASTNode}\n             */\n            arrow: {\n                tagName: 'marker',\n                attributes: {\n                    id: 'arrow',\n                    refY: 5,\n                    refX: 9,\n                    markerWidth: 10,\n                    markerHeight: 10\n                },\n                /**\n                 * @type {Array<Highcharts.DefsOptions>}\n                 */\n                children: [{\n                        tagName: 'path',\n                        attributes: {\n                            d: 'M 0 0 L 10 5 L 0 10 Z', // Triangle (used as an arrow)\n                            'stroke-width': 0\n                        }\n                    }]\n            },\n            /**\n             * @type {Highcharts.ASTNode}\n             */\n            'reverse-arrow': {\n                tagName: 'marker',\n                attributes: {\n                    id: 'reverse-arrow',\n                    refY: 5,\n                    refX: 1,\n                    markerWidth: 10,\n                    markerHeight: 10\n                },\n                children: [{\n                        tagName: 'path',\n                        attributes: {\n                            // Reverse triangle (used as an arrow)\n                            d: 'M 0 5 L 10 0 L 10 10 Z',\n                            'stroke-width': 0\n                        }\n                    }]\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const ControllableDefaults = {\n            defaultMarkers\n        };\n\n        return ControllableDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Controllables/ControllablePath.js', [_modules['Extensions/Annotations/Controllables/Controllable.js'], _modules['Extensions/Annotations/Controllables/ControllableDefaults.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (Controllable, ControllableDefaults, H, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defaultMarkers } = ControllableDefaults;\n        const { addEvent, defined, extend, merge, uniqueKey } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const markerEndSetter = createMarkerSetter('marker-end');\n        const markerStartSetter = createMarkerSetter('marker-start');\n        // See TRACKER_FILL in highcharts.src.js\n        const TRACKER_FILL = 'rgba(192,192,192,' + (H.svg ? 0.0001 : 0.002) + ')';\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function createMarkerSetter(markerType) {\n            return function (value) {\n                this.attr(markerType, 'url(#' + value + ')');\n            };\n        }\n        /**\n         * @private\n         */\n        function onChartAfterGetContainer() {\n            this.options.defs = merge(defaultMarkers, this.options.defs || {});\n            ///  objectEach(this.options.defs, function (def): void {\n            //     const attributes = def.attributes;\n            //     if (\n            //         def.tagName === 'marker' &&\n            //         attributes &&\n            //         attributes.id &&\n            //         attributes.display !== 'none'\n            //     ) {\n            //         this.renderer.addMarker(attributes.id, def);\n            //     }\n            // }, this);\n        }\n        /**\n         * @private\n         */\n        function svgRendererAddMarker(id, markerOptions) {\n            const options = { attributes: { id } };\n            const attrs = {\n                stroke: markerOptions.color || 'none',\n                fill: markerOptions.color || 'rgba(0, 0, 0, 0.75)'\n            };\n            options.children = (markerOptions.children &&\n                markerOptions.children.map(function (child) {\n                    return merge(attrs, child);\n                }));\n            const ast = merge(true, {\n                attributes: {\n                    markerWidth: 20,\n                    markerHeight: 20,\n                    refX: 0,\n                    refY: 0,\n                    orient: 'auto'\n                }\n            }, markerOptions, options);\n            const marker = this.definition(ast);\n            marker.id = id;\n            return marker;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * A controllable path class.\n         *\n         * @requires modules/annotations\n         *\n         * @private\n         * @class\n         * @name Highcharts.AnnotationControllablePath\n         *\n         * @param {Highcharts.Annotation}\n         * Related annotation.\n         *\n         * @param {Highcharts.AnnotationsShapeOptions} options\n         * A path's options object.\n         *\n         * @param {number} index\n         * Index of the path.\n         */\n        class ControllablePath extends Controllable {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(ChartClass, SVGRendererClass) {\n                const svgRendererProto = SVGRendererClass.prototype;\n                if (!svgRendererProto.addMarker) {\n                    addEvent(ChartClass, 'afterGetContainer', onChartAfterGetContainer);\n                    svgRendererProto.addMarker = svgRendererAddMarker;\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(annotation, options, index) {\n                super(annotation, options, index, 'shape');\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.type = 'path';\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Map the controllable path to 'd' path attribute.\n             *\n             * @return {Highcharts.SVGPathArray|null}\n             * A path's d attribute.\n             */\n            toD() {\n                const dOption = this.options.d;\n                if (dOption) {\n                    return typeof dOption === 'function' ?\n                        dOption.call(this) :\n                        dOption;\n                }\n                const points = this.points, len = points.length, d = [];\n                let showPath = len, point = points[0], position = showPath && this.anchor(point).absolutePosition, pointIndex = 0, command;\n                if (position) {\n                    d.push(['M', position.x, position.y]);\n                    while (++pointIndex < len && showPath) {\n                        point = points[pointIndex];\n                        command = point.command || 'L';\n                        position = this.anchor(point).absolutePosition;\n                        if (command === 'M') {\n                            d.push([command, position.x, position.y]);\n                        }\n                        else if (command === 'L') {\n                            d.push([command, position.x, position.y]);\n                        }\n                        else if (command === 'Z') {\n                            d.push([command]);\n                        }\n                        showPath = point.series.visible;\n                    }\n                }\n                return (showPath && this.graphic ?\n                    this.chart.renderer.crispLine(d, this.graphic.strokeWidth()) :\n                    null);\n            }\n            shouldBeDrawn() {\n                return super.shouldBeDrawn() || !!this.options.d;\n            }\n            render(parent) {\n                const options = this.options, attrs = this.attrsFromOptions(options);\n                this.graphic = this.annotation.chart.renderer\n                    .path([['M', 0, 0]])\n                    .attr(attrs)\n                    .add(parent);\n                this.tracker = this.annotation.chart.renderer\n                    .path([['M', 0, 0]])\n                    .addClass('highcharts-tracker-line')\n                    .attr({\n                    zIndex: 2\n                })\n                    .add(parent);\n                if (!this.annotation.chart.styledMode) {\n                    this.tracker.attr({\n                        'stroke-linejoin': 'round', // #1225\n                        stroke: TRACKER_FILL,\n                        fill: TRACKER_FILL,\n                        'stroke-width': this.graphic.strokeWidth() +\n                            options.snap * 2\n                    });\n                }\n                super.render();\n                extend(this.graphic, { markerStartSetter, markerEndSetter });\n                this.setMarkers(this);\n            }\n            redraw(animation) {\n                if (this.graphic) {\n                    const d = this.toD(), action = animation ? 'animate' : 'attr';\n                    if (d) {\n                        this.graphic[action]({ d: d });\n                        this.tracker[action]({ d: d });\n                    }\n                    else {\n                        this.graphic.attr({ d: 'M 0 ' + -9e9 });\n                        this.tracker.attr({ d: 'M 0 ' + -9e9 });\n                    }\n                    this.graphic.placed = this.tracker.placed = !!d;\n                }\n                super.redraw(animation);\n            }\n            /**\n             * Set markers.\n             * @private\n             * @param {Highcharts.AnnotationControllablePath} item\n             */\n            setMarkers(item) {\n                const itemOptions = item.options, chart = item.chart, defs = chart.options.defs, fill = itemOptions.fill, color = defined(fill) && fill !== 'none' ?\n                    fill :\n                    itemOptions.stroke;\n                const setMarker = function (markerType) {\n                    const markerId = itemOptions[markerType];\n                    let def, predefinedMarker, key, marker;\n                    if (markerId) {\n                        for (key in defs) { // eslint-disable-line guard-for-in\n                            def = defs[key];\n                            if ((markerId === (def.attributes && def.attributes.id) ||\n                                // Legacy, for\n                                // unit-tests/annotations/annotations-shapes\n                                markerId === def.id) &&\n                                def.tagName === 'marker') {\n                                predefinedMarker = def;\n                                break;\n                            }\n                        }\n                        if (predefinedMarker) {\n                            marker = item[markerType] = chart.renderer\n                                .addMarker((itemOptions.id || uniqueKey()) + '-' + markerId, merge(predefinedMarker, { color: color }));\n                            item.attr(markerType, marker.getAttribute('id'));\n                        }\n                    }\n                };\n                ['markerStart', 'markerEnd']\n                    .forEach(setMarker);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * A map object which allows to map options attributes to element attributes\n         *\n         * @name Highcharts.AnnotationControllablePath.attrsMap\n         * @type {Highcharts.Dictionary<string>}\n         */\n        ControllablePath.attrsMap = {\n            dashStyle: 'dashstyle',\n            strokeWidth: 'stroke-width',\n            stroke: 'stroke',\n            fill: 'fill',\n            zIndex: 'zIndex'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ControllablePath;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Controllables/ControllableRect.js', [_modules['Extensions/Annotations/Controllables/Controllable.js'], _modules['Extensions/Annotations/Controllables/ControllablePath.js'], _modules['Core/Utilities.js']], function (Controllable, ControllablePath, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * A controllable rect class.\n         *\n         * @requires modules/annotations\n         *\n         * @private\n         * @class\n         * @name Highcharts.AnnotationControllableRect\n         *\n         * @param {Highcharts.Annotation} annotation\n         * An annotation instance.\n         *\n         * @param {Highcharts.AnnotationsShapeOptions} options\n         * A rect's options.\n         *\n         * @param {number} index\n         * Index of the rectangle\n         */\n        class ControllableRect extends Controllable {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(annotation, options, index) {\n                super(annotation, options, index, 'shape');\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.type = 'rect';\n                this.translate = super.translateShape;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            render(parent) {\n                const attrs = this.attrsFromOptions(this.options);\n                this.graphic = this.annotation.chart.renderer\n                    .rect(0, -9e9, 0, 0)\n                    .attr(attrs)\n                    .add(parent);\n                super.render();\n            }\n            redraw(animation) {\n                if (this.graphic) {\n                    const position = this.anchor(this.points[0]).absolutePosition;\n                    if (position) {\n                        this.graphic[animation ? 'animate' : 'attr']({\n                            x: position.x,\n                            y: position.y,\n                            width: this.options.width,\n                            height: this.options.height\n                        });\n                    }\n                    else {\n                        this.attr({\n                            x: 0,\n                            y: -9e9\n                        });\n                    }\n                    this.graphic.placed = Boolean(position);\n                }\n                super.redraw(animation);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * A map object which allows to map options attributes to element attributes\n         *\n         * @type {Annotation.ControllableRect.AttrsMap}\n         */\n        ControllableRect.attrsMap = merge(ControllablePath.attrsMap, {\n            width: 'width',\n            height: 'height'\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ControllableRect;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Controllables/ControllableCircle.js', [_modules['Extensions/Annotations/Controllables/Controllable.js'], _modules['Extensions/Annotations/Controllables/ControllablePath.js'], _modules['Core/Utilities.js']], function (Controllable, ControllablePath, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * A controllable circle class.\n         *\n         * @requires modules/annotations\n         *\n         * @private\n         * @class\n         * @name Highcharts.AnnotationControllableCircle\n         *\n         * @param {Highcharts.Annotation} annotation an annotation instance\n         * @param {Highcharts.AnnotationsShapeOptions} options a shape's options\n         * @param {number} index of the circle\n         */\n        class ControllableCircle extends Controllable {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(annotation, options, index) {\n                super(annotation, options, index, 'shape');\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.type = 'circle';\n                this.translate = super.translateShape;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            redraw(animation) {\n                if (this.graphic) {\n                    const position = this.anchor(this.points[0]).absolutePosition;\n                    if (position) {\n                        this.graphic[animation ? 'animate' : 'attr']({\n                            x: position.x,\n                            y: position.y,\n                            r: this.options.r\n                        });\n                    }\n                    else {\n                        this.graphic.attr({\n                            x: 0,\n                            y: -9e9\n                        });\n                    }\n                    this.graphic.placed = !!position;\n                }\n                super.redraw.call(this, animation);\n            }\n            /**\n             * @private\n             */\n            render(parent) {\n                const attrs = this.attrsFromOptions(this.options);\n                this.graphic = this.annotation.chart.renderer\n                    .circle(0, -9e9, 0)\n                    .attr(attrs)\n                    .add(parent);\n                super.render();\n            }\n            /**\n             * Set the radius.\n             * @private\n             * @param {number} r\n             *        A radius to be set\n             */\n            setRadius(r) {\n                this.options.r = r;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * A map object which allows to map options attributes to element\n         * attributes.\n         *\n         * @name Highcharts.AnnotationControllableCircle.attrsMap\n         * @type {Highcharts.Dictionary<string>}\n         */\n        ControllableCircle.attrsMap = merge(ControllablePath.attrsMap, { r: 'r' });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ControllableCircle;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Controllables/ControllableEllipse.js', [_modules['Extensions/Annotations/Controllables/Controllable.js'], _modules['Extensions/Annotations/Controllables/ControllablePath.js'], _modules['Core/Utilities.js']], function (Controllable, ControllablePath, U) {\n        /* *\n         *\n         * Author: Pawel Lysy\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { merge, defined } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * A controllable ellipse class.\n         *\n         * @requires modules/annotations\n         *\n         * @private\n         * @class\n         * @name Highcharts.AnnotationControllableEllipse\n         *\n         * @param {Highcharts.Annotation} annotation an annotation instance\n         * @param {Highcharts.AnnotationsShapeOptions} options a shape's options\n         * @param {number} index of the Ellipse\n         */\n        class ControllableEllipse extends Controllable {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(annotation, options, index) {\n                super(annotation, options, index, 'shape');\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.type = 'ellipse';\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            init(annotation, options, index) {\n                if (defined(options.yAxis)) {\n                    options.points.forEach((point) => {\n                        point.yAxis = options.yAxis;\n                    });\n                }\n                if (defined(options.xAxis)) {\n                    options.points.forEach((point) => {\n                        point.xAxis = options.xAxis;\n                    });\n                }\n                super.init(annotation, options, index);\n            }\n            /**\n             * Render the element\n             * @private\n             * @param parent\n             *        Parent SVG element.\n             */\n            render(parent) {\n                this.graphic = this.annotation.chart.renderer.createElement('ellipse')\n                    .attr(this.attrsFromOptions(this.options))\n                    .add(parent);\n                super.render();\n            }\n            /**\n             * Translate the points. Mostly used to handle dragging of the ellipse.\n             * @private\n             */\n            translate(dx, dy) {\n                super.translateShape(dx, dy, true);\n            }\n            /**\n             * Get the distance from the line to the point.\n             * @private\n             * @param point1\n             *        First point which is on the line\n             * @param point2\n             *        Second point\n             * @param x0\n             *        Point's x value from which you want to calculate the distance from\n             * @param y0\n             *        Point's y value from which you want to calculate the distance from\n             */\n            getDistanceFromLine(point1, point2, x0, y0) {\n                return Math.abs((point2.y - point1.y) * x0 - (point2.x - point1.x) * y0 +\n                    point2.x * point1.y - point2.y * point1.x) / Math.sqrt((point2.y - point1.y) * (point2.y - point1.y) +\n                    (point2.x - point1.x) * (point2.x - point1.x));\n            }\n            /**\n             * The function calculates the svg attributes of the ellipse, and returns\n             * all parameters necessary to draw the ellipse.\n             * @private\n             * @param position\n             *        Absolute position of the first point in points array\n             * @param position2\n             *        Absolute position of the second point in points array\n             */\n            getAttrs(position, position2) {\n                const x1 = position.x, y1 = position.y, x2 = position2.x, y2 = position2.y, cx = (x1 + x2) / 2, cy = (y1 + y2) / 2, rx = Math.sqrt((x1 - x2) * (x1 - x2) / 4 + (y1 - y2) * (y1 - y2) / 4), tan = (y2 - y1) / (x2 - x1);\n                let angle = Math.atan(tan) * 180 / Math.PI;\n                if (cx < x1) {\n                    angle += 180;\n                }\n                const ry = this.getRY();\n                return { cx, cy, rx, ry, angle };\n            }\n            /**\n             * Get the value of minor radius of the ellipse.\n             * @private\n             */\n            getRY() {\n                const yAxis = this.getYAxis();\n                return defined(yAxis) ?\n                    Math.abs(yAxis.toPixels(this.options.ry) - yAxis.toPixels(0)) :\n                    this.options.ry;\n            }\n            /**\n             * Get the yAxis object to which the ellipse is pinned.\n             * @private\n             */\n            getYAxis() {\n                const yAxisIndex = this.options.yAxis;\n                return this.chart.yAxis[yAxisIndex];\n            }\n            /**\n             * Get the absolute coordinates of the MockPoint\n             * @private\n             * @param point\n             *        MockPoint that is added through options\n             */\n            getAbsolutePosition(point) {\n                return this.anchor(point).absolutePosition;\n            }\n            /**\n             * Redraw the element\n             * @private\n             * @param animation\n             *        Display an animation\n             */\n            redraw(animation) {\n                if (this.graphic) {\n                    const position = this.getAbsolutePosition(this.points[0]), position2 = this.getAbsolutePosition(this.points[1]), attrs = this.getAttrs(position, position2);\n                    if (position) {\n                        this.graphic[animation ? 'animate' : 'attr']({\n                            cx: attrs.cx,\n                            cy: attrs.cy,\n                            rx: attrs.rx,\n                            ry: attrs.ry,\n                            rotation: attrs.angle,\n                            rotationOriginX: attrs.cx,\n                            rotationOriginY: attrs.cy\n                        });\n                    }\n                    else {\n                        this.graphic.attr({\n                            x: 0,\n                            y: -9e9\n                        });\n                    }\n                    this.graphic.placed = Boolean(position);\n                }\n                super.redraw(animation);\n            }\n            /**\n             * Set the radius Y.\n             * @private\n             * @param {number} ry\n             *        A radius in y direction to be set\n             */\n            setYRadius(ry) {\n                const shapes = this.annotation.userOptions.shapes;\n                this.options.ry = ry;\n                if (shapes && shapes[0]) {\n                    shapes[0].ry = ry;\n                    shapes[0].ry = ry;\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * A map object which allows to map options attributes to element\n         * attributes.\n         *\n         * @name Highcharts.AnnotationControllableEllipse.attrsMap\n         * @type {Highcharts.Dictionary<string>}\n         */\n        ControllableEllipse.attrsMap = merge(ControllablePath.attrsMap, {\n            ry: 'ry'\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ControllableEllipse;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Controllables/ControllableLabel.js', [_modules['Extensions/Annotations/Controllables/Controllable.js'], _modules['Core/Templating.js'], _modules['Extensions/Annotations/MockPoint.js'], _modules['Core/Utilities.js']], function (Controllable, F, MockPoint, U) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { format } = F;\n        const { extend, isNumber, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * General symbol definition for labels with connector\n         * @private\n         */\n        function symbolConnector(x, y, w, h, options) {\n            const anchorX = options && options.anchorX, anchorY = options && options.anchorY;\n            let path, yOffset, lateral = w / 2;\n            if (isNumber(anchorX) && isNumber(anchorY)) {\n                path = [['M', anchorX, anchorY]];\n                // Prefer 45 deg connectors\n                yOffset = y - anchorY;\n                if (yOffset < 0) {\n                    yOffset = -h - yOffset;\n                }\n                if (yOffset < w) {\n                    lateral = anchorX < x + (w / 2) ? yOffset : w - yOffset;\n                }\n                // Anchor below label\n                if (anchorY > y + h) {\n                    path.push(['L', x + lateral, y + h]);\n                    // Anchor above label\n                }\n                else if (anchorY < y) {\n                    path.push(['L', x + lateral, y]);\n                    // Anchor left of label\n                }\n                else if (anchorX < x) {\n                    path.push(['L', x, y + h / 2]);\n                    // Anchor right of label\n                }\n                else if (anchorX > x + w) {\n                    path.push(['L', x + w, y + h / 2]);\n                }\n            }\n            return path || [];\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * A controllable label class.\n         *\n         * @requires modules/annotations\n         *\n         * @private\n         * @class\n         * @name Highcharts.AnnotationControllableLabel\n         *\n         * @param {Highcharts.Annotation} annotation\n         * An annotation instance.\n         * @param {Highcharts.AnnotationsLabelOptions} options\n         * A label's options.\n         * @param {number} index\n         * Index of the label.\n         */\n        class ControllableLabel extends Controllable {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Returns new aligned position based alignment options and box to align to.\n             * It is almost a one-to-one copy from SVGElement.prototype.align\n             * except it does not use and mutate an element\n             *\n             * @param {Highcharts.AnnotationAlignObject} alignOptions\n             *\n             * @param {Highcharts.BBoxObject} box\n             *\n             * @return {Highcharts.PositionObject}\n             * Aligned position.\n             */\n            static alignedPosition(alignOptions, box) {\n                const align = alignOptions.align, vAlign = alignOptions.verticalAlign;\n                let x = (box.x || 0) + (alignOptions.x || 0), y = (box.y || 0) + (alignOptions.y || 0), alignFactor, vAlignFactor;\n                if (align === 'right') {\n                    alignFactor = 1;\n                }\n                else if (align === 'center') {\n                    alignFactor = 2;\n                }\n                if (alignFactor) {\n                    x += (box.width - (alignOptions.width || 0)) / alignFactor;\n                }\n                if (vAlign === 'bottom') {\n                    vAlignFactor = 1;\n                }\n                else if (vAlign === 'middle') {\n                    vAlignFactor = 2;\n                }\n                if (vAlignFactor) {\n                    y += (box.height - (alignOptions.height || 0)) / vAlignFactor;\n                }\n                return {\n                    x: Math.round(x),\n                    y: Math.round(y)\n                };\n            }\n            static compose(SVGRendererClass) {\n                const symbols = SVGRendererClass.prototype.symbols;\n                symbols.connector = symbolConnector;\n            }\n            /**\n             * Returns new alignment options for a label if the label is outside the\n             * plot area. It is almost a one-to-one copy from\n             * Series.prototype.justifyDataLabel except it does not mutate the label and\n             * it works with absolute instead of relative position.\n             */\n            static justifiedOptions(chart, label, alignOptions, alignAttr) {\n                const align = alignOptions.align, verticalAlign = alignOptions.verticalAlign, padding = label.box ? 0 : (label.padding || 0), bBox = label.getBBox(), \n                //\n                options = {\n                    align: align,\n                    verticalAlign: verticalAlign,\n                    x: alignOptions.x,\n                    y: alignOptions.y,\n                    width: label.width,\n                    height: label.height\n                }, \n                //\n                x = (alignAttr.x || 0) - chart.plotLeft, y = (alignAttr.y || 0) - chart.plotTop;\n                let off;\n                // Off left\n                off = x + padding;\n                if (off < 0) {\n                    if (align === 'right') {\n                        options.align = 'left';\n                    }\n                    else {\n                        options.x = (options.x || 0) - off;\n                    }\n                }\n                // Off right\n                off = x + bBox.width - padding;\n                if (off > chart.plotWidth) {\n                    if (align === 'left') {\n                        options.align = 'right';\n                    }\n                    else {\n                        options.x = (options.x || 0) + chart.plotWidth - off;\n                    }\n                }\n                // Off top\n                off = y + padding;\n                if (off < 0) {\n                    if (verticalAlign === 'bottom') {\n                        options.verticalAlign = 'top';\n                    }\n                    else {\n                        options.y = (options.y || 0) - off;\n                    }\n                }\n                // Off bottom\n                off = y + bBox.height - padding;\n                if (off > chart.plotHeight) {\n                    if (verticalAlign === 'top') {\n                        options.verticalAlign = 'bottom';\n                    }\n                    else {\n                        options.y = (options.y || 0) + chart.plotHeight - off;\n                    }\n                }\n                return options;\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(annotation, options, index) {\n                super(annotation, options, index, 'label');\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Translate the point of the label by deltaX and deltaY translations.\n             * The point is the label's anchor.\n             *\n             * @param {number} dx translation for x coordinate\n             * @param {number} dy translation for y coordinate\n             */\n            translatePoint(dx, dy) {\n                super.translatePoint(dx, dy, 0);\n            }\n            /**\n             * Translate x and y position relative to the label's anchor.\n             *\n             * @param {number} dx translation for x coordinate\n             * @param {number} dy translation for y coordinate\n             */\n            translate(dx, dy) {\n                const chart = this.annotation.chart, \n                // Annotation.options\n                labelOptions = this.annotation.userOptions, \n                // Chart.options.annotations\n                annotationIndex = chart.annotations.indexOf(this.annotation), chartAnnotations = chart.options.annotations, chartOptions = chartAnnotations[annotationIndex];\n                if (chart.inverted) {\n                    const temp = dx;\n                    dx = dy;\n                    dy = temp;\n                }\n                // Local options:\n                this.options.x += dx;\n                this.options.y += dy;\n                // Options stored in chart:\n                chartOptions[this.collection][this.index].x = this.options.x;\n                chartOptions[this.collection][this.index].y = this.options.y;\n                labelOptions[this.collection][this.index].x = this.options.x;\n                labelOptions[this.collection][this.index].y = this.options.y;\n            }\n            render(parent) {\n                const options = this.options, attrs = this.attrsFromOptions(options), style = options.style;\n                this.graphic = this.annotation.chart.renderer\n                    .label('', 0, -9999, // #10055\n                options.shape, null, null, options.useHTML, null, 'annotation-label')\n                    .attr(attrs)\n                    .add(parent);\n                if (!this.annotation.chart.styledMode) {\n                    if (style.color === 'contrast') {\n                        style.color = this.annotation.chart.renderer.getContrast(ControllableLabel.shapesWithoutBackground.indexOf(options.shape) > -1 ? '#FFFFFF' : options.backgroundColor);\n                    }\n                    this.graphic\n                        .css(options.style)\n                        .shadow(options.shadow);\n                }\n                this.graphic.labelrank = options.labelrank;\n                super.render();\n            }\n            redraw(animation) {\n                const options = this.options, text = this.text || options.format || options.text, label = this.graphic, point = this.points[0];\n                if (!label) {\n                    this.redraw(animation);\n                    return;\n                }\n                label.attr({\n                    text: text ?\n                        format(String(text), point.getLabelConfig(), this.annotation.chart) :\n                        options.formatter.call(point, this)\n                });\n                const anchor = this.anchor(point);\n                const attrs = this.position(anchor);\n                if (attrs) {\n                    label.alignAttr = attrs;\n                    attrs.anchorX = anchor.absolutePosition.x;\n                    attrs.anchorY = anchor.absolutePosition.y;\n                    label[animation ? 'animate' : 'attr'](attrs);\n                }\n                else {\n                    label.attr({\n                        x: 0,\n                        y: -9999 // #10055\n                    });\n                }\n                label.placed = !!attrs;\n                super.redraw(animation);\n            }\n            /**\n             * All basic shapes don't support alignTo() method except label.\n             * For a controllable label, we need to subtract translation from\n             * options.\n             */\n            anchor(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            _point) {\n                const anchor = super.anchor.apply(this, arguments), x = this.options.x || 0, y = this.options.y || 0;\n                anchor.absolutePosition.x -= x;\n                anchor.absolutePosition.y -= y;\n                anchor.relativePosition.x -= x;\n                anchor.relativePosition.y -= y;\n                return anchor;\n            }\n            /**\n             * Returns the label position relative to its anchor.\n             */\n            position(anchor) {\n                const item = this.graphic, chart = this.annotation.chart, tooltip = chart.tooltip, point = this.points[0], itemOptions = this.options, anchorAbsolutePosition = anchor.absolutePosition, anchorRelativePosition = anchor.relativePosition;\n                let itemPosition, alignTo, itemPosRelativeX, itemPosRelativeY, showItem = point.series.visible &&\n                    MockPoint.prototype.isInsidePlot.call(point);\n                if (item && showItem) {\n                    const { width = 0, height = 0 } = item;\n                    if (itemOptions.distance && tooltip) {\n                        itemPosition = tooltip.getPosition.call({\n                            chart,\n                            distance: pick(itemOptions.distance, 16),\n                            getPlayingField: tooltip.getPlayingField,\n                            pointer: tooltip.pointer\n                        }, width, height, {\n                            plotX: anchorRelativePosition.x,\n                            plotY: anchorRelativePosition.y,\n                            negative: point.negative,\n                            ttBelow: point.ttBelow,\n                            h: (anchorRelativePosition.height ||\n                                anchorRelativePosition.width)\n                        });\n                    }\n                    else if (itemOptions.positioner) {\n                        itemPosition = itemOptions.positioner.call(this);\n                    }\n                    else {\n                        alignTo = {\n                            x: anchorAbsolutePosition.x,\n                            y: anchorAbsolutePosition.y,\n                            width: 0,\n                            height: 0\n                        };\n                        itemPosition = ControllableLabel.alignedPosition(extend(itemOptions, {\n                            width,\n                            height\n                        }), alignTo);\n                        if (this.options.overflow === 'justify') {\n                            itemPosition = ControllableLabel.alignedPosition(ControllableLabel.justifiedOptions(chart, item, itemOptions, itemPosition), alignTo);\n                        }\n                    }\n                    if (itemOptions.crop) {\n                        itemPosRelativeX = itemPosition.x - chart.plotLeft;\n                        itemPosRelativeY = itemPosition.y - chart.plotTop;\n                        showItem =\n                            chart.isInsidePlot(itemPosRelativeX, itemPosRelativeY) &&\n                                chart.isInsidePlot(itemPosRelativeX + width, itemPosRelativeY + height);\n                    }\n                }\n                return showItem ? itemPosition : null;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * A map object which allows to map options attributes to element attributes\n         *\n         * @type {Highcharts.Dictionary<string>}\n         */\n        ControllableLabel.attrsMap = {\n            backgroundColor: 'fill',\n            borderColor: 'stroke',\n            borderWidth: 'stroke-width',\n            zIndex: 'zIndex',\n            borderRadius: 'r',\n            padding: 'padding'\n        };\n        /**\n         * Shapes which do not have background - the object is used for proper\n         * setting of the contrast color.\n         *\n         * @type {Array<string>}\n         */\n        ControllableLabel.shapesWithoutBackground = ['connector'];\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ControllableLabel;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Controllables/ControllableImage.js', [_modules['Extensions/Annotations/Controllables/Controllable.js'], _modules['Extensions/Annotations/Controllables/ControllableLabel.js']], function (Controllable, ControllableLabel) {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * A controllable image class.\n         *\n         * @requires modules/annotations\n         *\n         * @private\n         * @class\n         * @name Highcharts.AnnotationControllableImage\n         *\n         * @param {Highcharts.Annotation} annotation\n         * An annotation instance.\n         *\n         * @param {Highcharts.AnnotationsShapeOptions} options\n         * A controllable's options.\n         *\n         * @param {number} index\n         * Index of the image.\n         */\n        class ControllableImage extends Controllable {\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(annotation, options, index) {\n                super(annotation, options, index, 'shape');\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.type = 'image';\n                this.translate = super.translateShape;\n            }\n            render(parent) {\n                const attrs = this.attrsFromOptions(this.options), options = this.options;\n                this.graphic = this.annotation.chart.renderer\n                    .image(options.src, 0, -9e9, options.width, options.height)\n                    .attr(attrs)\n                    .add(parent);\n                this.graphic.width = options.width;\n                this.graphic.height = options.height;\n                super.render();\n            }\n            redraw(animation) {\n                if (this.graphic) {\n                    const anchor = this.anchor(this.points[0]), position = ControllableLabel.prototype.position.call(this, anchor);\n                    if (position) {\n                        this.graphic[animation ? 'animate' : 'attr']({\n                            x: position.x,\n                            y: position.y\n                        });\n                    }\n                    else {\n                        this.graphic.attr({\n                            x: 0,\n                            y: -9e9\n                        });\n                    }\n                    this.graphic.placed = Boolean(position);\n                }\n                super.redraw(animation);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * A map object which allows to map options attributes to element attributes\n         *\n         * @name Highcharts.AnnotationControllableImage.attrsMap\n         * @type {Highcharts.Dictionary<string>}\n         */\n        ControllableImage.attrsMap = {\n            width: 'width',\n            height: 'height',\n            zIndex: 'zIndex'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ControllableImage;\n    });\n    _registerModule(_modules, 'Shared/BaseForm.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Utilities.js']], function (AST, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { addEvent, createElement } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class BaseForm {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(parentDiv, iconsURL) {\n                this.iconsURL = iconsURL;\n                this.container = this.createPopupContainer(parentDiv);\n                this.closeButton = this.addCloseButton();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create popup div container.\n             *\n             * @param {HTMLElement} parentDiv\n             * Parent div to attach popup.\n             *\n             * @param  {string} className\n             * Class name of the popup.\n             *\n             * @return {HTMLElement}\n             * Popup div.\n             */\n            createPopupContainer(parentDiv, className = 'highcharts-popup highcharts-no-tooltip') {\n                return createElement('div', { className }, void 0, parentDiv);\n            }\n            /**\n             * Create HTML element and attach click event to close popup.\n             *\n             * @param {string} className\n             * Class name of the close button.\n             *\n             * @return {HTMLElement}\n             * Close button.\n             */\n            addCloseButton(className = 'highcharts-popup-close') {\n                const popup = this, iconsURL = this.iconsURL;\n                // Create close popup button.\n                const closeButton = createElement('button', { className }, void 0, this.container);\n                closeButton.style['background-image'] = 'url(' +\n                    (iconsURL.match(/png|svg|jpeg|jpg|gif/ig) ?\n                        iconsURL : iconsURL + 'close.svg') + ')';\n                ['click', 'touchstart'].forEach((eventName) => {\n                    addEvent(closeButton, eventName, popup.closeButtonEvents.bind(popup));\n                });\n                // Close popup when press ESC\n                addEvent(document, 'keydown', function (event) {\n                    if (event.code === 'Escape') {\n                        popup.closeButtonEvents();\n                    }\n                });\n                return closeButton;\n            }\n            /**\n             * Close button events.\n             * @return {void}\n             */\n            closeButtonEvents() {\n                this.closePopup();\n            }\n            /**\n             * Reset content of the current popup and show.\n             *\n             * @param {string} toolbarClass\n             * Class name of the toolbar which styles should be reset.\n             */\n            showPopup(toolbarClass = 'highcharts-annotation-toolbar') {\n                const popupDiv = this.container, popupCloseButton = this.closeButton;\n                this.type = void 0;\n                // Reset content.\n                popupDiv.innerHTML = AST.emptyHTML;\n                // Reset toolbar styles if exists.\n                if (popupDiv.className.indexOf(toolbarClass) >= 0) {\n                    popupDiv.classList.remove(toolbarClass);\n                    // Reset toolbar inline styles\n                    popupDiv.removeAttribute('style');\n                }\n                // Add close button.\n                popupDiv.appendChild(popupCloseButton);\n                popupDiv.style.display = 'block';\n                popupDiv.style.height = '';\n            }\n            /**\n             * Hide popup.\n             */\n            closePopup() {\n                this.container.style.display = 'none';\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BaseForm;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Popup/PopupAnnotations.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  Popup generator for Stock tools\n         *\n         *  (c) 2009-2024 Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { doc, isFirefox } = H;\n        const { createElement, isArray, isObject, objectEach, pick, stableSort } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Create annotation simple form.\n         * It contains fields with param names.\n         * @private\n         * @param {Highcharts.Chart} chart\n         * Chart\n         * @param {Object} options\n         * Options\n         * @param {Function} callback\n         * On click callback\n         * @param {boolean} [isInit]\n         * If it is a form declared for init annotation\n         */\n        function addForm(chart, options, callback, isInit) {\n            if (!chart) {\n                return;\n            }\n            const popupDiv = this.container, lang = this.lang;\n            // Create title of annotations\n            let lhsCol = createElement('h2', {\n                className: 'highcharts-popup-main-title'\n            }, void 0, popupDiv);\n            lhsCol.appendChild(doc.createTextNode(lang[options.langKey] || options.langKey || ''));\n            // Left column\n            lhsCol = createElement('div', {\n                className: ('highcharts-popup-lhs-col highcharts-popup-lhs-full')\n            }, void 0, popupDiv);\n            const bottomRow = createElement('div', {\n                className: 'highcharts-popup-bottom-row'\n            }, void 0, popupDiv);\n            addFormFields.call(this, lhsCol, chart, '', options, [], true);\n            this.addButton(bottomRow, isInit ?\n                (lang.addButton || 'Add') :\n                (lang.saveButton || 'Save'), isInit ? 'add' : 'save', popupDiv, callback);\n        }\n        /**\n         * Create annotation simple form. It contains two buttons\n         * (edit / remove) and text label.\n         * @private\n         * @param {Highcharts.Chart} - chart\n         * @param {Highcharts.AnnotationsOptions} - options\n         * @param {Function} - on click callback\n         */\n        function addToolbar(chart, options, callback) {\n            const lang = this.lang, popupDiv = this.container, showForm = this.showForm, toolbarClass = 'highcharts-annotation-toolbar';\n            // Set small size\n            if (popupDiv.className.indexOf(toolbarClass) === -1) {\n                popupDiv.className += ' ' + toolbarClass + ' highcharts-no-mousewheel';\n            }\n            // Set position\n            if (chart) {\n                popupDiv.style.top = chart.plotTop + 10 + 'px';\n            }\n            // Create label\n            const label = createElement('p', {\n                className: 'highcharts-annotation-label'\n            }, void 0, popupDiv);\n            label.setAttribute('aria-label', 'Annotation type');\n            label.appendChild(doc.createTextNode(pick(\n            // Advanced annotations:\n            lang[options.langKey] || options.langKey, \n            // Basic shapes:\n            options.shapes && options.shapes[0].type, '')));\n            // Add buttons\n            let button = this.addButton(popupDiv, lang.editButton || 'Edit', 'edit', popupDiv, () => {\n                showForm.call(this, 'annotation-edit', chart, options, callback);\n            });\n            button.className += ' highcharts-annotation-edit-button';\n            button.style['background-image'] = 'url(' +\n                this.iconsURL + 'edit.svg)';\n            button = this.addButton(popupDiv, lang.removeButton || 'Remove', 'remove', popupDiv, callback);\n            button.className += ' highcharts-annotation-remove-button';\n            button.style['background-image'] = 'url(' +\n                this.iconsURL + 'destroy.svg)';\n        }\n        /**\n         * Create annotation's form fields.\n         * @private\n         * @param {Highcharts.HTMLDOMElement} parentDiv\n         * Div where inputs are placed\n         * @param {Highcharts.Chart} chart\n         * Chart\n         * @param {string} parentNode\n         * Name of parent to create chain of names\n         * @param {Highcharts.AnnotationsOptions} options\n         * Options\n         * @param {Array<unknown>} storage\n         * Array where all items are stored\n         * @param {boolean} [isRoot]\n         * Recursive flag for root\n         */\n        function addFormFields(parentDiv, chart, parentNode, options, storage, isRoot) {\n            if (!chart) {\n                return;\n            }\n            const addInput = this.addInput, lang = this.lang;\n            let parentFullName, titleName;\n            objectEach(options, (value, option) => {\n                // Create name like params.styles.fontSize\n                parentFullName = parentNode !== '' ? parentNode + '.' + option : option;\n                if (isObject(value)) {\n                    if (\n                    // Value is object of options\n                    !isArray(value) ||\n                        // Array of objects with params. i.e labels in Fibonacci\n                        (isArray(value) && isObject(value[0]))) {\n                        titleName = lang[option] || option;\n                        if (!titleName.match(/\\d/g)) {\n                            storage.push([\n                                true,\n                                titleName,\n                                parentDiv\n                            ]);\n                        }\n                        addFormFields.call(this, parentDiv, chart, parentFullName, value, storage, false);\n                    }\n                    else {\n                        storage.push([\n                            this,\n                            parentFullName,\n                            'annotation',\n                            parentDiv,\n                            value\n                        ]);\n                    }\n                }\n            });\n            if (isRoot) {\n                stableSort(storage, (a) => (a[1].match(/format/g) ? -1 : 1));\n                if (isFirefox) {\n                    storage.reverse(); // (#14691)\n                }\n                storage.forEach((genInput) => {\n                    if (genInput[0] === true) {\n                        createElement('span', {\n                            className: 'highcharts-annotation-title'\n                        }, void 0, genInput[2]).appendChild(doc.createTextNode(genInput[1]));\n                    }\n                    else {\n                        genInput[4] = {\n                            value: genInput[4][0],\n                            type: genInput[4][1]\n                        };\n                        addInput.apply(genInput[0], genInput.splice(1));\n                    }\n                });\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const PopupAnnotations = {\n            addForm,\n            addToolbar\n        };\n\n        return PopupAnnotations;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Popup/PopupIndicators.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (AST, H, SeriesRegistry, U) {\n        /* *\n         *\n         *  Popup generator for Stock tools\n         *\n         *  (c) 2009-2024 Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { doc } = H;\n        const { seriesTypes } = SeriesRegistry;\n        const { addEvent, createElement, defined, isArray, isObject, objectEach, stableSort } = U;\n        /* *\n         *\n         *  Enums\n         *\n         * */\n        /**\n         * Enum for properties which should have dropdown list.\n         * @private\n         */\n        var DropdownProperties;\n        (function (DropdownProperties) {\n            DropdownProperties[DropdownProperties[\"params.algorithm\"] = 0] = \"params.algorithm\";\n            DropdownProperties[DropdownProperties[\"params.average\"] = 1] = \"params.average\";\n        })(DropdownProperties || (DropdownProperties = {}));\n        /**\n         * List of available algorithms for the specific indicator.\n         * @private\n         */\n        const dropdownParameters = {\n            'algorithm-pivotpoints': ['standard', 'fibonacci', 'camarilla'],\n            'average-disparityindex': ['sma', 'ema', 'dema', 'tema', 'wma']\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Create two columns (divs) in HTML.\n         * @private\n         * @param {Highcharts.HTMLDOMElement} container\n         * Container of columns\n         * @return {Highcharts.Dictionary<Highcharts.HTMLDOMElement>}\n         * Reference to two HTML columns (lhsCol, rhsCol)\n         */\n        function addColsContainer(container) {\n            // Left column\n            const lhsCol = createElement('div', {\n                className: 'highcharts-popup-lhs-col'\n            }, void 0, container);\n            // Right column\n            const rhsCol = createElement('div', {\n                className: 'highcharts-popup-rhs-col'\n            }, void 0, container);\n            // Wrapper content\n            createElement('div', {\n                className: 'highcharts-popup-rhs-col-wrapper'\n            }, void 0, rhsCol);\n            return {\n                lhsCol: lhsCol,\n                rhsCol: rhsCol\n            };\n        }\n        /**\n         * Create indicator's form. It contains two tabs (ADD and EDIT) with\n         * content.\n         * @private\n         */\n        function addForm(chart, _options, callback) {\n            const lang = this.lang;\n            let buttonParentDiv;\n            if (!chart) {\n                return;\n            }\n            // Add tabs\n            this.tabs.init.call(this, chart);\n            // Get all tabs content divs\n            const tabsContainers = this.container\n                .querySelectorAll('.highcharts-tab-item-content');\n            // ADD tab\n            addColsContainer(tabsContainers[0]);\n            addSearchBox.call(this, chart, tabsContainers[0]);\n            addIndicatorList.call(this, chart, tabsContainers[0], 'add');\n            buttonParentDiv = tabsContainers[0]\n                .querySelectorAll('.highcharts-popup-rhs-col')[0];\n            this.addButton(buttonParentDiv, lang.addButton || 'add', 'add', buttonParentDiv, callback);\n            // EDIT tab\n            addColsContainer(tabsContainers[1]);\n            addIndicatorList.call(this, chart, tabsContainers[1], 'edit');\n            buttonParentDiv = tabsContainers[1]\n                .querySelectorAll('.highcharts-popup-rhs-col')[0];\n            this.addButton(buttonParentDiv, lang.saveButton || 'save', 'edit', buttonParentDiv, callback);\n            this.addButton(buttonParentDiv, lang.removeButton || 'remove', 'remove', buttonParentDiv, callback);\n        }\n        /**\n         * Create typical inputs for chosen indicator. Fields are extracted from\n         * defaultOptions (ADD mode) or current indicator (ADD mode). Two extra\n         * fields are added:\n         * - hidden input - contains indicator type (required for callback)\n         * - select - list of series which can be linked with indicator\n         * @private\n         * @param {Highcharts.Chart} chart\n         * Chart\n         * @param {Highcharts.Series} series\n         * Indicator\n         * @param {string} seriesType\n         * Indicator type like: sma, ema, etc.\n         * @param {Highcharts.HTMLDOMElement} rhsColWrapper\n         * Element where created HTML list is added\n         */\n        function addFormFields(chart, series, seriesType, rhsColWrapper) {\n            const fields = series.params || series.options.params;\n            // Reset current content\n            rhsColWrapper.innerHTML = AST.emptyHTML;\n            // Create title (indicator name in the right column)\n            createElement('h3', {\n                className: 'highcharts-indicator-title'\n            }, void 0, rhsColWrapper).appendChild(doc.createTextNode(getNameType(series, seriesType).indicatorFullName));\n            // Input type\n            createElement('input', {\n                type: 'hidden',\n                name: 'highcharts-type-' + seriesType,\n                value: seriesType\n            }, void 0, rhsColWrapper);\n            // List all series with id\n            listAllSeries.call(this, seriesType, 'series', chart, rhsColWrapper, series, series.linkedParent && series.linkedParent.options.id);\n            if (fields.volumeSeriesID) {\n                listAllSeries.call(this, seriesType, 'volume', chart, rhsColWrapper, series, series.linkedParent && fields.volumeSeriesID);\n            }\n            // Add param fields\n            addParamInputs.call(this, chart, 'params', fields, seriesType, rhsColWrapper);\n        }\n        /**\n         * Create HTML list of all indicators (ADD mode) or added indicators\n         * (EDIT mode).\n         *\n         * @private\n         *\n         * @param {Highcharts.AnnotationChart} chart\n         *        The chart object.\n         *\n         * @param {string} [optionName]\n         *        Name of the option into which selection is being added.\n         *\n         * @param {HTMLDOMElement} [parentDiv]\n         *        HTML parent element.\n         *\n         * @param {string} listType\n         *        Type of list depending on the selected bookmark.\n         *        Might be 'add' or 'edit'.\n         *\n         * @param {string|undefined} filter\n         *        Applied filter string from the input.\n         *        For the first iteration, it's an empty string.\n         */\n        function addIndicatorList(chart, parentDiv, listType, filter) {\n            /**\n             *\n             */\n            function selectIndicator(series, indicatorType) {\n                const button = rhsColWrapper.parentNode\n                    .children[1];\n                addFormFields.call(popup, chart, series, indicatorType, rhsColWrapper);\n                if (button) {\n                    button.style.display = 'block';\n                }\n                // Add hidden input with series.id\n                if (isEdit && series.options) {\n                    createElement('input', {\n                        type: 'hidden',\n                        name: 'highcharts-id-' + indicatorType,\n                        value: series.options.id\n                    }, void 0, rhsColWrapper).setAttribute('highcharts-data-series-id', series.options.id);\n                }\n            }\n            const popup = this, lang = popup.lang, lhsCol = parentDiv.querySelectorAll('.highcharts-popup-lhs-col')[0], rhsCol = parentDiv.querySelectorAll('.highcharts-popup-rhs-col')[0], isEdit = listType === 'edit', series = (isEdit ?\n                chart.series : // EDIT mode\n                chart.options.plotOptions || {} // ADD mode\n            );\n            if (!chart && series) {\n                return;\n            }\n            let item, filteredSeriesArray = [];\n            // Filter and sort the series.\n            if (!isEdit && !isArray(series)) {\n                // Apply filters only for the 'add' indicator list.\n                filteredSeriesArray = filterSeries.call(this, series, filter);\n            }\n            else if (isArray(series)) {\n                filteredSeriesArray = filterSeriesArray.call(this, series);\n            }\n            // Sort indicators alphabetically.\n            stableSort(filteredSeriesArray, (a, b) => {\n                const seriesAName = a.indicatorFullName.toLowerCase(), seriesBName = b.indicatorFullName.toLowerCase();\n                return (seriesAName < seriesBName) ?\n                    -1 : (seriesAName > seriesBName) ? 1 : 0;\n            });\n            // If the list exists remove it from the DOM\n            // in order to create a new one with different filters.\n            if (lhsCol.children[1]) {\n                lhsCol.children[1].remove();\n            }\n            // Create wrapper for list.\n            const indicatorList = createElement('ul', {\n                className: 'highcharts-indicator-list'\n            }, void 0, lhsCol);\n            const rhsColWrapper = rhsCol.querySelectorAll('.highcharts-popup-rhs-col-wrapper')[0];\n            filteredSeriesArray.forEach((seriesSet) => {\n                const { indicatorFullName, indicatorType, series } = seriesSet;\n                item = createElement('li', {\n                    className: 'highcharts-indicator-list'\n                }, void 0, indicatorList);\n                const btn = createElement('button', {\n                    className: 'highcharts-indicator-list-item',\n                    textContent: indicatorFullName\n                }, void 0, item);\n                ['click', 'touchstart'].forEach((eventName) => {\n                    addEvent(btn, eventName, function () {\n                        selectIndicator(series, indicatorType);\n                    });\n                });\n            });\n            // Select first item from the list\n            if (filteredSeriesArray.length > 0) {\n                const { series, indicatorType } = filteredSeriesArray[0];\n                selectIndicator(series, indicatorType);\n            }\n            else if (!isEdit) {\n                AST.setElementHTML(rhsColWrapper.parentNode.children[0], lang.noFilterMatch || '');\n                rhsColWrapper.parentNode.children[1]\n                    .style.display = 'none';\n            }\n        }\n        /**\n         * Recurrent function which lists all fields, from params object and\n         * create them as inputs. Each input has unique `data-name` attribute,\n         * which keeps chain of fields i.e params.styles.fontSize.\n         * @private\n         * @param {Highcharts.Chart} chart\n         * Chart\n         * @param {string} parentNode\n         * Name of parent to create chain of names\n         * @param {Highcharts.PopupFieldsDictionary<string>} fields\n         * Params which are based for input create\n         * @param {string} type\n         * Indicator type like: sma, ema, etc.\n         * @param {Highcharts.HTMLDOMElement} parentDiv\n         * Element where created HTML list is added\n         */\n        function addParamInputs(chart, parentNode, fields, type, parentDiv) {\n            if (!chart) {\n                return;\n            }\n            const addInput = this.addInput;\n            objectEach(fields, (value, fieldName) => {\n                // Create name like params.styles.fontSize\n                const parentFullName = parentNode + '.' + fieldName;\n                if (defined(value) && // Skip if field is unnecessary, #15362\n                    parentFullName) {\n                    if (isObject(value)) {\n                        // (15733) 'Periods' has an arrayed value. Label must be\n                        // created here.\n                        addInput.call(this, parentFullName, type, parentDiv, {});\n                        addParamInputs.call(this, chart, parentFullName, value, type, parentDiv);\n                    }\n                    // If the option is listed in dropdown enum,\n                    // add the selection box for it.\n                    if (parentFullName in DropdownProperties) {\n                        // Add selection boxes.\n                        const selectBox = addSelection.call(this, type, parentFullName, parentDiv);\n                        // Add possible dropdown options.\n                        addSelectionOptions.call(this, chart, parentNode, selectBox, type, fieldName, value);\n                    }\n                    else if (\n                    // Skip volume field which is created by addFormFields.\n                    parentFullName !== 'params.volumeSeriesID' &&\n                        !isArray(value) // Skip params declared in array.\n                    ) {\n                        addInput.call(this, parentFullName, type, parentDiv, {\n                            value: value,\n                            type: 'number'\n                        } // All inputs are text type\n                        );\n                    }\n                }\n            });\n        }\n        /**\n         * Add searchbox HTML element and its' label.\n         *\n         * @private\n         *\n         * @param {Highcharts.AnnotationChart} chart\n         *        The chart object.\n         *\n         * @param {HTMLDOMElement} parentDiv\n         *        HTML parent element.\n         */\n        function addSearchBox(chart, parentDiv) {\n            const popup = this, lhsCol = parentDiv.querySelectorAll('.highcharts-popup-lhs-col')[0], options = 'searchIndicators', inputAttributes = {\n                value: '',\n                type: 'text',\n                htmlFor: 'search-indicators',\n                labelClassName: 'highcharts-input-search-indicators-label'\n            }, clearFilterText = this.lang.clearFilter, inputWrapper = createElement('div', {\n                className: 'highcharts-input-wrapper'\n            }, void 0, lhsCol);\n            const handleInputChange = function (inputText) {\n                // Apply some filters.\n                addIndicatorList.call(popup, chart, popup.container, 'add', inputText);\n            };\n            // Add input field with the label and button.\n            const input = this.addInput(options, 'input', inputWrapper, inputAttributes), button = createElement('a', {\n                textContent: clearFilterText\n            }, void 0, inputWrapper);\n            input.classList.add('highcharts-input-search-indicators');\n            button.classList.add('clear-filter-button');\n            // Add input change events.\n            addEvent(input, 'input', function () {\n                handleInputChange(this.value);\n                // Show clear filter button.\n                if (this.value.length) {\n                    button.style.display = 'inline-block';\n                }\n                else {\n                    button.style.display = 'none';\n                }\n            });\n            // Add clear filter click event.\n            ['click', 'touchstart'].forEach((eventName) => {\n                addEvent(button, eventName, function () {\n                    // Clear the input.\n                    input.value = '';\n                    handleInputChange('');\n                    // Hide clear filter button- no longer necessary.\n                    button.style.display = 'none';\n                });\n            });\n        }\n        /**\n         * Add selection HTML element and its' label.\n         *\n         * @private\n         *\n         * @param {string} indicatorType\n         * Type of the indicator i.e. sma, ema...\n         *\n         * @param {string} [optionName]\n         * Name of the option into which selection is being added.\n         *\n         * @param {HTMLDOMElement} [parentDiv]\n         * HTML parent element.\n         */\n        function addSelection(indicatorType, optionName, parentDiv) {\n            const optionParamList = optionName.split('.'), labelText = optionParamList[optionParamList.length - 1], selectName = 'highcharts-' + optionName + '-type-' + indicatorType, lang = this.lang;\n            // Add a label for the selection box.\n            createElement('label', {\n                htmlFor: selectName\n            }, null, parentDiv).appendChild(doc.createTextNode(lang[labelText] || optionName));\n            // Create a selection box.\n            const selectBox = createElement('select', {\n                name: selectName,\n                className: 'highcharts-popup-field',\n                id: 'highcharts-select-' + optionName\n            }, null, parentDiv);\n            selectBox.setAttribute('id', 'highcharts-select-' + optionName);\n            return selectBox;\n        }\n        /**\n         * Get and add selection options.\n         *\n         * @private\n         *\n         * @param {Highcharts.AnnotationChart} chart\n         *        The chart object.\n         *\n         * @param {string} [optionName]\n         *        Name of the option into which selection is being added.\n         *\n         * @param {HTMLSelectElement} [selectBox]\n         *        HTML select box element to which the options are being added.\n         *\n         * @param {string|undefined} indicatorType\n         *        Type of the indicator i.e. sma, ema...\n         *\n         * @param {string|undefined} parameterName\n         *        Name of the parameter which should be applied.\n         *\n         * @param {string|undefined} selectedOption\n         *        Default value in dropdown.\n         */\n        function addSelectionOptions(chart, optionName, selectBox, indicatorType, parameterName, selectedOption, currentSeries) {\n            // Get and apply selection options for the possible series.\n            if (optionName === 'series' || optionName === 'volume') {\n                // List all series which have id - mandatory for indicator.\n                chart.series.forEach((series) => {\n                    const seriesOptions = series.options, seriesName = seriesOptions.name ||\n                        seriesOptions.params ?\n                        series.name :\n                        seriesOptions.id || '';\n                    if (seriesOptions.id !== 'highcharts-navigator-series' &&\n                        seriesOptions.id !== (currentSeries &&\n                            currentSeries.options &&\n                            currentSeries.options.id)) {\n                        if (!defined(selectedOption) &&\n                            optionName === 'volume' &&\n                            series.type === 'column') {\n                            selectedOption = seriesOptions.id;\n                        }\n                        createElement('option', {\n                            value: seriesOptions.id\n                        }, void 0, selectBox).appendChild(doc.createTextNode(seriesName));\n                    }\n                });\n            }\n            else if (indicatorType && parameterName) {\n                // Get and apply options for the possible parameters.\n                const dropdownKey = parameterName + '-' + indicatorType, parameterOption = dropdownParameters[dropdownKey];\n                parameterOption.forEach((element) => {\n                    createElement('option', {\n                        value: element\n                    }, void 0, selectBox).appendChild(doc.createTextNode(element));\n                });\n            }\n            // Add the default dropdown value if defined.\n            if (defined(selectedOption)) {\n                selectBox.value = selectedOption;\n            }\n        }\n        /**\n         * Filter object of series which are not indicators.\n         * If the filter string exists, check against it.\n         *\n         * @private\n         *\n         * @param {Highcharts.FilteredSeries} series\n         *        All series are available in the plotOptions.\n         *\n         * @param {string|undefined} filter\n         *        Applied filter string from the input.\n         *        For the first iteration, it's an empty string.\n         *\n         * @return {Array<Highcharts.FilteredSeries>} filteredSeriesArray\n         *         Returns array of filtered series based on filter string.\n         */\n        function filterSeries(series, filter) {\n            const popup = this, lang = popup.chart && popup.chart.options.lang, indicatorAliases = lang &&\n                lang.navigation &&\n                lang.navigation.popup &&\n                lang.navigation.popup.indicatorAliases, filteredSeriesArray = [];\n            let filteredSeries;\n            objectEach(series, (series, value) => {\n                const seriesOptions = series && series.options;\n                // Allow only indicators.\n                if (series.params || seriesOptions &&\n                    seriesOptions.params) {\n                    const { indicatorFullName, indicatorType } = getNameType(series, value);\n                    if (filter) {\n                        // Replace invalid characters.\n                        const validFilter = filter.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n                        const regex = new RegExp(validFilter, 'i'), alias = indicatorAliases &&\n                            indicatorAliases[indicatorType] &&\n                            indicatorAliases[indicatorType].join(' ') || '';\n                        if (indicatorFullName.match(regex) ||\n                            alias.match(regex)) {\n                            filteredSeries = {\n                                indicatorFullName,\n                                indicatorType,\n                                series: series\n                            };\n                            filteredSeriesArray.push(filteredSeries);\n                        }\n                    }\n                    else {\n                        filteredSeries = {\n                            indicatorFullName,\n                            indicatorType,\n                            series: series\n                        };\n                        filteredSeriesArray.push(filteredSeries);\n                    }\n                }\n            });\n            return filteredSeriesArray;\n        }\n        /**\n         * Filter an array of series and map its names and types.\n         *\n         * @private\n         *\n         * @param {Highcharts.FilteredSeries} series\n         *        All series that are available in the plotOptions.\n         *\n         * @return {Array<Highcharts.FilteredSeries>} filteredSeriesArray\n         *         Returns array of filtered series based on filter string.\n         */\n        function filterSeriesArray(series) {\n            const filteredSeriesArray = [];\n            // Allow only indicators.\n            series.forEach((series) => {\n                if (series.is('sma')) {\n                    filteredSeriesArray.push({\n                        indicatorFullName: series.name,\n                        indicatorType: series.type,\n                        series: series\n                    });\n                }\n            });\n            return filteredSeriesArray;\n        }\n        /**\n         * Get amount of indicators added to chart.\n         * @private\n         * @return {number} - Amount of indicators\n         */\n        function getAmount() {\n            let counter = 0;\n            this.series.forEach((serie) => {\n                if (serie.params ||\n                    serie.options.params) {\n                    counter++;\n                }\n            });\n            return counter;\n        }\n        /**\n         * Extract full name and type of requested indicator.\n         *\n         * @private\n         *\n         * @param {Highcharts.Series} series\n         * Series which name is needed(EDITmode - defaultOptions.series,\n         * ADDmode - indicator series).\n         *\n         * @param {string} [indicatorType]\n         * Type of the indicator i.e. sma, ema...\n         *\n         * @return {Highcharts.Dictionary<string>}\n         * Full name and series type.\n         */\n        function getNameType(series, indicatorType) {\n            const options = series.options;\n            // Add mode\n            let seriesName = (seriesTypes[indicatorType] &&\n                seriesTypes[indicatorType].prototype.nameBase) ||\n                indicatorType.toUpperCase(), seriesType = indicatorType;\n            // Edit\n            if (options && options.type) {\n                seriesType = series.options.type;\n                seriesName = series.name;\n            }\n            return {\n                indicatorFullName: seriesName,\n                indicatorType: seriesType\n            };\n        }\n        /**\n         * Create the selection box for the series,\n         * add options and apply the default one.\n         *\n         * @private\n         *\n         * @param {string} indicatorType\n         *        Type of the indicator i.e. sma, ema...\n         *\n         * @param {string} [optionName]\n         *        Name of the option into which selection is being added.\n         *\n         * @param {Highcharts.AnnotationChart} chart\n         *        The chart object.\n         *\n         * @param {HTMLDOMElement} [parentDiv]\n         *        HTML parent element.\n         *\n         * @param {string|undefined} selectedOption\n         *        Default value in dropdown.\n         */\n        function listAllSeries(indicatorType, optionName, chart, parentDiv, currentSeries, selectedOption) {\n            const popup = this;\n            // Won't work without the chart.\n            if (!chart) {\n                return;\n            }\n            // Add selection boxes.\n            const selectBox = addSelection.call(popup, indicatorType, optionName, parentDiv);\n            // Add possible dropdown options.\n            addSelectionOptions.call(popup, chart, optionName, selectBox, void 0, void 0, void 0, currentSeries);\n            // Add the default dropdown value if defined.\n            if (defined(selectedOption)) {\n                selectBox.value = selectedOption;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const PopupIndicators = {\n            addForm,\n            getAmount\n        };\n\n        return PopupIndicators;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Popup/PopupTabs.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (H, U) {\n        /* *\n         *\n         *  Popup generator for Stock tools\n         *\n         *  (c) 2009-2024 Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { doc } = H;\n        const { addEvent, createElement } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Create tab content\n         * @private\n         * @return {HTMLDOMElement} - created HTML tab-content element\n         */\n        function addContentItem() {\n            const popupDiv = this.container;\n            return createElement('div', {\n                // #12100\n                className: 'highcharts-tab-item-content highcharts-no-mousewheel'\n            }, void 0, popupDiv);\n        }\n        /**\n         * Create tab menu item\n         * @private\n         * @param {string} tabName\n         * `add` or `edit`\n         * @param {number} [disableTab]\n         * Disable tab when 0\n         * @return {Highcharts.HTMLDOMElement}\n         * Created HTML tab-menu element\n         */\n        function addMenuItem(tabName, disableTab) {\n            const popupDiv = this.container, lang = this.lang;\n            let className = 'highcharts-tab-item';\n            if (disableTab === 0) {\n                className += ' highcharts-tab-disabled';\n            }\n            // Tab 1\n            const menuItem = createElement('button', {\n                className\n            }, void 0, popupDiv);\n            menuItem.appendChild(doc.createTextNode(lang[tabName + 'Button'] || tabName));\n            menuItem.setAttribute('highcharts-data-tab-type', tabName);\n            return menuItem;\n        }\n        /**\n         * Set all tabs as invisible.\n         * @private\n         */\n        function deselectAll() {\n            const popupDiv = this.container, tabs = popupDiv\n                .querySelectorAll('.highcharts-tab-item'), tabsContent = popupDiv\n                .querySelectorAll('.highcharts-tab-item-content');\n            for (let i = 0; i < tabs.length; i++) {\n                tabs[i].classList.remove('highcharts-tab-item-active');\n                tabsContent[i].classList.remove('highcharts-tab-item-show');\n            }\n        }\n        /**\n         * Init tabs. Create tab menu items, tabs containers\n         * @private\n         * @param {Highcharts.Chart} chart\n         * Reference to current chart\n         */\n        function init(chart) {\n            if (!chart) {\n                return;\n            }\n            const indicatorsCount = this.indicators.getAmount.call(chart);\n            // Create menu items\n            const firstTab = addMenuItem.call(this, 'add'); // Run by default\n            addMenuItem.call(this, 'edit', indicatorsCount);\n            // Create tabs containers\n            addContentItem.call(this);\n            addContentItem.call(this);\n            switchTabs.call(this, indicatorsCount);\n            // Activate first tab\n            selectTab.call(this, firstTab, 0);\n        }\n        /**\n         * Set tab as visible\n         * @private\n         * @param {globals.Element} - current tab\n         * @param {number} - Index of tab in menu\n         */\n        function selectTab(tab, index) {\n            const allTabs = this.container\n                .querySelectorAll('.highcharts-tab-item-content');\n            tab.className += ' highcharts-tab-item-active';\n            allTabs[index].className += ' highcharts-tab-item-show';\n        }\n        /**\n         * Add click event to each tab\n         * @private\n         * @param {number} disableTab\n         * Disable tab when 0\n         */\n        function switchTabs(disableTab) {\n            const popup = this, popupDiv = this.container, tabs = popupDiv.querySelectorAll('.highcharts-tab-item');\n            tabs.forEach((tab, i) => {\n                if (disableTab === 0 &&\n                    tab.getAttribute('highcharts-data-tab-type') === 'edit') {\n                    return;\n                }\n                ['click', 'touchstart'].forEach((eventName) => {\n                    addEvent(tab, eventName, function () {\n                        // Reset class on other elements\n                        deselectAll.call(popup);\n                        selectTab.call(popup, this, i);\n                    });\n                });\n            });\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const PopupTabs = {\n            init\n        };\n\n        return PopupTabs;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Popup/Popup.js', [_modules['Shared/BaseForm.js'], _modules['Core/Globals.js'], _modules['Core/Defaults.js'], _modules['Extensions/Annotations/Popup/PopupAnnotations.js'], _modules['Extensions/Annotations/Popup/PopupIndicators.js'], _modules['Extensions/Annotations/Popup/PopupTabs.js'], _modules['Core/Utilities.js']], function (BaseForm, H, D, PopupAnnotations, PopupIndicators, PopupTabs, U) {\n        /* *\n         *\n         *  Popup generator for Stock tools\n         *\n         *  (c) 2009-2024 Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { doc } = H;\n        const { getOptions } = D;\n        const { addEvent, createElement, extend, fireEvent, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Get values from all inputs and selections then create JSON.\n         *\n         * @private\n         *\n         * @param {Highcharts.HTMLDOMElement} parentDiv\n         * The container where inputs and selections are created.\n         *\n         * @param {string} type\n         * Type of the popup bookmark (add|edit|remove).\n         */\n        function getFields(parentDiv, type) {\n            const inputList = Array.prototype.slice.call(parentDiv.querySelectorAll('input')), selectList = Array.prototype.slice.call(parentDiv.querySelectorAll('select')), optionSeries = '#highcharts-select-series > option:checked', optionVolume = '#highcharts-select-volume > option:checked', linkedTo = parentDiv.querySelectorAll(optionSeries)[0], volumeTo = parentDiv.querySelectorAll(optionVolume)[0];\n            const fieldsOutput = {\n                actionType: type,\n                linkedTo: linkedTo && linkedTo.getAttribute('value') || '',\n                fields: {}\n            };\n            inputList.forEach((input) => {\n                const param = input.getAttribute('highcharts-data-name'), seriesId = input.getAttribute('highcharts-data-series-id');\n                // Params\n                if (seriesId) {\n                    fieldsOutput.seriesId = input.value;\n                }\n                else if (param) {\n                    fieldsOutput.fields[param] = input.value;\n                }\n                else {\n                    // Type like sma / ema\n                    fieldsOutput.type = input.value;\n                }\n            });\n            selectList.forEach((select) => {\n                const id = select.id;\n                // Get inputs only for the parameters, not for series and volume.\n                if (id !== 'highcharts-select-series' &&\n                    id !== 'highcharts-select-volume') {\n                    const parameter = id.split('highcharts-select-')[1];\n                    fieldsOutput.fields[parameter] = select.value;\n                }\n            });\n            if (volumeTo) {\n                fieldsOutput.fields['params.volumeSeriesID'] = volumeTo\n                    .getAttribute('value') || '';\n            }\n            return fieldsOutput;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class Popup extends BaseForm {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(parentDiv, iconsURL, chart) {\n                super(parentDiv, iconsURL);\n                this.chart = chart;\n                this.lang = (getOptions().lang.navigation || {}).popup || {};\n                addEvent(this.container, 'mousedown', () => {\n                    const activeAnnotation = chart &&\n                        chart.navigationBindings &&\n                        chart.navigationBindings.activeAnnotation;\n                    if (activeAnnotation) {\n                        activeAnnotation.cancelClick = true;\n                        const unbind = addEvent(doc, 'click', () => {\n                            setTimeout(() => {\n                                activeAnnotation.cancelClick = false;\n                            }, 0);\n                            unbind();\n                        });\n                    }\n                });\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Create input with label.\n             *\n             * @private\n             *\n             * @param {string} option\n             *        Chain of fields i.e params.styles.fontSize separated by the dot.\n             *\n             * @param {string} indicatorType\n             *        Type of the indicator i.e. sma, ema...\n             *\n             * @param {HTMLDOMElement} parentDiv\n             *        HTML parent element.\n             *\n             * @param {Highcharts.InputAttributes} inputAttributes\n             *        Attributes of the input.\n             *\n             * @return {HTMLInputElement}\n             *         Return created input element.\n             */\n            addInput(option, indicatorType, parentDiv, inputAttributes) {\n                const optionParamList = option.split('.'), optionName = optionParamList[optionParamList.length - 1], lang = this.lang, inputName = 'highcharts-' + indicatorType + '-' + pick(inputAttributes.htmlFor, optionName);\n                if (!optionName.match(/^\\d+$/)) {\n                    // Add label\n                    createElement('label', {\n                        htmlFor: inputName,\n                        className: inputAttributes.labelClassName\n                    }, void 0, parentDiv).appendChild(doc.createTextNode(lang[optionName] || optionName));\n                }\n                // Add input\n                const input = createElement('input', {\n                    name: inputName,\n                    value: inputAttributes.value,\n                    type: inputAttributes.type,\n                    className: 'highcharts-popup-field'\n                }, void 0, parentDiv);\n                input.setAttribute('highcharts-data-name', option);\n                return input;\n            }\n            closeButtonEvents() {\n                if (this.chart) {\n                    const navigationBindings = this.chart.navigationBindings;\n                    fireEvent(navigationBindings, 'closePopup');\n                    if (navigationBindings &&\n                        navigationBindings.selectedButtonElement) {\n                        fireEvent(navigationBindings, 'deselectButton', { button: navigationBindings.selectedButtonElement });\n                    }\n                }\n                else {\n                    super.closeButtonEvents();\n                }\n            }\n            /**\n             * Create button.\n             * @private\n             * @param {Highcharts.HTMLDOMElement} parentDiv\n             * Container where elements should be added\n             * @param {string} label\n             * Text placed as button label\n             * @param {string} type\n             * add | edit | remove\n             * @param {Function} callback\n             * On click callback\n             * @param {Highcharts.HTMLDOMElement} fieldsDiv\n             * Container where inputs are generated\n             * @return {Highcharts.HTMLDOMElement}\n             * HTML button\n             */\n            addButton(parentDiv, label, type, fieldsDiv, callback) {\n                const button = createElement('button', void 0, void 0, parentDiv);\n                button.appendChild(doc.createTextNode(label));\n                if (callback) {\n                    ['click', 'touchstart'].forEach((eventName) => {\n                        addEvent(button, eventName, () => {\n                            this.closePopup();\n                            return callback(getFields(fieldsDiv, type));\n                        });\n                    });\n                }\n                return button;\n            }\n            /**\n             * Create content and show popup.\n             * @private\n             * @param {string} - type of popup i.e indicators\n             * @param {Highcharts.Chart} - chart\n             * @param {Highcharts.AnnotationsOptions} - options\n             * @param {Function} - on click callback\n             */\n            showForm(type, chart, options, callback) {\n                if (!chart) {\n                    return;\n                }\n                // Show blank popup\n                this.showPopup();\n                // Indicator form\n                if (type === 'indicators') {\n                    this.indicators.addForm.call(this, chart, options, callback);\n                }\n                // Annotation small toolbar\n                if (type === 'annotation-toolbar') {\n                    this.annotations.addToolbar.call(this, chart, options, callback);\n                }\n                // Annotation edit form\n                if (type === 'annotation-edit') {\n                    this.annotations.addForm.call(this, chart, options, callback);\n                }\n                // Flags form - add / edit\n                if (type === 'flag') {\n                    this.annotations.addForm.call(this, chart, options, callback, true);\n                }\n                this.type = type;\n                // Explicit height is needed to make inner elements scrollable\n                this.container.style.height = this.container.offsetHeight + 'px';\n            }\n        }\n        extend(Popup.prototype, {\n            annotations: PopupAnnotations,\n            indicators: PopupIndicators,\n            tabs: PopupTabs\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return Popup;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Popup/PopupComposition.js', [_modules['Core/Globals.js'], _modules['Extensions/Annotations/Popup/Popup.js'], _modules['Core/Utilities.js']], function (H, Popup, U) {\n        /* *\n         *\n         *  Popup generator for Stock tools\n         *\n         *  (c) 2009-2024 Sebastian Bochan\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { composed } = H;\n        const { addEvent, pushUnique, wrap } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function compose(NagivationBindingsClass, PointerClass) {\n            if (pushUnique(composed, 'Popup')) {\n                addEvent(NagivationBindingsClass, 'closePopup', onNavigationBindingsClosePopup);\n                addEvent(NagivationBindingsClass, 'showPopup', onNavigationBindingsShowPopup);\n                wrap(PointerClass.prototype, 'onContainerMouseDown', wrapPointerOnContainerMouserDown);\n            }\n        }\n        /**\n         * @private\n         */\n        function onNavigationBindingsClosePopup() {\n            if (this.popup) {\n                this.popup.closePopup();\n            }\n        }\n        /**\n         * @private\n         */\n        function onNavigationBindingsShowPopup(config) {\n            if (!this.popup) {\n                // Add popup to main container\n                this.popup = new Popup(this.chart.container, (this.chart.options.navigation.iconsURL ||\n                    (this.chart.options.stockTools &&\n                        this.chart.options.stockTools.gui.iconsURL) ||\n                    'https://code.highcharts.com/11.4.8/gfx/stock-icons/'), this.chart);\n            }\n            this.popup.showForm(config.formType, this.chart, config.options, config.onSubmit);\n        }\n        /**\n         * `onContainerMouseDown` blocks internal popup events, due to e.preventDefault.\n         * Related issue #4606\n         * @private\n         */\n        function wrapPointerOnContainerMouserDown(proceed, e) {\n            // Elements is not in popup\n            if (!this.inClass(e.target, 'highcharts-popup')) {\n                proceed.apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const PopupComposition = {\n            compose\n        };\n\n        return PopupComposition;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/Annotation.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Extensions/Annotations/AnnotationChart.js'], _modules['Extensions/Annotations/AnnotationDefaults.js'], _modules['Extensions/Annotations/Controllables/ControllableRect.js'], _modules['Extensions/Annotations/Controllables/ControllableCircle.js'], _modules['Extensions/Annotations/Controllables/ControllableEllipse.js'], _modules['Extensions/Annotations/Controllables/ControllablePath.js'], _modules['Extensions/Annotations/Controllables/ControllableImage.js'], _modules['Extensions/Annotations/Controllables/ControllableLabel.js'], _modules['Extensions/Annotations/ControlPoint.js'], _modules['Extensions/Annotations/ControlTarget.js'], _modules['Extensions/Annotations/EventEmitter.js'], _modules['Extensions/Annotations/MockPoint.js'], _modules['Extensions/Annotations/Popup/PopupComposition.js'], _modules['Core/Utilities.js']], function (A, AnnotationChart, AnnotationDefaults, ControllableRect, ControllableCircle, ControllableEllipse, ControllablePath, ControllableImage, ControllableLabel, ControlPoint, ControlTarget, EventEmitter, MockPoint, PopupComposition, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft, Black Label\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { getDeferredAnimation } = A;\n        const { destroyObjectProperties, erase, fireEvent, merge, pick, splat } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Hide or show annotation attached to points.\n         * @private\n         */\n        function adjustVisibility(item) {\n            const label = item.graphic, hasVisiblePoints = item.points.some((point) => (point.series.visible !== false &&\n                point.visible !== false));\n            if (label) {\n                if (!hasVisiblePoints) {\n                    label.hide();\n                }\n                else if (label.visibility === 'hidden') {\n                    label.show();\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function getLabelsAndShapesOptions(baseOptions, newOptions) {\n            const mergedOptions = {};\n            ['labels', 'shapes'].forEach((name) => {\n                const someBaseOptions = baseOptions[name];\n                if (someBaseOptions) {\n                    if (newOptions[name]) {\n                        mergedOptions[name] = splat(newOptions[name]).map(function (basicOptions, i) {\n                            return merge(someBaseOptions[i], basicOptions);\n                        });\n                    }\n                    else {\n                        mergedOptions[name] = baseOptions[name];\n                    }\n                }\n            });\n            return mergedOptions;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * An annotation class which serves as a container for items like labels or\n         * shapes. Created items are positioned on the chart either by linking them to\n         * existing points or created mock points\n         *\n         * @requires modules/annotations\n         *\n         * @class\n         * @name Highcharts.Annotation\n         *\n         * @param {Highcharts.Chart} chart\n         *        A chart instance\n         * @param {Highcharts.AnnotationsOptions} userOptions\n         *        The annotation options\n         */\n        class Annotation extends EventEmitter {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(ChartClass, NavigationBindingsClass, PointerClass, SVGRendererClass) {\n                AnnotationChart.compose(Annotation, ChartClass, PointerClass);\n                ControllableLabel.compose(SVGRendererClass);\n                ControllablePath.compose(ChartClass, SVGRendererClass);\n                NavigationBindingsClass.compose(Annotation, ChartClass);\n                PopupComposition.compose(NavigationBindingsClass, PointerClass);\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            constructor(chart, userOptions) {\n                super();\n                this.coll = 'annotations';\n                /**\n                 * The chart that the annotation belongs to.\n                 *\n                 * @name Highcharts.Annotation#chart\n                 * @type {Highcharts.Chart}\n                 */\n                this.chart = chart;\n                /**\n                 * The array of points which defines the annotation.\n                 * @private\n                 * @name Highcharts.Annotation#points\n                 * @type {Array<Highcharts.Point>}\n                 */\n                this.points = [];\n                /**\n                 * The array of control points.\n                 * @private\n                 * @name Highcharts.Annotation#controlPoints\n                 * @type {Array<Annotation.ControlPoint>}\n                 */\n                this.controlPoints = [];\n                this.coll = 'annotations';\n                this.index = -1;\n                /**\n                 * The array of labels which belong to the annotation.\n                 * @private\n                 * @name Highcharts.Annotation#labels\n                 * @type {Array<Highcharts.AnnotationLabelType>}\n                 */\n                this.labels = [];\n                /**\n                 * The array of shapes which belong to the annotation.\n                 * @private\n                 * @name Highcharts.Annotation#shapes\n                 * @type {Array<Highcharts.AnnotationShapeType>}\n                 */\n                this.shapes = [];\n                /**\n                 * The options for the annotations.\n                 *\n                 * @name Highcharts.Annotation#options\n                 * @type {Highcharts.AnnotationsOptions}\n                 */\n                this.options = merge(this.defaultOptions, userOptions);\n                /**\n                 * The user options for the annotations.\n                 *\n                 * @name Highcharts.Annotation#userOptions\n                 * @type {Highcharts.AnnotationsOptions}\n                 */\n                this.userOptions = userOptions;\n                // Handle labels and shapes - those are arrays\n                // Merging does not work with arrays (stores reference)\n                const labelsAndShapes = getLabelsAndShapesOptions(this.options, userOptions);\n                this.options.labels = labelsAndShapes.labels;\n                this.options.shapes = labelsAndShapes.shapes;\n                /**\n                 * The callback that reports to the overlapping-labels module which\n                 * labels it should account for.\n                 * @private\n                 * @name Highcharts.Annotation#labelCollector\n                 * @type {Function}\n                 */\n                /**\n                 * The group svg element.\n                 *\n                 * @name Highcharts.Annotation#group\n                 * @type {Highcharts.SVGElement}\n                 */\n                /**\n                 * The group svg element of the annotation's shapes.\n                 *\n                 * @name Highcharts.Annotation#shapesGroup\n                 * @type {Highcharts.SVGElement}\n                 */\n                /**\n                 * The group svg element of the annotation's labels.\n                 *\n                 * @name Highcharts.Annotation#labelsGroup\n                 * @type {Highcharts.SVGElement}\n                 */\n                this.init(chart, this.options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            addClipPaths() {\n                this.setClipAxes();\n                if (this.clipXAxis &&\n                    this.clipYAxis &&\n                    this.options.crop // #15399\n                ) {\n                    this.clipRect = this.chart.renderer.clipRect(this.getClipBox());\n                }\n            }\n            /**\n             * @private\n             */\n            addLabels() {\n                const labelsOptions = (this.options.labels || []);\n                labelsOptions.forEach((labelOptions, i) => {\n                    const label = this.initLabel(labelOptions, i);\n                    merge(true, labelsOptions[i], label.options);\n                });\n            }\n            /**\n             * @private\n             */\n            addShapes() {\n                const shapes = this.options.shapes || [];\n                shapes.forEach((shapeOptions, i) => {\n                    const shape = this.initShape(shapeOptions, i);\n                    merge(true, shapes[i], shape.options);\n                });\n            }\n            /**\n             * Destroy the annotation. This function does not touch the chart\n             * that the annotation belongs to (all annotations are kept in\n             * the chart.annotations array) - it is recommended to use\n             * {@link Highcharts.Chart#removeAnnotation} instead.\n             * @private\n             */\n            destroy() {\n                const chart = this.chart, destroyItem = function (item) {\n                    item.destroy();\n                };\n                this.labels.forEach(destroyItem);\n                this.shapes.forEach(destroyItem);\n                this.clipXAxis = null;\n                this.clipYAxis = null;\n                erase(chart.labelCollectors, this.labelCollector);\n                super.destroy();\n                this.destroyControlTarget();\n                destroyObjectProperties(this, chart);\n            }\n            /**\n             * Destroy a single item.\n             * @private\n             */\n            destroyItem(item) {\n                // Erase from shapes or labels array\n                erase(this[item.itemType + 's'], item);\n                item.destroy();\n            }\n            /**\n             * @private\n             */\n            getClipBox() {\n                if (this.clipXAxis && this.clipYAxis) {\n                    return {\n                        x: this.clipXAxis.left,\n                        y: this.clipYAxis.top,\n                        width: this.clipXAxis.width,\n                        height: this.clipYAxis.height\n                    };\n                }\n            }\n            /**\n             * Initialize the annotation properties.\n             * @private\n             */\n            initProperties(chart, userOptions) {\n                this.setOptions(userOptions);\n                const labelsAndShapes = getLabelsAndShapesOptions(this.options, userOptions);\n                this.options.labels = labelsAndShapes.labels;\n                this.options.shapes = labelsAndShapes.shapes;\n                this.chart = chart;\n                this.points = [];\n                this.controlPoints = [];\n                this.coll = 'annotations';\n                this.userOptions = userOptions;\n                this.labels = [];\n                this.shapes = [];\n            }\n            /**\n             * Initialize the annotation.\n             * @private\n             */\n            init(_annotationOrChart, _userOptions, index = this.index) {\n                const chart = this.chart, animOptions = this.options.animation;\n                this.index = index;\n                this.linkPoints();\n                this.addControlPoints();\n                this.addShapes();\n                this.addLabels();\n                this.setLabelCollector();\n                this.animationConfig = getDeferredAnimation(chart, animOptions);\n            }\n            /**\n             * Initialisation of a single label\n             * @private\n             */\n            initLabel(labelOptions, index) {\n                const options = merge(this.options.labelOptions, {\n                    controlPointOptions: this.options.controlPointOptions\n                }, labelOptions), label = new ControllableLabel(this, options, index);\n                label.itemType = 'label';\n                this.labels.push(label);\n                return label;\n            }\n            /**\n             * Initialisation of a single shape\n             * @private\n             * @param {Object} shapeOptions\n             * a config object for a single shape\n             * @param {number} index\n             * annotation may have many shapes, this is the shape's index saved in\n             * shapes.index.\n             */\n            initShape(shapeOptions, index) {\n                const options = merge(this.options.shapeOptions, {\n                    controlPointOptions: this.options.controlPointOptions\n                }, shapeOptions), shape = new (Annotation.shapesMap[options.type])(this, options, index);\n                shape.itemType = 'shape';\n                this.shapes.push(shape);\n                return shape;\n            }\n            /**\n             * @private\n             */\n            redraw(animation) {\n                this.linkPoints();\n                if (!this.graphic) {\n                    this.render();\n                }\n                if (this.clipRect) {\n                    this.clipRect.animate(this.getClipBox());\n                }\n                this.redrawItems(this.shapes, animation);\n                this.redrawItems(this.labels, animation);\n                this.redrawControlPoints(animation);\n            }\n            /**\n             * Redraw a single item.\n             * @private\n             */\n            redrawItem(item, animation) {\n                item.linkPoints();\n                if (!item.shouldBeDrawn()) {\n                    this.destroyItem(item);\n                }\n                else {\n                    if (!item.graphic) {\n                        this.renderItem(item);\n                    }\n                    item.redraw(pick(animation, true) && item.graphic.placed);\n                    if (item.points.length) {\n                        adjustVisibility(item);\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            redrawItems(items, animation) {\n                let i = items.length;\n                // Needs a backward loop. Labels/shapes array might be modified due to\n                // destruction of the item\n                while (i--) {\n                    this.redrawItem(items[i], animation);\n                }\n            }\n            /**\n             * See {@link Highcharts.Chart#removeAnnotation}.\n             * @private\n             */\n            remove() {\n                // Let chart.update() remove annotations on demand\n                return this.chart.removeAnnotation(this);\n            }\n            /**\n             * @private\n             */\n            render() {\n                const renderer = this.chart.renderer;\n                this.graphic = renderer\n                    .g('annotation')\n                    .attr({\n                    opacity: 0,\n                    zIndex: this.options.zIndex,\n                    visibility: this.options.visible ?\n                        'inherit' :\n                        'hidden'\n                })\n                    .add();\n                this.shapesGroup = renderer\n                    .g('annotation-shapes')\n                    .add(this.graphic);\n                if (this.options.crop) { // #15399\n                    this.shapesGroup.clip(this.chart.plotBoxClip);\n                }\n                this.labelsGroup = renderer\n                    .g('annotation-labels')\n                    .attr({\n                    // `hideOverlappingLabels` requires translation\n                    translateX: 0,\n                    translateY: 0\n                })\n                    .add(this.graphic);\n                this.addClipPaths();\n                if (this.clipRect) {\n                    this.graphic.clip(this.clipRect);\n                }\n                // Render shapes and labels before adding events (#13070).\n                this.renderItems(this.shapes);\n                this.renderItems(this.labels);\n                this.addEvents();\n                this.renderControlPoints();\n            }\n            /**\n             * @private\n             */\n            renderItem(item) {\n                item.render(item.itemType === 'label' ?\n                    this.labelsGroup :\n                    this.shapesGroup);\n            }\n            /**\n             * @private\n             */\n            renderItems(items) {\n                let i = items.length;\n                while (i--) {\n                    this.renderItem(items[i]);\n                }\n            }\n            /**\n             * @private\n             */\n            setClipAxes() {\n                const xAxes = this.chart.xAxis, yAxes = this.chart.yAxis, linkedAxes = (this.options.labels || [])\n                    .concat(this.options.shapes || [])\n                    .reduce((axes, labelOrShape) => {\n                    const point = labelOrShape &&\n                        (labelOrShape.point ||\n                            (labelOrShape.points && labelOrShape.points[0]));\n                    return [\n                        xAxes[point && point.xAxis] || axes[0],\n                        yAxes[point && point.yAxis] || axes[1]\n                    ];\n                }, []);\n                this.clipXAxis = linkedAxes[0];\n                this.clipYAxis = linkedAxes[1];\n            }\n            /**\n             * @private\n             */\n            setControlPointsVisibility(visible) {\n                const setItemControlPointsVisibility = function (item) {\n                    item.setControlPointsVisibility(visible);\n                };\n                this.controlPoints.forEach((controlPoint) => {\n                    controlPoint.setVisibility(visible);\n                });\n                this.shapes.forEach(setItemControlPointsVisibility);\n                this.labels.forEach(setItemControlPointsVisibility);\n            }\n            /**\n             * @private\n             */\n            setLabelCollector() {\n                const annotation = this;\n                annotation.labelCollector = function () {\n                    return annotation.labels.reduce(function (labels, label) {\n                        if (!label.options.allowOverlap) {\n                            labels.push(label.graphic);\n                        }\n                        return labels;\n                    }, []);\n                };\n                annotation.chart.labelCollectors.push(annotation.labelCollector);\n            }\n            /**\n             * Set an annotation options.\n             * @private\n             * @param {Highcharts.AnnotationsOptions} userOptions\n             *        User options for an annotation\n             */\n            setOptions(userOptions) {\n                this.options = merge(this.defaultOptions, userOptions);\n            }\n            /**\n             * Set the annotation's visibility.\n             * @private\n             * @param {boolean} [visible]\n             * Whether to show or hide an annotation. If the param is omitted, the\n             * annotation's visibility is toggled.\n             */\n            setVisibility(visible) {\n                const options = this.options, navigation = this.chart.navigationBindings, visibility = pick(visible, !options.visible);\n                this.graphic.attr('visibility', visibility ? 'inherit' : 'hidden');\n                if (!visibility) {\n                    const setItemControlPointsVisibility = function (item) {\n                        item.setControlPointsVisibility(visibility);\n                    };\n                    this.shapes.forEach(setItemControlPointsVisibility);\n                    this.labels.forEach(setItemControlPointsVisibility);\n                    if (navigation.activeAnnotation === this &&\n                        navigation.popup &&\n                        navigation.popup.type === 'annotation-toolbar') {\n                        fireEvent(navigation, 'closePopup');\n                    }\n                }\n                options.visible = visibility;\n            }\n            /**\n             * Updates an annotation.\n             *\n             * @function Highcharts.Annotation#update\n             *\n             * @param {Partial<Highcharts.AnnotationsOptions>} userOptions\n             *        New user options for the annotation.\n             *\n             */\n            update(userOptions, redraw) {\n                const chart = this.chart, labelsAndShapes = getLabelsAndShapesOptions(this.userOptions, userOptions), userOptionsIndex = chart.annotations.indexOf(this), options = merge(true, this.userOptions, userOptions);\n                options.labels = labelsAndShapes.labels;\n                options.shapes = labelsAndShapes.shapes;\n                this.destroy();\n                this.initProperties(chart, options);\n                this.init(chart, options);\n                // Update options in chart options, used in exporting (#9767, #21507):\n                chart.options.annotations[userOptionsIndex] = this.options;\n                this.isUpdating = true;\n                if (pick(redraw, true)) {\n                    chart.drawAnnotations();\n                }\n                fireEvent(this, 'afterUpdate');\n                this.isUpdating = false;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * @private\n         */\n        Annotation.ControlPoint = ControlPoint;\n        /**\n         * @private\n         */\n        Annotation.MockPoint = MockPoint;\n        /**\n         * An object uses for mapping between a shape type and a constructor.\n         * To add a new shape type extend this object with type name as a key\n         * and a constructor as its value.\n         *\n         * @private\n         */\n        Annotation.shapesMap = {\n            'rect': ControllableRect,\n            'circle': ControllableCircle,\n            'ellipse': ControllableEllipse,\n            'path': ControllablePath,\n            'image': ControllableImage\n        };\n        /**\n         * @private\n         */\n        Annotation.types = {};\n        Annotation.prototype.defaultOptions = AnnotationDefaults;\n        /**\n         * List of events for `annotation.options.events` that should not be\n         * added to `annotation.graphic` but to the `annotation`.\n         *\n         * @private\n         * @type {Array<string>}\n         */\n        Annotation.prototype.nonDOMEvents = ['add', 'afterUpdate', 'drag', 'remove'];\n        ControlTarget.compose(Annotation);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Possible directions for draggable annotations. An empty string (`''`)\n         * makes the annotation undraggable.\n         *\n         * @typedef {''|'x'|'xy'|'y'} Highcharts.AnnotationDraggableValue\n         * @requires modules/annotations\n         */\n        /**\n         * @private\n         * @typedef {\n         *          Highcharts.AnnotationControllableCircle|\n         *          Highcharts.AnnotationControllableImage|\n         *          Highcharts.AnnotationControllablePath|\n         *          Highcharts.AnnotationControllableRect\n         *     } Highcharts.AnnotationShapeType\n         * @requires modules/annotations\n         */\n        /**\n         * @private\n         * @typedef {\n         *          Highcharts.AnnotationControllableLabel\n         *     } Highcharts.AnnotationLabelType\n         * @requires modules/annotations\n         */\n        /**\n         * A point-like object, a mock point or a point used in series.\n         * @private\n         * @typedef {\n         *          Highcharts.AnnotationMockPoint|\n         *          Highcharts.Point\n         *     } Highcharts.AnnotationPointType\n         * @requires modules/annotations\n         */\n        /**\n         * Shape point as string, object or function.\n         *\n         * @typedef {\n         *          string|\n         *          Highcharts.AnnotationMockPointOptionsObject|\n         *          Highcharts.AnnotationMockPointFunction\n         *     } Highcharts.AnnotationShapePointOptions\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Annotation;\n    });\n    _registerModule(_modules, 'Core/Chart/ChartNavigationComposition.js', [], function () {\n        /**\n         *\n         *  (c) 2010-2024 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ChartNavigationComposition;\n        (function (ChartNavigationComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(chart) {\n                if (!chart.navigation) {\n                    chart.navigation = new Additions(chart);\n                }\n                return chart;\n            }\n            ChartNavigationComposition.compose = compose;\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Initializes `chart.navigation` object which delegates `update()` methods\n             * to all other common classes (used in exporting and navigationBindings).\n             * @private\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Constructor\n                 *\n                 * */\n                constructor(chart) {\n                    this.updates = [];\n                    this.chart = chart;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Registers an `update()` method in the `chart.navigation` object.\n                 *\n                 * @private\n                 * @param {UpdateFunction} updateFn\n                 * The `update()` method that will be called in `chart.update()`.\n                 */\n                addUpdate(updateFn) {\n                    this.chart.navigation.updates.push(updateFn);\n                }\n                /**\n                 * @private\n                 */\n                update(options, redraw) {\n                    this.updates.forEach((updateFn) => {\n                        updateFn.call(this.chart, options, redraw);\n                    });\n                }\n            }\n            ChartNavigationComposition.Additions = Additions;\n        })(ChartNavigationComposition || (ChartNavigationComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartNavigationComposition;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/NavigationBindingsUtilities.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft, Black Label\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { defined, isNumber, pick } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Define types for editable fields per annotation. There is no need to define\n         * numbers, because they won't change their type to string.\n         * @private\n         */\n        const annotationsFieldsTypes = {\n            backgroundColor: 'string',\n            borderColor: 'string',\n            borderRadius: 'string',\n            color: 'string',\n            fill: 'string',\n            fontSize: 'string',\n            labels: 'string',\n            name: 'string',\n            stroke: 'string',\n            title: 'string'\n        };\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Returns the first xAxis or yAxis that was clicked with its value.\n         *\n         * @private\n         *\n         * @param {Array<Highcharts.PointerAxisCoordinateObject>} coords\n         *        All the chart's x or y axes with a current pointer's axis value.\n         *\n         * @return {Highcharts.PointerAxisCoordinateObject}\n         *         Object with a first found axis and its value that pointer\n         *         is currently pointing.\n         */\n        function getAssignedAxis(coords) {\n            return coords.filter((coord) => {\n                const extremes = coord.axis.getExtremes(), axisMin = extremes.min, axisMax = extremes.max, \n                // Correct axis edges when axis has series\n                // with pointRange (like column)\n                minPointOffset = pick(coord.axis.minPointOffset, 0);\n                return isNumber(axisMin) && isNumber(axisMax) &&\n                    coord.value >= (axisMin - minPointOffset) &&\n                    coord.value <= (axisMax + minPointOffset) &&\n                    // Don't count navigator axis\n                    !coord.axis.options.isInternal;\n            })[0]; // If the axes overlap, return the first axis that was found.\n        }\n        /**\n         * Get field type according to value\n         *\n         * @private\n         *\n         * @param {'boolean'|'number'|'string'} value\n         * Atomic type (one of: string, number, boolean)\n         *\n         * @return {'checkbox'|'number'|'text'}\n         * Field type (one of: text, number, checkbox)\n         */\n        function getFieldType(key, value) {\n            const predefinedType = annotationsFieldsTypes[key];\n            let fieldType = typeof value;\n            if (defined(predefinedType)) {\n                fieldType = predefinedType;\n            }\n            return {\n                'string': 'text',\n                'number': 'number',\n                'boolean': 'checkbox'\n            }[fieldType];\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigationBindingUtilities = {\n            annotationsFieldsTypes,\n            getAssignedAxis,\n            getFieldType\n        };\n\n        return NavigationBindingUtilities;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/NavigationBindingsDefaults.js', [_modules['Extensions/Annotations/NavigationBindingsUtilities.js'], _modules['Core/Utilities.js']], function (NBU, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft, Black Label\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { getAssignedAxis } = NBU;\n        const { isNumber, merge } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * @optionparent lang\n         */\n        const lang = {\n            /**\n             * Configure the Popup strings in the chart. Requires the\n             * `annotations.js` or `annotations-advanced.src.js` module to be\n             * loaded.\n             * @since   7.0.0\n             * @product highcharts highstock\n             */\n            navigation: {\n                /**\n                 * Translations for all field names used in popup.\n                 *\n                 * @product highcharts highstock\n                 */\n                popup: {\n                    simpleShapes: 'Simple shapes',\n                    lines: 'Lines',\n                    circle: 'Circle',\n                    ellipse: 'Ellipse',\n                    rectangle: 'Rectangle',\n                    label: 'Label',\n                    shapeOptions: 'Shape options',\n                    typeOptions: 'Details',\n                    fill: 'Fill',\n                    format: 'Text',\n                    strokeWidth: 'Line width',\n                    stroke: 'Line color',\n                    title: 'Title',\n                    name: 'Name',\n                    labelOptions: 'Label options',\n                    labels: 'Labels',\n                    backgroundColor: 'Background color',\n                    backgroundColors: 'Background colors',\n                    borderColor: 'Border color',\n                    borderRadius: 'Border radius',\n                    borderWidth: 'Border width',\n                    style: 'Style',\n                    padding: 'Padding',\n                    fontSize: 'Font size',\n                    color: 'Color',\n                    height: 'Height',\n                    shapes: 'Shape options'\n                }\n            }\n        };\n        /**\n         * @optionparent navigation\n         * @product      highcharts highstock\n         */\n        const navigation = {\n            /**\n             * A CSS class name where all bindings will be attached to. Multiple\n             * charts on the same page should have separate class names to prevent\n             * duplicating events.\n             *\n             * Default value of versions < 7.0.4 `highcharts-bindings-wrapper`\n             *\n             * @since     7.0.0\n             * @type      {string}\n             */\n            bindingsClassName: 'highcharts-bindings-container',\n            /**\n             * Bindings definitions for custom HTML buttons. Each binding implements\n             * simple event-driven interface:\n             *\n             * - `className`: classname used to bind event to\n             *\n             * - `init`: initial event, fired on button click\n             *\n             * - `start`: fired on first click on a chart\n             *\n             * - `steps`: array of sequential events fired one after another on each\n             *   of users clicks\n             *\n             * - `end`: last event to be called after last step event\n             *\n             * @type         {Highcharts.Dictionary<Highcharts.NavigationBindingsOptionsObject>|*}\n             *\n             * @sample {highstock} stock/stocktools/stocktools-thresholds\n             *               Custom bindings\n             * @sample {highcharts} highcharts/annotations/bindings/\n             *               Simple binding\n             * @sample {highcharts} highcharts/annotations/bindings-custom-annotation/\n             *               Custom annotation binding\n             *\n             * @since        7.0.0\n             * @requires     modules/annotations\n             * @product      highcharts highstock\n             */\n            bindings: {\n                /**\n                 * A circle annotation bindings. Includes `start` and one event in\n                 * `steps` array.\n                 *\n                 * @type    {Highcharts.NavigationBindingsOptionsObject}\n                 * @default {\"className\": \"highcharts-circle-annotation\", \"start\": function() {}, \"steps\": [function() {}], \"annotationsOptions\": {}}\n                 */\n                circleAnnotation: {\n                    /** @ignore-option */\n                    className: 'highcharts-circle-annotation',\n                    /** @ignore-option */\n                    start: function (e) {\n                        const coords = this.chart.pointer?.getCoordinates(e), coordsX = coords && getAssignedAxis(coords.xAxis), coordsY = coords && getAssignedAxis(coords.yAxis), navigation = this.chart.options.navigation;\n                        // Exit if clicked out of axes area\n                        if (!coordsX || !coordsY) {\n                            return;\n                        }\n                        return this.chart.addAnnotation(merge({\n                            langKey: 'circle',\n                            type: 'basicAnnotation',\n                            shapes: [{\n                                    type: 'circle',\n                                    point: {\n                                        x: coordsX.value,\n                                        y: coordsY.value,\n                                        xAxis: coordsX.axis.index,\n                                        yAxis: coordsY.axis.index\n                                    },\n                                    r: 5\n                                }]\n                        }, navigation.annotationsOptions, navigation.bindings.circleAnnotation\n                            .annotationsOptions));\n                    },\n                    /** @ignore-option */\n                    steps: [\n                        function (e, annotation) {\n                            const shapes = annotation.options.shapes, mockPointOpts = ((shapes && shapes[0] && shapes[0].point) ||\n                                {});\n                            let distance;\n                            if (isNumber(mockPointOpts.xAxis) &&\n                                isNumber(mockPointOpts.yAxis)) {\n                                const inverted = this.chart.inverted, x = this.chart.xAxis[mockPointOpts.xAxis]\n                                    .toPixels(mockPointOpts.x), y = this.chart.yAxis[mockPointOpts.yAxis]\n                                    .toPixels(mockPointOpts.y);\n                                distance = Math.max(Math.sqrt(Math.pow(inverted ? y - e.chartX : x - e.chartX, 2) +\n                                    Math.pow(inverted ? x - e.chartY : y - e.chartY, 2)), 5);\n                            }\n                            annotation.update({\n                                shapes: [{\n                                        r: distance\n                                    }]\n                            });\n                        }\n                    ]\n                },\n                /**\n                 * A ellipse annotation bindings. Includes `start` and two events in\n                 * `steps` array. First updates the second point, responsible for a\n                 * rx width, and second updates the ry width.\n                 *\n                 * @type    {Highcharts.NavigationBindingsOptionsObject}\n                 * @default {\"className\": \"highcharts-ellipse-annotation\", \"start\": function() {}, \"steps\": [function() {}], \"annotationsOptions\": {}}\n                 */\n                ellipseAnnotation: {\n                    className: 'highcharts-ellipse-annotation',\n                    start: function (e) {\n                        const coords = this.chart.pointer?.getCoordinates(e), coordsX = coords && getAssignedAxis(coords.xAxis), coordsY = coords && getAssignedAxis(coords.yAxis), navigation = this.chart.options.navigation;\n                        if (!coordsX || !coordsY) {\n                            return;\n                        }\n                        return this.chart.addAnnotation(merge({\n                            langKey: 'ellipse',\n                            type: 'basicAnnotation',\n                            shapes: [\n                                {\n                                    type: 'ellipse',\n                                    xAxis: coordsX.axis.index,\n                                    yAxis: coordsY.axis.index,\n                                    points: [{\n                                            x: coordsX.value,\n                                            y: coordsY.value\n                                        }, {\n                                            x: coordsX.value,\n                                            y: coordsY.value\n                                        }],\n                                    ry: 1\n                                }\n                            ]\n                        }, navigation.annotationsOptions, navigation.bindings.ellipseAnnotation\n                            .annotationOptions));\n                    },\n                    steps: [\n                        function (e, annotation) {\n                            const target = annotation.shapes[0], position = target.getAbsolutePosition(target.points[1]);\n                            target.translatePoint(e.chartX - position.x, e.chartY - position.y, 1);\n                            target.redraw(false);\n                        },\n                        function (e, annotation) {\n                            const target = annotation.shapes[0], position = target.getAbsolutePosition(target.points[0]), position2 = target.getAbsolutePosition(target.points[1]), newR = target.getDistanceFromLine(position, position2, e.chartX, e.chartY), yAxis = target.getYAxis(), newRY = Math.abs(yAxis.toValue(0) - yAxis.toValue(newR));\n                            target.setYRadius(newRY);\n                            target.redraw(false);\n                        }\n                    ]\n                },\n                /**\n                 * A rectangle annotation bindings. Includes `start` and one event\n                 * in `steps` array.\n                 *\n                 * @type    {Highcharts.NavigationBindingsOptionsObject}\n                 * @default {\"className\": \"highcharts-rectangle-annotation\", \"start\": function() {}, \"steps\": [function() {}], \"annotationsOptions\": {}}\n                 */\n                rectangleAnnotation: {\n                    /** @ignore-option */\n                    className: 'highcharts-rectangle-annotation',\n                    /** @ignore-option */\n                    start: function (e) {\n                        const coords = this.chart.pointer?.getCoordinates(e), coordsX = coords && getAssignedAxis(coords.xAxis), coordsY = coords && getAssignedAxis(coords.yAxis);\n                        // Exit if clicked out of axes area\n                        if (!coordsX || !coordsY) {\n                            return;\n                        }\n                        const x = coordsX.value, y = coordsY.value, xAxis = coordsX.axis.index, yAxis = coordsY.axis.index, navigation = this.chart.options.navigation;\n                        return this.chart.addAnnotation(merge({\n                            langKey: 'rectangle',\n                            type: 'basicAnnotation',\n                            shapes: [{\n                                    type: 'path',\n                                    points: [\n                                        { xAxis, yAxis, x, y },\n                                        { xAxis, yAxis, x, y },\n                                        { xAxis, yAxis, x, y },\n                                        { xAxis, yAxis, x, y },\n                                        { command: 'Z' }\n                                    ]\n                                }]\n                        }, navigation\n                            .annotationsOptions, navigation\n                            .bindings\n                            .rectangleAnnotation\n                            .annotationsOptions));\n                    },\n                    /** @ignore-option */\n                    steps: [\n                        function (e, annotation) {\n                            const shapes = annotation.options.shapes, points = ((shapes && shapes[0] && shapes[0].points) ||\n                                []), coords = this.chart.pointer?.getCoordinates(e), coordsX = coords && getAssignedAxis(coords.xAxis), coordsY = coords && getAssignedAxis(coords.yAxis);\n                            if (coordsX && coordsY) {\n                                const x = coordsX.value, y = coordsY.value;\n                                // Top right point\n                                points[1].x = x;\n                                // Bottom right point (cursor position)\n                                points[2].x = x;\n                                points[2].y = y;\n                                // Bottom left\n                                points[3].y = y;\n                                annotation.update({\n                                    shapes: [{\n                                            points: points\n                                        }]\n                                });\n                            }\n                        }\n                    ]\n                },\n                /**\n                 * A label annotation bindings. Includes `start` event only.\n                 *\n                 * @type    {Highcharts.NavigationBindingsOptionsObject}\n                 * @default {\"className\": \"highcharts-label-annotation\", \"start\": function() {}, \"steps\": [function() {}], \"annotationsOptions\": {}}\n                 */\n                labelAnnotation: {\n                    /** @ignore-option */\n                    className: 'highcharts-label-annotation',\n                    /** @ignore-option */\n                    start: function (e) {\n                        const coords = this.chart.pointer?.getCoordinates(e), coordsX = coords && getAssignedAxis(coords.xAxis), coordsY = coords && getAssignedAxis(coords.yAxis), navigation = this.chart.options.navigation;\n                        // Exit if clicked out of axes area\n                        if (!coordsX || !coordsY) {\n                            return;\n                        }\n                        return this.chart.addAnnotation(merge({\n                            langKey: 'label',\n                            type: 'basicAnnotation',\n                            labelOptions: {\n                                format: '{y:.2f}',\n                                overflow: 'none',\n                                crop: true\n                            },\n                            labels: [{\n                                    point: {\n                                        xAxis: coordsX.axis.index,\n                                        yAxis: coordsY.axis.index,\n                                        x: coordsX.value,\n                                        y: coordsY.value\n                                    }\n                                }]\n                        }, navigation\n                            .annotationsOptions, navigation\n                            .bindings\n                            .labelAnnotation\n                            .annotationsOptions));\n                    }\n                }\n            },\n            /**\n             * Path where Highcharts will look for icons. Change this to use icons\n             * from a different server.\n             *\n             * @type      {string}\n             * @default   https://code.highcharts.com/11.4.8/gfx/stock-icons/\n             * @since     7.1.3\n             * @apioption navigation.iconsURL\n             */\n            /**\n             * A `showPopup` event. Fired when selecting for example an annotation.\n             *\n             * @type      {Function}\n             * @apioption navigation.events.showPopup\n             */\n            /**\n             * A `closePopup` event. Fired when Popup should be hidden, for example\n             * when clicking on an annotation again.\n             *\n             * @type      {Function}\n             * @apioption navigation.events.closePopup\n             */\n            /**\n             * Event fired on a button click.\n             *\n             * @type      {Function}\n             * @sample    highcharts/annotations/gui/\n             *            Change icon in a dropddown on event\n             * @sample    highcharts/annotations/gui-buttons/\n             *            Change button class on event\n             * @apioption navigation.events.selectButton\n             */\n            /**\n             * Event fired when button state should change, for example after\n             * adding an annotation.\n             *\n             * @type      {Function}\n             * @sample    highcharts/annotations/gui/\n             *            Change icon in a dropddown on event\n             * @sample    highcharts/annotations/gui-buttons/\n             *            Change button class on event\n             * @apioption navigation.events.deselectButton\n             */\n            /**\n             * Events to communicate between Stock Tools and custom GUI.\n             *\n             * @since        7.0.0\n             * @product      highcharts highstock\n             * @optionparent navigation.events\n             */\n            events: {},\n            /**\n             * Additional options to be merged into all annotations.\n             *\n             * @sample stock/stocktools/navigation-annotation-options\n             *         Set red color of all line annotations\n             *\n             * @type      {Highcharts.AnnotationsOptions}\n             * @extends   annotations\n             * @exclude   crookedLine, elliottWave, fibonacci, infinityLine,\n             *            measure, pitchfork, tunnel, verticalLine, basicAnnotation\n             * @requires     modules/annotations\n             * @apioption navigation.annotationsOptions\n             */\n            annotationsOptions: {\n                animation: {\n                    defer: 0\n                }\n            }\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const NavigationBindingDefaults = {\n            lang,\n            navigation\n        };\n\n        return NavigationBindingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Annotations/NavigationBindings.js', [_modules['Core/Chart/ChartNavigationComposition.js'], _modules['Core/Defaults.js'], _modules['Core/Templating.js'], _modules['Core/Globals.js'], _modules['Extensions/Annotations/NavigationBindingsDefaults.js'], _modules['Extensions/Annotations/NavigationBindingsUtilities.js'], _modules['Core/Utilities.js']], function (ChartNavigationComposition, D, F, H, NavigationBindingDefaults, NBU, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft, Black Label\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { setOptions } = D;\n        const { format } = F;\n        const { composed, doc, win } = H;\n        const { getAssignedAxis, getFieldType } = NBU;\n        const { addEvent, attr, defined, fireEvent, isArray, isFunction, isNumber, isObject, merge, objectEach, pick, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * IE 9-11 polyfill for Element.closest():\n         * @private\n         */\n        function closestPolyfill(el, s) {\n            const ElementProto = win.Element.prototype, elementMatches = ElementProto.matches ||\n                ElementProto.msMatchesSelector ||\n                ElementProto.webkitMatchesSelector;\n            let ret = null;\n            if (ElementProto.closest) {\n                ret = ElementProto.closest.call(el, s);\n            }\n            else {\n                do {\n                    if (elementMatches.call(el, s)) {\n                        return el;\n                    }\n                    el = el.parentElement || el.parentNode;\n                } while (el !== null && el.nodeType === 1);\n            }\n            return ret;\n        }\n        /**\n         * @private\n         */\n        function onAnnotationRemove() {\n            if (this.chart.navigationBindings) {\n                this.chart.navigationBindings.deselectAnnotation();\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartDestroy() {\n            if (this.navigationBindings) {\n                this.navigationBindings.destroy();\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartLoad() {\n            const options = this.options;\n            if (options && options.navigation && options.navigation.bindings) {\n                this.navigationBindings = new NavigationBindings(this, options.navigation);\n                this.navigationBindings.initEvents();\n                this.navigationBindings.initUpdate();\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRender() {\n            const navigationBindings = this.navigationBindings, disabledClassName = 'highcharts-disabled-btn';\n            if (this && navigationBindings) {\n                // Check if the buttons should be enabled/disabled based on\n                // visible series.\n                let buttonsEnabled = false;\n                this.series.forEach((series) => {\n                    if (!series.options.isInternal && series.visible) {\n                        buttonsEnabled = true;\n                    }\n                });\n                if (this.navigationBindings &&\n                    this.navigationBindings.container &&\n                    this.navigationBindings.container[0]) {\n                    const container = this.navigationBindings.container[0];\n                    objectEach(navigationBindings.boundClassNames, (value, key) => {\n                        // Get the HTML element corresponding to the className taken\n                        // from StockToolsBindings.\n                        const buttonNode = container.querySelectorAll('.' + key);\n                        if (buttonNode) {\n                            for (let i = 0; i < buttonNode.length; i++) {\n                                const button = buttonNode[i], cls = button.className;\n                                if (value.noDataState === 'normal') {\n                                    // If button has noDataState: 'normal', and has\n                                    // disabledClassName, remove this className.\n                                    if (cls.indexOf(disabledClassName) !== -1) {\n                                        button.classList.remove(disabledClassName);\n                                    }\n                                }\n                                else if (!buttonsEnabled) {\n                                    if (cls.indexOf(disabledClassName) === -1) {\n                                        button.className += ' ' + disabledClassName;\n                                    }\n                                }\n                                else {\n                                    // Enable all buttons by deleting the className.\n                                    if (cls.indexOf(disabledClassName) !== -1) {\n                                        button.classList.remove(disabledClassName);\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onNavigationBindingsClosePopup() {\n            this.deselectAnnotation();\n        }\n        /**\n         * @private\n         */\n        function onNavigationBindingsDeselectButton() {\n            this.selectedButtonElement = null;\n        }\n        /**\n         * Show edit-annotation form:\n         * @private\n         */\n        function selectableAnnotation(annotationType) {\n            const originalClick = annotationType.prototype.defaultOptions.events &&\n                annotationType.prototype.defaultOptions.events.click;\n            /**\n             * Select and show popup\n             * @private\n             */\n            function selectAndShowPopup(eventArguments) {\n                const annotation = this, navigation = annotation.chart.navigationBindings, prevAnnotation = navigation.activeAnnotation;\n                if (originalClick) {\n                    originalClick.call(annotation, eventArguments);\n                }\n                if (prevAnnotation !== annotation) {\n                    // Select current:\n                    navigation.deselectAnnotation();\n                    navigation.activeAnnotation = annotation;\n                    annotation.setControlPointsVisibility(true);\n                    fireEvent(navigation, 'showPopup', {\n                        annotation: annotation,\n                        formType: 'annotation-toolbar',\n                        options: navigation.annotationToFields(annotation),\n                        onSubmit: function (data) {\n                            if (data.actionType === 'remove') {\n                                navigation.activeAnnotation = false;\n                                navigation.chart.removeAnnotation(annotation);\n                            }\n                            else {\n                                const config = {};\n                                navigation.fieldsToOptions(data.fields, config);\n                                navigation.deselectAnnotation();\n                                const typeOptions = config.typeOptions;\n                                if (annotation.options.type === 'measure') {\n                                    // Manually disable crooshars according to\n                                    // stroke width of the shape:\n                                    typeOptions.crosshairY.enabled = (typeOptions.crosshairY\n                                        .strokeWidth !== 0);\n                                    typeOptions.crosshairX.enabled = (typeOptions.crosshairX\n                                        .strokeWidth !== 0);\n                                }\n                                annotation.update(config);\n                            }\n                        }\n                    });\n                }\n                else {\n                    // Deselect current:\n                    fireEvent(navigation, 'closePopup');\n                }\n                // Let bubble event to chart.click:\n                eventArguments.activeAnnotation = true;\n            }\n            // #18276, show popup on touchend, but not on touchmove\n            let touchStartX, touchStartY;\n            /**\n             *\n             */\n            function saveCoords(e) {\n                touchStartX = e.touches[0].clientX;\n                touchStartY = e.touches[0].clientY;\n            }\n            /**\n             *\n             */\n            function checkForTouchmove(e) {\n                const hasMoved = touchStartX ? Math.sqrt(Math.pow(touchStartX - e.changedTouches[0].clientX, 2) +\n                    Math.pow(touchStartY - e.changedTouches[0].clientY, 2)) >= 4 : false;\n                if (!hasMoved) {\n                    selectAndShowPopup.call(this, e);\n                }\n            }\n            merge(true, annotationType.prototype.defaultOptions.events, {\n                click: selectAndShowPopup,\n                touchstart: saveCoords,\n                touchend: checkForTouchmove\n            });\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         */\n        class NavigationBindings {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(AnnotationClass, ChartClass) {\n                if (pushUnique(composed, 'NavigationBindings')) {\n                    addEvent(AnnotationClass, 'remove', onAnnotationRemove);\n                    // Basic shapes:\n                    selectableAnnotation(AnnotationClass);\n                    // Advanced annotations:\n                    objectEach(AnnotationClass.types, (annotationType) => {\n                        selectableAnnotation(annotationType);\n                    });\n                    addEvent(ChartClass, 'destroy', onChartDestroy);\n                    addEvent(ChartClass, 'load', onChartLoad);\n                    addEvent(ChartClass, 'render', onChartRender);\n                    addEvent(NavigationBindings, 'closePopup', onNavigationBindingsClosePopup);\n                    addEvent(NavigationBindings, 'deselectButton', onNavigationBindingsDeselectButton);\n                    setOptions(NavigationBindingDefaults);\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart, options) {\n                this.boundClassNames = void 0;\n                this.chart = chart;\n                this.options = options;\n                this.eventsToUnbind = [];\n                this.container =\n                    this.chart.container.getElementsByClassName(this.options.bindingsClassName || '');\n                if (!this.container.length) {\n                    this.container = doc.getElementsByClassName(this.options.bindingsClassName || '');\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getCoords(e) {\n                const coords = this.chart.pointer?.getCoordinates(e);\n                return [\n                    coords && getAssignedAxis(coords.xAxis),\n                    coords && getAssignedAxis(coords.yAxis)\n                ];\n            }\n            /**\n             * Init all events connected to NavigationBindings.\n             *\n             * @private\n             * @function Highcharts.NavigationBindings#initEvents\n             */\n            initEvents() {\n                const navigation = this, chart = navigation.chart, bindingsContainer = navigation.container, options = navigation.options;\n                // Shorthand object for getting events for buttons:\n                navigation.boundClassNames = {};\n                objectEach((options.bindings || {}), (value) => {\n                    navigation.boundClassNames[value.className] = value;\n                });\n                // Handle multiple containers with the same class names:\n                [].forEach.call(bindingsContainer, (subContainer) => {\n                    navigation.eventsToUnbind.push(addEvent(subContainer, 'click', (event) => {\n                        const bindings = navigation.getButtonEvents(subContainer, event);\n                        if (bindings &&\n                            (!bindings.button.classList\n                                .contains('highcharts-disabled-btn'))) {\n                            navigation.bindingsButtonClick(bindings.button, bindings.events, event);\n                        }\n                    }));\n                });\n                objectEach((options.events || {}), (callback, eventName) => {\n                    if (isFunction(callback)) {\n                        navigation.eventsToUnbind.push(addEvent(navigation, eventName, callback, { passive: false }));\n                    }\n                });\n                navigation.eventsToUnbind.push(addEvent(chart.container, 'click', function (e) {\n                    if (!chart.cancelClick &&\n                        chart.isInsidePlot(e.chartX - chart.plotLeft, e.chartY - chart.plotTop, {\n                            visiblePlotOnly: true\n                        })) {\n                        navigation.bindingsChartClick(this, e);\n                    }\n                }));\n                navigation.eventsToUnbind.push(addEvent(chart.container, H.isTouchDevice ? 'touchmove' : 'mousemove', function (e) {\n                    navigation.bindingsContainerMouseMove(this, e);\n                }, H.isTouchDevice ? { passive: false } : void 0));\n            }\n            /**\n             * Common chart.update() delegation, shared between bindings and exporting.\n             *\n             * @private\n             * @function Highcharts.NavigationBindings#initUpdate\n             */\n            initUpdate() {\n                const navigation = this;\n                ChartNavigationComposition\n                    .compose(this.chart).navigation\n                    .addUpdate((options) => {\n                    navigation.update(options);\n                });\n            }\n            /**\n             * Hook for click on a button, method selects/unselects buttons,\n             * then calls `bindings.init` callback.\n             *\n             * @private\n             * @function Highcharts.NavigationBindings#bindingsButtonClick\n             *\n             * @param {Highcharts.HTMLDOMElement} [button]\n             *        Clicked button\n             *\n             * @param {Object} events\n             *        Events passed down from bindings (`init`, `start`, `step`, `end`)\n             *\n             * @param {Highcharts.PointerEventObject} clickEvent\n             *        Browser's click event\n             */\n            bindingsButtonClick(button, events, clickEvent) {\n                const navigation = this, chart = navigation.chart, svgContainer = chart.renderer.boxWrapper;\n                let shouldEventBeFired = true;\n                if (navigation.selectedButtonElement) {\n                    if (navigation.selectedButtonElement.classList === button.classList) {\n                        shouldEventBeFired = false;\n                    }\n                    fireEvent(navigation, 'deselectButton', { button: navigation.selectedButtonElement });\n                    if (navigation.nextEvent) {\n                        // Remove in-progress annotations adders:\n                        if (navigation.currentUserDetails &&\n                            navigation.currentUserDetails.coll === 'annotations') {\n                            chart.removeAnnotation(navigation.currentUserDetails);\n                        }\n                        navigation.mouseMoveEvent = navigation.nextEvent = false;\n                    }\n                }\n                if (shouldEventBeFired) {\n                    navigation.selectedButton = events;\n                    navigation.selectedButtonElement = button;\n                    fireEvent(navigation, 'selectButton', { button: button });\n                    // Call \"init\" event, for example to open modal window\n                    if (events.init) {\n                        events.init.call(navigation, button, clickEvent);\n                    }\n                    if (events.start || events.steps) {\n                        chart.renderer.boxWrapper.addClass('highcharts-draw-mode');\n                    }\n                }\n                else {\n                    chart.stockTools && button.classList.remove('highcharts-active');\n                    svgContainer.removeClass('highcharts-draw-mode');\n                    navigation.nextEvent = false;\n                    navigation.mouseMoveEvent = false;\n                    navigation.selectedButton = null;\n                }\n            }\n            /**\n             * Hook for click on a chart, first click on a chart calls `start` event,\n             * then on all subsequent clicks iterate over `steps` array.\n             * When finished, calls `end` event.\n             *\n             * @private\n             * @function Highcharts.NavigationBindings#bindingsChartClick\n             *\n             * @param {Highcharts.Chart} chart\n             *        Chart that click was performed on.\n             *\n             * @param {Highcharts.PointerEventObject} clickEvent\n             *        Browser's click event.\n             */\n            bindingsChartClick(chart, clickEvent) {\n                chart = this.chart;\n                const navigation = this, activeAnnotation = navigation.activeAnnotation, selectedButton = navigation.selectedButton, svgContainer = chart.renderer.boxWrapper;\n                if (activeAnnotation) {\n                    // Click outside popups, should close them and deselect the\n                    // annotation\n                    if (!activeAnnotation.cancelClick && // #15729\n                        !clickEvent.activeAnnotation &&\n                        // Element could be removed in the child action, e.g. button\n                        clickEvent.target.parentNode &&\n                        // TO DO: Polyfill for IE11?\n                        !closestPolyfill(clickEvent.target, '.highcharts-popup')) {\n                        fireEvent(navigation, 'closePopup');\n                    }\n                    else if (activeAnnotation.cancelClick) {\n                        // Reset cancelClick after the other event handlers have run\n                        setTimeout(() => {\n                            activeAnnotation.cancelClick = false;\n                        }, 0);\n                    }\n                }\n                if (!selectedButton || !selectedButton.start) {\n                    return;\n                }\n                if (!navigation.nextEvent) {\n                    // Call init method:\n                    navigation.currentUserDetails = selectedButton.start.call(navigation, clickEvent);\n                    // If steps exists (e.g. Annotations), bind them:\n                    if (navigation.currentUserDetails && selectedButton.steps) {\n                        navigation.stepIndex = 0;\n                        navigation.steps = true;\n                        navigation.mouseMoveEvent = navigation.nextEvent =\n                            selectedButton.steps[navigation.stepIndex];\n                    }\n                    else {\n                        fireEvent(navigation, 'deselectButton', { button: navigation.selectedButtonElement });\n                        svgContainer.removeClass('highcharts-draw-mode');\n                        navigation.steps = false;\n                        navigation.selectedButton = null;\n                        // First click is also the last one:\n                        if (selectedButton.end) {\n                            selectedButton.end.call(navigation, clickEvent, navigation.currentUserDetails);\n                        }\n                    }\n                }\n                else {\n                    navigation.nextEvent(clickEvent, navigation.currentUserDetails);\n                    if (navigation.steps) {\n                        navigation.stepIndex++;\n                        if (selectedButton.steps[navigation.stepIndex]) {\n                            // If we have more steps, bind them one by one:\n                            navigation.mouseMoveEvent = navigation.nextEvent = selectedButton.steps[navigation.stepIndex];\n                        }\n                        else {\n                            fireEvent(navigation, 'deselectButton', { button: navigation.selectedButtonElement });\n                            svgContainer.removeClass('highcharts-draw-mode');\n                            // That was the last step, call end():\n                            if (selectedButton.end) {\n                                selectedButton.end.call(navigation, clickEvent, navigation.currentUserDetails);\n                            }\n                            navigation.nextEvent = false;\n                            navigation.mouseMoveEvent = false;\n                            navigation.selectedButton = null;\n                        }\n                    }\n                }\n            }\n            /**\n             * Hook for mouse move on a chart's container. It calls current step.\n             *\n             * @private\n             * @function Highcharts.NavigationBindings#bindingsContainerMouseMove\n             *\n             * @param {Highcharts.HTMLDOMElement} container\n             *        Chart's container.\n             *\n             * @param {global.Event} moveEvent\n             *        Browser's move event.\n             */\n            bindingsContainerMouseMove(_container, moveEvent) {\n                if (this.mouseMoveEvent) {\n                    this.mouseMoveEvent(moveEvent, this.currentUserDetails);\n                }\n            }\n            /**\n             * Translate fields (e.g. `params.period` or `marker.styles.color`) to\n             * Highcharts options object (e.g. `{ params: { period } }`).\n             *\n             * @private\n             * @function Highcharts.NavigationBindings#fieldsToOptions<T>\n             *\n             * @param {Highcharts.Dictionary<string>} fields\n             *        Fields from popup form.\n             *\n             * @param {T} config\n             *        Default config to be modified.\n             *\n             * @return {T}\n             *         Modified config\n             */\n            fieldsToOptions(fields, config) {\n                objectEach(fields, (value, field) => {\n                    const parsedValue = parseFloat(value), path = field.split('.'), pathLength = path.length - 1;\n                    // If it's a number (not \"format\" options), parse it:\n                    if (isNumber(parsedValue) &&\n                        !value.match(/px|em/g) &&\n                        !field.match(/format/g)) {\n                        value = parsedValue;\n                    }\n                    // Remove values like 0\n                    if (value !== 'undefined') {\n                        let parent = config;\n                        path.forEach((name, index) => {\n                            if (name !== '__proto__' && name !== 'constructor') {\n                                const nextName = pick(path[index + 1], '');\n                                if (pathLength === index) {\n                                    // Last index, put value:\n                                    parent[name] = value;\n                                }\n                                else if (!parent[name]) {\n                                    // Create middle property:\n                                    parent[name] = nextName.match(/\\d/g) ?\n                                        [] :\n                                        {};\n                                    parent = parent[name];\n                                }\n                                else {\n                                    // Jump into next property\n                                    parent = parent[name];\n                                }\n                            }\n                        });\n                    }\n                });\n                return config;\n            }\n            /**\n             * Shorthand method to deselect an annotation.\n             *\n             * @function Highcharts.NavigationBindings#deselectAnnotation\n             */\n            deselectAnnotation() {\n                if (this.activeAnnotation) {\n                    this.activeAnnotation.setControlPointsVisibility(false);\n                    this.activeAnnotation = false;\n                }\n            }\n            /**\n             * Generates API config for popup in the same format as options for\n             * Annotation object.\n             *\n             * @function Highcharts.NavigationBindings#annotationToFields\n             *\n             * @param {Highcharts.Annotation} annotation\n             *        Annotations object\n             *\n             * @return {Highcharts.Dictionary<string>}\n             *         Annotation options to be displayed in popup box\n             */\n            annotationToFields(annotation) {\n                const options = annotation.options, editables = NavigationBindings.annotationsEditable, nestedEditables = editables.nestedOptions, type = pick(options.type, options.shapes && options.shapes[0] &&\n                    options.shapes[0].type, options.labels && options.labels[0] &&\n                    options.labels[0].type, 'label'), nonEditables = NavigationBindings.annotationsNonEditable[options.langKey] || [], visualOptions = {\n                    langKey: options.langKey,\n                    type: type\n                };\n                /**\n                 * Nested options traversing. Method goes down to the options and copies\n                 * allowed options (with values) to new object, which is last parameter:\n                 * \"parent\".\n                 *\n                 * @private\n                 *\n                 * @param {*} option\n                 *        Atomic type or object/array\n                 *\n                 * @param {string} key\n                 *        Option name, for example \"visible\" or \"x\", \"y\"\n                 *\n                 * @param {Object} parentEditables\n                 *        Editables from NavigationBindings.annotationsEditable\n                 *\n                 * @param {Object} parent\n                 *        Where new options will be assigned\n                 */\n                function traverse(option, key, parentEditables, parent, parentKey) {\n                    let nextParent;\n                    if (parentEditables &&\n                        defined(option) &&\n                        nonEditables.indexOf(key) === -1 &&\n                        ((parentEditables.indexOf &&\n                            parentEditables.indexOf(key)) >= 0 ||\n                            parentEditables[key] || // Nested array\n                            parentEditables === true // Simple array\n                        )) {\n                        // Roots:\n                        if (isArray(option)) {\n                            parent[key] = [];\n                            option.forEach((arrayOption, i) => {\n                                if (!isObject(arrayOption)) {\n                                    // Simple arrays, e.g. [String, Number, Boolean]\n                                    traverse(arrayOption, 0, nestedEditables[key], parent[key], key);\n                                }\n                                else {\n                                    // Advanced arrays, e.g. [Object, Object]\n                                    parent[key][i] = {};\n                                    objectEach(arrayOption, (nestedOption, nestedKey) => {\n                                        traverse(nestedOption, nestedKey, nestedEditables[key], parent[key][i], key);\n                                    });\n                                }\n                            });\n                        }\n                        else if (isObject(option)) {\n                            nextParent = {};\n                            if (isArray(parent)) {\n                                parent.push(nextParent);\n                                nextParent[key] = {};\n                                nextParent = nextParent[key];\n                            }\n                            else {\n                                parent[key] = nextParent;\n                            }\n                            objectEach(option, (nestedOption, nestedKey) => {\n                                traverse(nestedOption, nestedKey, key === 0 ?\n                                    parentEditables :\n                                    nestedEditables[key], nextParent, key);\n                            });\n                        }\n                        else {\n                            // Leaf:\n                            if (key === 'format') {\n                                parent[key] = [\n                                    format(option, annotation.labels[0].points[0]).toString(),\n                                    'text'\n                                ];\n                            }\n                            else if (isArray(parent)) {\n                                parent.push([option, getFieldType(parentKey, option)]);\n                            }\n                            else {\n                                parent[key] = [option, getFieldType(key, option)];\n                            }\n                        }\n                    }\n                }\n                objectEach(options, (option, key) => {\n                    if (key === 'typeOptions') {\n                        visualOptions[key] = {};\n                        objectEach(options[key], (typeOption, typeKey) => {\n                            traverse(typeOption, typeKey, nestedEditables, visualOptions[key], typeKey);\n                        });\n                    }\n                    else {\n                        traverse(option, key, editables[type], visualOptions, key);\n                    }\n                });\n                return visualOptions;\n            }\n            /**\n             * Get all class names for all parents in the element. Iterates until finds\n             * main container.\n             *\n             * @private\n             * @function Highcharts.NavigationBindings#getClickedClassNames\n             *\n             * @param {Highcharts.HTMLDOMElement} container\n             * Container that event is bound to.\n             *\n             * @param {global.Event} event\n             * Browser's event.\n             *\n             * @return {Array<Array<string, Highcharts.HTMLDOMElement>>}\n             * Array of class names with corresponding elements\n             */\n            getClickedClassNames(container, event) {\n                let element = event.target, classNames = [], elemClassName;\n                while (element && element.tagName) {\n                    elemClassName = attr(element, 'class');\n                    if (elemClassName) {\n                        classNames = classNames.concat(elemClassName\n                            .split(' ')\n                            // eslint-disable-next-line no-loop-func\n                            .map((name) => ([name, element])));\n                    }\n                    element = element.parentNode;\n                    if (element === container) {\n                        return classNames;\n                    }\n                }\n                return classNames;\n            }\n            /**\n             * Get events bound to a button. It's a custom event delegation to find all\n             * events connected to the element.\n             *\n             * @private\n             * @function Highcharts.NavigationBindings#getButtonEvents\n             *\n             * @param {Highcharts.HTMLDOMElement} container\n             *        Container that event is bound to.\n             *\n             * @param {global.Event} event\n             *        Browser's event.\n             *\n             * @return {Object}\n             *         Object with events (init, start, steps, and end)\n             */\n            getButtonEvents(container, event) {\n                const navigation = this, classNames = this.getClickedClassNames(container, event);\n                let bindings;\n                classNames.forEach((className) => {\n                    if (navigation.boundClassNames[className[0]] && !bindings) {\n                        bindings = {\n                            events: navigation.boundClassNames[className[0]],\n                            button: className[1]\n                        };\n                    }\n                });\n                return bindings;\n            }\n            /**\n             * Bindings are just events, so the whole update process is simply\n             * removing old events and adding new ones.\n             *\n             * @private\n             * @function Highcharts.NavigationBindings#update\n             */\n            update(options) {\n                this.options = merge(true, this.options, options);\n                this.removeEvents();\n                this.initEvents();\n            }\n            /**\n             * Remove all events created in the navigation.\n             *\n             * @private\n             * @function Highcharts.NavigationBindings#removeEvents\n             */\n            removeEvents() {\n                this.eventsToUnbind.forEach((unbinder) => unbinder());\n            }\n            /**\n             * @private\n             * @function Highcharts.NavigationBindings#destroy\n             */\n            destroy() {\n                this.removeEvents();\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        // Define which options from annotations should show up in edit box:\n        NavigationBindings.annotationsEditable = {\n            // `typeOptions` are always available\n            // Nested and shared options:\n            nestedOptions: {\n                labelOptions: ['style', 'format', 'backgroundColor'],\n                labels: ['style'],\n                label: ['style'],\n                style: ['fontSize', 'color'],\n                background: ['fill', 'strokeWidth', 'stroke'],\n                innerBackground: ['fill', 'strokeWidth', 'stroke'],\n                outerBackground: ['fill', 'strokeWidth', 'stroke'],\n                shapeOptions: ['fill', 'strokeWidth', 'stroke'],\n                shapes: ['fill', 'strokeWidth', 'stroke'],\n                line: ['strokeWidth', 'stroke'],\n                backgroundColors: [true],\n                connector: ['fill', 'strokeWidth', 'stroke'],\n                crosshairX: ['strokeWidth', 'stroke'],\n                crosshairY: ['strokeWidth', 'stroke']\n            },\n            // Simple shapes:\n            circle: ['shapes'],\n            ellipse: ['shapes'],\n            verticalLine: [],\n            label: ['labelOptions'],\n            // Measure\n            measure: ['background', 'crosshairY', 'crosshairX'],\n            // Others:\n            fibonacci: [],\n            tunnel: ['background', 'line', 'height'],\n            pitchfork: ['innerBackground', 'outerBackground'],\n            rect: ['shapes'],\n            // Crooked lines, elliots, arrows etc:\n            crookedLine: [],\n            basicAnnotation: ['shapes', 'labelOptions']\n        };\n        // Define non editable fields per annotation, for example Rectangle inherits\n        // options from Measure, but crosshairs are not available\n        NavigationBindings.annotationsNonEditable = {\n            rectangle: ['crosshairX', 'crosshairY', 'labelOptions'],\n            ellipse: ['labelOptions'],\n            circle: ['labelOptions']\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * A config object for navigation bindings in annotations.\n         *\n         * @interface Highcharts.NavigationBindingsOptionsObject\n         */ /**\n        * ClassName of the element for a binding.\n        * @name Highcharts.NavigationBindingsOptionsObject#className\n        * @type {string|undefined}\n        */ /**\n        * Last event to be fired after last step event.\n        * @name Highcharts.NavigationBindingsOptionsObject#end\n        * @type {Function|undefined}\n        */ /**\n        * Initial event, fired on a button click.\n        * @name Highcharts.NavigationBindingsOptionsObject#init\n        * @type {Function|undefined}\n        */ /**\n        * Event fired on first click on a chart.\n        * @name Highcharts.NavigationBindingsOptionsObject#start\n        * @type {Function|undefined}\n        */ /**\n        * Last event to be fired after last step event. Array of step events to be\n        * called sequentially after each user click.\n        * @name Highcharts.NavigationBindingsOptionsObject#steps\n        * @type {Array<Function>|undefined}\n        */\n        (''); // Keeps doclets above in JS file\n\n        return NavigationBindings;\n    });\n    _registerModule(_modules, 'masters/modules/annotations.src.js', [_modules['Core/Globals.js'], _modules['Extensions/Annotations/Annotation.js'], _modules['Extensions/Annotations/NavigationBindings.js']], function (Highcharts, Annotation, NavigationBindings) {\n\n        const G = Highcharts;\n        G.Annotation = G.Annotation || Annotation;\n        G.NavigationBindings = G.NavigationBindings || NavigationBindings;\n        G.Annotation.compose(G.Chart, G.NavigationBindings, G.Pointer, G.SVGRenderer);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","U","AnnotationChart","addEvent","erase","find","fireEvent","pick","wrap","chartAddAnnotation","userOptions","redraw","annotation","initAnnotation","options","annotations","push","graphic","attr","opacity","chartCallback","chart","plotBoxClip","renderer","clipRect","plotBox","controlPointsGroup","g","zIndex","clip","add","forEach","annotationOptions","i","some","drawAnnotations","destroy","event","csvColumnHeaderFormatter","exporting","csv","columnHeaderFormatter","multiLevelHeaders","dataRows","xValues","annotationHeader","lang","exportData","startRowLength","length","annotationSeparator","itemDelimiter","joinAnnotations","join","labelOptions","includeInDataExport","labels","label","text","annotationText","points","annotationX","x","xAxisIndex","series","xAxis","index","wasAdded","n","newRow","Array","row","maxRowLen","Math","max","newRows","header","s","columnTitle","topLevelColumnTitle","chartDrawAnnotations","animate","animationConfig","chartRemoveAnnotation","idOrAnnotation","coll","id","onChartAfterInit","wrapPointerOnContainerMouseDown","proceed","hasDraggedAnnotation","prototype","slice","call","arguments","compose","AnnotationClass","ChartClass","PointerClass","chartProto","addAnnotation","pointerProto","callbacks","collectionsWithInit","collectionsWithUpdate","removeAnnotation","types","type","defined","visible","animation","crop","draggable","align","allowOverlap","backgroundColor","borderColor","borderRadius","borderWidth","className","formatter","y","overflow","padding","shadow","shape","style","fontSize","fontWeight","color","useHTML","verticalAlign","shapeOptions","stroke","strokeWidth","fill","r","snap","controlPointOptions","events","cursor","height","symbol","width","H","doc","isTouchDevice","objectEach","removeEvent","addEvents","emitter","addMouseDownEvent","element","e","onMouseDown","passive","eventHandler","cancelClick","pointer","normalize","target","nonDOMEvents","indexOf","div","onDrag","styledMode","cssPointer","xy","css","isUpdating","removeDocEvents","hcEvents","mouseMoveToRadians","cx","cy","prevDy","prevChartY","prevDx","prevChartX","dy","chartY","dx","chartX","temp","inverted","atan2","mouseMoveToScale","sx","sy","mouseMoveToTranslation","isInsidePlot","plotLeft","plotTop","visiblePlotOnly","translation","translate","shapes","preventDefault","button","firesTouchEvents","sourceCapabilities","removeDrag","hasDragged","removeMouseUp","onMouseUp","EventEmitter","merge","constructor","positioner","render","setVisibility","update","SeriesRegistry","seriesProto","MockPoint","fromPoint","point","yAxis","pointToPixels","paneCoordinates","plotX","plotY","mock","plotWidth","plotHeight","getPlotBox","translateX","translateY","pointToOptions","applyOptions","getOptions","command","setAxis","refresh","getLabelConfig","hasDynamicOptions","len","toPixels","isInside","refreshOptions","toValue","rotate","radians","cos","sin","tx","ty","scale","xOrY","axisName","axisOptions","get","toAnchor","anchor","_cx","_cy","ControlPoint","ControlTarget","addControlPoints","controlPoints","controlPointsOptions","box","tooltip","getAnchor","relativePosition","absolutePosition","destroyControlTarget","controlPoint","getPointsOptions","splat","linkPoints","pointsOptions","pointOptions","isObject","isString","pointConfig","redrawControlPoints","renderControlPoints","transform","transformation","p1","p2","_point","transformPoint","translatePoint","ControlTargetClass","controlProto","Controllable","itemType","collection","init","_args","attrsFromOptions","key","mappedKey","map","attrsMap","attrs","tracker","_parentGroup","addClass","setControlPointsVisibility","shouldBeDrawn","translateShape","translateSecondPoint","annotationIndex","chartOptions","newOptions","parentGroup","Constructor","defaultMarkers","arrow","tagName","attributes","refY","refX","markerWidth","markerHeight","children","d","ControllableDefaults","extend","uniqueKey","markerEndSetter","createMarkerSetter","markerStartSetter","TRACKER_FILL","svg","markerType","value","onChartAfterGetContainer","defs","svgRendererAddMarker","markerOptions","child","ast","orient","marker","definition","ControllablePath","SVGRendererClass","svgRendererProto","addMarker","toD","dOption","showPath","position","pointIndex","crispLine","parent","setMarkers","action","placed","item","itemOptions","def","predefinedMarker","markerId","getAttribute","dashStyle","ControllableRect","rect","Boolean","ControllableCircle","circle","setRadius","ControllableEllipse","createElement","getDistanceFromLine","point1","point2","x0","y0","abs","sqrt","getAttrs","position2","x1","y1","x2","y2","rx","angle","atan","PI","ry","getRY","getYAxis","yAxisIndex","getAbsolutePosition","rotation","rotationOriginX","rotationOriginY","setYRadius","F","format","isNumber","symbolConnector","w","h","anchorX","anchorY","yOffset","lateral","ControllableLabel","alignedPosition","alignOptions","vAlign","alignFactor","vAlignFactor","round","symbols","connector","justifiedOptions","alignAttr","off","bBox","getBBox","chartAnnotations","getContrast","shapesWithoutBackground","labelrank","String","anchorAbsolutePosition","anchorRelativePosition","itemPosition","alignTo","itemPosRelativeX","itemPosRelativeY","showItem","distance","getPosition","getPlayingField","negative","ttBelow","ControllableImage","image","src","AST","parentDiv","iconsURL","container","createPopupContainer","closeButton","addCloseButton","popup","match","eventName","closeButtonEvents","bind","document","code","closePopup","showPopup","toolbarClass","popupDiv","popupCloseButton","innerHTML","emptyHTML","classList","remove","removeAttribute","appendChild","display","isFirefox","isArray","stableSort","addFormFields","parentNode","storage","isRoot","parentFullName","titleName","addInput","option","a","reverse","genInput","createTextNode","splice","addForm","callback","isInit","lhsCol","langKey","bottomRow","addButton","saveButton","addToolbar","showForm","top","setAttribute","editButton","removeButton","DropdownProperties","seriesTypes","dropdownParameters","addColsContainer","rhsCol","seriesType","rhsColWrapper","fields","params","getNameType","indicatorFullName","name","listAllSeries","linkedParent","volumeSeriesID","addParamInputs","addIndicatorList","listType","filter","selectIndicator","indicatorType","isEdit","querySelectorAll","plotOptions","filteredSeriesArray","filterSeriesArray","filterSeries","b","seriesAName","toLowerCase","seriesBName","indicatorList","seriesSet","btn","textContent","setElementHTML","noFilterMatch","fieldName","selectBox","addSelection","addSelectionOptions","addSearchBox","clearFilterText","clearFilter","inputWrapper","handleInputChange","inputText","input","htmlFor","labelClassName","optionName","optionParamList","split","labelText","selectName","parameterName","selectedOption","currentSeries","seriesOptions","seriesName","parameterOption","filteredSeries","indicatorAliases","navigation","regex","RegExp","replace","alias","is","nameBase","toUpperCase","_options","buttonParentDiv","tabs","tabsContainers","getAmount","counter","serie","addContentItem","addMenuItem","tabName","disableTab","menuItem","deselectAll","tabsContent","selectTab","tab","allTabs","switchTabs","indicatorsCount","indicators","firstTab","BaseForm","D","PopupAnnotations","PopupIndicators","PopupTabs","Popup","activeAnnotation","navigationBindings","unbind","setTimeout","inputAttributes","inputName","selectedButtonElement","fieldsDiv","getFields","inputList","selectList","linkedTo","volumeTo","fieldsOutput","actionType","param","seriesId","select","parameter","offsetHeight","composed","pushUnique","onNavigationBindingsClosePopup","onNavigationBindingsShowPopup","config","stockTools","gui","formType","onSubmit","wrapPointerOnContainerMouserDown","inClass","NagivationBindingsClass","A","AnnotationDefaults","PopupComposition","getDeferredAnimation","destroyObjectProperties","getLabelsAndShapesOptions","baseOptions","mergedOptions","someBaseOptions","basicOptions","Annotation","NavigationBindingsClass","defaultOptions","labelsAndShapes","addClipPaths","setClipAxes","clipXAxis","clipYAxis","getClipBox","addLabels","labelsOptions","initLabel","addShapes","initShape","destroyItem","labelCollectors","labelCollector","left","initProperties","setOptions","_annotationOrChart","_userOptions","animOptions","setLabelCollector","shapesMap","redrawItems","redrawItem","renderItem","adjustVisibility","hasVisiblePoints","visibility","show","hide","items","shapesGroup","labelsGroup","renderItems","xAxes","yAxes","linkedAxes","concat","reduce","axes","labelOrShape","setItemControlPointsVisibility","userOptionsIndex","ChartNavigationComposition","Additions","updates","addUpdate","updateFn","annotationsFieldsTypes","title","getAssignedAxis","coords","coord","extremes","axis","getExtremes","axisMin","min","axisMax","minPointOffset","isInternal","getFieldType","predefinedType","fieldType","NBU","simpleShapes","lines","ellipse","rectangle","typeOptions","backgroundColors","bindingsClassName","bindings","circleAnnotation","start","getCoordinates","coordsX","coordsY","annotationsOptions","steps","mockPointOpts","pow","ellipseAnnotation","newR","newRY","rectangleAnnotation","labelAnnotation","defer","NavigationBindingDefaults","isFunction","onAnnotationRemove","deselectAnnotation","onChartDestroy","onChartLoad","NavigationBindings","initEvents","initUpdate","onChartRender","disabledClassName","buttonsEnabled","boundClassNames","buttonNode","cls","noDataState","onNavigationBindingsDeselectButton","selectableAnnotation","annotationType","touchStartX","touchStartY","originalClick","click","selectAndShowPopup","eventArguments","prevAnnotation","annotationToFields","data","fieldsToOptions","crosshairY","enabled","crosshairX","touchstart","touches","clientX","clientY","touchend","changedTouches","eventsToUnbind","getElementsByClassName","getCoords","bindingsContainer","subContainer","getButtonEvents","contains","bindingsButtonClick","bindingsChartClick","bindingsContainerMouseMove","clickEvent","svgContainer","boxWrapper","shouldEventBeFired","nextEvent","currentUserDetails","mouseMoveEvent","selectedButton","removeClass","closestPolyfill","el","ElementProto","Element","elementMatches","matches","msMatchesSelector","webkitMatchesSelector","ret","closest","parentElement","nodeType","stepIndex","end","_container","moveEvent","field","parsedValue","parseFloat","pathLength","nextName","editables","annotationsEditable","nestedEditables","nestedOptions","nonEditables","annotationsNonEditable","visualOptions","traverse","parentEditables","parentKey","nextParent","arrayOption","nestedOption","nestedKey","toString","typeOption","typeKey","getClickedClassNames","classNames","elemClassName","removeEvents","unbinder","background","innerBackground","outerBackground","line","verticalLine","measure","fibonacci","tunnel","pitchfork","crookedLine","basicAnnotation","G","Chart","Pointer","SVGRenderer"],"mappings":"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"}