{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * Highcharts\n *\n * (c) 2010-2024 Highsoft AS\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/data-tools', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Data/Modifiers/DataModifier.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - GÃ¸ran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class to provide an interface for modifying a table.\n         *\n         */\n        class DataModifier {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Runs a timed execution of the modifier on the given datatable.\n             * Can be configured to run multiple times.\n             *\n             * @param {DataTable} dataTable\n             * The datatable to execute\n             *\n             * @param {DataModifier.BenchmarkOptions} options\n             * Options. Currently supports `iterations` for number of iterations.\n             *\n             * @return {Array<number>}\n             * An array of times in milliseconds\n             *\n             */\n            benchmark(dataTable, options) {\n                const results = [];\n                const modifier = this;\n                const execute = () => {\n                    modifier.modifyTable(dataTable);\n                    modifier.emit({\n                        type: 'afterBenchmarkIteration'\n                    });\n                };\n                const defaultOptions = {\n                    iterations: 1\n                };\n                const { iterations } = merge(defaultOptions, options);\n                modifier.on('afterBenchmarkIteration', () => {\n                    if (results.length === iterations) {\n                        modifier.emit({\n                            type: 'afterBenchmark',\n                            results\n                        });\n                        return;\n                    }\n                    // Run again\n                    execute();\n                });\n                const times = {\n                    startTime: 0,\n                    endTime: 0\n                };\n                // Add timers\n                modifier.on('modify', () => {\n                    times.startTime = window.performance.now();\n                });\n                modifier.on('afterModify', () => {\n                    times.endTime = window.performance.now();\n                    results.push(times.endTime - times.startTime);\n                });\n                // Initial run\n                execute();\n                return results;\n            }\n            /**\n             * Emits an event on the modifier to all registered callbacks of this event.\n             *\n             * @param {DataModifier.Event} [e]\n             * Event object containing additonal event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns a modified copy of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            modify(table, eventDetail) {\n                const modifier = this;\n                return new Promise((resolve, reject) => {\n                    if (table.modified === table) {\n                        table.modified = table.clone(false, eventDetail);\n                    }\n                    try {\n                        resolve(modifier.modifyTable(table, eventDetail));\n                    }\n                    catch (e) {\n                        modifier.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        reject(e);\n                    }\n                });\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columnName, rowIndex, cellValue, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            columns, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, \n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            rows, rowIndex, eventDetail\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                return this.modifyTable(table);\n            }\n            /**\n             * Registers a callback for a specific modifier event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for modifier events and options.\n         */\n        (function (DataModifier) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with modifier names and their class\n             * constructor.\n             */\n            DataModifier.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a modifier class to the registry. The modifier class has to provide\n             * the `DataModifier.options` property and the `DataModifier.modifyTable`\n             * method to modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the modifier class.\n             *\n             * @param {DataModifierType} DataModifierClass\n             * Modifier class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a modifier registered with this key.\n             */\n            function registerType(key, DataModifierClass) {\n                return (!!key &&\n                    !DataModifier.types[key] &&\n                    !!(DataModifier.types[key] = DataModifierClass));\n            }\n            DataModifier.registerType = registerType;\n        })(DataModifier || (DataModifier = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataModifier;\n    });\n    _registerModule(_modules, 'Data/DataTable.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - GÃ¸ran Slettemark\n         *  - Jomar HÃ¸nsi\n         *  - Dawid Dragula\n         *\n         * */\n        const { addEvent, defined, fireEvent, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class to manage columns and rows in a table structure. It provides methods\n         * to add, remove, and manipulate columns and rows, as well as to retrieve data\n         * from specific cells.\n         *\n         * @class\n         * @name Highcharts.DataTable\n         *\n         * @param {Highcharts.DataTableOptions} [options]\n         * Options to initialize the new DataTable instance.\n         */\n        class DataTable {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * Tests whether a row contains only `null` values or is equal to\n             * DataTable.NULL. If all columns have `null` values, the function returns\n             * `true`. Otherwise, it returns `false` to indicate that the row contains\n             * at least one non-null value.\n             *\n             * @function Highcharts.DataTable.isNull\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Row to test.\n             *\n             * @return {boolean}\n             * Returns `true`, if the row contains only null, otherwise `false`.\n             *\n             * @example\n             * if (DataTable.isNull(row)) {\n             *   // handle null row\n             * }\n             */\n            static isNull(row) {\n                if (row === DataTable.NULL) {\n                    return true;\n                }\n                if (row instanceof Array) {\n                    if (!row.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = row.length; i < iEnd; ++i) {\n                        if (row[i] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                else {\n                    const columnNames = Object.keys(row);\n                    if (!columnNames.length) {\n                        return false;\n                    }\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (row[columnNames[i]] !== null) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataTable class.\n             *\n             * @param {Highcharts.DataTableOptions} [options]\n             * Options to initialize the new DataTable instance.\n             */\n            constructor(options = {}) {\n                /**\n                 * Whether the ID was automatic generated or given in the constructor.\n                 *\n                 * @name Highcharts.DataTable#autoId\n                 * @type {boolean}\n                 */\n                this.autoId = !options.id;\n                this.columns = {};\n                /**\n                 * ID of the table for identification purposes.\n                 *\n                 * @name Highcharts.DataTable#id\n                 * @type {string}\n                 */\n                this.id = (options.id || uniqueKey());\n                this.modified = this;\n                this.rowCount = 0;\n                this.versionTag = uniqueKey();\n                const columns = options.columns || {}, columnNames = Object.keys(columns), thisColumns = this.columns;\n                let rowCount = 0;\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName].slice();\n                    thisColumns[columnName] = column;\n                    rowCount = Math.max(rowCount, column.length);\n                }\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    thisColumns[columnNames[i]].length = rowCount;\n                }\n                this.rowCount = rowCount;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns a clone of this table. The cloned table is completely independent\n             * of the original, and any changes made to the clone will not affect\n             * the original table.\n             *\n             * @function Highcharts.DataTable#clone\n             *\n             * @param {boolean} [skipColumns]\n             * Whether to clone columns or not.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Clone of this data table.\n             *\n             * @emits #cloneTable\n             * @emits #afterCloneTable\n             */\n            clone(skipColumns, eventDetail) {\n                const table = this, tableOptions = {};\n                table.emit({ type: 'cloneTable', detail: eventDetail });\n                if (!skipColumns) {\n                    tableOptions.columns = table.columns;\n                }\n                if (!table.autoId) {\n                    tableOptions.id = table.id;\n                }\n                const tableClone = new DataTable(tableOptions);\n                if (!skipColumns) {\n                    tableClone.versionTag = table.versionTag;\n                    tableClone.originalRowIndexes = table.originalRowIndexes;\n                    tableClone.localRowIndexes = table.localRowIndexes;\n                }\n                table.emit({\n                    type: 'afterCloneTable',\n                    detail: eventDetail,\n                    tableClone\n                });\n                return tableClone;\n            }\n            /**\n             * Deletes columns from the table.\n             *\n             * @function Highcharts.DataTable#deleteColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Names of columns to delete. If no array is provided, all\n             * columns will be deleted.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTableColumnCollection|undefined}\n             * Returns the deleted columns, if found.\n             *\n             * @emits #deleteColumns\n             * @emits #afterDeleteColumns\n             */\n            deleteColumns(columnNames, eventDetail) {\n                const table = this, columns = table.columns, deletedColumns = {}, modifiedColumns = {}, modifier = table.modifier, rowCount = table.rowCount;\n                columnNames = (columnNames || Object.keys(columns));\n                if (columnNames.length) {\n                    table.emit({\n                        type: 'deleteColumns',\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                        columnName = columnNames[i];\n                        column = columns[columnName];\n                        if (column) {\n                            deletedColumns[columnName] = column;\n                            modifiedColumns[columnName] = new Array(rowCount);\n                        }\n                        delete columns[columnName];\n                    }\n                    if (!Object.keys(columns).length) {\n                        table.rowCount = 0;\n                        this.deleteRowIndexReferences();\n                    }\n                    if (modifier) {\n                        modifier.modifyColumns(table, modifiedColumns, 0, eventDetail);\n                    }\n                    table.emit({\n                        type: 'afterDeleteColumns',\n                        columns: deletedColumns,\n                        columnNames,\n                        detail: eventDetail\n                    });\n                    return deletedColumns;\n                }\n            }\n            /**\n             * Deletes the row index references. This is useful when the original table\n             * is deleted, and the references are no longer needed. This table is\n             * then considered an original table or a table that has the same row's\n             * order as the original table.\n             */\n            deleteRowIndexReferences() {\n                delete this.originalRowIndexes;\n                delete this.localRowIndexes;\n                // Here, in case of future need, can be implemented updating of the\n                // modified tables' row indexes references.\n            }\n            /**\n             * Deletes rows in this table.\n             *\n             * @function Highcharts.DataTable#deleteRows\n             *\n             * @param {number} [rowIndex]\n             * Index to start delete of rows. If not specified, all rows will be\n             * deleted.\n             *\n             * @param {number} [rowCount=1]\n             * Number of rows to delete.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Array<Highcharts.DataTableRow>}\n             * Returns the deleted rows, if found.\n             *\n             * @emits #deleteRows\n             * @emits #afterDeleteRows\n             */\n            deleteRows(rowIndex, rowCount = 1, eventDetail) {\n                const table = this, deletedRows = [], modifiedRows = [], modifier = table.modifier;\n                table.emit({\n                    type: 'deleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0)\n                });\n                if (typeof rowIndex === 'undefined') {\n                    rowIndex = 0;\n                    rowCount = table.rowCount;\n                }\n                if (rowCount > 0 && rowIndex < table.rowCount) {\n                    const columns = table.columns, columnNames = Object.keys(columns);\n                    for (let i = 0, iEnd = columnNames.length, column, deletedCells; i < iEnd; ++i) {\n                        column = columns[columnNames[i]];\n                        deletedCells = column.splice(rowIndex, rowCount);\n                        if (!i) {\n                            table.rowCount = column.length;\n                        }\n                        for (let j = 0, jEnd = deletedCells.length; j < jEnd; ++j) {\n                            deletedRows[j] = (deletedRows[j] || []);\n                            deletedRows[j][i] = deletedCells[j];\n                        }\n                        modifiedRows.push(new Array(iEnd));\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, modifiedRows, (rowIndex || 0), eventDetail);\n                }\n                table.emit({\n                    type: 'afterDeleteRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex: (rowIndex || 0),\n                    rows: deletedRows\n                });\n                return deletedRows;\n            }\n            /**\n             * Emits an event on this table to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                const table = this;\n                switch (e.type) {\n                    case 'afterDeleteColumns':\n                    case 'afterDeleteRows':\n                    case 'afterSetCell':\n                    case 'afterSetColumns':\n                    case 'afterSetRows':\n                        table.versionTag = uniqueKey();\n                        break;\n                    default:\n                }\n                fireEvent(table, e.type, e);\n            }\n            /**\n             * Fetches a single cell value.\n             *\n             * @function Highcharts.DataTable#getCell\n             *\n             * @param {string} columnName\n             * Column name of the cell to retrieve.\n             *\n             * @param {number} rowIndex\n             * Row index of the cell to retrieve.\n             *\n             * @return {Highcharts.DataTableCellType|undefined}\n             * Returns the cell value or `undefined`.\n             */\n            getCell(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                if (column) {\n                    return column[rowIndex];\n                }\n            }\n            /**\n             * Fetches a cell value for the given row as a boolean.\n             *\n             * @function Highcharts.DataTable#getCellAsBoolean\n             *\n             * @param {string} columnName\n             * Column name to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {boolean}\n             * Returns the cell value of the row as a boolean.\n             */\n            getCellAsBoolean(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                return !!(column && column[rowIndex]);\n            }\n            /**\n             * Fetches a cell value for the given row as a number.\n             *\n             * @function Highcharts.DataTable#getCellAsNumber\n             *\n             * @param {string} columnName\n             * Column name or to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to return NaN instead of `null` and `undefined`.\n             *\n             * @return {number|null}\n             * Returns the cell value of the row as a number.\n             */\n            getCellAsNumber(columnName, rowIndex, useNaN) {\n                const table = this;\n                const column = table.columns[columnName];\n                let cellValue = (column && column[rowIndex]);\n                switch (typeof cellValue) {\n                    case 'boolean':\n                        return (cellValue ? 1 : 0);\n                    case 'number':\n                        return (isNaN(cellValue) && !useNaN ? null : cellValue);\n                }\n                cellValue = parseFloat(`${cellValue ?? ''}`);\n                return (isNaN(cellValue) && !useNaN ? null : cellValue);\n            }\n            /**\n             * Fetches a cell value for the given row as a string.\n             *\n             * @function Highcharts.DataTable#getCellAsString\n             *\n             * @param {string} columnName\n             * Column name to fetch.\n             *\n             * @param {number} rowIndex\n             * Row index to fetch.\n             *\n             * @return {string}\n             * Returns the cell value of the row as a string.\n             */\n            getCellAsString(columnName, rowIndex) {\n                const table = this;\n                const column = table.columns[columnName];\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                return `${(column && column[rowIndex])}`;\n            }\n            /**\n             * Fetches the given column by the canonical column name.\n             * This function is a simplified wrap of {@link getColumns}.\n             *\n             * @function Highcharts.DataTable#getColumn\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return the column as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumn|undefined}\n             * A copy of the column, or `undefined` if not found.\n             */\n            getColumn(columnName, asReference) {\n                return this.getColumns([columnName], asReference)[columnName];\n            }\n            /**\n             * Fetches the given column by the canonical column name, and\n             * validates the type of the first few cells. If the first defined cell is\n             * of type number, it assumes for performance reasons, that all cells are of\n             * type number or `null`. Otherwise it will convert all cells to number\n             * type, except `null`.\n             *\n             * @function Highcharts.DataTable#getColumnAsNumbers\n             *\n             * @param {string} columnName\n             * Name of the column to get.\n             *\n             * @param {boolean} [useNaN]\n             * Whether to use NaN instead of `null` and `undefined`.\n             *\n             * @return {Array<(number|null)>}\n             * A copy of the column, or an empty array if not found.\n             */\n            getColumnAsNumbers(columnName, useNaN) {\n                const table = this, columns = table.columns;\n                const column = columns[columnName], columnAsNumber = [];\n                if (column) {\n                    const columnLength = column.length;\n                    if (useNaN) {\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnName, i, true));\n                        }\n                    }\n                    else {\n                        for (let i = 0, cellValue; i < columnLength; ++i) {\n                            cellValue = column[i];\n                            if (typeof cellValue === 'number') {\n                                // Assume unmixed data for performance reasons\n                                return column.slice();\n                            }\n                            if (cellValue !== null &&\n                                typeof cellValue !== 'undefined') {\n                                break;\n                            }\n                        }\n                        for (let i = 0; i < columnLength; ++i) {\n                            columnAsNumber.push(table.getCellAsNumber(columnName, i));\n                        }\n                    }\n                }\n                return columnAsNumber;\n            }\n            /**\n             * Fetches all column names.\n             *\n             * @function Highcharts.DataTable#getColumnNames\n             *\n             * @return {Array<string>}\n             * Returns all column names.\n             */\n            getColumnNames() {\n                const table = this, columnNames = Object.keys(table.columns);\n                return columnNames;\n            }\n            /**\n             * Retrieves all or the given columns.\n             *\n             * @function Highcharts.DataTable#getColumns\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names to retrieve.\n             *\n             * @param {boolean} [asReference]\n             * Whether to return columns as a readonly reference.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * Collection of columns. If a requested column was not found, it is\n             * `undefined`.\n             */\n            getColumns(columnNames, asReference) {\n                const table = this, tableColumns = table.columns, columns = {};\n                columnNames = (columnNames || Object.keys(tableColumns));\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = tableColumns[columnName];\n                    if (column) {\n                        columns[columnName] = (asReference ? column : column.slice());\n                    }\n                }\n                return columns;\n            }\n            /**\n             * Takes the original row index and returns the local row index in the\n             * modified table for which this function is called.\n             *\n             * @param {number} originalRowIndex\n             * Original row index to get the local row index for.\n             *\n             * @return {number|undefined}\n             * Returns the local row index or `undefined` if not found.\n             */\n            getLocalRowIndex(originalRowIndex) {\n                const { localRowIndexes } = this;\n                if (localRowIndexes) {\n                    return localRowIndexes[originalRowIndex];\n                }\n                return originalRowIndex;\n            }\n            /**\n             * Retrieves the modifier for the table.\n             * @private\n             *\n             * @return {Highcharts.DataModifier|undefined}\n             * Returns the modifier or `undefined`.\n             */\n            getModifier() {\n                return this.modifier;\n            }\n            /**\n             * Takes the local row index and returns the index of the corresponding row\n             * in the original table.\n             *\n             * @param {number} rowIndex\n             * Local row index to get the original row index for.\n             *\n             * @return {number|undefined}\n             * Returns the original row index or `undefined` if not found.\n             */\n            getOriginalRowIndex(rowIndex) {\n                const { originalRowIndexes } = this;\n                if (originalRowIndexes) {\n                    return originalRowIndexes[rowIndex];\n                }\n                return rowIndex;\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRows}.\n             *\n             * @function Highcharts.DataTable#getRow\n             *\n             * @param {number} rowIndex\n             * Row index to retrieve. First row has index 0.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names in order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRow(rowIndex, columnNames) {\n                return this.getRows(rowIndex, 1, columnNames)[0];\n            }\n            /**\n             * Returns the number of rows in this table.\n             *\n             * @function Highcharts.DataTable#getRowCount\n             *\n             * @return {number}\n             * Number of rows in this table.\n             */\n            getRowCount() {\n                // @todo Implement via property getter `.length` browsers supported\n                return this.rowCount;\n            }\n            /**\n             * Retrieves the index of the first row matching a specific cell value.\n             *\n             * @function Highcharts.DataTable#getRowIndexBy\n             *\n             * @param {string} columnName\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @param {number} [rowIndexOffset]\n             * Index offset to start searching.\n             *\n             * @return {number|undefined}\n             * Index of the first row matching the cell value.\n             */\n            getRowIndexBy(columnName, cellValue, rowIndexOffset) {\n                const table = this;\n                const column = table.columns[columnName];\n                if (column) {\n                    const rowIndex = column.indexOf(cellValue, rowIndexOffset);\n                    if (rowIndex !== -1) {\n                        return rowIndex;\n                    }\n                }\n            }\n            /**\n             * Retrieves the row at a given index. This function is a simplified wrap of\n             * {@link getRowObjects}.\n             *\n             * @function Highcharts.DataTable#getRowObject\n             *\n             * @param {number} rowIndex\n             * Row index.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns the row values, or `undefined` if not found.\n             */\n            getRowObject(rowIndex, columnNames) {\n                return this.getRowObjects(rowIndex, 1, columnNames)[0];\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRowObjects\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRowObject}\n             * Returns retrieved rows.\n             */\n            getRowObjects(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNames) {\n                const table = this, columns = table.columns, rows = new Array(rowCount);\n                columnNames = (columnNames || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = {};\n                    for (const columnName of columnNames) {\n                        column = columns[columnName];\n                        row[columnName] = (column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Fetches all or a number of rows.\n             *\n             * @function Highcharts.DataTable#getRows\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to fetch. Defaults to first row at index `0`.\n             *\n             * @param {number} [rowCount]\n             * Number of rows to fetch. Defaults to maximal number of rows.\n             *\n             * @param {Array<string>} [columnNames]\n             * Column names and their order to retrieve.\n             *\n             * @return {Highcharts.DataTableRow}\n             * Returns retrieved rows.\n             */\n            getRows(rowIndex = 0, rowCount = (this.rowCount - rowIndex), columnNames) {\n                const table = this, columns = table.columns, rows = new Array(rowCount);\n                columnNames = (columnNames || Object.keys(columns));\n                for (let i = rowIndex, i2 = 0, iEnd = Math.min(table.rowCount, (rowIndex + rowCount)), column, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i2] = [];\n                    for (const columnName of columnNames) {\n                        column = columns[columnName];\n                        row.push(column ? column[i] : void 0);\n                    }\n                }\n                return rows;\n            }\n            /**\n             * Returns the unique version tag of the current state of the table.\n             *\n             * @function Highcharts.DataTable#getVersionTag\n             *\n             * @return {string}\n             * Unique version tag.\n             */\n            getVersionTag() {\n                return this.versionTag;\n            }\n            /**\n             * Checks for given column names.\n             *\n             * @function Highcharts.DataTable#hasColumns\n             *\n             * @param {Array<string>} columnNames\n             * Column names to check.\n             *\n             * @return {boolean}\n             * Returns `true` if all columns have been found, otherwise `false`.\n             */\n            hasColumns(columnNames) {\n                const table = this, columns = table.columns;\n                for (let i = 0, iEnd = columnNames.length, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    if (!columns[columnName]) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            /**\n             * Searches for a specific cell value.\n             *\n             * @function Highcharts.DataTable#hasRowWith\n             *\n             * @param {string} columnName\n             * Column to search in.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to search for. `NaN` and `undefined` are not supported.\n             *\n             * @return {boolean}\n             * True, if a row has been found, otherwise false.\n             */\n            hasRowWith(columnName, cellValue) {\n                const table = this;\n                const column = table.columns[columnName];\n                if (column) {\n                    return (column.indexOf(cellValue) !== -1);\n                }\n                return false;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataTable#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataTable>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Renames a column of cell values.\n             *\n             * @function Highcharts.DataTable#renameColumn\n             *\n             * @param {string} columnName\n             * Name of the column to be renamed.\n             *\n             * @param {string} newColumnName\n             * New name of the column. An existing column with the same name will be\n             * replaced.\n             *\n             * @return {boolean}\n             * Returns `true` if successful, `false` if the column was not found.\n             */\n            renameColumn(columnName, newColumnName) {\n                const table = this, columns = table.columns;\n                if (columns[columnName]) {\n                    if (columnName !== newColumnName) {\n                        columns[newColumnName] = columns[columnName];\n                        delete columns[columnName];\n                    }\n                    return true;\n                }\n                return false;\n            }\n            /**\n             * Sets a cell value based on the row index and column.  Will\n             * insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setCell\n             *\n             * @param {string} columnName\n             * Column name to set.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index to set.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Cell value to set.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setCell\n             * @emits #afterSetCell\n             */\n            setCell(columnName, rowIndex, cellValue, eventDetail) {\n                const table = this, columns = table.columns, modifier = table.modifier;\n                let column = columns[columnName];\n                if (column && column[rowIndex] === cellValue) {\n                    return;\n                }\n                table.emit({\n                    type: 'setCell',\n                    cellValue,\n                    columnName: columnName,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                if (!column) {\n                    column = columns[columnName] = new Array(table.rowCount);\n                }\n                if (rowIndex >= table.rowCount) {\n                    table.rowCount = (rowIndex + 1);\n                }\n                column[rowIndex] = cellValue;\n                if (modifier) {\n                    modifier.modifyCell(table, columnName, rowIndex, cellValue);\n                }\n                table.emit({\n                    type: 'afterSetCell',\n                    cellValue,\n                    columnName: columnName,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets cell values for a column. Will insert a new column, if not found.\n             *\n             * @function Highcharts.DataTable#setColumn\n             *\n             * @param {string} columnName\n             * Column name to set.\n             *\n             * @param {Highcharts.DataTableColumn} [column]\n             * Values to set in the column.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first row to change. (Default: 0)\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumn(columnName, column = [], rowIndex = 0, eventDetail) {\n                this.setColumns({ [columnName]: column }, rowIndex, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple columns. Will insert new columns, if not\n             * found.\n             *\n             * @function Highcharts.DataTable#setColumns\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to change. Keep undefined to reset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setColumns\n             * @emits #afterSetColumns\n             */\n            setColumns(columns, rowIndex, eventDetail) {\n                const table = this, tableColumns = table.columns, tableModifier = table.modifier, reset = (typeof rowIndex === 'undefined'), columnNames = Object.keys(columns);\n                table.emit({\n                    type: 'setColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n                for (let i = 0, iEnd = columnNames.length, column, columnName; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    if (reset) {\n                        tableColumns[columnName] = column.slice();\n                        table.rowCount = column.length;\n                    }\n                    else {\n                        const tableColumn = (tableColumns[columnName] ?\n                            tableColumns[columnName] :\n                            tableColumns[columnName] = new Array(table.rowCount));\n                        for (let i = (rowIndex || 0), iEnd = column.length; i < iEnd; ++i) {\n                            tableColumn[i] = column[i];\n                        }\n                        table.rowCount = Math.max(table.rowCount, tableColumn.length);\n                    }\n                }\n                const tableColumnNames = Object.keys(tableColumns);\n                for (let i = 0, iEnd = tableColumnNames.length; i < iEnd; ++i) {\n                    tableColumns[tableColumnNames[i]].length = table.rowCount;\n                }\n                if (tableModifier) {\n                    tableModifier.modifyColumns(table, columns, (rowIndex || 0));\n                }\n                table.emit({\n                    type: 'afterSetColumns',\n                    columns,\n                    columnNames,\n                    detail: eventDetail,\n                    rowIndex\n                });\n            }\n            /**\n             * Sets or unsets the modifier for the table.\n             *\n             * @param {Highcharts.DataModifier} [modifier]\n             * Modifier to set, or `undefined` to unset.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Resolves to this table if successful, or rejects on failure.\n             *\n             * @emits #setModifier\n             * @emits #afterSetModifier\n             */\n            setModifier(modifier, eventDetail) {\n                const table = this;\n                let promise;\n                table.emit({\n                    type: 'setModifier',\n                    detail: eventDetail,\n                    modifier,\n                    modified: table.modified\n                });\n                table.modified = table;\n                table.modifier = modifier;\n                if (modifier) {\n                    promise = modifier.modify(table);\n                }\n                else {\n                    promise = Promise.resolve(table);\n                }\n                return promise\n                    .then((table) => {\n                    table.emit({\n                        type: 'afterSetModifier',\n                        detail: eventDetail,\n                        modifier,\n                        modified: table.modified\n                    });\n                    return table;\n                })['catch']((error) => {\n                    table.emit({\n                        type: 'setModifierError',\n                        error,\n                        modifier,\n                        modified: table.modified\n                    });\n                    throw error;\n                });\n            }\n            /**\n             * Sets the original row indexes for the table. It is used to keep the\n             * reference to the original rows when modifying the table.\n             *\n             * @param {Array<number|undefined>} originalRowIndexes\n             * Original row indexes array.\n             *\n             * @param {boolean} omitLocalRowIndexes\n             * Whether to omit the local row indexes calculation. Defaults to `false`.\n             */\n            setOriginalRowIndexes(originalRowIndexes, omitLocalRowIndexes = false) {\n                this.originalRowIndexes = originalRowIndexes;\n                if (omitLocalRowIndexes) {\n                    return;\n                }\n                const modifiedIndexes = this.localRowIndexes = [];\n                for (let i = 0, iEnd = originalRowIndexes.length, originalIndex; i < iEnd; ++i) {\n                    originalIndex = originalRowIndexes[i];\n                    if (defined(originalIndex)) {\n                        modifiedIndexes[originalIndex] = i;\n                    }\n                }\n            }\n            /**\n             * Sets cell values of a row. Will insert a new row, if no index was\n             * provided, or if the index is higher than the total number of table rows.\n             *\n             * Note: This function is just a simplified wrap of\n             * {@link Highcharts.DataTable#setRows}.\n             *\n             * @function Highcharts.DataTable#setRow\n             *\n             * @param {Highcharts.DataTableRow|Highcharts.DataTableRowObject} row\n             * Cell values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the row to set. Leave `undefind` to add as a new row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRow(row, rowIndex, eventDetail) {\n                this.setRows([row], rowIndex, eventDetail);\n            }\n            /**\n             * Sets cell values for multiple rows. Will insert new rows, if no index was\n             * was provided, or if the index is higher than the total number of table\n             * rows.\n             *\n             * @function Highcharts.DataTable#setRows\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Row values to set.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first row to set. Leave `undefined` to add as new rows.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits #setRows\n             * @emits #afterSetRows\n             */\n            setRows(rows, rowIndex = this.rowCount, eventDetail) {\n                const table = this, columns = table.columns, columnNames = Object.keys(columns), modifier = table.modifier, rowCount = rows.length;\n                table.emit({\n                    type: 'setRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n                for (let i = 0, i2 = rowIndex, row; i < rowCount; ++i, ++i2) {\n                    row = rows[i];\n                    if (row === DataTable.NULL) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = null;\n                        }\n                    }\n                    else if (row instanceof Array) {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            columns[columnNames[j]][i2] = row[j];\n                        }\n                    }\n                    else {\n                        const rowColumnNames = Object.keys(row);\n                        for (let j = 0, jEnd = rowColumnNames.length, rowColumnName; j < jEnd; ++j) {\n                            rowColumnName = rowColumnNames[j];\n                            if (!columns[rowColumnName]) {\n                                columns[rowColumnName] = new Array(i2 + 1);\n                            }\n                            columns[rowColumnName][i2] = row[rowColumnName];\n                        }\n                    }\n                }\n                const indexRowCount = (rowIndex + rowCount);\n                if (indexRowCount > table.rowCount) {\n                    table.rowCount = indexRowCount;\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        columns[columnNames[i]].length = indexRowCount;\n                    }\n                }\n                if (modifier) {\n                    modifier.modifyRows(table, rows, rowIndex);\n                }\n                table.emit({\n                    type: 'afterSetRows',\n                    detail: eventDetail,\n                    rowCount,\n                    rowIndex,\n                    rows\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Null state for a row record. In some cases, a row in a table may not\n         * contain any data or may be invalid. In these cases, a null state can be\n         * used to indicate that the row record is empty or invalid.\n         *\n         * @name Highcharts.DataTable.NULL\n         * @type {Highcharts.DataTableRowObject}\n         *\n         * @see {@link Highcharts.DataTable.isNull} for a null test.\n         *\n         * @example\n         * table.setRows([DataTable.NULL, DataTable.NULL], 10);\n         */\n        DataTable.NULL = {};\n        /**\n         * Semantic version string of the DataTable class.\n         * @internal\n         */\n        DataTable.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataTable;\n    });\n    _registerModule(_modules, 'Data/Connectors/DataConnector.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Wojciech Chmiel\n         *  - GÃ¸ran Slettemark\n         *\n         * */\n        const { addEvent, fireEvent, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Abstract class providing an interface for managing a DataConnector.\n         *\n         * @private\n         */\n        class DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructor for the connector class.\n             *\n             * @param {DataConnector.UserOptions} [options]\n             * Options to use in the connector.\n             */\n            constructor(options = {}) {\n                this.table = new DataTable(options.dataTable);\n                this.metadata = options.metadata || { columns: {} };\n            }\n            /**\n             * Poll timer ID, if active.\n             */\n            get polling() {\n                return !!this.polling;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Method for adding metadata for a single column.\n             *\n             * @param {string} name\n             * The name of the column to be described.\n             *\n             * @param {DataConnector.MetaColumn} columnMeta\n             * The metadata to apply to the column.\n             */\n            describeColumn(name, columnMeta) {\n                const connector = this, columns = connector.metadata.columns;\n                columns[name] = merge(columns[name] || {}, columnMeta);\n            }\n            /**\n             * Method for applying columns meta information to the whole DataConnector.\n             *\n             * @param {Highcharts.Dictionary<DataConnector.MetaColumn>} columns\n             * Pairs of column names and MetaColumn objects.\n             */\n            describeColumns(columns) {\n                const connector = this, columnNames = Object.keys(columns);\n                let columnName;\n                while (typeof (columnName = columnNames.pop()) === 'string') {\n                    connector.describeColumn(columnName, columns[columnName]);\n                }\n            }\n            /**\n             * Emits an event on the connector to all registered callbacks of this\n             * event.\n             *\n             * @param {DataConnector.Event} [e]\n             * Event object containing additional event information.\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Returns the order of columns.\n             *\n             * @param {boolean} [usePresentationState]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Array<string>|undefined}\n             * Order of columns.\n             */\n            getColumnOrder(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            usePresentationState) {\n                const connector = this, columns = connector.metadata.columns, names = Object.keys(columns || {});\n                if (names.length) {\n                    return names.sort((a, b) => (pick(columns[a].index, 0) - pick(columns[b].index, 0)));\n                }\n            }\n            /**\n             * Retrieves the columns of the dataTable,\n             * applies column order from meta.\n             *\n             * @param {boolean} [usePresentationOrder]\n             * Whether to use the column order of the presentation state of the table.\n             *\n             * @return {Highcharts.DataTableColumnCollection}\n             * An object with the properties `columnNames` and `columnValues`\n             */\n            getSortedColumns(usePresentationOrder) {\n                return this.table.getColumns(this.getColumnOrder(usePresentationOrder));\n            }\n            /**\n             * The default load method, which fires the `afterLoad` event\n             *\n             * @return {Promise<DataConnector>}\n             * The loaded connector.\n             *\n             * @emits DataConnector#afterLoad\n             */\n            load() {\n                fireEvent(this, 'afterLoad', { table: this.table });\n                return Promise.resolve(this);\n            }\n            /**\n             * Registers a callback for a specific connector event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for the connector callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the connector event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * The default save method, which fires the `afterSave` event.\n             *\n             * @return {Promise<DataConnector>}\n             * The saved connector.\n             *\n             * @emits DataConnector#afterSave\n             * @emits DataConnector#saveError\n             */\n            save() {\n                fireEvent(this, 'saveError', { table: this.table });\n                return Promise.reject(new Error('Not implemented'));\n            }\n            /**\n             * Sets the index and order of columns.\n             *\n             * @param {Array<string>} columnNames\n             * Order of columns.\n             */\n            setColumnOrder(columnNames) {\n                const connector = this;\n                for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                    connector.describeColumn(columnNames[i], { index: i });\n                }\n            }\n            setModifierOptions(modifierOptions) {\n                const ModifierClass = (modifierOptions &&\n                    DataModifier.types[modifierOptions.type]);\n                return this.table\n                    .setModifier(ModifierClass ?\n                    new ModifierClass(modifierOptions) :\n                    void 0)\n                    .then(() => this);\n            }\n            /**\n             * Starts polling new data after the specific time span in milliseconds.\n             *\n             * @param {number} refreshTime\n             * Refresh time in milliseconds between polls.\n             */\n            startPolling(refreshTime = 1000) {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                connector._polling = window.setTimeout(() => connector\n                    .load()['catch']((error) => connector.emit({\n                    type: 'loadError',\n                    error,\n                    table: connector.table\n                }))\n                    .then(() => {\n                    if (connector._polling) {\n                        connector.startPolling(refreshTime);\n                    }\n                }), refreshTime);\n            }\n            /**\n             * Stops polling data.\n             */\n            stopPolling() {\n                const connector = this;\n                window.clearTimeout(connector._polling);\n                delete connector._polling;\n            }\n            /**\n             * Retrieves metadata from a single column.\n             *\n             * @param {string} name\n             * The identifier for the column that should be described\n             *\n             * @return {DataConnector.MetaColumn|undefined}\n             * Returns a MetaColumn object if found.\n             */\n            whatIs(name) {\n                return this.metadata.columns[name];\n            }\n        }\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (DataConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            /**\n             * Registry as a record object with connector names and their class.\n             */\n            DataConnector.types = {};\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a connector class to the registry. The connector has to provide the\n             * `DataConnector.options` property and the `DataConnector.load` method to\n             * modify the table.\n             *\n             * @private\n             *\n             * @param {string} key\n             * Registry key of the connector class.\n             *\n             * @param {DataConnectorType} DataConnectorClass\n             * Connector class (aka class constructor) to register.\n             *\n             * @return {boolean}\n             * Returns true, if the registration was successful. False is returned, if\n             * their is already a connector registered with this key.\n             */\n            function registerType(key, DataConnectorClass) {\n                return (!!key &&\n                    !DataConnector.types[key] &&\n                    !!(DataConnector.types[key] = DataConnectorClass));\n            }\n            DataConnector.registerType = registerType;\n        })(DataConnector || (DataConnector = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/DataConverter.js', [_modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Sebastian Bochan\n         *  - GÃ¸ran Slettemark\n         *  - Torstein HÃ¸nsi\n         *  - Wojciech Chmiel\n         *\n         * */\n        const { addEvent, fireEvent, isNumber, merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Base class providing an interface and basic methods for a DataConverter\n         *\n         * @private\n         */\n        class DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the DataConverter.\n             *\n             * @param {DataConverter.UserOptions} [options]\n             * Options for the DataConverter.\n             */\n            constructor(options) {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                /**\n                 * A collection of available date formats.\n                 */\n                this.dateFormats = {\n                    'YYYY/mm/dd': {\n                        regex: /^(\\d{4})([\\-\\.\\/])(\\d{1,2})\\2(\\d{1,2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[1], match[3] - 1, +match[4]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[3] - 1, +match[1]) :\n                                NaN);\n                        },\n                        alternative: 'mm/dd/YYYY' // Different format with the same regex\n                    },\n                    'mm/dd/YYYY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{4})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4], match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    },\n                    'dd/mm/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            const d = new Date();\n                            if (!match) {\n                                return NaN;\n                            }\n                            let year = +match[4];\n                            if (year > (d.getFullYear() - 2000)) {\n                                year += 1900;\n                            }\n                            else {\n                                year += 2000;\n                            }\n                            return Date.UTC(year, match[3] - 1, +match[1]);\n                        },\n                        alternative: 'mm/dd/YY' // Different format with the same regex\n                    },\n                    'mm/dd/YY': {\n                        regex: /^(\\d{1,2})([\\-\\.\\/])(\\d{1,2})\\2(\\d{2})$/,\n                        parser: function (match) {\n                            return (match ?\n                                Date.UTC(+match[4] + 2000, match[1] - 1, +match[3]) :\n                                NaN);\n                        }\n                    }\n                };\n                const mergedOptions = merge(DataConverter.defaultOptions, options);\n                let regExpPoint = mergedOptions.decimalPoint;\n                if (regExpPoint === '.' || regExpPoint === ',') {\n                    regExpPoint = regExpPoint === '.' ? '\\\\.' : ',';\n                    this.decimalRegExp =\n                        new RegExp('^(-?[0-9]+)' + regExpPoint + '([0-9]+)$');\n                }\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts a value to a boolean.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {boolean}\n             * Converted value as a boolean.\n             */\n            asBoolean(value) {\n                if (typeof value === 'boolean') {\n                    return value;\n                }\n                if (typeof value === 'string') {\n                    return value !== '' && value !== '0' && value !== 'false';\n                }\n                return !!this.asNumber(value);\n            }\n            /**\n             * Converts a value to a Date.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {globalThis.Date}\n             * Converted value as a Date.\n             */\n            asDate(value) {\n                let timestamp;\n                if (typeof value === 'string') {\n                    timestamp = this.parseDate(value);\n                }\n                else if (typeof value === 'number') {\n                    timestamp = value;\n                }\n                else if (value instanceof Date) {\n                    return value;\n                }\n                else {\n                    timestamp = this.parseDate(this.asString(value));\n                }\n                return new Date(timestamp);\n            }\n            /**\n             * Casts a string value to it's guessed type\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {number|string|Date}\n             * The converted value.\n             */\n            asGuessedType(value) {\n                const converter = this, typeMap = {\n                    'number': converter.asNumber,\n                    'Date': converter.asDate,\n                    'string': converter.asString\n                };\n                return typeMap[converter.guessType(value)].call(converter, value);\n            }\n            /**\n             * Converts a value to a number.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {number}\n             * Converted value as a number.\n             */\n            asNumber(value) {\n                if (typeof value === 'number') {\n                    return value;\n                }\n                if (typeof value === 'boolean') {\n                    return value ? 1 : 0;\n                }\n                if (typeof value === 'string') {\n                    const decimalRegex = this.decimalRegExp;\n                    if (value.indexOf(' ') > -1) {\n                        value = value.replace(/\\s+/g, '');\n                    }\n                    if (decimalRegex) {\n                        if (!decimalRegex.test(value)) {\n                            return NaN;\n                        }\n                        value = value.replace(decimalRegex, '$1.$2');\n                    }\n                    return parseFloat(value);\n                }\n                if (value instanceof Date) {\n                    return value.getDate();\n                }\n                if (value) {\n                    return value.getRowCount();\n                }\n                return NaN;\n            }\n            /**\n             * Converts a value to a string.\n             *\n             * @param {DataConverter.Type} value\n             * Value to convert.\n             *\n             * @return {string}\n             * Converted value as a string.\n             */\n            asString(value) {\n                return '' + value;\n            }\n            /**\n             * Tries to guess the date format\n             *  - Check if either month candidate exceeds 12\n             *  - Check if year is missing (use current year)\n             *  - Check if a shortened year format is used (e.g. 1/1/99)\n             *  - If no guess can be made, the user must be prompted\n             * data is the data to deduce a format based on\n             * @private\n             *\n             * @param {Array<string>} data\n             * Data to check the format.\n             *\n             * @param {number} limit\n             * Max data to check the format.\n             *\n             * @param {boolean} save\n             * Whether to save the date format in the converter options.\n             */\n            deduceDateFormat(data, limit, save) {\n                const parser = this, stable = [], max = [];\n                let format = 'YYYY/mm/dd', thing, guessedFormat = [], i = 0, madeDeduction = false, \n                /// candidates = {},\n                elem, j;\n                if (!limit || limit > data.length) {\n                    limit = data.length;\n                }\n                for (; i < limit; i++) {\n                    if (typeof data[i] !== 'undefined' &&\n                        data[i] && data[i].length) {\n                        thing = data[i]\n                            .trim()\n                            .replace(/[\\-\\.\\/]/g, ' ')\n                            .split(' ');\n                        guessedFormat = [\n                            '',\n                            '',\n                            ''\n                        ];\n                        for (j = 0; j < thing.length; j++) {\n                            if (j < guessedFormat.length) {\n                                elem = parseInt(thing[j], 10);\n                                if (elem) {\n                                    max[j] = (!max[j] || max[j] < elem) ? elem : max[j];\n                                    if (typeof stable[j] !== 'undefined') {\n                                        if (stable[j] !== elem) {\n                                            stable[j] = false;\n                                        }\n                                    }\n                                    else {\n                                        stable[j] = elem;\n                                    }\n                                    if (elem > 31) {\n                                        if (elem < 100) {\n                                            guessedFormat[j] = 'YY';\n                                        }\n                                        else {\n                                            guessedFormat[j] = 'YYYY';\n                                        }\n                                        /// madeDeduction = true;\n                                    }\n                                    else if (elem > 12 &&\n                                        elem <= 31) {\n                                        guessedFormat[j] = 'dd';\n                                        madeDeduction = true;\n                                    }\n                                    else if (!guessedFormat[j].length) {\n                                        guessedFormat[j] = 'mm';\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (madeDeduction) {\n                    // This handles a few edge cases with hard to guess dates\n                    for (j = 0; j < stable.length; j++) {\n                        if (stable[j] !== false) {\n                            if (max[j] > 12 &&\n                                guessedFormat[j] !== 'YY' &&\n                                guessedFormat[j] !== 'YYYY') {\n                                guessedFormat[j] = 'YY';\n                            }\n                        }\n                        else if (max[j] > 12 && guessedFormat[j] === 'mm') {\n                            guessedFormat[j] = 'dd';\n                        }\n                    }\n                    // If the middle one is dd, and the last one is dd,\n                    // the last should likely be year.\n                    if (guessedFormat.length === 3 &&\n                        guessedFormat[1] === 'dd' &&\n                        guessedFormat[2] === 'dd') {\n                        guessedFormat[2] = 'YY';\n                    }\n                    format = guessedFormat.join('/');\n                    // If the caculated format is not valid, we need to present an\n                    // error.\n                }\n                // Save the deduced format in the converter options.\n                if (save) {\n                    parser.options.dateFormat = format;\n                }\n                return format;\n            }\n            /**\n             * Emits an event on the DataConverter instance.\n             *\n             * @param {DataConverter.Event} [e]\n             * Event object containing additional event data\n             */\n            emit(e) {\n                fireEvent(this, e.type, e);\n            }\n            /**\n             * Initiates the data exporting. Should emit `exportError` on failure.\n             *\n             * @param {DataConnector} connector\n             * Connector to export from.\n             *\n             * @param {DataConverter.Options} [options]\n             * Options for the export.\n             */\n            export(\n            /* eslint-disable @typescript-eslint/no-unused-vars */\n            connector, options\n            /* eslint-enable @typescript-eslint/no-unused-vars */\n            ) {\n                this.emit({\n                    type: 'exportError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Getter for the data table.\n             *\n             * @return {DataTable}\n             * Table of parsed data.\n             */\n            getTable() {\n                throw new Error('Not implemented');\n            }\n            /**\n             * Guesses the potential type of a string value for parsing CSV etc.\n             *\n             * @param {*} value\n             * The value to examine.\n             *\n             * @return {'number'|'string'|'Date'}\n             * Type string, either `string`, `Date`, or `number`.\n             */\n            guessType(value) {\n                const converter = this;\n                let result = 'string';\n                if (typeof value === 'string') {\n                    const trimedValue = converter.trim(`${value}`), decimalRegExp = converter.decimalRegExp;\n                    let innerTrimedValue = converter.trim(trimedValue, true);\n                    if (decimalRegExp) {\n                        innerTrimedValue = (decimalRegExp.test(innerTrimedValue) ?\n                            innerTrimedValue.replace(decimalRegExp, '$1.$2') :\n                            '');\n                    }\n                    const floatValue = parseFloat(innerTrimedValue);\n                    if (+innerTrimedValue === floatValue) {\n                        // String is numeric\n                        value = floatValue;\n                    }\n                    else {\n                        // Determine if a date string\n                        const dateValue = converter.parseDate(value);\n                        result = isNumber(dateValue) ? 'Date' : 'string';\n                    }\n                }\n                if (typeof value === 'number') {\n                    // Greater than milliseconds in a year assumed timestamp\n                    result = value > 365 * 24 * 3600 * 1000 ? 'Date' : 'number';\n                }\n                return result;\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {DataEventEmitter.Callback} callback\n             * Function to register for an modifier callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the modifier event.\n             */\n            on(type, callback) {\n                return addEvent(this, type, callback);\n            }\n            /**\n             * Initiates the data parsing. Should emit `parseError` on failure.\n             *\n             * @param {DataConverter.UserOptions} options\n             * Options of the DataConverter.\n             */\n            parse(\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            options) {\n                this.emit({\n                    type: 'parseError',\n                    columns: [],\n                    headers: []\n                });\n                throw new Error('Not implemented');\n            }\n            /**\n             * Parse a date and return it as a number.\n             *\n             * @param {string} value\n             * Value to parse.\n             *\n             * @param {string} dateFormatProp\n             * Which of the predefined date formats\n             * to use to parse date values.\n             */\n            parseDate(value, dateFormatProp) {\n                const converter = this, options = converter.options;\n                let dateFormat = dateFormatProp || options.dateFormat, result = NaN, key, format, match;\n                if (options.parseDate) {\n                    result = options.parseDate(value);\n                }\n                else {\n                    // Auto-detect the date format the first time\n                    if (!dateFormat) {\n                        for (key in converter.dateFormats) { // eslint-disable-line guard-for-in\n                            format = converter.dateFormats[key];\n                            match = value.match(format.regex);\n                            if (match) {\n                                // `converter.options.dateFormat` = dateFormat = key;\n                                dateFormat = key;\n                                // `converter.options.alternativeFormat` =\n                                // format.alternative || '';\n                                result = format.parser(match);\n                                break;\n                            }\n                        }\n                        // Next time, use the one previously found\n                    }\n                    else {\n                        format = converter.dateFormats[dateFormat];\n                        if (!format) {\n                            // The selected format is invalid\n                            format = converter.dateFormats['YYYY/mm/dd'];\n                        }\n                        match = value.match(format.regex);\n                        if (match) {\n                            result = format.parser(match);\n                        }\n                    }\n                    // Fall back to Date.parse\n                    if (!match) {\n                        match = Date.parse(value);\n                        // External tools like Date.js and MooTools extend Date object\n                        // and returns a date.\n                        if (typeof match === 'object' &&\n                            match !== null &&\n                            match.getTime) {\n                            result = (match.getTime() -\n                                match.getTimezoneOffset() *\n                                    60000);\n                            // Timestamp\n                        }\n                        else if (isNumber(match)) {\n                            result = match - (new Date(match)).getTimezoneOffset() * 60000;\n                            if ( // Reset dates without year in Chrome\n                            value.indexOf('2001') === -1 &&\n                                (new Date(result)).getFullYear() === 2001) {\n                                result = NaN;\n                            }\n                        }\n                    }\n                }\n                return result;\n            }\n            /**\n             * Trim a string from whitespaces.\n             *\n             * @param {string} str\n             * String to trim.\n             *\n             * @param {boolean} [inside=false]\n             * Remove all spaces between numbers.\n             *\n             * @return {string}\n             * Trimed string\n             */\n            trim(str, inside) {\n                if (typeof str === 'string') {\n                    str = str.replace(/^\\s+|\\s+$/g, '');\n                    // Clear white space insdie the string, like thousands separators\n                    if (inside && /^[\\d\\s]+$/.test(str)) {\n                        str = str.replace(/\\s/g, '');\n                    }\n                }\n                return str;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        DataConverter.defaultOptions = {\n            dateFormat: '',\n            alternativeFormat: '',\n            startColumn: 0,\n            endColumn: Number.MAX_VALUE,\n            startRow: 0,\n            endRow: Number.MAX_VALUE,\n            firstRowAsNames: true,\n            switchRowsAndColumns: false\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * Additionally provided types for events and conversion.\n         */\n        (function (DataConverter) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Converts an array of columns to a table instance. Second dimension of the\n             * array are the row cells.\n             *\n             * @param {Array<DataTable.Column>} [columns]\n             * Array to convert.\n             *\n             * @param {Array<string>} [headers]\n             * Column names to use.\n             *\n             * @return {DataTable}\n             * Table instance from the arrays.\n             */\n            function getTableFromColumns(columns = [], headers = []) {\n                const table = new DataTable();\n                for (let i = 0, iEnd = Math.max(headers.length, columns.length); i < iEnd; ++i) {\n                    table.setColumn(headers[i] || `${i}`, columns[i]);\n                }\n                return table;\n            }\n            DataConverter.getTableFromColumns = getTableFromColumns;\n        })(DataConverter || (DataConverter = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataConverter;\n    });\n    _registerModule(_modules, 'Data/DataCursor.js', [], function () {\n        /* *\n         *\n         *  (c) 2020-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * This class manages state cursors pointing on {@link Data.DataTable}. It\n         * creates a relation between states of the user interface and the table cells,\n         * columns, or rows.\n         *\n         * @class\n         * @name Data.DataCursor\n         */\n        class DataCursor {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(stateMap = {}) {\n                this.emittingRegister = [];\n                this.listenerMap = {};\n                this.stateMap = stateMap;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * This function registers a listener for a specific state and table.\n             *\n             * @example\n             * ```TypeScript\n             * dataCursor.addListener(myTable.id, 'hover', (e: DataCursor.Event) => {\n             *     if (e.cursor.type === 'position') {\n             *         console.log(`Hover over row #${e.cursor.row}.`);\n             *     }\n             * });\n             * ```\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table to listen to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table to listen to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to register.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            addListener(tableId, state, listener) {\n                const listenerMap = this.listenerMap[tableId] = (this.listenerMap[tableId] ||\n                    {});\n                const listeners = listenerMap[state] = (listenerMap[state] ||\n                    []);\n                listeners.push(listener);\n                return this;\n            }\n            /**\n             * @private\n             */\n            buildEmittingTag(e) {\n                return (e.cursor.type === 'position' ?\n                    [\n                        e.table.id,\n                        e.cursor.column,\n                        e.cursor.row,\n                        e.cursor.state,\n                        e.cursor.type\n                    ] :\n                    [\n                        e.table.id,\n                        e.cursor.columns,\n                        e.cursor.firstRow,\n                        e.cursor.lastRow,\n                        e.cursor.state,\n                        e.cursor.type\n                    ]).join('\\0');\n            }\n            /**\n             * This function emits a state cursor related to a table. It will provide\n             * lasting state cursors of the table to listeners.\n             *\n             * @example\n             * ```ts\n             * dataCursor.emit(myTable, {\n             *     type: 'position',\n             *     column: 'city',\n             *     row: 4,\n             *     state: 'hover',\n             * });\n             * ```\n             *\n             * @param {Data.DataTable} table\n             * The related table of the cursor.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * The state cursor to emit.\n             *\n             * @param {Event} [event]\n             * Optional event information from a related source.\n             *\n             * @param {boolean} [lasting]\n             * Whether this state cursor should be kept until it is cleared with\n             * {@link DataCursor#remitCursor}.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            emitCursor(table, cursor, event, lasting) {\n                const tableId = table.id, state = cursor.state, listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const stateMap = this.stateMap[tableId] = (this.stateMap[tableId] ?? {});\n                    const cursors = stateMap[cursor.state] || [];\n                    if (lasting) {\n                        if (!cursors.length) {\n                            stateMap[cursor.state] = cursors;\n                        }\n                        if (DataCursor.getIndex(cursor, cursors) === -1) {\n                            cursors.push(cursor);\n                        }\n                    }\n                    const e = {\n                        cursor,\n                        cursors,\n                        table\n                    };\n                    if (event) {\n                        e.event = event;\n                    }\n                    const emittingRegister = this.emittingRegister, emittingTag = this.buildEmittingTag(e);\n                    if (emittingRegister.indexOf(emittingTag) >= 0) {\n                        // Break call stack loops\n                        return this;\n                    }\n                    try {\n                        this.emittingRegister.push(emittingTag);\n                        for (let i = 0, iEnd = listeners.length; i < iEnd; ++i) {\n                            listeners[i].call(this, e);\n                        }\n                    }\n                    finally {\n                        const index = this.emittingRegister.indexOf(emittingTag);\n                        if (index >= 0) {\n                            this.emittingRegister.splice(index, 1);\n                        }\n                    }\n                }\n                return this;\n            }\n            /**\n             * Removes a lasting state cursor.\n             *\n             * @function #remitCursor\n             *\n             * @param {string} tableId\n             * ID of the related cursor table.\n             *\n             * @param {Data.DataCursor.Type} cursor\n             * Copy or reference of the cursor.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            remitCursor(tableId, cursor) {\n                const cursors = (this.stateMap[tableId] &&\n                    this.stateMap[tableId][cursor.state]);\n                if (cursors) {\n                    const index = DataCursor.getIndex(cursor, cursors);\n                    if (index >= 0) {\n                        cursors.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n            /**\n             * This function removes a listener.\n             *\n             * @function #addListener\n             *\n             * @param {Data.DataCursor.TableId} tableId\n             * The ID of the table the listener is connected to.\n             *\n             * @param {Data.DataCursor.State} state\n             * The state on the table the listener is listening to.\n             *\n             * @param {Data.DataCursor.Listener} listener\n             * The listener to deregister.\n             *\n             * @return {Data.DataCursor}\n             * Returns the DataCursor instance for a call chain.\n             */\n            removeListener(tableId, state, listener) {\n                const listeners = (this.listenerMap[tableId] &&\n                    this.listenerMap[tableId][state]);\n                if (listeners) {\n                    const index = listeners.indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                }\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataCursor class.\n         * @internal\n         */\n        DataCursor.version = '1.0.0';\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        /**\n         * @class Data.DataCursor\n         */\n        (function (DataCursor) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Finds the index of an cursor in an array.\n             * @private\n             */\n            function getIndex(needle, cursors) {\n                if (needle.type === 'position') {\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'position' &&\n                            cursor.state === needle.state &&\n                            cursor.column === needle.column &&\n                            cursor.row === needle.row) {\n                            return i;\n                        }\n                    }\n                }\n                else {\n                    const columnNeedle = JSON.stringify(needle.columns);\n                    for (let cursor, i = 0, iEnd = cursors.length; i < iEnd; ++i) {\n                        cursor = cursors[i];\n                        if (cursor.type === 'range' &&\n                            cursor.state === needle.state &&\n                            cursor.firstRow === needle.firstRow &&\n                            cursor.lastRow === needle.lastRow &&\n                            JSON.stringify(cursor.columns) === columnNeedle) {\n                            return i;\n                        }\n                    }\n                }\n                return -1;\n            }\n            DataCursor.getIndex = getIndex;\n            /**\n             * Checks whether two cursor share the same properties.\n             * @private\n             */\n            function isEqual(cursorA, cursorB) {\n                if (cursorA.type === 'position' && cursorB.type === 'position') {\n                    return (cursorA.column === cursorB.column &&\n                        cursorA.row === cursorB.row &&\n                        cursorA.state === cursorB.state);\n                }\n                if (cursorA.type === 'range' && cursorB.type === 'range') {\n                    return (cursorA.firstRow === cursorB.firstRow &&\n                        cursorA.lastRow === cursorB.lastRow &&\n                        (JSON.stringify(cursorA.columns) ===\n                            JSON.stringify(cursorB.columns)));\n                }\n                return false;\n            }\n            DataCursor.isEqual = isEqual;\n            /**\n             * Checks whether a cursor is in a range.\n             * @private\n             */\n            function isInRange(needle, range) {\n                if (range.type === 'position') {\n                    range = toRange(range);\n                }\n                if (needle.type === 'position') {\n                    needle = toRange(needle, range);\n                }\n                const needleColumns = needle.columns;\n                const rangeColumns = range.columns;\n                return (needle.firstRow >= range.firstRow &&\n                    needle.lastRow <= range.lastRow &&\n                    (!needleColumns ||\n                        !rangeColumns ||\n                        needleColumns.every((column) => rangeColumns.indexOf(column) >= 0)));\n            }\n            DataCursor.isInRange = isInRange;\n            /**\n             * @private\n             */\n            function toPositions(cursor) {\n                if (cursor.type === 'position') {\n                    return [cursor];\n                }\n                const columns = (cursor.columns || []);\n                const positions = [];\n                const state = cursor.state;\n                for (let row = cursor.firstRow, rowEnd = cursor.lastRow; row < rowEnd; ++row) {\n                    if (!columns.length) {\n                        positions.push({\n                            type: 'position',\n                            row,\n                            state\n                        });\n                        continue;\n                    }\n                    for (let column = 0, columnEnd = columns.length; column < columnEnd; ++column) {\n                        positions.push({\n                            type: 'position',\n                            column: columns[column],\n                            row,\n                            state\n                        });\n                    }\n                }\n                return positions;\n            }\n            DataCursor.toPositions = toPositions;\n            /**\n             * @private\n             */\n            function toRange(cursor, defaultRange) {\n                if (cursor.type === 'range') {\n                    return cursor;\n                }\n                const range = {\n                    type: 'range',\n                    firstRow: (cursor.row ??\n                        (defaultRange && defaultRange.firstRow) ??\n                        0),\n                    lastRow: (cursor.row ??\n                        (defaultRange && defaultRange.lastRow) ??\n                        Number.MAX_VALUE),\n                    state: cursor.state\n                };\n                if (typeof cursor.column !== 'undefined') {\n                    range.columns = [cursor.column];\n                }\n                return range;\n            }\n            DataCursor.toRange = toRange;\n        })(DataCursor || (DataCursor = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataCursor;\n    });\n    _registerModule(_modules, 'Data/DataPoolDefaults.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        const DataPoolDefaults = {\n            connectors: []\n        };\n        /* *\n         *\n         *  Export Defaults\n         *\n         * */\n\n        return DataPoolDefaults;\n    });\n    _registerModule(_modules, 'Data/DataPool.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/DataPoolDefaults.js'], _modules['Core/Utilities.js']], function (DataConnector, DataPoolDefaults, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Data pool to load connectors on-demand.\n         *\n         * @class\n         * @name Data.DataPool\n         *\n         * @param {Data.DataPoolOptions} options\n         * Pool options with all connectors.\n         */\n        class DataPool {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options = DataPoolDefaults) {\n                options.connectors = (options.connectors || []);\n                this.connectors = {};\n                this.options = options;\n                this.waiting = {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Emits an event on this data pool to all registered callbacks of the given\n             * event.\n             * @private\n             *\n             * @param {DataTable.Event} e\n             * Event object with event information.\n             */\n            emit(e) {\n                U.fireEvent(this, e.type, e);\n            }\n            /**\n             * Loads the connector.\n             *\n             * @function Data.DataPool#getConnector\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            getConnector(connectorId) {\n                const connector = this.connectors[connectorId];\n                // Already loaded\n                if (connector) {\n                    return Promise.resolve(connector);\n                }\n                let waitingList = this.waiting[connectorId];\n                // Start loading\n                if (!waitingList) {\n                    waitingList = this.waiting[connectorId] = [];\n                    const connectorOptions = this.getConnectorOptions(connectorId);\n                    if (!connectorOptions) {\n                        throw new Error(`Connector '${connectorId}' not found.`);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    this\n                        .loadConnector(connectorOptions)\n                        .then((connector) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][0](connector);\n                        }\n                    })['catch']((error) => {\n                        delete this.waiting[connectorId];\n                        for (let i = 0, iEnd = waitingList.length; i < iEnd; ++i) {\n                            waitingList[i][1](error);\n                        }\n                    });\n                }\n                // Add request to waiting list\n                return new Promise((resolve, reject) => {\n                    waitingList.push([resolve, reject]);\n                });\n            }\n            /**\n             * Returns the IDs of all connectors.\n             *\n             * @private\n             *\n             * @return {Array<string>}\n             * Names of all connectors.\n             */\n            getConnectorIds() {\n                const connectors = this.options.connectors, connectorIds = [];\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    connectorIds.push(connectors[i].id);\n                }\n                return connectorIds;\n            }\n            /**\n             * Loads the options of the connector.\n             *\n             * @private\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {DataPoolConnectorOptions|undefined}\n             * Returns the options of the connector, or `undefined` if not found.\n             */\n            getConnectorOptions(connectorId) {\n                const connectors = this.options.connectors;\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === connectorId) {\n                        return connectors[i];\n                    }\n                }\n            }\n            /**\n             * Loads the connector table.\n             *\n             * @function Data.DataPool#getConnectorTable\n             *\n             * @param {string} connectorId\n             * ID of the connector.\n             *\n             * @return {Promise<Data.DataTable>}\n             * Returns the connector table.\n             */\n            getConnectorTable(connectorId) {\n                return this\n                    .getConnector(connectorId)\n                    .then((connector) => connector.table);\n            }\n            /**\n             * Tests whether the connector has never been requested.\n             *\n             * @param {string} connectorId\n             * Name of the connector.\n             *\n             * @return {boolean}\n             * Returns `true`, if the connector has never been requested, otherwise\n             * `false`.\n             */\n            isNewConnector(connectorId) {\n                return !this.connectors[connectorId];\n            }\n            /**\n             * Creates and loads the connector.\n             *\n             * @private\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Options of connector.\n             *\n             * @return {Promise<Data.DataConnector>}\n             * Returns the connector.\n             */\n            loadConnector(options) {\n                return new Promise((resolve, reject) => {\n                    this.emit({\n                        type: 'load',\n                        options\n                    });\n                    const ConnectorClass = DataConnector.types[options.type];\n                    if (!ConnectorClass) {\n                        throw new Error(`Connector type not found. (${options.type})`);\n                    }\n                    const connector = new ConnectorClass(options.options);\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    connector\n                        .load()\n                        .then((connector) => {\n                        this.connectors[options.id] = connector;\n                        this.emit({\n                            type: 'afterLoad',\n                            options\n                        });\n                        resolve(connector);\n                    })['catch'](reject);\n                });\n            }\n            /**\n             * Registers a callback for a specific event.\n             *\n             * @function Highcharts.DataPool#on\n             *\n             * @param {string} type\n             * Event type as a string.\n             *\n             * @param {Highcharts.EventCallbackFunction<Highcharts.DataPool>} callback\n             * Function to register for an event callback.\n             *\n             * @return {Function}\n             * Function to unregister callback from the event.\n             */\n            on(type, callback) {\n                return U.addEvent(this, type, callback);\n            }\n            /**\n             * Sets connector options under the specified `options.id`.\n             *\n             * @param {Data.DataPoolConnectorOptions} options\n             * Connector options to set.\n             */\n            setConnectorOptions(options) {\n                const connectors = this.options.connectors, instances = this.connectors;\n                this.emit({\n                    type: 'setConnectorOptions',\n                    options\n                });\n                for (let i = 0, iEnd = connectors.length; i < iEnd; ++i) {\n                    if (connectors[i].id === options.id) {\n                        connectors.splice(i, 1);\n                        break;\n                    }\n                }\n                if (instances[options.id]) {\n                    instances[options.id].stopPolling();\n                    delete instances[options.id];\n                }\n                connectors.push(options);\n                this.emit({\n                    type: 'afterSetConnectorOptions',\n                    options\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Semantic version string of the DataPool class.\n         * @internal\n         */\n        DataPool.version = '1.0.0';\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return DataPool;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaParser.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * @private\n         */\n        const booleanRegExp = /^(?:FALSE|TRUE)/;\n        /**\n         * `.`-separated decimal.\n         * @private\n         */\n        const decimal1RegExp = /^[+\\-]?\\d+(?:\\.\\d+)?(?:e[+\\-]\\d+)?/;\n        /**\n         * `,`-separated decimal.\n         * @private\n         */\n        const decimal2RegExp = /^[+\\-]?\\d+(?:,\\d+)?(?:e[+\\-]\\d+)?/;\n        /**\n         * - Group 1: Function name\n         * @private\n         */\n        const functionRegExp = /^([A-Z][A-Z\\d\\.]*)\\(/;\n        /**\n         * @private\n         */\n        const operatorRegExp = /^(?:[+\\-*\\/^<=>]|<=|=>)/;\n        /**\n         * - Group 1: Start column\n         * - Group 2: Start row\n         * - Group 3: End column\n         * - Group 4: End row\n         * @private\n         */\n        const rangeA1RegExp = /^(\\$?[A-Z]+)(\\$?\\d+)\\:(\\$?[A-Z]+)(\\$?\\d+)/;\n        /**\n         * - Group 1: Start row\n         * - Group 2: Start column\n         * - Group 3: End row\n         * - Group 4: End column\n         * @private\n         */\n        const rangeR1C1RegExp = /^R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])\\:R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])/;\n        /**\n         * - Group 1: Column\n         * - Group 2: Row\n         * @private\n         */\n        const referenceA1RegExp = /^(\\$?[A-Z]+)(\\$?\\d+)(?![\\:C])/;\n        /**\n         * - Group 1: Row\n         * - Group 2: Column\n         * @private\n         */\n        const referenceR1C1RegExp = /^R(\\d*|\\[\\d+\\])C(\\d*|\\[\\d+\\])(?!\\:)/;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Extracts the inner string of the most outer parantheses.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Text string to extract from.\n         *\n         * @return {string}\n         * Extracted parantheses. If not found an exception will be thrown.\n         */\n        function extractParantheses(text) {\n            let parantheseLevel = 0;\n            for (let i = 0, iEnd = text.length, char, parantheseStart = 1; i < iEnd; ++i) {\n                char = text[i];\n                if (char === '(') {\n                    if (!parantheseLevel) {\n                        parantheseStart = i + 1;\n                    }\n                    ++parantheseLevel;\n                    continue;\n                }\n                if (char === ')') {\n                    --parantheseLevel;\n                    if (!parantheseLevel) {\n                        return text.substring(parantheseStart, i);\n                    }\n                }\n            }\n            if (parantheseLevel > 0) {\n                const error = new Error('Incomplete parantheses.');\n                error.name = 'FormulaParseError';\n                throw error;\n            }\n            return '';\n        }\n        /**\n         * Extracts the inner string value.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Text string to extract from.\n         *\n         * @return {string}\n         * Extracted string. If not found an exception will be thrown.\n         */\n        function extractString(text) {\n            let start = -1;\n            for (let i = 0, iEnd = text.length, char, escaping = false; i < iEnd; ++i) {\n                char = text[i];\n                if (char === '\\\\') {\n                    escaping = !escaping;\n                    continue;\n                }\n                if (escaping) {\n                    escaping = false;\n                    continue;\n                }\n                if (char === '\"') {\n                    if (start < 0) {\n                        start = i;\n                    }\n                    else {\n                        return text.substring(start + 1, i); // `Ã¬` is excluding\n                    }\n                }\n            }\n            const error = new Error('Incomplete string.');\n            error.name = 'FormulaParseError';\n            throw error;\n        }\n        /**\n         * Parses an argument string. Formula arrays with a single term will be\n         * simplified to the term.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Argument string to parse.\n         *\n         * @param {boolean} alternativeSeparators\n         * Whether to expect `;` as argument separator and `,` as decimal separator.\n         *\n         * @return {Formula|Function|Range|Reference|Value}\n         * The recognized term structure.\n         */\n        function parseArgument(text, alternativeSeparators) {\n            let match;\n            // Check for a R1C1:R1C1 range notation\n            match = text.match(rangeR1C1RegExp);\n            if (match) {\n                const beginColumnRelative = (match[2] === '' || match[2][0] === '[');\n                const beginRowRelative = (match[1] === '' || match[1][0] === '[');\n                const endColumnRelative = (match[4] === '' || match[4][0] === '[');\n                const endRowRelative = (match[3] === '' || match[3][0] === '[');\n                const range = {\n                    type: 'range',\n                    beginColumn: (beginColumnRelative ?\n                        parseInt(match[2].substring(1, -1) || '0', 10) :\n                        parseInt(match[2], 10) - 1),\n                    beginRow: (beginRowRelative ?\n                        parseInt(match[1].substring(1, -1) || '0', 10) :\n                        parseInt(match[1], 10) - 1),\n                    endColumn: (endColumnRelative ?\n                        parseInt(match[4].substring(1, -1) || '0', 10) :\n                        parseInt(match[4], 10) - 1),\n                    endRow: (endRowRelative ?\n                        parseInt(match[3].substring(1, -1) || '0', 10) :\n                        parseInt(match[3], 10) - 1)\n                };\n                if (beginColumnRelative) {\n                    range.beginColumnRelative = true;\n                }\n                if (beginRowRelative) {\n                    range.beginRowRelative = true;\n                }\n                if (endColumnRelative) {\n                    range.endColumnRelative = true;\n                }\n                if (endRowRelative) {\n                    range.endRowRelative = true;\n                }\n                return range;\n            }\n            // Check for a A1:A1 range notation\n            match = text.match(rangeA1RegExp);\n            if (match) {\n                const beginColumnRelative = match[1][0] !== '$';\n                const beginRowRelative = match[2][0] !== '$';\n                const endColumnRelative = match[3][0] !== '$';\n                const endRowRelative = match[4][0] !== '$';\n                const range = {\n                    type: 'range',\n                    beginColumn: parseReferenceColumn(beginColumnRelative ?\n                        match[1] :\n                        match[1].substring(1)) - 1,\n                    beginRow: parseInt(beginRowRelative ?\n                        match[2] :\n                        match[2].substring(1), 10) - 1,\n                    endColumn: parseReferenceColumn(endColumnRelative ?\n                        match[3] :\n                        match[3].substring(1)) - 1,\n                    endRow: parseInt(endRowRelative ?\n                        match[4] :\n                        match[4].substring(1), 10) - 1\n                };\n                if (beginColumnRelative) {\n                    range.beginColumnRelative = true;\n                }\n                if (beginRowRelative) {\n                    range.beginRowRelative = true;\n                }\n                if (endColumnRelative) {\n                    range.endColumnRelative = true;\n                }\n                if (endRowRelative) {\n                    range.endRowRelative = true;\n                }\n                return range;\n            }\n            // Fallback to formula processing for other pattern types\n            const formula = parseFormula(text, alternativeSeparators);\n            return (formula.length === 1 && typeof formula[0] !== 'string' ?\n                formula[0] :\n                formula);\n        }\n        /**\n         * Parse arguments string inside function parantheses.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Parantheses string of the function.\n         *\n         * @param {boolean} alternativeSeparators\n         * Whether to expect `;` as argument separator and `,` as decimal separator.\n         *\n         * @return {Highcharts.FormulaArguments}\n         * Parsed arguments array.\n         */\n        function parseArguments(text, alternativeSeparators) {\n            const args = [], argumentsSeparator = (alternativeSeparators ? ';' : ',');\n            let parantheseLevel = 0, term = '';\n            for (let i = 0, iEnd = text.length, char; i < iEnd; ++i) {\n                char = text[i];\n                // Check for separator\n                if (char === argumentsSeparator &&\n                    !parantheseLevel &&\n                    term) {\n                    args.push(parseArgument(term, alternativeSeparators));\n                    term = '';\n                    // Check for a quoted string before skip logic\n                }\n                else if (char === '\"' &&\n                    !parantheseLevel &&\n                    !term) {\n                    const string = extractString(text.substring(i));\n                    args.push(string);\n                    i += string.length + 1; // Only +1 to cover ++i in for-loop\n                    // Skip space and check paranthesis nesting\n                }\n                else if (char !== ' ') {\n                    term += char;\n                    if (char === '(') {\n                        ++parantheseLevel;\n                    }\n                    else if (char === ')') {\n                        --parantheseLevel;\n                    }\n                }\n            }\n            // Look for left-overs from last argument\n            if (!parantheseLevel && term) {\n                args.push(parseArgument(term, alternativeSeparators));\n            }\n            return args;\n        }\n        /**\n         * Converts a spreadsheet formula string into a formula array. Throws a\n         * `FormulaParserError` when the string can not be parsed.\n         *\n         * @private\n         * @function Formula.parseFormula\n         *\n         * @param {string} text\n         * Spreadsheet formula string, without the leading `=`.\n         *\n         * @param {boolean} alternativeSeparators\n         * * `false` to expect `,` between arguments and `.` in decimals.\n         * * `true` to expect `;` between arguments and `,` in decimals.\n         *\n         * @return {Formula.Formula}\n         * Formula array representing the string.\n         */\n        function parseFormula(text, alternativeSeparators) {\n            const decimalRegExp = (alternativeSeparators ?\n                decimal2RegExp :\n                decimal1RegExp), formula = [];\n            let match, next = (text[0] === '=' ? text.substring(1) : text).trim();\n            while (next) {\n                // Check for an R1C1 reference notation\n                match = next.match(referenceR1C1RegExp);\n                if (match) {\n                    const columnRelative = (match[2] === '' || match[2][0] === '[');\n                    const rowRelative = (match[1] === '' || match[1][0] === '[');\n                    const reference = {\n                        type: 'reference',\n                        column: (columnRelative ?\n                            parseInt(match[2].substring(1, -1) || '0', 10) :\n                            parseInt(match[2], 10) - 1),\n                        row: (rowRelative ?\n                            parseInt(match[1].substring(1, -1) || '0', 10) :\n                            parseInt(match[1], 10) - 1)\n                    };\n                    if (columnRelative) {\n                        reference.columnRelative = true;\n                    }\n                    if (rowRelative) {\n                        reference.rowRelative = true;\n                    }\n                    formula.push(reference);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for an A1 reference notation\n                match = next.match(referenceA1RegExp);\n                if (match) {\n                    const columnRelative = match[1][0] !== '$';\n                    const rowRelative = match[2][0] !== '$';\n                    const reference = {\n                        type: 'reference',\n                        column: parseReferenceColumn(columnRelative ?\n                            match[1] :\n                            match[1].substring(1)) - 1,\n                        row: parseInt(rowRelative ?\n                            match[2] :\n                            match[2].substring(1), 10) - 1\n                    };\n                    if (columnRelative) {\n                        reference.columnRelative = true;\n                    }\n                    if (rowRelative) {\n                        reference.rowRelative = true;\n                    }\n                    formula.push(reference);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a formula operator\n                match = next.match(operatorRegExp);\n                if (match) {\n                    formula.push(match[0]);\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a boolean value\n                match = next.match(booleanRegExp);\n                if (match) {\n                    formula.push(match[0] === 'TRUE');\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a number value\n                match = next.match(decimalRegExp);\n                if (match) {\n                    formula.push(parseFloat(match[0]));\n                    next = next.substring(match[0].length).trim();\n                    continue;\n                }\n                // Check for a quoted string\n                if (next[0] === '\"') {\n                    const string = extractString(next);\n                    formula.push(string.substring(1, -1));\n                    next = next.substring(string.length + 2).trim();\n                    continue;\n                }\n                // Check for a function\n                match = next.match(functionRegExp);\n                if (match) {\n                    next = next.substring(match[1].length).trim();\n                    const parantheses = extractParantheses(next);\n                    formula.push({\n                        type: 'function',\n                        name: match[1],\n                        args: parseArguments(parantheses, alternativeSeparators)\n                    });\n                    next = next.substring(parantheses.length + 2).trim();\n                    continue;\n                }\n                // Check for a formula in parantheses\n                if (next[0] === '(') {\n                    const paranteses = extractParantheses(next);\n                    if (paranteses) {\n                        formula\n                            .push(parseFormula(paranteses, alternativeSeparators));\n                        next = next.substring(paranteses.length + 2).trim();\n                        continue;\n                    }\n                }\n                // Something is not right\n                const position = text.length - next.length, error = new Error('Unexpected character `' +\n                    text.substring(position, position + 1) +\n                    '` at position ' + (position + 1) +\n                    '. (`...' + text.substring(position - 5, position + 6) + '...`)');\n                error.name = 'FormulaParseError';\n                throw error;\n            }\n            return formula;\n        }\n        /**\n         * Converts a reference column `A` of `A1` into a number. Supports endless sizes\n         * `ZZZ...`, just limited by integer precision.\n         *\n         * @private\n         *\n         * @param {string} text\n         * Column string to convert.\n         *\n         * @return {number}\n         * Converted column index.\n         */\n        function parseReferenceColumn(text) {\n            let column = 0;\n            for (let i = 0, iEnd = text.length, code, factor = text.length - 1; i < iEnd; ++i) {\n                code = text.charCodeAt(i);\n                if (code >= 65 && code <= 90) {\n                    column += (code - 64) * Math.pow(26, factor);\n                }\n                --factor;\n            }\n            return column;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const FormulaParser = {\n            parseFormula\n        };\n\n        return FormulaParser;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaTypes.js', [], function () {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * Array of all possible operators.\n         * @private\n         */\n        const operators = ['+', '-', '*', '/', '^', '=', '<', '<=', '>', '>='];\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests an item for a Formula array.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a formula (or argument) array.\n         */\n        function isFormula(item) {\n            return item instanceof Array;\n        }\n        /**\n         * Tests an item for a Function structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a formula function.\n         */\n        function isFunction(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'function');\n        }\n        /**\n         * Tests an item for an Operator string.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is an operator string.\n         */\n        function isOperator(item) {\n            return (typeof item === 'string' &&\n                operators.indexOf(item) >= 0);\n        }\n        /**\n         * Tests an item for a Range structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a range.\n         */\n        function isRange(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'range');\n        }\n        /**\n         * Tests an item for a Reference structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a reference.\n         */\n        function isReference(item) {\n            return (typeof item === 'object' &&\n                !(item instanceof Array) &&\n                item.type === 'reference');\n        }\n        /**\n         * Tests an item for a Value structure.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaItem|null|undefined} item\n         * Item to test.\n         *\n         * @return {boolean}\n         * `true`, if the item is a value.\n         */\n        function isValue(item) {\n            return (typeof item === 'boolean' ||\n                typeof item === 'number' ||\n                typeof item === 'string');\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const MathFormula = {\n            isFormula,\n            isFunction,\n            isOperator,\n            isRange,\n            isReference,\n            isValue\n        };\n\n        return MathFormula;\n    });\n    _registerModule(_modules, 'Data/Formula/FormulaProcessor.js', [_modules['Data/Formula/FormulaTypes.js']], function (FormulaTypes) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { isFormula, isFunction, isOperator, isRange, isReference, isValue } = FormulaTypes;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const asLogicalStringRegExp = / */;\n        const MAX_FALSE = Number.MAX_VALUE / 1.000000000001;\n        const MAX_STRING = Number.MAX_VALUE / 1.000000000002;\n        const MAX_TRUE = Number.MAX_VALUE;\n        const operatorPriority = {\n            '^': 3,\n            '*': 2,\n            '/': 2,\n            '+': 1,\n            '-': 1,\n            '=': 0,\n            '<': 0,\n            '<=': 0,\n            '>': 0,\n            '>=': 0\n        };\n        const processorFunctions = {};\n        const processorFunctionNameRegExp = /^[A-Z][A-Z\\.]*$/;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Converts non-number types to logical numbers.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {number}\n         * Logical number value. `NaN` if not convertable.\n         */\n        function asLogicalNumber(value) {\n            switch (typeof value) {\n                case 'boolean':\n                    return value ? MAX_TRUE : MAX_FALSE;\n                case 'string':\n                    return MAX_STRING;\n                case 'number':\n                    return value;\n                default:\n                    return NaN;\n            }\n        }\n        /**\n         * Converts strings to logical strings, while other types get passed through. In\n         * logical strings the space character is the lowest value and letters are case\n         * insensitive.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Logical string value or passed through value.\n         */\n        function asLogicalString(value) {\n            if (typeof value === 'string') {\n                return value.toLowerCase().replace(asLogicalStringRegExp, '\\0');\n            }\n            return value;\n        }\n        /**\n         * Converts non-number types to a logic number.\n         *\n         * @param {Highcharts.FormulaValue} value\n         * Value to convert.\n         *\n         * @return {number}\n         * Number value. `NaN` if not convertable.\n         */\n        function asNumber(value) {\n            switch (typeof value) {\n                case 'boolean':\n                    return value ? 1 : 0;\n                case 'string':\n                    return parseFloat(value.replace(',', '.'));\n                case 'number':\n                    return value;\n                default:\n                    return NaN;\n            }\n        }\n        /**\n         * Process a basic operation of two given values.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaOperator} operator\n         * Operator between values.\n         *\n         * @param {Highcharts.FormulaValue} x\n         * First value for operation.\n         *\n         * @param {Highcharts.FormulaValue} y\n         * Second value for operation.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Operation result. `NaN` if operation is not support.\n         */\n        function basicOperation(operator, x, y) {\n            switch (operator) {\n                case '=':\n                    return asLogicalString(x) === asLogicalString(y);\n                case '<':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) < asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) < asLogicalNumber(y);\n                case '<=':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) <= asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) <= asLogicalNumber(y);\n                case '>':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) > asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) > asLogicalNumber(y);\n                case '>=':\n                    if (typeof x === typeof y) {\n                        return asLogicalString(x) >= asLogicalString(y);\n                    }\n                    return asLogicalNumber(x) >= asLogicalNumber(y);\n            }\n            x = asNumber(x);\n            y = asNumber(y);\n            let result;\n            switch (operator) {\n                case '+':\n                    result = x + y;\n                    break;\n                case '-':\n                    result = x - y;\n                    break;\n                case '*':\n                    result = x * y;\n                    break;\n                case '/':\n                    result = x / y;\n                    break;\n                case '^':\n                    result = Math.pow(x, y);\n                    break;\n                default:\n                    return NaN;\n            }\n            // Limit decimal to 9 digits\n            return (result % 1 ?\n                Math.round(result * 1000000000) / 1000000000 :\n                result);\n        }\n        /**\n         * Converts an argument to Value and in case of a range to an array of Values.\n         *\n         * @function Highcharts.Formula.getArgumentValue\n         *\n         * @param {Highcharts.FormulaRange|Highcharts.FormulaTerm} arg\n         * Formula range or term to convert.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Converted value.\n         */\n        function getArgumentValue(arg, table) {\n            // Add value\n            if (isValue(arg)) {\n                return arg;\n            }\n            // Add values of a range\n            if (isRange(arg)) {\n                return (table && getRangeValues(arg, table) || []);\n            }\n            // Add values of a function\n            if (isFunction(arg)) {\n                return processFunction(arg, table);\n            }\n            // Process functions, operations, references with formula processor\n            return processFormula((isFormula(arg) ? arg : [arg]), table);\n        }\n        /**\n         * Converts all arguments to Values and in case of ranges to arrays of Values.\n         *\n         * @function Highcharts.Formula.getArgumentsValues\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Formula arguments to convert.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Array<(Highcharts.FormulaValue|Array<Highcharts.FormulaValue>)>}\n         * Converted values.\n         */\n        function getArgumentsValues(args, table) {\n            const values = [];\n            for (let i = 0, iEnd = args.length; i < iEnd; ++i) {\n                values.push(getArgumentValue(args[i], table));\n            }\n            return values;\n        }\n        /**\n         * Extracts cell values from a table for a given range.\n         *\n         * @function Highcharts.Formula.getRangeValues\n         *\n         * @param {Highcharts.FormulaRange} range\n         * Formula range to use.\n         *\n         * @param {Highcharts.DataTable} table\n         * Table to extract from.\n         *\n         * @return {Array<Highcharts.FormulaValue>}\n         * Extracted values.\n         */\n        function getRangeValues(range, table) {\n            const columnNames = table\n                .getColumnNames()\n                .slice(range.beginColumn, range.endColumn + 1), values = [];\n            for (let i = 0, iEnd = columnNames.length, cell; i < iEnd; ++i) {\n                const cells = table.getColumn(columnNames[i], true) || [];\n                for (let j = range.beginRow, jEnd = range.endRow + 1; j < jEnd; ++j) {\n                    cell = cells[j];\n                    if (typeof cell === 'string' &&\n                        cell[0] === '=' &&\n                        table !== table.modified) {\n                        // Look in the modified table for formula result\n                        cell = table.modified.getCell(columnNames[i], j);\n                    }\n                    values.push(isValue(cell) ? cell : NaN);\n                }\n            }\n            return values;\n        }\n        /**\n         * Extracts the cell value from a table for a given reference.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaReference} reference\n         * Formula reference to use.\n         *\n         * @param {Highcharts.DataTable} table\n         * Table to extract from.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Extracted value. 'undefined' might also indicate that the cell was not found.\n         */\n        function getReferenceValue(reference, table) {\n            const columnName = table.getColumnNames()[reference.column];\n            if (columnName) {\n                const cell = table.getCell(columnName, reference.row);\n                if (typeof cell === 'string' &&\n                    cell[0] === '=' &&\n                    table !== table.modified) {\n                    // Look in the modified table for formula result\n                    const result = table.modified.getCell(columnName, reference.row);\n                    return isValue(result) ? result : NaN;\n                }\n                return isValue(cell) ? cell : NaN;\n            }\n            return NaN;\n        }\n        /**\n         * Processes a formula array on the given table. If the formula does not contain\n         * references or ranges, then no table has to be provided.\n         *\n         * @private\n         * @function Highcharts.processFormula\n         *\n         * @param {Highcharts.Formula} formula\n         * Formula array to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue}\n         * Result value of the process. `NaN` indicates an error.\n         */\n        function processFormula(formula, table) {\n            let x;\n            for (let i = 0, iEnd = formula.length, item, operator, result, y; i < iEnd; ++i) {\n                item = formula[i];\n                // Remember operator for operation on next item\n                if (isOperator(item)) {\n                    operator = item;\n                    continue;\n                }\n                // Next item is a value\n                if (isValue(item)) {\n                    y = item;\n                    // Next item is a formula and needs to get processed first\n                }\n                else if (isFormula(item)) {\n                    y = processFormula(formula, table);\n                    // Next item is a function call and needs to get processed first\n                }\n                else if (isFunction(item)) {\n                    result = processFunction(item, table);\n                    y = (isValue(result) ? result : NaN); // Arrays are not allowed here\n                    // Next item is a reference and needs to get resolved\n                }\n                else if (isReference(item)) {\n                    y = (table && getReferenceValue(item, table));\n                }\n                // If we have a next value, lets do the operation\n                if (typeof y !== 'undefined') {\n                    // Next value is our first value\n                    if (typeof x === 'undefined') {\n                        if (operator) {\n                            x = basicOperation(operator, 0, y);\n                        }\n                        else {\n                            x = y;\n                        }\n                        // Fail fast if no operator available\n                    }\n                    else if (!operator) {\n                        return NaN;\n                        // Regular next value\n                    }\n                    else {\n                        const operator2 = formula[i + 1];\n                        if (isOperator(operator2) &&\n                            operatorPriority[operator2] > operatorPriority[operator]) {\n                            y = basicOperation(operator2, y, processFormula(formula.slice(i + 2)));\n                            i = iEnd;\n                        }\n                        x = basicOperation(operator, x, y);\n                    }\n                    operator = void 0;\n                    y = void 0;\n                }\n            }\n            return isValue(x) ? x : NaN;\n        }\n        /**\n         * Process a function on the given table. If the arguments do not contain\n         * references or ranges, then no table has to be provided.\n         *\n         * @private\n         *\n         * @param {Highcharts.FormulaFunction} formulaFunction\n         * Formula function to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @param {Highcharts.FormulaReference} [reference]\n         * Table cell reference to use for relative references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Result value (or values) of the process. `NaN` indicates an error.\n         */\n        function processFunction(formulaFunction, table, \n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        reference // @todo\n        ) {\n            const processor = processorFunctions[formulaFunction.name];\n            if (processor) {\n                try {\n                    return processor(formulaFunction.args, table);\n                }\n                catch {\n                    return NaN;\n                }\n            }\n            const error = new Error(`Function \"${formulaFunction.name}\" not found.`);\n            error.name = 'FormulaProcessError';\n            throw error;\n        }\n        /**\n         * Registers a function for the FormulaProcessor.\n         *\n         * @param {string} name\n         * Name of the function in spreadsheets notation with upper case.\n         *\n         * @param {Highcharts.FormulaFunction} processorFunction\n         * ProcessorFunction for the FormulaProcessor. This is an object so that it\n         * can take additional parameter for future validation routines.\n         *\n         * @return {boolean}\n         * Return true, if the ProcessorFunction has been registered.\n         */\n        function registerProcessorFunction(name, processorFunction) {\n            return (processorFunctionNameRegExp.test(name) &&\n                !processorFunctions[name] &&\n                !!(processorFunctions[name] = processorFunction));\n        }\n        /**\n         * Translates relative references and ranges in-place.\n         *\n         * @param {Highcharts.Formula} formula\n         * Formula to translate references and ranges in.\n         *\n         * @param {number} [columnDelta=0]\n         * Column delta to translate to. Negative translate back.\n         *\n         * @param {number} [rowDelta=0]\n         * Row delta to translate to. Negative numbers translate back.\n         *\n         * @return {Highcharts.Formula}\n         * Formula with translated reference and ranges. This formula is equal to the\n         * first argument.\n         */\n        function translateReferences(formula, columnDelta = 0, rowDelta = 0) {\n            for (let i = 0, iEnd = formula.length, item; i < iEnd; ++i) {\n                item = formula[i];\n                if (item instanceof Array) {\n                    translateReferences(item, columnDelta, rowDelta);\n                }\n                else if (isFunction(item)) {\n                    translateReferences(item.args, columnDelta, rowDelta);\n                }\n                else if (isRange(item)) {\n                    if (item.beginColumnRelative) {\n                        item.beginColumn += columnDelta;\n                    }\n                    if (item.beginRowRelative) {\n                        item.beginRow += rowDelta;\n                    }\n                    if (item.endColumnRelative) {\n                        item.endColumn += columnDelta;\n                    }\n                    if (item.endRowRelative) {\n                        item.endRow += rowDelta;\n                    }\n                }\n                else if (isReference(item)) {\n                    if (item.columnRelative) {\n                        item.column += columnDelta;\n                    }\n                    if (item.rowRelative) {\n                        item.row += rowDelta;\n                    }\n                }\n            }\n            return formula;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const FormulaProcessor = {\n            asNumber,\n            getArgumentValue,\n            getArgumentsValues,\n            getRangeValues,\n            getReferenceValue,\n            processFormula,\n            processorFunctions,\n            registerProcessorFunction,\n            translateReferences\n        };\n\n        return FormulaProcessor;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/ABS.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `ABS(value)` implementation. Returns positive numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Array<number>}\n         * Result value of the process.\n         */\n        function ABS(args, table) {\n            const value = getArgumentValue(args[0], table);\n            switch (typeof value) {\n                case 'number':\n                    return Math.abs(value);\n                case 'object': {\n                    const values = [];\n                    for (let i = 0, iEnd = value.length, value2; i < iEnd; ++i) {\n                        value2 = value[i];\n                        if (typeof value2 !== 'number') {\n                            return NaN;\n                        }\n                        values.push(Math.abs(value2));\n                    }\n                    return values;\n                }\n                default:\n                    return NaN;\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('ABS', ABS);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ABS;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AND.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AND(...tests)` implementation. Returns `TRUE`, if all test\n         * results are not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function AND(args, table) {\n            for (let i = 0, iEnd = args.length, value; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                if (!value ||\n                    (typeof value === 'object' &&\n                        !AND(value, table))) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AND', AND);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AND;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AVERAGE.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentsValues } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AVERAGE(...values)` implementation. Calculates the average\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.AVERAGE\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function AVERAGE(args, table) {\n            const values = getArgumentsValues(args, table);\n            let count = 0, result = 0;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                            result += value;\n                        }\n                        break;\n                    case 'object':\n                        for (let j = 0, jEnd = value.length, value2; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                ++count;\n                                result += value2;\n                            }\n                        }\n                        break;\n                }\n            }\n            return (count ? (result / count) : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AVERAGE', AVERAGE);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AVERAGE;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/AVERAGEA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `AVERAGEA(...values)` implementation. Calculates the\n         * average of the given values. Strings and FALSE are calculated as 0.\n         *\n         * @private\n         * @function Formula.processorFunctions.AVERAGEA\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function AVERAGEA(args, table) {\n            let count = 0, result = 0;\n            for (let i = 0, iEnd = args.length, value; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                switch (typeof value) {\n                    case 'boolean':\n                        ++count;\n                        result += (value ? 1 : 0);\n                        continue;\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                            result += value;\n                        }\n                        continue;\n                    case 'string':\n                        ++count;\n                        continue;\n                    default:\n                        for (let j = 0, jEnd = value.length, value2; j < jEnd; ++j) {\n                            value2 = value[j];\n                            switch (typeof value2) {\n                                case 'boolean':\n                                    ++count;\n                                    result += (value2 ? 1 : 0);\n                                    continue;\n                                case 'number':\n                                    if (!isNaN(value2)) {\n                                        ++count;\n                                        result += value2;\n                                    }\n                                    continue;\n                                case 'string':\n                                    ++count;\n                                    continue;\n                            }\n                        }\n                        continue;\n                }\n            }\n            return (count ? (result / count) : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('AVERAGEA', AVERAGEA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return AVERAGEA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/COUNT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `COUNT(...values)` implementation. Returns the count of\n         * given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.COUNT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function COUNT(args, table) {\n            const values = FormulaProcessor.getArgumentsValues(args, table);\n            let count = 0;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            ++count;\n                        }\n                        break;\n                    case 'object':\n                        count += COUNT(value, table);\n                        break;\n                }\n            }\n            return count;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('COUNT', COUNT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return COUNT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/COUNTA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `COUNTA(...values)` implementation. Returns the count of\n         * given values that are not empty.\n         *\n         * @private\n         * @function Formula.processorFunctions.COUNT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function COUNTA(args, table) {\n            const values = FormulaProcessor.getArgumentsValues(args, table);\n            let count = 0;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (isNaN(value)) {\n                            continue;\n                        }\n                        break;\n                    case 'object':\n                        count += COUNTA(value, table);\n                        continue;\n                    case 'string':\n                        if (!value) {\n                            continue;\n                        }\n                        break;\n                }\n                ++count;\n            }\n            return count;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('COUNTA', COUNTA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return COUNTA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/IF.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `IF(test, value1, value2)` implementation. Returns one of\n         * the values based on the test result. `value1` will be returned, if the test\n         * result is not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.IF\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {Highcharts.FormulaValue|Array<Highcharts.FormulaValue>}\n         * Result value of the process.\n         */\n        function IF(args, table) {\n            return (getArgumentValue(args[0], table) ?\n                getArgumentValue(args[1], table) :\n                getArgumentValue(args[2], table));\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('IF', IF);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return IF;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/ISNA.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `ISNA(value)` implementation. Returns TRUE if value is not\n         * a number.\n         *\n         * @private\n         * @function Formula.processorFunctions.ISNA\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function ISNA(args, table) {\n            const value = getArgumentValue(args[0], table);\n            return (typeof value !== 'number' || isNaN(value));\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('ISNA', ISNA);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ISNA;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MAX.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentsValues } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MAX(...values)` implementation. Calculates the largest\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.MAX\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MAX(args, table) {\n            const values = getArgumentsValues(args, table);\n            let result = Number.NEGATIVE_INFINITY;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (value > result) {\n                            result = value;\n                        }\n                        break;\n                    case 'object':\n                        value = MAX(value);\n                        if (value > result) {\n                            result = value;\n                        }\n                        break;\n                }\n            }\n            return isFinite(result) ? result : 0;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MAX', MAX);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MAX;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MEDIAN.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MEDIAN(...values)` implementation. Calculates the median\n         * average of the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MEDIAN\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MEDIAN(args, table) {\n            const median = [], values = FormulaProcessor.getArgumentsValues(args, table);\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            median.push(value);\n                        }\n                        break;\n                    case 'object':\n                        for (let j = 0, jEnd = value.length, value2; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                median.push(value2);\n                            }\n                        }\n                        break;\n                }\n            }\n            const count = median.length;\n            if (!count) {\n                return NaN;\n            }\n            const half = Math.floor(count / 2); // Floor because index starts at 0\n            return (count % 2 ?\n                median[half] : // Odd\n                (median[half - 1] + median[half]) / 2 // Even\n            );\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MEDIAN', MEDIAN);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MEDIAN;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MIN.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentsValues } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MIN(...values)` implementation. Calculates the lowest\n         * of the given values that are numbers.\n         *\n         * @private\n         * @function Formula.processorFunctions.MIN\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MIN(args, table) {\n            const values = getArgumentsValues(args, table);\n            let result = Number.POSITIVE_INFINITY;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (value < result) {\n                            result = value;\n                        }\n                        break;\n                    case 'object':\n                        value = MIN(value);\n                        if (value < result) {\n                            result = value;\n                        }\n                        break;\n                }\n            }\n            return isFinite(result) ? result : 0;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MIN', MIN);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MIN;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MOD.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `MOD(value1, value2)` implementation. Calculates the rest\n         * of the division with the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MOD\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function MOD(args, table) {\n            let value1 = getArgumentValue(args[0], table), value2 = getArgumentValue(args[1], table);\n            if (typeof value1 === 'object') {\n                value1 = value1[0];\n            }\n            if (typeof value2 === 'object') {\n                value2 = value2[0];\n            }\n            if (typeof value1 !== 'number' ||\n                typeof value2 !== 'number' ||\n                value2 === 0) {\n                return NaN;\n            }\n            return value1 % value2;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MOD', MOD);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MOD;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/MODE.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates the mode map of the given arguments.\n         *\n         * @private\n         * @function Formula.processorFunctions.MULT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function getModeMap(args, table) {\n            const modeMap = {}, values = FormulaProcessor.getArgumentsValues(args, table);\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            modeMap[value] = (modeMap[value] || 0) + 1;\n                        }\n                        break;\n                    case 'object':\n                        for (let j = 0, jEnd = value.length, value2; j < jEnd; ++j) {\n                            value2 = value[j];\n                            if (typeof value2 === 'number' &&\n                                !isNaN(value2)) {\n                                modeMap[value2] = (modeMap[value2] || 0) + 1;\n                            }\n                        }\n                        break;\n                }\n            }\n            return modeMap;\n        }\n        /**\n         * Processor for the `MODE.MULT(...values)` implementation. Calculates the most\n         * frequent values of the give values.\n         *\n         * @private\n         * @function Formula.processorFunctions.MULT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number|Array<number>}\n         * Result value of the process.\n         */\n        function MULT(args, table) {\n            const modeMap = getModeMap(args, table), keys = Object.keys(modeMap);\n            if (!keys.length) {\n                return NaN;\n            }\n            let modeKeys = [parseFloat(keys[0])], modeCount = modeMap[keys[0]];\n            for (let i = 1, iEnd = keys.length, key, count; i < iEnd; ++i) {\n                key = keys[i];\n                count = modeMap[key];\n                if (modeCount < count) {\n                    modeKeys = [parseFloat(key)];\n                    modeCount = count;\n                }\n                else if (modeCount === count) {\n                    modeKeys.push(parseFloat(key));\n                }\n            }\n            return modeCount > 1 ? modeKeys : NaN;\n        }\n        /**\n         * Processor for the `MODE.SNGL(...values)` implementation. Calculates the\n         * lowest most frequent value of the give values.\n         *\n         * @private\n         * @function Formula.processorFunctions['MODE.SNGL']\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function SNGL(args, table) {\n            const modeMap = getModeMap(args, table), keys = Object.keys(modeMap);\n            if (!keys.length) {\n                return NaN;\n            }\n            let modeKey = parseFloat(keys[0]), modeCount = modeMap[keys[0]];\n            for (let i = 1, iEnd = keys.length, key, keyValue, count; i < iEnd; ++i) {\n                key = keys[i];\n                count = modeMap[key];\n                if (modeCount < count) {\n                    modeKey = parseFloat(key);\n                    modeCount = count;\n                }\n                else if (modeCount === count) {\n                    keyValue = parseFloat(key);\n                    if (modeKey > keyValue) {\n                        modeKey = keyValue;\n                        modeCount = count;\n                    }\n                }\n            }\n            return modeCount > 1 ? modeKey : NaN;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('MODE', SNGL);\n        FormulaProcessor.registerProcessorFunction('MODE.MULT', MULT);\n        FormulaProcessor.registerProcessorFunction('MODE.SNGL', SNGL);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const MODE = {\n            MULT,\n            SNGL\n        };\n\n        return MODE;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/NOT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `NOT(value)` implementation. Returns the opposite test\n         * result.\n         *\n         * @private\n         * @function Formula.processorFunctions.NOT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean|number}\n         * Result value of the process.\n         */\n        function NOT(args, table) {\n            let value = getArgumentValue(args[0], table);\n            if (typeof value === 'object') {\n                value = value[0];\n            }\n            switch (typeof value) {\n                case 'boolean':\n                case 'number':\n                    return !value;\n            }\n            return NaN;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('NOT', NOT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return NOT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/OR.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `OR(...tests)` implementation. Returns `TRUE`, if one test\n         * result is not `0` or `FALSE`.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean}\n         * Result value of the process.\n         */\n        function OR(args, table) {\n            for (let i = 0, iEnd = args.length, value; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                if (typeof value === 'object') {\n                    if (OR(value, table)) {\n                        return true;\n                    }\n                }\n                else if (value) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('OR', OR);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return OR;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/PRODUCT.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentsValues } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `PRODUCT(...values)` implementation. Calculates the product\n         * of the given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.PRODUCT\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function PRODUCT(args, table) {\n            const values = getArgumentsValues(args, table);\n            let result = 1, calculated = false;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            calculated = true;\n                            result *= value;\n                        }\n                        break;\n                    case 'object':\n                        calculated = true;\n                        result *= PRODUCT(value, table);\n                        break;\n                }\n            }\n            return (calculated ? result : 0);\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('PRODUCT', PRODUCT);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return PRODUCT;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/SUM.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `SUM(...values)` implementation. Calculates the sum of the\n         * given values.\n         *\n         * @private\n         * @function Formula.processorFunctions.SUM\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to process.\n         *\n         * @return {number}\n         * Result value of the process.\n         */\n        function SUM(args, table) {\n            const values = FormulaProcessor.getArgumentsValues(args, table);\n            let result = 0;\n            for (let i = 0, iEnd = values.length, value; i < iEnd; ++i) {\n                value = values[i];\n                switch (typeof value) {\n                    case 'number':\n                        if (!isNaN(value)) {\n                            result += value;\n                        }\n                        break;\n                    case 'object':\n                        result += SUM(value, table);\n                        break;\n                }\n            }\n            return result;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('SUM', SUM); // ð\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SUM;\n    });\n    _registerModule(_modules, 'Data/Formula/Functions/XOR.js', [_modules['Data/Formula/FormulaProcessor.js']], function (FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        const { getArgumentValue } = FormulaProcessor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Processor for the `XOR(...tests)` implementation. Returns `TRUE`, if at least\n         * one of the given tests differs in result of other tests.\n         *\n         * @private\n         * @function Formula.processorFunctions.AND\n         *\n         * @param {Highcharts.FormulaArguments} args\n         * Arguments to process.\n         *\n         * @param {Highcharts.DataTable} [table]\n         * Table to use for references and ranges.\n         *\n         * @return {boolean|number}\n         * Result value of the process.\n         */\n        function XOR(args, table) {\n            for (let i = 0, iEnd = args.length, lastValue, value; i < iEnd; ++i) {\n                value = getArgumentValue(args[i], table);\n                switch (typeof value) {\n                    case 'boolean':\n                    case 'number':\n                        if (typeof lastValue === 'undefined') {\n                            lastValue = !!value;\n                        }\n                        else if (!!value !== lastValue) {\n                            return true;\n                        }\n                        break;\n                    case 'object':\n                        for (let j = 0, jEnd = value.length, value2; j < jEnd; ++j) {\n                            value2 = value[j];\n                            switch (typeof value2) {\n                                case 'boolean':\n                                case 'number':\n                                    if (typeof lastValue === 'undefined') {\n                                        lastValue = !!value2;\n                                    }\n                                    else if (!!value2 !== lastValue) {\n                                        return true;\n                                    }\n                                    break;\n                            }\n                        }\n                        break;\n                }\n            }\n            return false;\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        FormulaProcessor.registerProcessorFunction('XOR', XOR);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return XOR;\n    });\n    _registerModule(_modules, 'Data/Formula/Formula.js', [_modules['Data/Formula/FormulaParser.js'], _modules['Data/Formula/FormulaProcessor.js'], _modules['Data/Formula/FormulaTypes.js']], function (FormulaParser, FormulaProcessor, FormulaType) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /**\n         * Formula engine to make use of spreadsheet formula strings.\n         * @internal\n         */\n        const Formula = {\n            ...FormulaParser,\n            ...FormulaProcessor,\n            ...FormulaType\n        };\n\n        return Formula;\n    });\n    _registerModule(_modules, 'Data/Converters/CSVConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - Christer Vasseng\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming CSV to a table.\n         *\n         * @private\n         */\n        class CSVConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the CSV parser.\n             *\n             * @param {CSVConverter.UserOptions} [options]\n             * Options for the CSV parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.dataTypes = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates a CSV string from the datatable on the connector instance.\n             *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {CSVConverter.Options} [options]\n             * Options used for the export.\n             *\n             * @return {string}\n             * CSV string from the connector table.\n             */\n            export(connector, options = this.options) {\n                const { useLocalDecimalPoint, lineDelimiter } = options, exportNames = (this.options.firstRowAsNames !== false);\n                let { decimalPoint, itemDelimiter } = options;\n                if (!decimalPoint) {\n                    decimalPoint = (itemDelimiter !== ',' && useLocalDecimalPoint ?\n                        (1.1).toLocaleString()[1] :\n                        '.');\n                }\n                if (!itemDelimiter) {\n                    itemDelimiter = (decimalPoint === ',' ? ';' : ',');\n                }\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), csvRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    csvRows.push(columnNames.map((columnName) => `\"${columnName}\"`).join(itemDelimiter));\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    const columnMeta = connector.whatIs(columnName);\n                    let columnDataType;\n                    if (columnMeta) {\n                        columnDataType = columnMeta.dataType;\n                    }\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Prefer datatype from metadata\n                        if (columnDataType === 'string') {\n                            cellValue = '\"' + cellValue + '\"';\n                        }\n                        else if (typeof cellValue === 'number') {\n                            cellValue = String(cellValue).replace('.', decimalPoint);\n                        }\n                        else if (typeof cellValue === 'string') {\n                            cellValue = `\"${cellValue}\"`;\n                        }\n                        rowArray[rowIndex][columnIndex] = cellValue;\n                        // On the final column, push the row to the CSV\n                        if (columnIndex === columnsCount - 1) {\n                            // Trim repeated undefined values starting at the end\n                            // Currently, we export the first \"comma\" even if the\n                            // second value is undefined\n                            let i = columnIndex;\n                            while (rowArray[rowIndex].length > 2) {\n                                const cellVal = rowArray[rowIndex][i];\n                                if (cellVal !== void 0) {\n                                    break;\n                                }\n                                rowArray[rowIndex].pop();\n                                i--;\n                            }\n                            csvRows.push(rowArray[rowIndex].join(itemDelimiter));\n                        }\n                    }\n                }\n                return csvRows.join(lineDelimiter);\n            }\n            /**\n             * Initiates parsing of CSV\n             *\n             * @param {CSVConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, dataTypes = converter.dataTypes, parserOptions = merge(this.options, options), { beforeParse, lineDelimiter, firstRowAsNames, itemDelimiter } = parserOptions;\n                let lines, rowIt = 0, { csv, startRow, endRow } = parserOptions, column;\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (csv && beforeParse) {\n                    csv = beforeParse(csv);\n                }\n                if (csv) {\n                    lines = csv\n                        .replace(/\\r\\n|\\r/g, '\\n') // Windows | Mac\n                        .split(lineDelimiter || '\\n');\n                    if (!startRow || startRow < 0) {\n                        startRow = 0;\n                    }\n                    if (!endRow || endRow >= lines.length) {\n                        endRow = lines.length - 1;\n                    }\n                    if (!itemDelimiter) {\n                        converter.guessedItemDelimiter =\n                            converter.guessDelimiter(lines);\n                    }\n                    // If the first row contain names, add them to the\n                    // headers array and skip the row.\n                    if (firstRowAsNames) {\n                        const headers = lines[0].split(itemDelimiter || converter.guessedItemDelimiter || ',');\n                        // Remove \"\"s from the headers\n                        for (let i = 0; i < headers.length; i++) {\n                            headers[i] = headers[i].trim().replace(/^[\"']|[\"']$/g, '');\n                        }\n                        converter.headers = headers;\n                        startRow++;\n                    }\n                    let offset = 0;\n                    for (rowIt = startRow; rowIt <= endRow; rowIt++) {\n                        if (lines[rowIt][0] === '#') {\n                            offset++;\n                        }\n                        else {\n                            converter\n                                .parseCSVRow(lines[rowIt], rowIt - startRow - offset);\n                        }\n                    }\n                    if (dataTypes.length &&\n                        dataTypes[0].length &&\n                        dataTypes[0][1] === 'date' && // Format is a string date\n                        !converter.options.dateFormat) {\n                        converter.deduceDateFormat(converter.columns[0], null, true);\n                    }\n                    // Guess types.\n                    for (let i = 0, iEnd = converter.columns.length; i < iEnd; ++i) {\n                        column = converter.columns[i];\n                        for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                            if (column[j] && typeof column[j] === 'string') {\n                                let cellValue = converter.asGuessedType(column[j]);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                converter.columns[i][j] = cellValue;\n                            }\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Internal method that parses a single CSV row\n             */\n            parseCSVRow(columnStr, rowNumber) {\n                const converter = this, columns = converter.columns || [], dataTypes = converter.dataTypes, { startColumn, endColumn } = converter.options, itemDelimiter = (converter.options.itemDelimiter ||\n                    converter.guessedItemDelimiter);\n                let { decimalPoint } = converter.options;\n                if (!decimalPoint || decimalPoint === itemDelimiter) {\n                    decimalPoint = converter.guessedDecimalPoint || '.';\n                }\n                let i = 0, c = '', token = '', actualColumn = 0, column = 0;\n                const read = (j) => {\n                    c = columnStr[j];\n                };\n                const pushType = (type) => {\n                    if (dataTypes.length < column + 1) {\n                        dataTypes.push([type]);\n                    }\n                    if (dataTypes[column][dataTypes[column].length - 1] !== type) {\n                        dataTypes[column].push(type);\n                    }\n                };\n                const push = () => {\n                    if (startColumn > actualColumn || actualColumn > endColumn) {\n                        // Skip this column, but increment the column count (#7272)\n                        ++actualColumn;\n                        token = '';\n                        return;\n                    }\n                    // Save the type of the token.\n                    if (typeof token === 'string') {\n                        if (!isNaN(parseFloat(token)) && isFinite(token)) {\n                            token = parseFloat(token);\n                            pushType('number');\n                        }\n                        else if (!isNaN(Date.parse(token))) {\n                            token = token.replace(/\\//g, '-');\n                            pushType('date');\n                        }\n                        else {\n                            pushType('string');\n                        }\n                    }\n                    else {\n                        pushType('number');\n                    }\n                    if (columns.length < column + 1) {\n                        columns.push([]);\n                    }\n                    // Try to apply the decimal point, and check if the token then is a\n                    // number. If not, reapply the initial value\n                    if (typeof token !== 'number' &&\n                        converter.guessType(token) !== 'number' &&\n                        decimalPoint) {\n                        const initialValue = token;\n                        token = token.replace(decimalPoint, '.');\n                        if (converter.guessType(token) !== 'number') {\n                            token = initialValue;\n                        }\n                    }\n                    columns[column][rowNumber] = token;\n                    token = '';\n                    ++column;\n                    ++actualColumn;\n                };\n                if (!columnStr.trim().length) {\n                    return;\n                }\n                if (columnStr.trim()[0] === '#') {\n                    return;\n                }\n                for (; i < columnStr.length; i++) {\n                    read(i);\n                    if (c === '#') {\n                        // If there are hexvalues remaining (#13283)\n                        if (!/^#[A-F\\d]{3,3}|[A-F\\d]{6,6}/i.test(columnStr.substring(i))) {\n                            // The rest of the row is a comment\n                            push();\n                            return;\n                        }\n                    }\n                    // Quoted string\n                    if (c === '\"') {\n                        read(++i);\n                        while (i < columnStr.length) {\n                            if (c === '\"') {\n                                break;\n                            }\n                            token += c;\n                            read(++i);\n                        }\n                    }\n                    else if (c === itemDelimiter) {\n                        push();\n                        // Actual column data\n                    }\n                    else {\n                        token += c;\n                    }\n                }\n                push();\n            }\n            /**\n             * Internal method that guesses the delimiter from the first\n             * 13 lines of the CSV\n             * @param {Array<string>} lines\n             * The CSV, split into lines\n             */\n            guessDelimiter(lines) {\n                let points = 0, commas = 0, guessed;\n                const potDelimiters = {\n                    ',': 0,\n                    ';': 0,\n                    '\\t': 0\n                }, linesCount = lines.length;\n                for (let i = 0; i < linesCount; i++) {\n                    let inStr = false, c, cn, cl, token = '';\n                    // We should be able to detect dateformats within 13 rows\n                    if (i > 13) {\n                        break;\n                    }\n                    const columnStr = lines[i];\n                    for (let j = 0; j < columnStr.length; j++) {\n                        c = columnStr[j];\n                        cn = columnStr[j + 1];\n                        cl = columnStr[j - 1];\n                        if (c === '#') {\n                            // Skip the rest of the line - it's a comment\n                            break;\n                        }\n                        if (c === '\"') {\n                            if (inStr) {\n                                if (cl !== '\"' && cn !== '\"') {\n                                    while (cn === ' ' && j < columnStr.length) {\n                                        cn = columnStr[++j];\n                                    }\n                                    // After parsing a string, the next non-blank\n                                    // should be a delimiter if the CSV is properly\n                                    // formed.\n                                    if (typeof potDelimiters[cn] !== 'undefined') {\n                                        potDelimiters[cn]++;\n                                    }\n                                    inStr = false;\n                                }\n                            }\n                            else {\n                                inStr = true;\n                            }\n                        }\n                        else if (typeof potDelimiters[c] !== 'undefined') {\n                            token = token.trim();\n                            if (!isNaN(Date.parse(token))) {\n                                potDelimiters[c]++;\n                            }\n                            else if (isNaN(Number(token)) ||\n                                !isFinite(Number(token))) {\n                                potDelimiters[c]++;\n                            }\n                            token = '';\n                        }\n                        else {\n                            token += c;\n                        }\n                        if (c === ',') {\n                            commas++;\n                        }\n                        if (c === '.') {\n                            points++;\n                        }\n                    }\n                }\n                // Count the potential delimiters.\n                // This could be improved by checking if the number of delimiters\n                // equals the number of columns - 1\n                if (potDelimiters[';'] > potDelimiters[',']) {\n                    guessed = ';';\n                }\n                else if (potDelimiters[','] > potDelimiters[';']) {\n                    guessed = ',';\n                }\n                else {\n                    // No good guess could be made..\n                    guessed = ',';\n                }\n                // Try to deduce the decimal point if it's not explicitly set.\n                // If both commas or points is > 0 there is likely an issue\n                if (points > commas) {\n                    this.guessedDecimalPoint = '.';\n                }\n                else {\n                    this.guessedDecimalPoint = ',';\n                }\n                return guessed;\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        CSVConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            lineDelimiter: '\\n'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/CSVConnector.js', [_modules['Data/Converters/CSVConverter.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js']], function (CSVConverter, DataConnector, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - Christer Vasseng\n         *  - GÃ¸ran Slettemark\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from CSV\n         *\n         * @private\n         */\n        class CSVConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of CSVConnector.\n             *\n             * @param {CSVConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(CSVConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new CSVConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the CSV source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVConnector#load\n             * @emits CSVConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { csv, csvURL, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    csv,\n                    detail: eventDetail,\n                    table\n                });\n                return Promise\n                    .resolve(csvURL ?\n                    fetch(csvURL).then((response) => response.text()) :\n                    csv || '')\n                    .then((csv) => {\n                    if (csv) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ csv });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector\n                        .setModifierOptions(dataModifier)\n                        .then(() => csv);\n                })\n                    .then((csv) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        csv,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        CSVConnector.defaultOptions = {\n            csv: '',\n            csvURL: '',\n            enablePolling: false,\n            dataRefreshRate: 1,\n            firstRowAsNames: true\n        };\n        DataConnector.registerType('CSV', CSVConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return CSVConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/JSONConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataConverter, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { error, isArray, merge, objectEach } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transforming JSON to a table.\n         *\n         * @private\n         */\n        class JSONConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the JSON parser.\n             *\n             * @param {JSONConverter.UserOptions} [options]\n             * Options for the JSON parser.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConverter.defaultOptions, options);\n                super(mergedOptions);\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                this.table = new DataTable();\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates parsing of JSON structure.\n             *\n             * @param {JSONConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConverter#parse\n             * @emits JSONConverter#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this;\n                options = merge(converter.options, options);\n                const { beforeParse, orientation, firstRowAsNames, columnNames } = options;\n                let data = options.data;\n                if (!data) {\n                    return;\n                }\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                if (beforeParse) {\n                    data = beforeParse(data);\n                }\n                data = data.slice();\n                if (orientation === 'columns') {\n                    for (let i = 0, iEnd = data.length; i < iEnd; i++) {\n                        const item = data[i];\n                        if (!(item instanceof Array)) {\n                            return;\n                        }\n                        if (converter.headers instanceof Array) {\n                            if (firstRowAsNames) {\n                                converter.headers.push(`${item.shift()}`);\n                            }\n                            else if (columnNames && columnNames instanceof Array) {\n                                converter.headers.push(columnNames[i]);\n                            }\n                            converter.table.setColumn(converter.headers[i] || i.toString(), item);\n                        }\n                        else {\n                            error('JSONConverter: Invalid `columnNames` option.', false);\n                        }\n                    }\n                }\n                else if (orientation === 'rows') {\n                    if (firstRowAsNames) {\n                        converter.headers = data.shift();\n                    }\n                    else if (columnNames) {\n                        converter.headers = columnNames;\n                    }\n                    for (let rowIndex = 0, iEnd = data.length; rowIndex < iEnd; rowIndex++) {\n                        let row = data[rowIndex];\n                        if (isArray(row)) {\n                            for (let columnIndex = 0, jEnd = row.length; columnIndex < jEnd; columnIndex++) {\n                                if (converter.columns.length < columnIndex + 1) {\n                                    converter.columns.push([]);\n                                }\n                                converter.columns[columnIndex].push(row[columnIndex]);\n                                if (converter.headers instanceof Array) {\n                                    this.table.setColumn(converter.headers[columnIndex] ||\n                                        columnIndex.toString(), converter.columns[columnIndex]);\n                                }\n                                else {\n                                    error('JSONConverter: Invalid `columnNames` option.', false);\n                                }\n                            }\n                        }\n                        else {\n                            const columnNames = converter.headers;\n                            if (columnNames && !(columnNames instanceof Array)) {\n                                const newRow = {};\n                                objectEach(columnNames, (arrayWithPath, name) => {\n                                    newRow[name] = arrayWithPath.reduce((acc, key) => acc[key], row);\n                                });\n                                row = newRow;\n                            }\n                            this.table.setRows([row], rowIndex);\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed CSV.\n             */\n            getTable() {\n                return this.table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        JSONConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            data: [],\n            orientation: 'rows'\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/JSONConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Utilities.js'], _modules['Data/Converters/JSONConverter.js']], function (DataConnector, U, JSONConverter) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Pawel Lysy\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a DataConnector from JSON structure\n         *\n         * @private\n         */\n        class JSONConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of JSONConnector.\n             *\n             * @param {JSONConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(JSONConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new JSONConverter(mergedOptions);\n                this.options = mergedOptions;\n                if (mergedOptions.enablePolling) {\n                    this.startPolling(Math.max(mergedOptions.dataRefreshRate || 0, 1) * 1000);\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the loading of the JSON source to the connector\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits JSONConnector#load\n             * @emits JSONConnector#afterLoad\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { data, dataUrl, dataModifier } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    data,\n                    detail: eventDetail,\n                    table\n                });\n                return Promise\n                    .resolve(dataUrl ?\n                    fetch(dataUrl).then((json) => json.json()) :\n                    data || [])\n                    .then((data) => {\n                    if (data) {\n                        // If already loaded, clear the current rows\n                        table.deleteColumns();\n                        converter.parse({ data });\n                        table.setColumns(converter.getTable().getColumns());\n                    }\n                    return connector.setModifierOptions(dataModifier).then(() => data);\n                })\n                    .then((data) => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        data,\n                        detail: eventDetail,\n                        table\n                    });\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        JSONConnector.defaultOptions = {\n            data: [],\n            enablePolling: false,\n            dataRefreshRate: 0,\n            firstRowAsNames: true,\n            orientation: 'rows'\n        };\n        DataConnector.registerType('JSON', JSONConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return JSONConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/GoogleSheetsConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge, uniqueKey } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an Google Sheets to a table.\n         *\n         * @private\n         */\n        class GoogleSheetsConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the GoogleSheetsConverter.\n             *\n             * @param {GoogleSheetsConverter.UserOptions} [options]\n             * Options for the GoogleSheetsConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.header = [];\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Initiates the parsing of the Google Sheet\n             *\n             * @param {GoogleSheetsConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits GoogleSheetsParser#parse\n             * @emits GoogleSheetsParser#afterParse\n             */\n            parse(options, eventDetail) {\n                const converter = this, parseOptions = merge(converter.options, options);\n                let columns = ((parseOptions.json?.values) || []).map((column) => column.slice());\n                if (columns.length === 0) {\n                    return false;\n                }\n                converter.header = [];\n                converter.columns = [];\n                converter.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n                // If beforeParse is defined, use it to modify the data\n                const { beforeParse, json } = parseOptions;\n                if (beforeParse && json) {\n                    columns = beforeParse(json.values);\n                }\n                let column;\n                converter.columns = columns;\n                for (let i = 0, iEnd = columns.length; i < iEnd; i++) {\n                    column = columns[i];\n                    converter.header[i] = (parseOptions.firstRowAsNames ?\n                        `${column.shift()}` :\n                        uniqueKey());\n                    for (let j = 0, jEnd = column.length; j < jEnd; ++j) {\n                        if (column[j] && typeof column[j] === 'string') {\n                            let cellValue = converter.asGuessedType(column[j]);\n                            if (cellValue instanceof Date) {\n                                cellValue = cellValue.getTime();\n                            }\n                            converter.columns[i][j] = cellValue;\n                        }\n                    }\n                }\n                converter.emit({\n                    type: 'afterParse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.header\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed Google Sheet\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.header);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        GoogleSheetsConverter.defaultOptions = {\n            ...DataConverter.defaultOptions\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/GoogleSheetsConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/GoogleSheetsConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, GoogleSheetsConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *  - Jomar HÃ¸nsi\n         *\n         * */\n        const { merge, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Tests Google's response for error.\n         * @private\n         */\n        function isGoogleError(json) {\n            return (typeof json === 'object' && json &&\n                typeof json.error === 'object' && json.error &&\n                typeof json.error.code === 'number' &&\n                typeof json.error.message === 'string' &&\n                typeof json.error.status === 'string');\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @todo implement save, requires oauth2\n         */\n        class GoogleSheetsConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of GoogleSheetsConnector\n             *\n             * @param {GoogleSheetsConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(GoogleSheetsConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new GoogleSheetsConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Loads data from a Google Spreadsheet.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<this>}\n             * Same connector instance with modified table.\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, dataRefreshRate, enablePolling, firstRowAsNames, googleAPIKey, googleSpreadsheetKey } = connector.options, url = GoogleSheetsConnector.buildFetchURL(googleAPIKey, googleSpreadsheetKey, connector.options);\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    url\n                });\n                if (!URL.canParse(url)) {\n                    throw new Error('Invalid URL: ' + url);\n                }\n                return fetch(url)\n                    .then((response) => (response.json()))\n                    .then((json) => {\n                    if (isGoogleError(json)) {\n                        throw new Error(json.error.message);\n                    }\n                    converter.parse({\n                        firstRowAsNames,\n                        json\n                    });\n                    // If already loaded, clear the current table\n                    table.deleteColumns();\n                    table.setColumns(converter.getTable().getColumns());\n                    return connector.setModifierOptions(dataModifier);\n                })\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        url\n                    });\n                    // Polling\n                    if (enablePolling) {\n                        setTimeout(() => connector.load(), Math.max(dataRefreshRate || 0, 1) * 1000);\n                    }\n                    return connector;\n                })['catch']((error) => {\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    throw error;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        GoogleSheetsConnector.defaultOptions = {\n            googleAPIKey: '',\n            googleSpreadsheetKey: '',\n            enablePolling: false,\n            dataRefreshRate: 2,\n            firstRowAsNames: true\n        };\n        /* *\n         *\n         *  Class Namespace\n         *\n         * */\n        (function (GoogleSheetsConnector) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Creates GoogleSheets API v4 URL.\n             * @private\n             */\n            function buildFetchURL(apiKey, sheetKey, options = {}) {\n                const url = new URL(`https://sheets.googleapis.com/v4/spreadsheets/${sheetKey}/values/`);\n                const range = options.onlyColumnNames ?\n                    'A1:Z1' : buildQueryRange(options);\n                url.pathname += range;\n                const searchParams = url.searchParams;\n                searchParams.set('alt', 'json');\n                if (!options.onlyColumnNames) {\n                    searchParams.set('dateTimeRenderOption', 'FORMATTED_STRING');\n                    searchParams.set('majorDimension', 'COLUMNS');\n                    searchParams.set('valueRenderOption', 'UNFORMATTED_VALUE');\n                }\n                searchParams.set('prettyPrint', 'false');\n                searchParams.set('key', apiKey);\n                return url.href;\n            }\n            GoogleSheetsConnector.buildFetchURL = buildFetchURL;\n            /**\n             * Creates sheets range.\n             * @private\n             */\n            function buildQueryRange(options = {}) {\n                const { endColumn, endRow, googleSpreadsheetRange, startColumn, startRow } = options;\n                return googleSpreadsheetRange || ((alphabet[startColumn || 0] || 'A') +\n                    (Math.max((startRow || 0), 0) + 1) +\n                    ':' +\n                    (alphabet[pick(endColumn, 25)] || 'Z') +\n                    (endRow ?\n                        Math.max(endRow, 0) :\n                        'Z'));\n            }\n            GoogleSheetsConnector.buildQueryRange = buildQueryRange;\n        })(GoogleSheetsConnector || (GoogleSheetsConnector = {}));\n        DataConnector.registerType('GoogleSheets', GoogleSheetsConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return GoogleSheetsConnector;\n    });\n    _registerModule(_modules, 'Data/Converters/HTMLTableConverter.js', [_modules['Data/Converters/DataConverter.js'], _modules['Core/Utilities.js']], function (DataConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Row equal\n         */\n        function isRowEqual(row1, row2) {\n            let i = row1.length;\n            if (row2.length === i) {\n                while (--i) {\n                    if (row1[i] !== row2[i]) {\n                        return false;\n                    }\n                }\n            }\n            else {\n                return false;\n            }\n            return true;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Handles parsing and transformation of an HTML table to a table.\n         *\n         * @private\n         */\n        class HTMLTableConverter extends DataConverter {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the HTMLTableConverter.\n             *\n             * @param {HTMLTableConverter.UserOptions} [options]\n             * Options for the HTMLTableConverter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConverter.defaultOptions, options);\n                super(mergedOptions);\n                this.columns = [];\n                this.headers = [];\n                this.options = mergedOptions;\n                if (mergedOptions.tableElement) {\n                    this.tableElement = mergedOptions.tableElement;\n                    this.tableElementID = mergedOptions.tableElement.id;\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Exports the dataconnector as an HTML string, using the options\n             * provided on      *\n             * @param {DataConnector} connector\n             * Connector instance to export from.\n             *\n             * @param {HTMLTableConnector.ExportOptions} [options]\n             * Options that override default or existing export options.\n             *\n             * @return {string}\n             * HTML from the current dataTable.\n             */\n            export(connector, options = this.options) {\n                const exportNames = (options.firstRowAsNames !== false), useMultiLevelHeaders = options.useMultiLevelHeaders;\n                const columns = connector.getSortedColumns(options.usePresentationOrder), columnNames = Object.keys(columns), htmlRows = [], columnsCount = columnNames.length;\n                const rowArray = [];\n                let tableHead = '';\n                // Add the names as the first row if they should be exported\n                if (exportNames) {\n                    const subcategories = [];\n                    // If using multilevel headers, the first value\n                    // of each column is a subcategory\n                    if (useMultiLevelHeaders) {\n                        for (const name of columnNames) {\n                            const subhead = (columns[name].shift() || '').toString();\n                            subcategories.push(subhead);\n                        }\n                        tableHead = this.getTableHeaderHTML(columnNames, subcategories, options);\n                    }\n                    else {\n                        tableHead = this.getTableHeaderHTML(void 0, columnNames, options);\n                    }\n                }\n                for (let columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n                    const columnName = columnNames[columnIndex], column = columns[columnName], columnLength = column.length;\n                    for (let rowIndex = 0; rowIndex < columnLength; rowIndex++) {\n                        let cellValue = column[rowIndex];\n                        if (!rowArray[rowIndex]) {\n                            rowArray[rowIndex] = [];\n                        }\n                        // Alternative: Datatype from HTML attribute with\n                        // connector.whatIs(columnName)\n                        if (!(typeof cellValue === 'string' ||\n                            typeof cellValue === 'number' ||\n                            typeof cellValue === 'undefined')) {\n                            cellValue = (cellValue || '').toString();\n                        }\n                        rowArray[rowIndex][columnIndex] = this.getCellHTMLFromValue(columnIndex ? 'td' : 'th', null, columnIndex ? '' : 'scope=\"row\"', cellValue);\n                        // On the final column, push the row to the array\n                        if (columnIndex === columnsCount - 1) {\n                            htmlRows.push('<tr>' +\n                                rowArray[rowIndex].join('') +\n                                '</tr>');\n                        }\n                    }\n                }\n                let caption = '';\n                // Add table caption\n                // Current exportdata falls back to chart title\n                // but that should probably be handled elsewhere?\n                if (options.tableCaption) {\n                    caption = '<caption class=\"highcharts-table-caption\">' +\n                        options.tableCaption +\n                        '</caption>';\n                }\n                return ('<table>' +\n                    caption +\n                    tableHead +\n                    '<tbody>' +\n                    htmlRows.join('') +\n                    '</tbody>' +\n                    '</table>');\n            }\n            /**\n             * Get table cell markup from row data.\n             */\n            getCellHTMLFromValue(tag, classes, attrs, value, decimalPoint) {\n                let val = value, className = 'text' + (classes ? ' ' + classes : '');\n                // Convert to string if number\n                if (typeof val === 'number') {\n                    val = val.toString();\n                    if (decimalPoint === ',') {\n                        val = val.replace('.', decimalPoint);\n                    }\n                    className = 'number';\n                }\n                else if (!value) {\n                    val = '';\n                    className = 'empty';\n                }\n                return '<' + tag + (attrs ? ' ' + attrs : '') +\n                    ' class=\"' + className + '\">' +\n                    val + '</' + tag + '>';\n            }\n            /**\n             * Get table header markup from row data.\n             */\n            getTableHeaderHTML(topheaders = [], subheaders = [], options = this.options) {\n                const { useMultiLevelHeaders, useRowspanHeaders } = options;\n                let html = '<thead>', i = 0, len = subheaders && subheaders.length, next, cur, curColspan = 0, rowspan;\n                // Clean up multiple table headers. Chart.getDataRows() returns two\n                // levels of headers when using multilevel, not merged. We need to\n                // merge identical headers, remove redundant headers, and keep it\n                // all marked up nicely.\n                if (useMultiLevelHeaders &&\n                    topheaders &&\n                    subheaders &&\n                    !isRowEqual(topheaders, subheaders)) {\n                    html += '<tr>';\n                    for (; i < len; ++i) {\n                        cur = topheaders[i];\n                        next = topheaders[i + 1];\n                        if (cur === next) {\n                            ++curColspan;\n                        }\n                        else if (curColspan) {\n                            // Ended colspan\n                            // Add cur to HTML with colspan.\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\" ' +\n                                'colspan=\"' + (curColspan + 1) + '\"', cur);\n                            curColspan = 0;\n                        }\n                        else {\n                            // Cur is standalone. If it is same as sublevel,\n                            // remove sublevel and add just toplevel.\n                            if (cur === subheaders[i]) {\n                                if (useRowspanHeaders) {\n                                    rowspan = 2;\n                                    delete subheaders[i];\n                                }\n                                else {\n                                    rowspan = 1;\n                                    subheaders[i] = '';\n                                }\n                            }\n                            else {\n                                rowspan = 1;\n                            }\n                            html += this.getCellHTMLFromValue('th', 'highcharts-table-topheading', 'scope=\"col\"' +\n                                (rowspan > 1 ?\n                                    ' valign=\"top\" rowspan=\"' + rowspan + '\"' :\n                                    ''), cur);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                // Add the subheaders (the only headers if not using multilevels)\n                if (subheaders) {\n                    html += '<tr>';\n                    for (i = 0, len = subheaders.length; i < len; ++i) {\n                        if (typeof subheaders[i] !== 'undefined') {\n                            html += this.getCellHTMLFromValue('th', null, 'scope=\"col\"', subheaders[i]);\n                        }\n                    }\n                    html += '</tr>';\n                }\n                html += '</thead>';\n                return html;\n            }\n            /**\n             * Initiates the parsing of the HTML table\n             *\n             * @param {HTMLTableConverter.UserOptions}[options]\n             * Options for the parser\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits CSVDataParser#parse\n             * @emits CSVDataParser#afterParse\n             * @emits HTMLTableParser#parseError\n             */\n            parse(options, eventDetail) {\n                const converter = this, columns = [], headers = [], parseOptions = merge(converter.options, options), { endRow, startColumn, endColumn, firstRowAsNames } = parseOptions, tableHTML = parseOptions.tableElement || this.tableElement;\n                if (!(tableHTML instanceof HTMLElement)) {\n                    converter.emit({\n                        type: 'parseError',\n                        columns,\n                        detail: eventDetail,\n                        headers,\n                        error: 'Not a valid HTML Table'\n                    });\n                    return;\n                }\n                converter.tableElement = tableHTML;\n                converter.tableElementID = tableHTML.id;\n                this.emit({\n                    type: 'parse',\n                    columns: converter.columns,\n                    detail: eventDetail,\n                    headers: converter.headers\n                });\n                const rows = tableHTML.getElementsByTagName('tr'), rowsCount = rows.length;\n                let rowIndex = 0, item, { startRow } = parseOptions;\n                // Insert headers from the first row\n                if (firstRowAsNames && rowsCount) {\n                    const items = rows[0].children, itemsLength = items.length;\n                    for (let i = startColumn; i < itemsLength; i++) {\n                        if (i > endColumn) {\n                            break;\n                        }\n                        item = items[i];\n                        if (item.tagName === 'TD' ||\n                            item.tagName === 'TH') {\n                            headers.push(item.innerHTML);\n                        }\n                    }\n                    startRow++;\n                }\n                while (rowIndex < rowsCount) {\n                    if (rowIndex >= startRow && rowIndex <= endRow) {\n                        const columnsInRow = rows[rowIndex].children, columnsInRowLength = columnsInRow.length;\n                        let columnIndex = 0;\n                        while (columnIndex < columnsInRowLength) {\n                            const relativeColumnIndex = columnIndex - startColumn, row = columns[relativeColumnIndex];\n                            item = columnsInRow[columnIndex];\n                            if ((item.tagName === 'TD' ||\n                                item.tagName === 'TH') &&\n                                (columnIndex >= startColumn &&\n                                    columnIndex <= endColumn)) {\n                                if (!columns[relativeColumnIndex]) {\n                                    columns[relativeColumnIndex] = [];\n                                }\n                                let cellValue = converter.asGuessedType(item.innerHTML);\n                                if (cellValue instanceof Date) {\n                                    cellValue = cellValue.getTime();\n                                }\n                                columns[relativeColumnIndex][rowIndex - startRow] = cellValue;\n                                // Loop over all previous indices and make sure\n                                // they are nulls, not undefined.\n                                let i = 1;\n                                while (rowIndex - startRow >= i &&\n                                    row[rowIndex - startRow - i] === void 0) {\n                                    row[rowIndex - startRow - i] = null;\n                                    i++;\n                                }\n                            }\n                            columnIndex++;\n                        }\n                    }\n                    rowIndex++;\n                }\n                this.columns = columns;\n                this.headers = headers;\n                this.emit({\n                    type: 'afterParse',\n                    columns,\n                    detail: eventDetail,\n                    headers\n                });\n            }\n            /**\n             * Handles converting the parsed data to a table.\n             *\n             * @return {DataTable}\n             * Table from the parsed HTML table\n             */\n            getTable() {\n                return DataConverter.getTableFromColumns(this.columns, this.headers);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options\n         */\n        HTMLTableConverter.defaultOptions = {\n            ...DataConverter.defaultOptions,\n            useRowspanHeaders: true,\n            useMultiLevelHeaders: true\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConverter;\n    });\n    _registerModule(_modules, 'Data/Connectors/HTMLTableConnector.js', [_modules['Data/Connectors/DataConnector.js'], _modules['Core/Globals.js'], _modules['Data/Converters/HTMLTableConverter.js'], _modules['Core/Utilities.js']], function (DataConnector, H, HTMLTableConverter, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Torstein HÃ¸nsi\n         *  - GÃ¸ran Slettemark\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { win } = H;\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Class that handles creating a data connector from an HTML table.\n         *\n         * @private\n         */\n        class HTMLTableConnector extends DataConnector {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of HTMLTableConnector.\n             *\n             * @param {HTMLTableConnector.UserOptions} [options]\n             * Options for the connector and converter.\n             */\n            constructor(options) {\n                const mergedOptions = merge(HTMLTableConnector.defaultOptions, options);\n                super(mergedOptions);\n                this.converter = new HTMLTableConverter(mergedOptions);\n                this.options = mergedOptions;\n            }\n            /**\n             * Initiates creating the dataconnector from the HTML table\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @emits HTMLTableConnector#load\n             * @emits HTMLTableConnector#afterLoad\n             * @emits HTMLTableConnector#loadError\n             */\n            load(eventDetail) {\n                const connector = this, converter = connector.converter, table = connector.table, { dataModifier, table: tableHTML } = connector.options;\n                connector.emit({\n                    type: 'load',\n                    detail: eventDetail,\n                    table,\n                    tableElement: connector.tableElement\n                });\n                let tableElement;\n                if (typeof tableHTML === 'string') {\n                    connector.tableID = tableHTML;\n                    tableElement = win.document.getElementById(tableHTML);\n                }\n                else {\n                    tableElement = tableHTML;\n                    connector.tableID = tableElement.id;\n                }\n                connector.tableElement = tableElement || void 0;\n                if (!connector.tableElement) {\n                    const error = 'HTML table not provided, or element with ID not found';\n                    connector.emit({\n                        type: 'loadError',\n                        detail: eventDetail,\n                        error,\n                        table\n                    });\n                    return Promise.reject(new Error(error));\n                }\n                converter.parse(merge({ tableElement: connector.tableElement }, connector.options), eventDetail);\n                // If already loaded, clear the current rows\n                table.deleteColumns();\n                table.setColumns(converter.getTable().getColumns());\n                return connector\n                    .setModifierOptions(dataModifier)\n                    .then(() => {\n                    connector.emit({\n                        type: 'afterLoad',\n                        detail: eventDetail,\n                        table,\n                        tableElement: connector.tableElement\n                    });\n                    return connector;\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        HTMLTableConnector.defaultOptions = {\n            table: ''\n        };\n        DataConnector.registerType('HTMLTable', HTMLTableConnector);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return HTMLTableConnector;\n    });\n    _registerModule(_modules, 'Data/Modifiers/ChainModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Modifies a table with the help of modifiers in an ordered chain.\n         *\n         */\n        class ChainModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the modifier chain.\n             *\n             * @param {Partial<ChainModifier.Options>} [options]\n             * Options to configure the modifier chain.\n             *\n             * @param {...DataModifier} [chain]\n             * Ordered chain of modifiers.\n             */\n            constructor(options, ...chain) {\n                super();\n                this.chain = chain;\n                this.options = merge(ChainModifier.defaultOptions, options);\n                const optionsChain = this.options.chain || [];\n                for (let i = 0, iEnd = optionsChain.length, modifierOptions, ModifierClass; i < iEnd; ++i) {\n                    modifierOptions = optionsChain[i];\n                    if (!modifierOptions.type) {\n                        continue;\n                    }\n                    ModifierClass = DataModifier.types[modifierOptions.type];\n                    if (ModifierClass) {\n                        chain.push(new ModifierClass(modifierOptions));\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds a configured modifier to the end of the modifier chain. Please note,\n             * that the modifier can be added multiple times.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to add.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            add(modifier, eventDetail) {\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                this.chain.push(modifier);\n                this.emit({\n                    type: 'addModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n            /**\n             * Clears all modifiers from the chain.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            clear(eventDetail) {\n                this.emit({\n                    type: 'clearChain',\n                    detail: eventDetail\n                });\n                this.chain.length = 0;\n                this.emit({\n                    type: 'afterClearChain',\n                    detail: eventDetail\n                });\n            }\n            /**\n             * Applies several modifications to the table and returns a modified copy of\n             * the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Promise<Highcharts.DataTable>}\n             * Table with `modified` property as a reference.\n             */\n            async modify(table, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.slice().reverse() :\n                    this.chain.slice());\n                if (table.modified === table) {\n                    table.modified = table.clone(false, eventDetail);\n                }\n                let modified = table;\n                for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                    try {\n                        await modifiers[i].modify(modified, eventDetail);\n                    }\n                    catch (error) {\n                        this.emit({\n                            type: 'error',\n                            detail: eventDetail,\n                            table\n                        });\n                        throw error;\n                    }\n                    modified = modified.modified;\n                }\n                table.modified = modified;\n                return table;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain);\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyCell(clone, columnName, rowIndex, cellValue, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyColumns(clone, columns, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifiers = (this.options.reverse ?\n                    this.chain.reverse() :\n                    this.chain.slice());\n                if (modifiers.length) {\n                    let clone = table.clone();\n                    for (let i = 0, iEnd = modifiers.length; i < iEnd; ++i) {\n                        modifiers[i].modifyRows(clone, rows, rowIndex, eventDetail);\n                        clone = clone.modified;\n                    }\n                    table.modified = clone;\n                }\n                return table;\n            }\n            /**\n             * Applies several modifications to the table.\n             *\n             * *Note:* The `modified` property of the table gets replaced.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table as a reference.\n             *\n             * @emits ChainDataModifier#execute\n             * @emits ChainDataModifier#afterExecute\n             */\n            modifyTable(table, eventDetail) {\n                const chain = this;\n                chain.emit({\n                    type: 'modify',\n                    detail: eventDetail,\n                    table\n                });\n                const modifiers = (chain.options.reverse ?\n                    chain.chain.reverse() :\n                    chain.chain.slice());\n                let modified = table.modified;\n                for (let i = 0, iEnd = modifiers.length, modifier; i < iEnd; ++i) {\n                    modifier = modifiers[i];\n                    modified = modifier.modifyTable(modified, eventDetail).modified;\n                }\n                table.modified = modified;\n                chain.emit({\n                    type: 'afterModify',\n                    detail: eventDetail,\n                    table\n                });\n                return table;\n            }\n            /**\n             * Removes a configured modifier from all positions in the modifier chain.\n             *\n             * @param {DataModifier} modifier\n             * Configured modifier to remove.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             */\n            remove(modifier, eventDetail) {\n                const modifiers = this.chain;\n                this.emit({\n                    type: 'removeModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n                modifiers.splice(modifiers.indexOf(modifier), 1);\n                this.emit({\n                    type: 'afterRemoveModifier',\n                    detail: eventDetail,\n                    modifier\n                });\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default option for the ordered modifier chain.\n         */\n        ChainModifier.defaultOptions = {\n            type: 'Chain'\n        };\n        DataModifier.registerType('Chain', ChainModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChainModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/InvertModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Wojciech Chmiel\n         *  - Sophie Bremer\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Inverts columns and rows in a table.\n         *\n         * @private\n         */\n        class InvertModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the invert modifier.\n             *\n             * @param {Partial<InvertModifier.Options>} [options]\n             * Options to configure the invert modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(InvertModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modified = table.modified, modifiedRowIndex = modified.getRowIndexBy('columnNames', columnName);\n                if (typeof modifiedRowIndex === 'undefined') {\n                    modified.setColumns(this.modifyTable(table.clone()).getColumns(), void 0, eventDetail);\n                }\n                else {\n                    modified.setCell(`${rowIndex}`, modifiedRowIndex, cellValue, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let columnNames = table.getColumnNames(), reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                columnNames = Object.keys(columns);\n                for (let i = 0, iEnd = columnNames.length, column, columnName, modifiedRowIndex; i < iEnd; ++i) {\n                    columnName = columnNames[i];\n                    column = columns[columnName];\n                    modifiedRowIndex = (modified.getRowIndexBy('columnNames', columnName) ||\n                        modified.getRowCount());\n                    for (let j = 0, j2 = rowIndex, jEnd = column.length; j < jEnd; ++j, ++j2) {\n                        modified.setCell(`${j2}`, modifiedRowIndex, column[j], eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const columnNames = table.getColumnNames(), modified = table.modified, modifiedColumnNames = (modified.getColumn('columnNames') || []);\n                let reset = (table.getRowCount() !== modifiedColumnNames.length);\n                if (!reset) {\n                    for (let i = 0, iEnd = columnNames.length; i < iEnd; ++i) {\n                        if (columnNames[i] !== modifiedColumnNames[i]) {\n                            reset = true;\n                            break;\n                        }\n                    }\n                }\n                if (reset) {\n                    return this.modifyTable(table, eventDetail);\n                }\n                for (let i = 0, i2 = rowIndex, iEnd = rows.length, row; i < iEnd; ++i, ++i2) {\n                    row = rows[i];\n                    if (row instanceof Array) {\n                        modified.setColumn(`${i2}`, row);\n                    }\n                    else {\n                        for (let j = 0, jEnd = columnNames.length; j < jEnd; ++j) {\n                            modified.setCell(`${i2}`, j, row[columnNames[j]], eventDetail);\n                        }\n                    }\n                }\n                return table;\n            }\n            /**\n             * Inverts rows and columns in the table.\n             *\n             * @param {DataTable} table\n             * Table to invert.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with inverted `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const modified = table.modified;\n                if (table.hasColumns(['columnNames'])) { // Inverted table\n                    const columnNames = ((table.deleteColumns(['columnNames']) || {})\n                        .columnNames || []).map((column) => `${column}`), columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[columnNames[i]] = row;\n                        }\n                    }\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                else { // Regular table\n                    const columns = {};\n                    for (let i = 0, iEnd = table.getRowCount(), row; i < iEnd; ++i) {\n                        row = table.getRow(i);\n                        if (row) {\n                            columns[`${i}`] = row;\n                        }\n                    }\n                    columns.columnNames = table.getColumnNames();\n                    modified.deleteColumns();\n                    modified.setColumns(columns);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the invert modifier.\n         */\n        InvertModifier.defaultOptions = {\n            type: 'Invert'\n        };\n        DataModifier.registerType('Invert', InvertModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return InvertModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/MathModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/Formula/FormulaParser.js'], _modules['Data/Formula/FormulaProcessor.js']], function (DataModifier, FormulaParser, FormulaProcessor) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Replaces formula strings in a table with calculated values.\n         *\n         * @class\n         * @name Highcharts.DataModifier.types.MathModifier\n         * @augments Highcharts.DataModifier\n         */\n        class MathModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(options) {\n                super();\n                this.options = {\n                    ...MathModifier.defaultOptions,\n                    ...options\n                };\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const alternativeSeparators = modifier.options.alternativeSeparators, formulaColumns = (modifier.options.formulaColumns ||\n                    table.getColumnNames()), modified = table.modified;\n                for (let i = 0, iEnd = formulaColumns.length, columnName; i < iEnd; ++i) {\n                    columnName = formulaColumns[i];\n                    if (formulaColumns.indexOf(columnName) >= 0) {\n                        modified.setColumn(columnName, modifier.processColumn(table, columnName));\n                    }\n                }\n                const columnFormulas = (modifier.options.columnFormulas || []);\n                for (let i = 0, iEnd = columnFormulas.length, columnFormula, formula; i < iEnd; ++i) {\n                    columnFormula = columnFormulas[i];\n                    formula = FormulaParser.parseFormula(columnFormula.formula, alternativeSeparators);\n                    modified.setColumn(columnFormula.column, modifier.processColumnFormula(formula, table, columnFormula.rowStart, columnFormula.rowEnd));\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n            /**\n             * Process a column by replacing formula strings with calculated values.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to extract column from and use as reference.\n             *\n             * @param {string} columnName\n             * Name of column to process.\n             *\n             * @param {number} rowIndex\n             * Row index to start the replacing process from.\n             *\n             * @return {Highcharts.DataTableColumn}\n             * Returns the processed table column.\n             */\n            processColumn(table, columnName, rowIndex = 0) {\n                const alternativeSeparators = this.options.alternativeSeparators, column = (table.getColumn(columnName, true) || [])\n                    .slice(rowIndex > 0 ? rowIndex : 0);\n                for (let i = 0, iEnd = column.length, cacheFormula = [], cacheString = '', cell; i < iEnd; ++i) {\n                    cell = column[i];\n                    if (typeof cell === 'string' &&\n                        cell[0] === '=') {\n                        try {\n                            // Use cache while formula string is repetitive\n                            cacheFormula = (cacheString === cell ?\n                                cacheFormula :\n                                FormulaParser.parseFormula(cell.substring(1), alternativeSeparators));\n                            // Process parsed formula string\n                            column[i] =\n                                FormulaProcessor.processFormula(cacheFormula, table);\n                        }\n                        catch {\n                            column[i] = NaN;\n                        }\n                    }\n                }\n                return column;\n            }\n            /**\n             * Process a column by replacing cell values with calculated values from a\n             * given formula.\n             *\n             * @private\n             *\n             * @param {Highcharts.Formula} formula\n             * Formula to use for processing.\n             *\n             * @param {Highcharts.DataTable} table\n             * Table to extract column from and use as reference.\n             *\n             * @param {number} rowStart\n             * Row index to start the replacing process from.\n             *\n             * @param {number} rowEnd\n             * Row index to end the replacing process.\n             *\n             * @return {Highcharts.DataTableColumn}\n             * Returns the processed table column.\n             */\n            processColumnFormula(formula, table, rowStart = 0, rowEnd = table.getRowCount()) {\n                rowStart = rowStart >= 0 ? rowStart : 0;\n                rowEnd = rowEnd >= 0 ? rowEnd : table.getRowCount() + rowEnd;\n                const column = [], modified = table.modified;\n                for (let i = 0, iEnd = (rowEnd - rowStart); i < iEnd; ++i) {\n                    try {\n                        column[i] = FormulaProcessor.processFormula(formula, modified);\n                    }\n                    catch {\n                        column[i] = NaN;\n                    }\n                    finally {\n                        formula = FormulaProcessor.translateReferences(formula, 0, 1);\n                    }\n                }\n                return column;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options of MathModifier.\n         * @private\n         */\n        MathModifier.defaultOptions = {\n            type: 'Math',\n            alternativeSeparators: false\n        };\n        DataModifier.registerType('Math', MathModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return MathModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/RangeModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Core/Utilities.js']], function (DataModifier, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Filters out table rows with a specific value range.\n         *\n         */\n        class RangeModifier extends DataModifier {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(RangeModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Replaces table rows with filtered rows.\n             *\n             * @param {DataTable} table\n             * Table to modify.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                let indexes = [];\n                const { additive, ranges, strict } = modifier.options;\n                if (ranges.length) {\n                    const modified = table.modified;\n                    let columns = table.getColumns(), rows = [];\n                    for (let i = 0, iEnd = ranges.length, range, rangeColumn; i < iEnd; ++i) {\n                        range = ranges[i];\n                        if (strict &&\n                            typeof range.minValue !== typeof range.maxValue) {\n                            continue;\n                        }\n                        if (i > 0 && !additive) {\n                            modified.deleteRows();\n                            modified.setRows(rows);\n                            modified.setOriginalRowIndexes(indexes, true);\n                            columns = modified.getColumns();\n                            rows = [];\n                            indexes = [];\n                        }\n                        rangeColumn = (columns[range.column] || []);\n                        for (let j = 0, jEnd = rangeColumn.length, cell, row, originalRowIndex; j < jEnd; ++j) {\n                            cell = rangeColumn[j];\n                            switch (typeof cell) {\n                                default:\n                                    continue;\n                                case 'boolean':\n                                case 'number':\n                                case 'string':\n                                    break;\n                            }\n                            if (strict &&\n                                typeof cell !== typeof range.minValue) {\n                                continue;\n                            }\n                            if (cell >= range.minValue &&\n                                cell <= range.maxValue) {\n                                if (additive) {\n                                    row = table.getRow(j);\n                                    originalRowIndex = table.getOriginalRowIndex(j);\n                                }\n                                else {\n                                    row = modified.getRow(j);\n                                    originalRowIndex = modified.getOriginalRowIndex(j);\n                                }\n                                if (row) {\n                                    rows.push(row);\n                                    indexes.push(originalRowIndex);\n                                }\n                            }\n                        }\n                    }\n                    modified.deleteRows();\n                    modified.setRows(rows);\n                    modified.setOriginalRowIndexes(indexes);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options for the range modifier.\n         */\n        RangeModifier.defaultOptions = {\n            type: 'Range',\n            ranges: []\n        };\n        DataModifier.registerType('Range', RangeModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return RangeModifier;\n    });\n    _registerModule(_modules, 'Data/Modifiers/SortModifier.js', [_modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataTable.js'], _modules['Core/Utilities.js']], function (DataModifier, DataTable, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Highsoft AS\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         *  Authors:\n         *  - Sophie Bremer\n         *  - Dawid Dragula\n         *\n         * */\n        const { merge } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Sort table rows according to values of a column.\n         *\n         */\n        class SortModifier extends DataModifier {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static ascending(a, b) {\n                return ((a || 0) < (b || 0) ? -1 :\n                    (a || 0) > (b || 0) ? 1 :\n                        0);\n            }\n            static descending(a, b) {\n                return ((b || 0) < (a || 0) ? -1 :\n                    (b || 0) > (a || 0) ? 1 :\n                        0);\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            /**\n             * Constructs an instance of the range modifier.\n             *\n             * @param {Partial<RangeDataModifier.Options>} [options]\n             * Options to configure the range modifier.\n             */\n            constructor(options) {\n                super();\n                this.options = merge(SortModifier.defaultOptions, options);\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Returns index and row for sort reference.\n             *\n             * @private\n             *\n             * @param {Highcharts.DataTable} table\n             * Table with rows to reference.\n             *\n             * @return {Array<SortModifier.RowReference>}\n             * Array of row references.\n             */\n            getRowReferences(table) {\n                const rows = table.getRows(), rowReferences = [];\n                for (let i = 0, iEnd = rows.length; i < iEnd; ++i) {\n                    rowReferences.push({\n                        index: i,\n                        row: rows[i]\n                    });\n                }\n                return rowReferences;\n            }\n            /**\n             * Applies partial modifications of a cell change to the property `modified`\n             * of the given modified table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {string} columnName\n             * Column name of changed cell.\n             *\n             * @param {number|undefined} rowIndex\n             * Row index of changed cell.\n             *\n             * @param {Highcharts.DataTableCellType} cellValue\n             * Changed cell value.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyCell(table, columnName, rowIndex, cellValue, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (columnName === orderByColumn) {\n                    if (orderInColumn) {\n                        table.modified.setCell(columnName, rowIndex, cellValue);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of column changes to the property\n             * `modified` of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Highcharts.DataTableColumnCollection} columns\n             * Changed columns as a collection, where the keys are the column names.\n             *\n             * @param {number} [rowIndex=0]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyColumns(table, columns, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options, columnNames = Object.keys(columns);\n                if (columnNames.indexOf(orderByColumn) > -1) {\n                    if (orderInColumn &&\n                        columns[columnNames[0]].length) {\n                        table.modified.setColumns(columns, rowIndex);\n                        table.modified.setColumn(orderInColumn, modifier\n                            .modifyTable(new DataTable({\n                            columns: table\n                                .getColumns([orderByColumn, orderInColumn])\n                        }))\n                            .modified\n                            .getColumn(orderInColumn));\n                    }\n                    else {\n                        modifier.modifyTable(table, eventDetail);\n                    }\n                }\n                return table;\n            }\n            /**\n             * Applies partial modifications of row changes to the property `modified`\n             * of the given table.\n             *\n             * @param {Highcharts.DataTable} table\n             * Modified table.\n             *\n             * @param {Array<(Highcharts.DataTableRow|Highcharts.DataTableRowObject)>} rows\n             * Changed rows.\n             *\n             * @param {number} [rowIndex]\n             * Index of the first changed row.\n             *\n             * @param {Highcharts.DataTableEventDetail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {Highcharts.DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyRows(table, rows, rowIndex, eventDetail) {\n                const modifier = this, { orderByColumn, orderInColumn } = modifier.options;\n                if (orderInColumn &&\n                    rows.length) {\n                    table.modified.setRows(rows, rowIndex);\n                    table.modified.setColumn(orderInColumn, modifier\n                        .modifyTable(new DataTable({\n                        columns: table\n                            .getColumns([orderByColumn, orderInColumn])\n                    }))\n                        .modified\n                        .getColumn(orderInColumn));\n                }\n                else {\n                    modifier.modifyTable(table, eventDetail);\n                }\n                return table;\n            }\n            /**\n             * Sorts rows in the table.\n             *\n             * @param {DataTable} table\n             * Table to sort in.\n             *\n             * @param {DataEvent.Detail} [eventDetail]\n             * Custom information for pending events.\n             *\n             * @return {DataTable}\n             * Table with `modified` property as a reference.\n             */\n            modifyTable(table, eventDetail) {\n                const modifier = this;\n                modifier.emit({ type: 'modify', detail: eventDetail, table });\n                const columnNames = table.getColumnNames(), rowCount = table.getRowCount(), rowReferences = this.getRowReferences(table), { direction, orderByColumn, orderInColumn } = modifier.options, compare = (direction === 'asc' ?\n                    SortModifier.ascending :\n                    SortModifier.descending), orderByColumnIndex = columnNames.indexOf(orderByColumn), modified = table.modified;\n                if (orderByColumnIndex !== -1) {\n                    rowReferences.sort((a, b) => compare(a.row[orderByColumnIndex], b.row[orderByColumnIndex]));\n                }\n                if (orderInColumn) {\n                    const column = [];\n                    for (let i = 0; i < rowCount; ++i) {\n                        column[rowReferences[i].index] = i;\n                    }\n                    modified.setColumns({ [orderInColumn]: column });\n                }\n                else {\n                    const originalIndexes = [];\n                    const rows = [];\n                    let rowReference;\n                    for (let i = 0; i < rowCount; ++i) {\n                        rowReference = rowReferences[i];\n                        originalIndexes.push(modified.getOriginalRowIndex(rowReference.index));\n                        rows.push(rowReference.row);\n                    }\n                    modified.setRows(rows, 0);\n                    modified.setOriginalRowIndexes(originalIndexes);\n                }\n                modifier.emit({ type: 'afterModify', detail: eventDetail, table });\n                return table;\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        /**\n         * Default options to group table rows.\n         */\n        SortModifier.defaultOptions = {\n            type: 'Sort',\n            direction: 'desc',\n            orderByColumn: 'y'\n        };\n        DataModifier.registerType('Sort', SortModifier);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SortModifier;\n    });\n    _registerModule(_modules, 'masters/modules/data-tools.src.js', [_modules['Core/Globals.js'], _modules['Data/Connectors/DataConnector.js'], _modules['Data/Converters/DataConverter.js'], _modules['Data/DataCursor.js'], _modules['Data/Modifiers/DataModifier.js'], _modules['Data/DataPool.js'], _modules['Data/DataTable.js'], _modules['Data/Formula/Formula.js']], function (Highcharts, DataConnector, DataConverter, DataCursor, DataModifier, DataPool, DataTable, Formula) {\n\n        const G = Highcharts;\n        G.DataConnector = G.DataConnector || DataConnector;\n        G.DataConverter = G.DataConverter || DataConverter;\n        G.DataCursor = G.DataCursor || DataCursor;\n        G.DataModifier = G.DataModifier || DataModifier;\n        G.DataPool = G.DataPool || DataPool;\n        G.DataTable = G.DataTable || DataTable;\n        G.Formula = G.Formula || Formula;\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","U","DataModifier","addEvent","fireEvent","merge","benchmark","dataTable","options","results","modifier","execute","modifyTable","emit","type","iterations","on","length","times","startTime","endTime","window","performance","now","push","e","modify","table","eventDetail","Promise","resolve","reject","modified","clone","modifyCell","columnName","rowIndex","cellValue","modifyColumns","columns","modifyRows","rows","callback","types","registerType","key","DataModifierClass","defined","uniqueKey","DataTable","isNull","row","NULL","Array","i","iEnd","columnNames","Object","keys","constructor","autoId","id","rowCount","versionTag","thisColumns","column","slice","Math","max","skipColumns","tableOptions","tableClone","originalRowIndexes","localRowIndexes","deleteColumns","deletedColumns","modifiedColumns","deleteRowIndexReferences","deleteRows","deletedRows","modifiedRows","deletedCells","splice","j","jEnd","getCell","getCellAsBoolean","getCellAsNumber","useNaN","isNaN","parseFloat","getCellAsString","getColumn","asReference","getColumns","getColumnAsNumbers","columnAsNumber","columnLength","getColumnNames","tableColumns","getLocalRowIndex","originalRowIndex","getModifier","getOriginalRowIndex","getRow","getRows","getRowCount","getRowIndexBy","rowIndexOffset","indexOf","getRowObject","getRowObjects","i2","min","getVersionTag","hasColumns","hasRowWith","renameColumn","newColumnName","setCell","setColumn","setColumns","tableModifier","reset","tableColumn","tableColumnNames","setModifier","promise","then","error","setOriginalRowIndexes","omitLocalRowIndexes","modifiedIndexes","originalIndex","setRow","setRows","rowColumnNames","rowColumnName","indexRowCount","version","DataConnector","pick","metadata","polling","describeColumn","name","columnMeta","connector","describeColumns","pop","getColumnOrder","usePresentationState","names","sort","a","b","index","getSortedColumns","usePresentationOrder","load","save","Error","setColumnOrder","setModifierOptions","modifierOptions","ModifierClass","startPolling","refreshTime","clearTimeout","_polling","setTimeout","stopPolling","whatIs","DataConnectorClass","isNumber","DataConverter","dateFormats","regex","parser","match","Date","UTC","NaN","alternative","d","year","getFullYear","mergedOptions","defaultOptions","regExpPoint","decimalPoint","decimalRegExp","RegExp","asBoolean","value","asNumber","asDate","timestamp","parseDate","asString","asGuessedType","typeMap","converter","guessType","call","decimalRegex","replace","test","getDate","deduceDateFormat","data","limit","stable","format","thing","guessedFormat","madeDeduction","elem","trim","split","parseInt","join","dateFormat","export","headers","getTable","result","trimedValue","innerTrimedValue","floatValue","parse","dateFormatProp","getTime","getTimezoneOffset","str","inside","alternativeFormat","startColumn","endColumn","Number","MAX_VALUE","startRow","endRow","firstRowAsNames","switchRowsAndColumns","getTableFromColumns","DataCursor","stateMap","emittingRegister","listenerMap","addListener","tableId","state","listener","listeners","buildEmittingTag","cursor","firstRow","lastRow","emitCursor","event","lasting","cursors","getIndex","emittingTag","remitCursor","removeListener","toRange","defaultRange","range","needle","columnNeedle","JSON","stringify","isEqual","cursorA","cursorB","isInRange","needleColumns","rangeColumns","every","toPositions","positions","rowEnd","columnEnd","connectors","DataPoolDefaults","DataPool","waiting","getConnector","connectorId","waitingList","connectorOptions","getConnectorOptions","loadConnector","getConnectorIds","connectorIds","getConnectorTable","isNewConnector","ConnectorClass","setConnectorOptions","instances","booleanRegExp","decimal1RegExp","decimal2RegExp","functionRegExp","operatorRegExp","rangeA1RegExp","rangeR1C1RegExp","referenceA1RegExp","referenceR1C1RegExp","extractParantheses","text","parantheseLevel","char","parantheseStart","substring","extractString","start","escaping","parseArgument","alternativeSeparators","beginColumnRelative","beginRowRelative","endColumnRelative","endRowRelative","beginColumn","beginRow","parseReferenceColumn","formula","parseFormula","next","columnRelative","rowRelative","reference","string","parantheses","parseArguments","argumentsSeparator","term","paranteses","position","code","factor","charCodeAt","pow","operators","isFormula","item","isFunction","isOperator","isRange","isReference","isValue","FormulaTypes","asLogicalStringRegExp","MAX_FALSE","MAX_STRING","MAX_TRUE","operatorPriority","processorFunctions","processorFunctionNameRegExp","asLogicalNumber","asLogicalString","toLowerCase","basicOperation","operator","x","y","round","getArgumentValue","arg","getRangeValues","processFunction","processFormula","values","cell","cells","getReferenceValue","operator2","formulaFunction","processor","getArgumentsValues","registerProcessorFunction","processorFunction","translateReferences","columnDelta","rowDelta","FormulaProcessor","ABS","abs","value2","AND","AVERAGE","count","AVERAGEA","COUNT","COUNTA","IF","ISNA","MAX","NEGATIVE_INFINITY","isFinite","MEDIAN","median","half","floor","MIN","POSITIVE_INFINITY","MOD","value1","getModeMap","modeMap","MULT","modeKeys","modeCount","SNGL","modeKey","keyValue","NOT","OR","PRODUCT","calculated","SUM","XOR","lastValue","FormulaParser","FormulaType","CSVConverter","dataTypes","useLocalDecimalPoint","lineDelimiter","exportNames","itemDelimiter","toLocaleString","csvRows","columnsCount","rowArray","map","columnIndex","columnDataType","dataType","String","cellVal","parserOptions","beforeParse","lines","rowIt","csv","guessedItemDelimiter","guessDelimiter","offset","parseCSVRow","columnStr","rowNumber","guessedDecimalPoint","c","token","actualColumn","read","pushType","initialValue","points","commas","guessed","potDelimiters","linesCount","inStr","cn","cl","CSVConnector","enablePolling","dataRefreshRate","csvURL","dataModifier","fetch","response","isArray","objectEach","JSONConverter","orientation","shift","toString","newRow","arrayWithPath","reduce","acc","JSONConnector","dataUrl","json","GoogleSheetsConverter","header","parseOptions","GoogleSheetsConnector","googleAPIKey","googleSpreadsheetKey","url","buildFetchURL","URL","canParse","message","status","alphabet","buildQueryRange","googleSpreadsheetRange","apiKey","sheetKey","onlyColumnNames","pathname","searchParams","set","href","HTMLTableConverter","tableElement","tableElementID","useMultiLevelHeaders","htmlRows","tableHead","subcategories","subhead","getTableHeaderHTML","getCellHTMLFromValue","caption","tableCaption","tag","classes","attrs","val","className","topheaders","subheaders","useRowspanHeaders","html","len","cur","curColspan","rowspan","isRowEqual","row1","row2","tableHTML","HTMLElement","getElementsByTagName","rowsCount","items","children","itemsLength","tagName","innerHTML","columnsInRow","columnsInRowLength","relativeColumnIndex","H","HTMLTableConnector","tableID","document","getElementById","ChainModifier","chain","optionsChain","add","clear","modifiers","reverse","remove","InvertModifier","modifiedRowIndex","modifiedColumnNames","j2","MathModifier","formulaColumns","processColumn","columnFormulas","columnFormula","processColumnFormula","rowStart","cacheFormula","cacheString","RangeModifier","indexes","additive","ranges","strict","rangeColumn","minValue","maxValue","SortModifier","ascending","descending","getRowReferences","rowReferences","orderByColumn","orderInColumn","direction","compare","orderByColumnIndex","rowReference","originalIndexes","Formula","G"],"mappings":"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"}