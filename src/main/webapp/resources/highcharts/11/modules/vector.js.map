{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.8 (2024-08-29)\n *\n * Vector plot series module\n *\n * (c) 2010-2024 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/vector', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Series/Vector/VectorSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  Vector plot series module\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A vector plot is a type of cartesian chart where each point has an X and\n         * Y position, a length and a direction. Vectors are drawn as arrows.\n         *\n         * @sample {highcharts|highstock} highcharts/demo/vector-plot/\n         *         Vector pot\n         *\n         * @since        6.0.0\n         * @extends      plotOptions.scatter\n         * @excluding    boostThreshold, marker, connectEnds, connectNulls,\n         *               cropThreshold, dashStyle, dragDrop, gapSize, gapUnit,\n         *               dataGrouping, linecap, shadow, stacking, step, jitter,\n         *               boostBlending\n         * @product      highcharts highstock\n         * @requires     modules/vector\n         * @optionparent plotOptions.vector\n         */\n        const VectorSeriesDefaults = {\n            /**\n             * The line width for each vector arrow.\n             */\n            lineWidth: 2,\n            marker: void 0,\n            /**\n             * What part of the vector it should be rotated around. Can be one of\n             * `start`, `center` and `end`. When `start`, the vectors will start\n             * from the given [x, y] position, and when `end` the vectors will end\n             * in the [x, y] position.\n             *\n             * @sample highcharts/plotoptions/vector-rotationorigin-start/\n             *         Rotate from start\n             *\n             * @validvalue [\"start\", \"center\", \"end\"]\n             */\n            rotationOrigin: 'center',\n            states: {\n                hover: {\n                    /**\n                     * Additonal line width for the vector errors when they are\n                     * hovered.\n                     */\n                    lineWidthPlus: 1\n                }\n            },\n            tooltip: {\n                /**\n                 * @default [{point.x}, {point.y}] Length: {point.length} Direction: {point.direction}Â°\n                 */\n                pointFormat: '<b>[{point.x}, {point.y}]</b><br/>Length: <b>{point.length}</b><br/>Direction: <b>{point.direction}\\u00B0</b><br/>'\n            },\n            /**\n             * Maximum length of the arrows in the vector plot. The individual arrow\n             * length is computed between 0 and this value.\n             */\n            vectorLength: 20\n        };\n        /**\n         * A `vector` series. If the [type](#series.vector.type) option is not\n         * specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.vector\n         * @excluding dataParser, dataURL, boostThreshold, boostBlending\n         * @product   highcharts highstock\n         * @requires  modules/vector\n         * @apioption series.vector\n         */\n        /**\n         * An array of data points for the series. For the `vector` series type,\n         * points can be given in the following ways:\n         *\n         * 1. An array of arrays with 4 values. In this case, the values correspond to\n         *    to `x,y,length,direction`. If the first value is a string, it is applied\n         *    as the name of the point, and the `x` value is inferred.\n         *    ```js\n         *    data: [\n         *        [0, 0, 10, 90],\n         *        [0, 1, 5, 180],\n         *        [1, 1, 2, 270]\n         *    ]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.area.turboThreshold), this option is not\n         *    available.\n         *    ```js\n         *    data: [{\n         *        x: 0,\n         *        y: 0,\n         *        name: \"Point2\",\n         *        length: 10,\n         *        direction: 90\n         *    }, {\n         *        x: 1,\n         *        y: 1,\n         *        name: \"Point1\",\n         *        direction: 270\n         *    }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/series/data-array-of-arrays/\n         *         Arrays of numeric x and y\n         * @sample {highcharts} highcharts/series/data-array-of-arrays-datetime/\n         *         Arrays of datetime x and y\n         * @sample {highcharts} highcharts/series/data-array-of-name-value/\n         *         Arrays of point.name and y\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<Array<(number|string),number,number,number>|*>}\n         * @extends   series.line.data\n         * @product   highcharts highstock\n         * @apioption series.vector.data\n         */\n        /**\n         * The length of the vector. The rendered length will relate to the\n         * `vectorLength` setting.\n         *\n         * @type      {number}\n         * @product   highcharts highstock\n         * @apioption series.vector.data.length\n         */\n        /**\n         * The vector direction in degrees, where 0 is north (pointing towards south).\n         *\n         * @type      {number}\n         * @product   highcharts highstock\n         * @apioption series.vector.data.direction\n         */\n        ''; // Adds doclets above to the transpiled file\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return VectorSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Vector/VectorSeries.js', [_modules['Core/Animation/AnimationUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js'], _modules['Series/Vector/VectorSeriesDefaults.js']], function (A, H, SeriesRegistry, U, VectorSeriesDefaults) {\n        /* *\n         *\n         *  Vector plot series module\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { animObject } = A;\n        const { series: Series, seriesTypes: { scatter: ScatterSeries } } = SeriesRegistry;\n        const { arrayMax, extend, merge, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The vector series class.\n         *\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.vector\n         *\n         * @augments Highcharts.seriesTypes.scatter\n         */\n        class VectorSeries extends ScatterSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Fade in the arrows on initializing series.\n             * @private\n             */\n            animate(init) {\n                if (init) {\n                    this.markerGroup.attr({\n                        opacity: 0.01\n                    });\n                }\n                else {\n                    this.markerGroup.animate({\n                        opacity: 1\n                    }, animObject(this.options.animation));\n                }\n            }\n            /**\n             * Create a single arrow. It is later rotated around the zero\n             * centerpoint.\n             * @private\n             */\n            arrow(point) {\n                const fraction = point.length / this.lengthMax, u = fraction * this.options.vectorLength / 20, o = {\n                    start: 10 * u,\n                    center: 0,\n                    end: -10 * u\n                }[this.options.rotationOrigin] || 0, \n                // The stem and the arrow head. Draw the arrow first with rotation\n                // 0, which is the arrow pointing down (vector from north to south).\n                path = [\n                    ['M', 0, 7 * u + o], // Base of arrow\n                    ['L', -1.5 * u, 7 * u + o],\n                    ['L', 0, 10 * u + o],\n                    ['L', 1.5 * u, 7 * u + o],\n                    ['L', 0, 7 * u + o],\n                    ['L', 0, -10 * u + o] // Top\n                ];\n                return path;\n            }\n            /*\n            DrawLegendSymbol: function (legend, item) {\n                let options = legend.options,\n                    symbolHeight = legend.symbolHeight,\n                    square = options.squareSymbol,\n                    symbolWidth = square ? symbolHeight : legend.symbolWidth,\n                    path = this.arrow.call({\n                        lengthMax: 1,\n                        options: {\n                            vectorLength: symbolWidth\n                        }\n                    }, {\n                        length: 1\n                    });\n                legendItem.line = this.chart.renderer.path(path)\n                .addClass('highcharts-point')\n                .attr({\n                    zIndex: 3,\n                    translateY: symbolWidth / 2,\n                    rotation: 270,\n                    'stroke-width': 1,\n                    'stroke': 'black'\n                }).add(item.legendItem.group);\n            },\n            */\n            /**\n             * @private\n             */\n            drawPoints() {\n                const chart = this.chart;\n                for (const point of this.points) {\n                    const plotX = point.plotX, plotY = point.plotY;\n                    if (this.options.clip === false ||\n                        chart.isInsidePlot(plotX, plotY, { inverted: chart.inverted })) {\n                        if (!point.graphic) {\n                            point.graphic = this.chart.renderer\n                                .path()\n                                .add(this.markerGroup)\n                                .addClass('highcharts-point ' +\n                                'highcharts-color-' +\n                                pick(point.colorIndex, point.series.colorIndex));\n                        }\n                        point.graphic\n                            .attr({\n                            d: this.arrow(point),\n                            translateX: plotX,\n                            translateY: plotY,\n                            rotation: point.direction\n                        });\n                        if (!this.chart.styledMode) {\n                            point.graphic\n                                .attr(this.pointAttribs(point));\n                        }\n                    }\n                    else if (point.graphic) {\n                        point.graphic = point.graphic.destroy();\n                    }\n                }\n            }\n            /**\n             * Get presentational attributes.\n             * @private\n             */\n            pointAttribs(point, state) {\n                const options = this.options;\n                let stroke = point?.color || this.color, strokeWidth = this.options.lineWidth;\n                if (state) {\n                    stroke = options.states[state].color || stroke;\n                    strokeWidth =\n                        (options.states[state].lineWidth || strokeWidth) +\n                            (options.states[state].lineWidthPlus || 0);\n                }\n                return {\n                    'stroke': stroke,\n                    'stroke-width': strokeWidth\n                };\n            }\n            /**\n             * @private\n             */\n            translate() {\n                Series.prototype.translate.call(this);\n                this.lengthMax = arrayMax(this.lengthData);\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        VectorSeries.defaultOptions = merge(ScatterSeries.defaultOptions, VectorSeriesDefaults);\n        extend(VectorSeries.prototype, {\n            /**\n             * @ignore\n             * @deprecated\n             */\n            drawGraph: H.noop,\n            /**\n             * @ignore\n             * @deprecated\n             */\n            getSymbol: H.noop,\n            /**\n             * @ignore\n             * @deprecated\n             */\n            markerAttribs: H.noop,\n            parallelArrays: ['x', 'y', 'length', 'direction'],\n            pointArrayMap: ['y', 'length', 'direction']\n        });\n        SeriesRegistry.registerSeriesType('vector', VectorSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return VectorSeries;\n    });\n    _registerModule(_modules, 'masters/modules/vector.src.js', [_modules['Core/Globals.js']], function (Highcharts) {\n\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","lineWidth","marker","rotationOrigin","states","hover","lineWidthPlus","tooltip","pointFormat","vectorLength","A","H","SeriesRegistry","U","VectorSeriesDefaults","animObject","series","Series","seriesTypes","scatter","ScatterSeries","arrayMax","extend","merge","pick","VectorSeries","animate","init","markerGroup","attr","opacity","options","animation","arrow","point","u","fraction","length","lengthMax","o","start","center","end","drawPoints","chart","points","plotX","plotY","clip","isInsidePlot","inverted","graphic","renderer","add","addClass","colorIndex","d","translateX","translateY","rotation","direction","styledMode","pointAttribs","destroy","state","stroke","color","strokeWidth","translate","prototype","call","lengthData","defaultOptions","drawGraph","noop","getSymbol","markerAttribs","parallelArrays","pointArrayMap","registerSeriesType"],"mappings":"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"}