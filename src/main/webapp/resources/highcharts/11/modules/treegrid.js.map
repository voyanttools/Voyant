{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts Gantt JS v11.4.8 (2024-08-29)\n *\n * Tree Grid\n *\n * (c) 2016-2024 Jon Arild Nygard\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/treegrid', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                Highcharts.win.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Core/Axis/BrokenAxis.js', [_modules['Core/Axis/Stacking/StackItem.js'], _modules['Core/Utilities.js']], function (StackItem, U) {\n        /* *\n         *\n         *  (c) 2009-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, find, fireEvent, isArray, isNumber, pick } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        /**\n         * Axis with support of broken data rows.\n         * @private\n         */\n        var BrokenAxis;\n        (function (BrokenAxis) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Adds support for broken axes.\n             * @private\n             */\n            function compose(AxisClass, SeriesClass) {\n                if (!AxisClass.keepProps.includes('brokenAxis')) {\n                    AxisClass.keepProps.push('brokenAxis');\n                    addEvent(AxisClass, 'init', onAxisInit);\n                    addEvent(AxisClass, 'afterInit', onAxisAfterInit);\n                    addEvent(AxisClass, 'afterSetTickPositions', onAxisAfterSetTickPositions);\n                    addEvent(AxisClass, 'afterSetOptions', onAxisAfterSetOptions);\n                    const seriesProto = SeriesClass.prototype;\n                    seriesProto.drawBreaks = seriesDrawBreaks;\n                    seriesProto.gappedPath = seriesGappedPath;\n                    addEvent(SeriesClass, 'afterGeneratePoints', onSeriesAfterGeneratePoints);\n                    addEvent(SeriesClass, 'afterRender', onSeriesAfterRender);\n                }\n                return AxisClass;\n            }\n            BrokenAxis.compose = compose;\n            /**\n             * @private\n             */\n            function onAxisAfterInit() {\n                if (typeof this.brokenAxis !== 'undefined') {\n                    this.brokenAxis.setBreaks(this.options.breaks, false);\n                }\n            }\n            /**\n             * Force Axis to be not-ordinal when breaks are defined.\n             * @private\n             */\n            function onAxisAfterSetOptions() {\n                const axis = this;\n                if (axis.brokenAxis?.hasBreaks) {\n                    axis.options.ordinal = false;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisAfterSetTickPositions() {\n                const axis = this, brokenAxis = axis.brokenAxis;\n                if (brokenAxis?.hasBreaks) {\n                    const tickPositions = axis.tickPositions, info = axis.tickPositions.info, newPositions = [];\n                    for (let i = 0; i < tickPositions.length; i++) {\n                        if (!brokenAxis.isInAnyBreak(tickPositions[i])) {\n                            newPositions.push(tickPositions[i]);\n                        }\n                    }\n                    axis.tickPositions = newPositions;\n                    axis.tickPositions.info = info;\n                }\n            }\n            /**\n             * @private\n             */\n            function onAxisInit() {\n                const axis = this;\n                if (!axis.brokenAxis) {\n                    axis.brokenAxis = new Additions(axis);\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterGeneratePoints() {\n                const { isDirty, options: { connectNulls }, points, xAxis, yAxis } = this;\n                // Set, or reset visibility of the points. Axis.setBreaks marks\n                // the series as isDirty\n                if (isDirty) {\n                    let i = points.length;\n                    while (i--) {\n                        const point = points[i];\n                        // Respect nulls inside the break (#4275)\n                        const nullGap = point.y === null && connectNulls === false;\n                        const isPointInBreak = (!nullGap && (xAxis?.brokenAxis?.isInAnyBreak(point.x, true) ||\n                            yAxis?.brokenAxis?.isInAnyBreak(point.y, true)));\n                        // Set point.visible if in any break.\n                        // If not in break, reset visible to original value.\n                        point.visible = isPointInBreak ?\n                            false :\n                            point.options.visible !== false;\n                    }\n                }\n            }\n            /**\n             * @private\n             */\n            function onSeriesAfterRender() {\n                this.drawBreaks(this.xAxis, ['x']);\n                this.drawBreaks(this.yAxis, pick(this.pointArrayMap, ['y']));\n            }\n            /**\n             * @private\n             */\n            function seriesDrawBreaks(axis, keys) {\n                const series = this, points = series.points;\n                let breaks, threshold, y;\n                if (axis?.brokenAxis?.hasBreaks) {\n                    const brokenAxis = axis.brokenAxis;\n                    keys.forEach(function (key) {\n                        breaks = brokenAxis?.breakArray || [];\n                        threshold = axis.isXAxis ?\n                            axis.min :\n                            pick(series.options.threshold, axis.min);\n                        // Array of breaks that have been \"zoomed-out\" which means that\n                        // they were shown previously, but now after zoom, they are not\n                        // (#19885).\n                        const breaksOutOfRange = axis?.options?.breaks?.filter(function (brk) {\n                            let isOut = true;\n                            // Iterate to see if \"brk\" is in axis range\n                            for (let i = 0; i < breaks.length; i++) {\n                                const otherBreak = breaks[i];\n                                if (otherBreak.from === brk.from &&\n                                    otherBreak.to === brk.to) {\n                                    isOut = false;\n                                    break;\n                                }\n                            }\n                            return isOut;\n                        });\n                        points.forEach(function (point) {\n                            y = pick(point['stack' + key.toUpperCase()], point[key]);\n                            breaks.forEach(function (brk) {\n                                if (isNumber(threshold) && isNumber(y)) {\n                                    let eventName = '';\n                                    if ((threshold < brk.from && y > brk.to) ||\n                                        (threshold > brk.from && y < brk.from)) {\n                                        eventName = 'pointBreak';\n                                    }\n                                    else if ((threshold < brk.from &&\n                                        y > brk.from &&\n                                        y < brk.to) || (threshold > brk.from &&\n                                        y > brk.to &&\n                                        y < brk.from)) {\n                                        eventName = 'pointInBreak';\n                                    }\n                                    if (eventName) {\n                                        fireEvent(axis, eventName, { point, brk });\n                                    }\n                                }\n                            });\n                            breaksOutOfRange?.forEach(function (brk) {\n                                fireEvent(axis, 'pointOutsideOfBreak', { point, brk });\n                            });\n                        });\n                    });\n                }\n            }\n            /**\n             * Extend getGraphPath by identifying gaps in the data so that we\n             * can draw a gap in the line or area. This was moved from ordinal\n             * axis module to broken axis module as of #5045.\n             *\n             * @private\n             * @function Highcharts.Series#gappedPath\n             *\n             * @return {Highcharts.SVGPathArray}\n             * Gapped path\n             */\n            function seriesGappedPath() {\n                const currentDataGrouping = this.currentDataGrouping, groupingSize = currentDataGrouping?.gapSize, points = this.points.slice(), yAxis = this.yAxis;\n                let gapSize = this.options.gapSize, i = points.length - 1, stack;\n                /**\n                 * Defines when to display a gap in the graph, together with the\n                 * [gapUnit](plotOptions.series.gapUnit) option.\n                 *\n                 * In case when `dataGrouping` is enabled, points can be grouped\n                 * into a larger time span. This can make the grouped points to\n                 * have a greater distance than the absolute value of `gapSize`\n                 * property, which will result in disappearing graph completely.\n                 * To prevent this situation the mentioned distance between\n                 * grouped points is used instead of previously defined\n                 * `gapSize`.\n                 *\n                 * In practice, this option is most often used to visualize gaps\n                 * in time series. In a stock chart, intraday data is available\n                 * for daytime hours, while gaps will appear in nights and\n                 * weekends.\n                 *\n                 * @see [gapUnit](plotOptions.series.gapUnit)\n                 * @see [xAxis.breaks](#xAxis.breaks)\n                 *\n                 * @sample {highstock} stock/plotoptions/series-gapsize/\n                 * Setting the gap size to 2 introduces gaps for weekends in\n                 * daily datasets.\n                 *\n                 * @type      {number}\n                 * @default   0\n                 * @product   highstock\n                 * @requires  modules/broken-axis\n                 * @apioption plotOptions.series.gapSize\n                 */\n                /**\n                 * Together with [gapSize](plotOptions.series.gapSize), this\n                 * option defines where to draw gaps in the graph.\n                 *\n                 * When the `gapUnit` is `\"relative\"` (default), a gap size of 5\n                 * means that if the distance between two points is greater than\n                 * 5 times that of the two closest points, the graph will be\n                 * broken.\n                 *\n                 * When the `gapUnit` is `\"value\"`, the gap is based on absolute\n                 * axis values, which on a datetime axis is milliseconds. This\n                 * also applies to the navigator series that inherits gap\n                 * options from the base series.\n                 *\n                 * @see [gapSize](plotOptions.series.gapSize)\n                 *\n                 * @type       {string}\n                 * @default    relative\n                 * @since      5.0.13\n                 * @product    highstock\n                 * @validvalue [\"relative\", \"value\"]\n                 * @requires   modules/broken-axis\n                 * @apioption  plotOptions.series.gapUnit\n                 */\n                if (gapSize && i > 0) { // #5008\n                    // Gap unit is relative\n                    if (this.options.gapUnit !== 'value') {\n                        gapSize *= this.basePointRange;\n                    }\n                    // Setting a new gapSize in case dataGrouping is enabled\n                    // (#7686)\n                    if (groupingSize &&\n                        groupingSize > gapSize &&\n                        // Except when DG is forced (e.g. from other series)\n                        // and has lower granularity than actual points (#11351)\n                        groupingSize >= this.basePointRange) {\n                        gapSize = groupingSize;\n                    }\n                    // Extension for ordinal breaks\n                    let current, next;\n                    while (i--) {\n                        // Reassign next if it is not visible\n                        if (!(next && next.visible !== false)) {\n                            next = points[i + 1];\n                        }\n                        current = points[i];\n                        // Skip iteration if one of the points is not visible\n                        if (next.visible === false || current.visible === false) {\n                            continue;\n                        }\n                        if (next.x - current.x > gapSize) {\n                            const xRange = (current.x + next.x) / 2;\n                            points.splice(// Insert after this one\n                            i + 1, 0, {\n                                isNull: true,\n                                x: xRange\n                            });\n                            // For stacked chart generate empty stack items, #6546\n                            if (yAxis.stacking && this.options.stacking) {\n                                stack = yAxis.stacking.stacks[this.stackKey][xRange] = new StackItem(yAxis, yAxis.options.stackLabels, false, xRange, this.stack);\n                                stack.total = 0;\n                            }\n                        }\n                        // Assign current to next for the upcoming iteration\n                        next = current;\n                    }\n                }\n                // Call base method\n                return this.getGraphPath(points);\n            }\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Provides support for broken axes.\n             * @private\n             * @class\n             */\n            class Additions {\n                /* *\n                 *\n                 *  Static Functions\n                 *\n                 * */\n                /**\n                 * @private\n                 */\n                static isInBreak(brk, val) {\n                    const repeat = brk.repeat || Infinity, from = brk.from, length = brk.to - brk.from, test = (val >= from ?\n                        (val - from) % repeat :\n                        repeat - ((from - val) % repeat));\n                    let ret;\n                    if (!brk.inclusive) {\n                        ret = test < length && test !== 0;\n                    }\n                    else {\n                        ret = test <= length;\n                    }\n                    return ret;\n                }\n                /**\n                 * @private\n                 */\n                static lin2Val(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.from >= nval) {\n                            break;\n                        }\n                        else if (brk.to < nval) {\n                            nval += brk.len;\n                        }\n                        else if (Additions.isInBreak(brk, nval)) {\n                            nval += brk.len;\n                        }\n                    }\n                    return nval;\n                }\n                /**\n                 * @private\n                 */\n                static val2Lin(val) {\n                    const axis = this;\n                    const brokenAxis = axis.brokenAxis;\n                    const breakArray = brokenAxis && brokenAxis.breakArray;\n                    if (!breakArray || !isNumber(val)) {\n                        return val;\n                    }\n                    let nval = val, brk, i;\n                    for (i = 0; i < breakArray.length; i++) {\n                        brk = breakArray[i];\n                        if (brk.to <= val) {\n                            nval -= brk.len;\n                        }\n                        else if (brk.from >= val) {\n                            break;\n                        }\n                        else if (Additions.isInBreak(brk, val)) {\n                            nval -= (val - brk.from);\n                            break;\n                        }\n                    }\n                    return nval;\n                }\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                constructor(axis) {\n                    this.hasBreaks = false;\n                    this.axis = axis;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Returns the first break found where the x is larger then break.from\n                 * and smaller then break.to.\n                 *\n                 * @param {number} x\n                 * The number which should be within a break.\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} breaks\n                 * The array of breaks to search within.\n                 *\n                 * @return {Highcharts.XAxisBreaksOptions|undefined}\n                 * Returns the first break found that matches, returns false if no break\n                 * is found.\n                 */\n                findBreakAt(x, breaks) {\n                    return find(breaks, function (b) {\n                        return b.from < x && x < b.to;\n                    });\n                }\n                /**\n                 * @private\n                 */\n                isInAnyBreak(val, testKeep) {\n                    const brokenAxis = this, axis = brokenAxis.axis, breaks = axis.options.breaks || [];\n                    let i = breaks.length, inbrk, keep, ret;\n                    if (i && isNumber(val)) {\n                        while (i--) {\n                            if (Additions.isInBreak(breaks[i], val)) {\n                                inbrk = true;\n                                if (!keep) {\n                                    keep = pick(breaks[i].showPoints, !axis.isXAxis);\n                                }\n                            }\n                        }\n                        if (inbrk && testKeep) {\n                            ret = inbrk && !keep;\n                        }\n                        else {\n                            ret = inbrk;\n                        }\n                    }\n                    return ret;\n                }\n                /**\n                 * Dynamically set or unset breaks in an axis. This function in lighter\n                 * than using Axis.update, and it also preserves animation.\n                 *\n                 * @private\n                 * @function Highcharts.Axis#setBreaks\n                 *\n                 * @param {Array<Highcharts.XAxisBreaksOptions>} [breaks]\n                 * The breaks to add. When `undefined` it removes existing breaks.\n                 *\n                 * @param {boolean} [redraw=true]\n                 * Whether to redraw the chart immediately.\n                 */\n                setBreaks(breaks, redraw) {\n                    const brokenAxis = this;\n                    const axis = brokenAxis.axis;\n                    const hasBreaks = isArray(breaks) &&\n                        !!breaks.length &&\n                        !!Object.keys(breaks[0]).length; // Check for [{}], #16368.\n                    axis.isDirty = brokenAxis.hasBreaks !== hasBreaks;\n                    brokenAxis.hasBreaks = hasBreaks;\n                    if (breaks !== axis.options.breaks) {\n                        axis.options.breaks = axis.userOptions.breaks = breaks;\n                    }\n                    axis.forceRedraw = true; // Force recalculation in setScale\n                    // Recalculate series related to the axis.\n                    axis.series.forEach(function (series) {\n                        series.isDirty = true;\n                    });\n                    if (!hasBreaks && axis.val2lin === Additions.val2Lin) {\n                        // Revert to prototype functions\n                        delete axis.val2lin;\n                        delete axis.lin2val;\n                    }\n                    if (hasBreaks) {\n                        axis.userOptions.ordinal = false;\n                        axis.lin2val = Additions.lin2Val;\n                        axis.val2lin = Additions.val2Lin;\n                        axis.setExtremes = function (newMin, newMax, redraw, animation, eventArguments) {\n                            // If trying to set extremes inside a break, extend min to\n                            // after, and max to before the break ( #3857 )\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = (this.options.breaks || []);\n                                let axisBreak;\n                                while ((axisBreak = brokenAxis.findBreakAt(newMin, breaks))) {\n                                    newMin = axisBreak.to;\n                                }\n                                while ((axisBreak = brokenAxis.findBreakAt(newMax, breaks))) {\n                                    newMax = axisBreak.from;\n                                }\n                                // If both min and max is within the same break.\n                                if (newMax < newMin) {\n                                    newMax = newMin;\n                                }\n                            }\n                            axis.constructor.prototype.setExtremes.call(this, newMin, newMax, redraw, animation, eventArguments);\n                        };\n                        axis.setAxisTranslation = function () {\n                            axis.constructor.prototype.setAxisTranslation.call(this);\n                            brokenAxis.unitLength = void 0;\n                            if (brokenAxis.hasBreaks) {\n                                const breaks = axis.options.breaks || [], \n                                // Temporary one:\n                                breakArrayT = [], breakArray = [], pointRangePadding = pick(axis.pointRangePadding, 0);\n                                let length = 0, inBrk, repeat, min = axis.userMin || axis.min, max = axis.userMax || axis.max, start, i;\n                                // Min & max check (#4247)\n                                breaks.forEach(function (brk) {\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        if (Additions.isInBreak(brk, min)) {\n                                            min += ((brk.to % repeat) -\n                                                (min % repeat));\n                                        }\n                                        if (Additions.isInBreak(brk, max)) {\n                                            max -= ((max % repeat) -\n                                                (brk.from % repeat));\n                                        }\n                                    }\n                                });\n                                // Construct an array holding all breaks in the axis\n                                breaks.forEach(function (brk) {\n                                    start = brk.from;\n                                    repeat = brk.repeat || Infinity;\n                                    if (isNumber(min) && isNumber(max)) {\n                                        while (start - repeat > min) {\n                                            start -= repeat;\n                                        }\n                                        while (start < min) {\n                                            start += repeat;\n                                        }\n                                        for (i = start; i < max; i += repeat) {\n                                            breakArrayT.push({\n                                                value: i,\n                                                move: 'in'\n                                            });\n                                            breakArrayT.push({\n                                                value: i + brk.to - brk.from,\n                                                move: 'out',\n                                                size: brk.breakSize\n                                            });\n                                        }\n                                    }\n                                });\n                                breakArrayT.sort(function (a, b) {\n                                    return ((a.value === b.value) ?\n                                        ((a.move === 'in' ? 0 : 1) -\n                                            (b.move === 'in' ? 0 : 1)) :\n                                        a.value - b.value);\n                                });\n                                // Simplify the breaks\n                                inBrk = 0;\n                                start = min;\n                                breakArrayT.forEach(function (brk) {\n                                    inBrk += (brk.move === 'in' ? 1 : -1);\n                                    if (inBrk === 1 && brk.move === 'in') {\n                                        start = brk.value;\n                                    }\n                                    if (inBrk === 0 && isNumber(start)) {\n                                        breakArray.push({\n                                            from: start,\n                                            to: brk.value,\n                                            len: brk.value - start - (brk.size || 0)\n                                        });\n                                        length += (brk.value -\n                                            start -\n                                            (brk.size || 0));\n                                    }\n                                });\n                                brokenAxis.breakArray = breakArray;\n                                // Used with staticScale, and below the actual axis\n                                // length, when breaks are subtracted.\n                                if (isNumber(min) &&\n                                    isNumber(max) &&\n                                    isNumber(axis.min)) {\n                                    brokenAxis.unitLength = max - min - length +\n                                        pointRangePadding;\n                                    fireEvent(axis, 'afterBreaks');\n                                    if (axis.staticScale) {\n                                        axis.transA = axis.staticScale;\n                                    }\n                                    else if (brokenAxis.unitLength) {\n                                        axis.transA *=\n                                            (max - axis.min + pointRangePadding) /\n                                                brokenAxis.unitLength;\n                                    }\n                                    if (pointRangePadding) {\n                                        axis.minPixelPadding =\n                                            axis.transA * (axis.minPointOffset || 0);\n                                    }\n                                    axis.min = min;\n                                    axis.max = max;\n                                }\n                            }\n                        };\n                    }\n                    if (pick(redraw, true)) {\n                        axis.chart.redraw();\n                    }\n                }\n            }\n            BrokenAxis.Additions = Additions;\n        })(BrokenAxis || (BrokenAxis = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return BrokenAxis;\n    });\n    _registerModule(_modules, 'Core/Axis/GridAxis.js', [_modules['Core/Axis/Axis.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (Axis, H, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Lars A. V. Cabrera\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { dateFormats } = H;\n        const { addEvent, defined, erase, find, isArray, isNumber, merge, pick, timeUnits, wrap } = U;\n        /* *\n         *\n         *  Enums\n         *\n         * */\n        /**\n         * Enum for which side the axis is on. Maps to axis.side.\n         * @private\n         */\n        var GridAxisSide;\n        (function (GridAxisSide) {\n            GridAxisSide[GridAxisSide[\"top\"] = 0] = \"top\";\n            GridAxisSide[GridAxisSide[\"right\"] = 1] = \"right\";\n            GridAxisSide[GridAxisSide[\"bottom\"] = 2] = \"bottom\";\n            GridAxisSide[GridAxisSide[\"left\"] = 3] = \"left\";\n        })(GridAxisSide || (GridAxisSide = {}));\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function argsToArray(args) {\n            return Array.prototype.slice.call(args, 1);\n        }\n        /**\n         * @private\n         */\n        function isObject(x) {\n            // Always use strict mode\n            return U.isObject(x, true);\n        }\n        /**\n         * @private\n         */\n        function applyGridOptions(axis) {\n            const options = axis.options;\n            // Center-align by default\n            /*\n            if (!options.labels) {\n                options.labels = {};\n            }\n            */\n            options.labels.align = pick(options.labels.align, 'center');\n            // @todo: Check against tickLabelPlacement between/on etc\n            /* Prevents adding the last tick label if the axis is not a category\n               axis.\n               Since numeric labels are normally placed at starts and ends of a\n               range of value, and this module makes the label point at the value,\n               an \"extra\" label would appear. */\n            if (!axis.categories) {\n                options.showLastLabel = false;\n            }\n            // Prevents rotation of labels when squished, as rotating them would not\n            // help.\n            axis.labelRotation = 0;\n            options.labels.rotation = 0;\n            // Allow putting ticks closer than their data points.\n            options.minTickInterval = 1;\n        }\n        /**\n         * Extends axis class with grid support.\n         * @private\n         */\n        function compose(AxisClass, ChartClass, TickClass) {\n            if (!AxisClass.keepProps.includes('grid')) {\n                AxisClass.keepProps.push('grid');\n                AxisClass.prototype.getMaxLabelDimensions = getMaxLabelDimensions;\n                wrap(AxisClass.prototype, 'unsquish', wrapUnsquish);\n                wrap(AxisClass.prototype, 'getOffset', wrapGetOffset);\n                // Add event handlers\n                addEvent(AxisClass, 'init', onInit);\n                addEvent(AxisClass, 'afterGetTitlePosition', onAfterGetTitlePosition);\n                addEvent(AxisClass, 'afterInit', onAfterInit);\n                addEvent(AxisClass, 'afterRender', onAfterRender);\n                addEvent(AxisClass, 'afterSetAxisTranslation', onAfterSetAxisTranslation);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions);\n                addEvent(AxisClass, 'afterSetOptions', onAfterSetOptions2);\n                addEvent(AxisClass, 'afterSetScale', onAfterSetScale);\n                addEvent(AxisClass, 'afterTickSize', onAfterTickSize);\n                addEvent(AxisClass, 'trimTicks', onTrimTicks);\n                addEvent(AxisClass, 'destroy', onDestroy);\n                addEvent(ChartClass, 'afterSetChartSize', onChartAfterSetChartSize);\n                addEvent(TickClass, 'afterGetLabelPosition', onTickAfterGetLabelPosition);\n                addEvent(TickClass, 'labelFormat', onTickLabelFormat);\n            }\n            return AxisClass;\n        }\n        /**\n         * Get the largest label width and height.\n         *\n         * @private\n         * @function Highcharts.Axis#getMaxLabelDimensions\n         *\n         * @param {Highcharts.Dictionary<Highcharts.Tick>} ticks\n         * All the ticks on one axis.\n         *\n         * @param {Array<number|string>} tickPositions\n         * All the tick positions on one axis.\n         *\n         * @return {Highcharts.SizeObject}\n         * Object containing the properties height and width.\n         *\n         * @todo Move this to the generic axis implementation, as it is used there.\n         */\n        function getMaxLabelDimensions(ticks, tickPositions) {\n            const dimensions = {\n                width: 0,\n                height: 0\n            };\n            tickPositions.forEach(function (pos) {\n                const tick = ticks[pos];\n                let labelHeight = 0, labelWidth = 0, label;\n                if (isObject(tick)) {\n                    label = isObject(tick.label) ? tick.label : {};\n                    // Find width and height of label\n                    labelHeight = label.getBBox ? label.getBBox().height : 0;\n                    if (label.textStr && !isNumber(label.textPxLength)) {\n                        label.textPxLength = label.getBBox().width;\n                    }\n                    labelWidth = isNumber(label.textPxLength) ?\n                        // Math.round ensures crisp lines\n                        Math.round(label.textPxLength) :\n                        0;\n                    if (label.textStr) {\n                        // Set the tickWidth same as the label width after ellipsis\n                        // applied #10281\n                        labelWidth = Math.round(label.getBBox().width);\n                    }\n                    // Update the result if width and/or height are larger\n                    dimensions.height = Math.max(labelHeight, dimensions.height);\n                    dimensions.width = Math.max(labelWidth, dimensions.width);\n                }\n            });\n            // For tree grid, add indentation\n            if (this.type === 'treegrid' &&\n                this.treeGrid &&\n                this.treeGrid.mapOfPosToGridNode) {\n                const treeDepth = this.treeGrid.mapOfPosToGridNode[-1].height || 0;\n                dimensions.width += (this.options.labels.indentation *\n                    (treeDepth - 1));\n            }\n            return dimensions;\n        }\n        /**\n         * Handle columns and getOffset.\n         * @private\n         */\n        function wrapGetOffset(proceed) {\n            const { grid } = this, \n            // On the left side we handle the columns first because the offset is\n            // calculated from the plot area and out\n            columnsFirst = this.side === 3;\n            if (!columnsFirst) {\n                proceed.apply(this);\n            }\n            if (!grid?.isColumn) {\n                let columns = grid?.columns || [];\n                if (columnsFirst) {\n                    columns = columns.slice().reverse();\n                }\n                columns\n                    .forEach((column) => {\n                    column.getOffset();\n                });\n            }\n            if (columnsFirst) {\n                proceed.apply(this);\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterGetTitlePosition(e) {\n            const axis = this;\n            const options = axis.options;\n            const gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                // Compute anchor points for each of the title align options\n                const { axisTitle, height: axisHeight, horiz, left: axisLeft, offset, opposite, options, top: axisTop, width: axisWidth } = axis;\n                const tickSize = axis.tickSize();\n                const titleWidth = axisTitle && axisTitle.getBBox().width;\n                const xOption = options.title.x;\n                const yOption = options.title.y;\n                const titleMargin = pick(options.title.margin, horiz ? 5 : 10);\n                const titleFontSize = axisTitle ? axis.chart.renderer.fontMetrics(axisTitle).f : 0;\n                const crispCorr = tickSize ? tickSize[0] / 2 : 0;\n                // TODO account for alignment\n                // the position in the perpendicular direction of the axis\n                const offAxis = ((horiz ? axisTop + axisHeight : axisLeft) +\n                    (horiz ? 1 : -1) * // Horizontal axis reverses the margin\n                        (opposite ? -1 : 1) * // So does opposite axes\n                        crispCorr +\n                    (axis.side === GridAxisSide.bottom ? titleFontSize : 0));\n                e.titlePosition.x = horiz ?\n                    axisLeft - (titleWidth || 0) / 2 - titleMargin + xOption :\n                    offAxis + (opposite ? axisWidth : 0) + offset + xOption;\n                e.titlePosition.y = horiz ?\n                    (offAxis -\n                        (opposite ? axisHeight : 0) +\n                        (opposite ? titleFontSize : -titleFontSize) / 2 +\n                        offset +\n                        yOption) :\n                    axisTop - titleMargin + yOption;\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterInit() {\n            const axis = this;\n            const { chart, options: { grid: gridOptions = {} }, userOptions } = axis;\n            if (gridOptions.enabled) {\n                applyGridOptions(axis);\n            }\n            if (gridOptions.columns) {\n                const columns = axis.grid.columns = [];\n                let columnIndex = axis.grid.columnIndex = 0;\n                // Handle columns, each column is a grid axis\n                while (++columnIndex < gridOptions.columns.length) {\n                    const columnOptions = merge(userOptions, gridOptions.columns[columnIndex], {\n                        isInternal: true,\n                        linkedTo: 0,\n                        // Disable by default the scrollbar on the grid axis\n                        scrollbar: {\n                            enabled: false\n                        }\n                    }, \n                    // Avoid recursion\n                    {\n                        grid: {\n                            columns: void 0\n                        }\n                    });\n                    const column = new Axis(axis.chart, columnOptions, 'yAxis');\n                    column.grid.isColumn = true;\n                    column.grid.columnIndex = columnIndex;\n                    // Remove column axis from chart axes array, and place it\n                    // in the columns array.\n                    erase(chart.axes, column);\n                    erase(chart[axis.coll] || [], column);\n                    columns.push(column);\n                }\n            }\n        }\n        /**\n         * Draw an extra line on the far side of the outermost axis,\n         * creating floor/roof/wall of a grid. And some padding.\n         * ```\n         * Make this:\n         *             (axis.min) __________________________ (axis.max)\n         *                           |    |    |    |    |\n         * Into this:\n         *             (axis.min) __________________________ (axis.max)\n         *                        ___|____|____|____|____|__\n         * ```\n         * @private\n         */\n        function onAfterRender() {\n            const axis = this, { axisTitle, grid, options } = axis, gridOptions = options.grid || {};\n            if (gridOptions.enabled === true) {\n                const min = axis.min || 0, max = axis.max || 0, firstTick = axis.ticks[axis.tickPositions[0]];\n                // Adjust the title max width to the column width (#19657)\n                if (axisTitle &&\n                    !axis.chart.styledMode &&\n                    firstTick?.slotWidth &&\n                    !axis.options.title.style.width) {\n                    axisTitle.css({ width: `${firstTick.slotWidth}px` });\n                }\n                // @todo actual label padding (top, bottom, left, right)\n                axis.maxLabelDimensions = axis.getMaxLabelDimensions(axis.ticks, axis.tickPositions);\n                // Remove right wall before rendering if updating\n                if (axis.rightWall) {\n                    axis.rightWall.destroy();\n                }\n                /*\n                Draw an extra axis line on outer axes\n                            >\n                Make this:    |______|______|______|___\n\n                            > _________________________\n                Into this:    |______|______|______|__|\n                                                        */\n                if (axis.grid && axis.grid.isOuterAxis() && axis.axisLine) {\n                    const lineWidth = options.lineWidth;\n                    if (lineWidth) {\n                        const linePath = axis.getLinePath(lineWidth), startPoint = linePath[0], endPoint = linePath[1], \n                        // Negate distance if top or left axis\n                        // Subtract 1px to draw the line at the end of the tick\n                        tickLength = (axis.tickSize('tick') || [1])[0], distance = tickLength * ((axis.side === GridAxisSide.top ||\n                            axis.side === GridAxisSide.left) ? -1 : 1);\n                        // If axis is horizontal, reposition line path vertically\n                        if (startPoint[0] === 'M' && endPoint[0] === 'L') {\n                            if (axis.horiz) {\n                                startPoint[2] += distance;\n                                endPoint[2] += distance;\n                            }\n                            else {\n                                startPoint[1] += distance;\n                                endPoint[1] += distance;\n                            }\n                        }\n                        // If it doesn't exist, add an upper and lower border\n                        // for the vertical grid axis.\n                        if (!axis.horiz && axis.chart.marginRight) {\n                            const upperBorderStartPoint = startPoint, upperBorderEndPoint = [\n                                'L',\n                                axis.left,\n                                startPoint[2] || 0\n                            ], upperBorderPath = [\n                                upperBorderStartPoint,\n                                upperBorderEndPoint\n                            ], lowerBorderEndPoint = [\n                                'L',\n                                axis.chart.chartWidth - axis.chart.marginRight,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderStartPoint = [\n                                'M',\n                                endPoint[1] || 0,\n                                axis.toPixels(max + axis.tickmarkOffset)\n                            ], lowerBorderPath = [\n                                lowerBorderStartPoint,\n                                lowerBorderEndPoint\n                            ];\n                            if (!axis.grid.upperBorder && min % 1 !== 0) {\n                                axis.grid.upperBorder = axis.grid.renderBorder(upperBorderPath);\n                            }\n                            if (axis.grid.upperBorder) {\n                                axis.grid.upperBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.upperBorder.animate({\n                                    d: upperBorderPath\n                                });\n                            }\n                            if (!axis.grid.lowerBorder && max % 1 !== 0) {\n                                axis.grid.lowerBorder = axis.grid.renderBorder(lowerBorderPath);\n                            }\n                            if (axis.grid.lowerBorder) {\n                                axis.grid.lowerBorder.attr({\n                                    stroke: options.lineColor,\n                                    'stroke-width': options.lineWidth\n                                });\n                                axis.grid.lowerBorder.animate({\n                                    d: lowerBorderPath\n                                });\n                            }\n                        }\n                        // Render an extra line parallel to the existing axes, to\n                        // close the grid.\n                        if (!axis.grid.axisLineExtra) {\n                            axis.grid.axisLineExtra = axis.grid.renderBorder(linePath);\n                        }\n                        else {\n                            axis.grid.axisLineExtra.attr({\n                                stroke: options.lineColor,\n                                'stroke-width': options.lineWidth\n                            });\n                            axis.grid.axisLineExtra.animate({\n                                d: linePath\n                            });\n                        }\n                        // Show or hide the line depending on options.showEmpty\n                        axis.axisLine[axis.showAxis ? 'show' : 'hide']();\n                    }\n                }\n                (grid && grid.columns || []).forEach((column) => column.render());\n                // Manipulate the tick mark visibility\n                // based on the axis.max- allows smooth scrolling.\n                if (!axis.horiz &&\n                    axis.chart.hasRendered &&\n                    (axis.scrollbar ||\n                        (axis.linkedParent && axis.linkedParent.scrollbar)) &&\n                    axis.tickPositions.length) {\n                    const tickmarkOffset = axis.tickmarkOffset, lastTick = axis.tickPositions[axis.tickPositions.length - 1], firstTick = axis.tickPositions[0];\n                    let label, tickMark;\n                    while ((label = axis.hiddenLabels.pop()) && label.element) {\n                        label.show(); // #15453\n                    }\n                    while ((tickMark = axis.hiddenMarks.pop()) &&\n                        tickMark.element) {\n                        tickMark.show(); // #16439\n                    }\n                    // Hide/show first tick label.\n                    label = axis.ticks[firstTick].label;\n                    if (label) {\n                        if (min - firstTick > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    // Hide/show last tick mark/label.\n                    label = axis.ticks[lastTick].label;\n                    if (label) {\n                        if (lastTick - max > tickmarkOffset) {\n                            axis.hiddenLabels.push(label.hide());\n                        }\n                        else {\n                            label.show();\n                        }\n                    }\n                    const mark = axis.ticks[lastTick].mark;\n                    if (mark &&\n                        lastTick - max < tickmarkOffset &&\n                        lastTick - max > 0 && axis.ticks[lastTick].isLast) {\n                        axis.hiddenMarks.push(mark.hide());\n                    }\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetAxisTranslation() {\n            const axis = this;\n            const tickInfo = axis.tickPositions && axis.tickPositions.info;\n            const options = axis.options;\n            const gridOptions = options.grid || {};\n            const userLabels = axis.userOptions.labels || {};\n            // Fire this only for the Gantt type chart, #14868.\n            if (gridOptions.enabled) {\n                if (axis.horiz) {\n                    axis.series.forEach((series) => {\n                        series.options.pointRange = 0;\n                    });\n                    // Lower level time ticks, like hours or minutes, represent\n                    // points in time and not ranges. These should be aligned\n                    // left in the grid cell by default. The same applies to\n                    // years of higher order.\n                    if (tickInfo &&\n                        options.dateTimeLabelFormats &&\n                        options.labels &&\n                        !defined(userLabels.align) &&\n                        (options.dateTimeLabelFormats[tickInfo.unitName]\n                            .range === false ||\n                            tickInfo.count > 1 // Years\n                        )) {\n                        options.labels.align = 'left';\n                        if (!defined(userLabels.x)) {\n                            options.labels.x = 3;\n                        }\n                    }\n                }\n                else {\n                    // Don't trim ticks which not in min/max range but\n                    // they are still in the min/max plus tickInterval.\n                    if (this.type !== 'treegrid' &&\n                        axis.grid &&\n                        axis.grid.columns) {\n                        this.minPointOffset = this.tickInterval;\n                    }\n                }\n            }\n        }\n        /**\n         * Creates a left and right wall on horizontal axes:\n         * - Places leftmost tick at the start of the axis, to create a left\n         *   wall\n         * - Ensures that the rightmost tick is at the end of the axis, to\n         *   create a right wall.\n         * @private\n         */\n        function onAfterSetOptions(e) {\n            const options = this.options, userOptions = e.userOptions, gridOptions = ((options && isObject(options.grid)) ? options.grid : {});\n            let gridAxisOptions;\n            if (gridOptions.enabled === true) {\n                // Merge the user options into default grid axis options so\n                // that when a user option is set, it takes precedence.\n                gridAxisOptions = merge(true, {\n                    className: ('highcharts-grid-axis ' + (userOptions.className || '')),\n                    dateTimeLabelFormats: {\n                        hour: {\n                            list: ['%H:%M', '%H']\n                        },\n                        day: {\n                            list: ['%A, %e. %B', '%a, %e. %b', '%E']\n                        },\n                        week: {\n                            list: ['Week %W', 'W%W']\n                        },\n                        month: {\n                            list: ['%B', '%b', '%o']\n                        }\n                    },\n                    grid: {\n                        borderWidth: 1\n                    },\n                    labels: {\n                        padding: 2,\n                        style: {\n                            fontSize: '0.9em'\n                        }\n                    },\n                    margin: 0,\n                    title: {\n                        text: null,\n                        reserveSpace: false,\n                        rotation: 0,\n                        style: {\n                            textOverflow: 'ellipsis'\n                        }\n                    },\n                    // In a grid axis, only allow one unit of certain types,\n                    // for example we shouldn't have one grid cell spanning\n                    // two days.\n                    units: [[\n                            'millisecond', // Unit name\n                            [1, 10, 100]\n                        ], [\n                            'second',\n                            [1, 10]\n                        ], [\n                            'minute',\n                            [1, 5, 15]\n                        ], [\n                            'hour',\n                            [1, 6]\n                        ], [\n                            'day',\n                            [1]\n                        ], [\n                            'week',\n                            [1]\n                        ], [\n                            'month',\n                            [1]\n                        ], [\n                            'year',\n                            null\n                        ]]\n                }, userOptions);\n                // X-axis specific options\n                if (this.coll === 'xAxis') {\n                    // For linked axes, tickPixelInterval is used only if\n                    // the tickPositioner below doesn't run or returns\n                    // undefined (like multiple years)\n                    if (defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPixelInterval)) {\n                        gridAxisOptions.tickPixelInterval = 350;\n                    }\n                    // For the secondary grid axis, use the primary axis'\n                    // tick intervals and return ticks one level higher.\n                    if (\n                    // Check for tick pixel interval in options\n                    !defined(userOptions.tickPixelInterval) &&\n                        // Only for linked axes\n                        defined(userOptions.linkedTo) &&\n                        !defined(userOptions.tickPositioner) &&\n                        !defined(userOptions.tickInterval) &&\n                        !defined(userOptions.units)) {\n                        gridAxisOptions.tickPositioner = function (min, max) {\n                            const parentInfo = (this.linkedParent &&\n                                this.linkedParent.tickPositions &&\n                                this.linkedParent.tickPositions.info);\n                            if (parentInfo) {\n                                const units = (gridAxisOptions.units || []);\n                                let unitIdx, count = 1, unitName = 'year';\n                                for (let i = 0; i < units.length; i++) {\n                                    const unit = units[i];\n                                    if (unit && unit[0] === parentInfo.unitName) {\n                                        unitIdx = i;\n                                        break;\n                                    }\n                                }\n                                // Get the first allowed count on the next unit.\n                                const unit = (isNumber(unitIdx) && units[unitIdx + 1]);\n                                if (unit) {\n                                    unitName = unit[0] || 'year';\n                                    const counts = unit[1];\n                                    count = counts && counts[0] || 1;\n                                    // In case the base X axis shows years, make the\n                                    // secondary axis show ten times the years (#11427)\n                                }\n                                else if (parentInfo.unitName === 'year') {\n                                    // `unitName` is 'year'\n                                    count = parentInfo.count * 10;\n                                }\n                                const unitRange = timeUnits[unitName];\n                                this.tickInterval = unitRange * count;\n                                return this.chart.time.getTimeTicks({ unitRange, count, unitName }, min, max, this.options.startOfWeek);\n                            }\n                        };\n                    }\n                }\n                // Now merge the combined options into the axis options\n                merge(true, this.options, gridAxisOptions);\n                if (this.horiz) {\n                    /*               _________________________\n                    Make this:    ___|_____|_____|_____|__|\n                                    ^                     ^\n                                    _________________________\n                    Into this:    |_____|_____|_____|_____|\n                                        ^                 ^    */\n                    options.minPadding = pick(userOptions.minPadding, 0);\n                    options.maxPadding = pick(userOptions.maxPadding, 0);\n                }\n                // If borderWidth is set, then use its value for tick and\n                // line width.\n                if (isNumber(options.grid.borderWidth)) {\n                    options.tickWidth = options.lineWidth =\n                        gridOptions.borderWidth;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onAfterSetOptions2(e) {\n            const axis = this;\n            const userOptions = e.userOptions;\n            const gridOptions = userOptions && userOptions.grid || {};\n            const columns = gridOptions.columns;\n            // Add column options to the parent axis. Children has their column options\n            // set on init in onGridAxisAfterInit.\n            if (gridOptions.enabled && columns) {\n                merge(true, axis.options, columns[0]);\n            }\n        }\n        /**\n         * Handle columns and setScale.\n         * @private\n         */\n        function onAfterSetScale() {\n            const axis = this;\n            (axis.grid.columns || []).forEach((column) => column.setScale());\n        }\n        /**\n         * Draw vertical axis ticks extra long to create cell floors and roofs.\n         * Overrides the tickLength for vertical axes.\n         * @private\n         */\n        function onAfterTickSize(e) {\n            const { horiz, maxLabelDimensions, options: { grid: gridOptions = {} } } = this;\n            if (gridOptions.enabled && maxLabelDimensions) {\n                const labelPadding = this.options.labels.distance * 2;\n                const distance = horiz ?\n                    (gridOptions.cellHeight ||\n                        labelPadding + maxLabelDimensions.height) :\n                    labelPadding + maxLabelDimensions.width;\n                if (isArray(e.tickSize)) {\n                    e.tickSize[0] = distance;\n                }\n                else {\n                    e.tickSize = [distance, 0];\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartAfterSetChartSize() {\n            this.axes.forEach((axis) => {\n                (axis.grid && axis.grid.columns || []).forEach((column) => {\n                    column.setAxisSize();\n                    column.setAxisTranslation();\n                });\n            });\n        }\n        /**\n         * @private\n         */\n        function onDestroy(e) {\n            const { grid } = this;\n            (grid.columns || []).forEach((column) => column.destroy(e.keepEvents));\n            grid.columns = void 0;\n        }\n        /**\n         * Wraps axis init to draw cell walls on vertical axes.\n         * @private\n         */\n        function onInit(e) {\n            const axis = this;\n            const userOptions = e.userOptions || {};\n            const gridOptions = userOptions.grid || {};\n            if (gridOptions.enabled && defined(gridOptions.borderColor)) {\n                userOptions.tickColor = userOptions.lineColor = (gridOptions.borderColor);\n            }\n            if (!axis.grid) {\n                axis.grid = new GridAxisAdditions(axis);\n            }\n            axis.hiddenLabels = [];\n            axis.hiddenMarks = [];\n        }\n        /**\n         * Center tick labels in cells.\n         * @private\n         */\n        function onTickAfterGetLabelPosition(e) {\n            const tick = this, label = tick.label, axis = tick.axis, reversed = axis.reversed, chart = axis.chart, options = axis.options, gridOptions = options.grid || {}, labelOpts = axis.options.labels, align = labelOpts.align, \n            // `verticalAlign` is currently not supported for axis.labels.\n            verticalAlign = 'middle', // LabelOpts.verticalAlign,\n            side = GridAxisSide[axis.side], tickmarkOffset = e.tickmarkOffset, tickPositions = axis.tickPositions, tickPos = tick.pos - tickmarkOffset, nextTickPos = (isNumber(tickPositions[e.index + 1]) ?\n                tickPositions[e.index + 1] - tickmarkOffset :\n                (axis.max || 0) + tickmarkOffset), tickSize = axis.tickSize('tick'), tickWidth = tickSize ? tickSize[0] : 0, crispCorr = tickSize ? tickSize[1] / 2 : 0;\n            // Only center tick labels in grid axes\n            if (gridOptions.enabled === true) {\n                let bottom, top, left, right;\n                // Calculate top and bottom positions of the cell.\n                if (side === 'top') {\n                    bottom = axis.top + axis.offset;\n                    top = bottom - tickWidth;\n                }\n                else if (side === 'bottom') {\n                    top = chart.chartHeight - axis.bottom + axis.offset;\n                    bottom = top + tickWidth;\n                }\n                else {\n                    bottom = axis.top + axis.len - (axis.translate(reversed ? nextTickPos : tickPos) || 0);\n                    top = axis.top + axis.len - (axis.translate(reversed ? tickPos : nextTickPos) || 0);\n                }\n                // Calculate left and right positions of the cell.\n                if (side === 'right') {\n                    left = chart.chartWidth - axis.right + axis.offset;\n                    right = left + tickWidth;\n                }\n                else if (side === 'left') {\n                    right = axis.left + axis.offset;\n                    left = right - tickWidth;\n                }\n                else {\n                    left = Math.round(axis.left + (axis.translate(reversed ? nextTickPos : tickPos) || 0)) - crispCorr;\n                    right = Math.min(// #15742\n                    Math.round(axis.left + (axis.translate(reversed ? tickPos : nextTickPos) || 0)) - crispCorr, axis.left + axis.len);\n                }\n                tick.slotWidth = right - left;\n                // Calculate the positioning of the label based on\n                // alignment.\n                e.pos.x = (align === 'left' ?\n                    left :\n                    align === 'right' ?\n                        right :\n                        left + ((right - left) / 2) // Default to center\n                );\n                e.pos.y = (verticalAlign === 'top' ?\n                    top :\n                    verticalAlign === 'bottom' ?\n                        bottom :\n                        top + ((bottom - top) / 2) // Default to middle\n                );\n                if (label) {\n                    const lblMetrics = chart.renderer.fontMetrics(label), labelHeight = label.getBBox().height;\n                    // Adjustment to y position to align the label correctly.\n                    // Would be better to have a setter or similar for this.\n                    if (!labelOpts.useHTML) {\n                        const lines = Math.round(labelHeight / lblMetrics.h);\n                        e.pos.y += (\n                        // Center the label\n                        // TODO: why does this actually center the label?\n                        ((lblMetrics.b - (lblMetrics.h - lblMetrics.f)) / 2) +\n                            // Adjust for height of additional lines.\n                            -(((lines - 1) * lblMetrics.h) / 2));\n                    }\n                    else {\n                        e.pos.y += (\n                        // Readjust yCorr in htmlUpdateTransform\n                        lblMetrics.b +\n                            // Adjust for height of html label\n                            -(labelHeight / 2));\n                    }\n                }\n                e.pos.x += (axis.horiz && labelOpts.x) || 0;\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickLabelFormat(ctx) {\n            const { axis, value } = ctx;\n            if (axis.options.grid &&\n                axis.options.grid.enabled) {\n                const tickPos = axis.tickPositions;\n                const series = (axis.linkedParent || axis).series[0];\n                const isFirst = value === tickPos[0];\n                const isLast = value === tickPos[tickPos.length - 1];\n                const point = series && find(series.options.data, function (p) {\n                    return p[axis.isXAxis ? 'x' : 'y'] === value;\n                });\n                let pointCopy;\n                if (point && series.is('gantt')) {\n                    // For the Gantt set point aliases to the pointCopy\n                    // to do not change the original point\n                    pointCopy = merge(point);\n                    H.seriesTypes.gantt.prototype.pointClass\n                        .setGanttPointAliases(pointCopy);\n                }\n                // Make additional properties available for the\n                // formatter\n                ctx.isFirst = isFirst;\n                ctx.isLast = isLast;\n                ctx.point = pointCopy;\n            }\n        }\n        /**\n         * Makes tick labels which are usually ignored in a linked axis\n         * displayed if they are within range of linkedParent.min.\n         * ```\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Make this:             |   |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         *                        _____________________________\n         *                        |   |       |       |       |\n         * Into this:             | 1 |   2   |   3   |   4   |\n         *                        |___|_______|_______|_______|\n         *                          ^\n         * ```\n         * @private\n         * @todo Does this function do what the drawing says? Seems to affect\n         *       ticks and not the labels directly?\n         */\n        function onTrimTicks() {\n            const axis = this, options = axis.options, gridOptions = options.grid || {}, categoryAxis = axis.categories, tickPositions = axis.tickPositions, firstPos = tickPositions[0], secondPos = tickPositions[1], lastPos = tickPositions[tickPositions.length - 1], beforeLastPos = tickPositions[tickPositions.length - 2], linkedMin = axis.linkedParent && axis.linkedParent.min, linkedMax = axis.linkedParent && axis.linkedParent.max, min = linkedMin || axis.min, max = linkedMax || axis.max, tickInterval = axis.tickInterval, startLessThanMin = ( // #19845\n            isNumber(min) &&\n                min >= firstPos + tickInterval &&\n                min < secondPos), endMoreThanMin = (isNumber(min) &&\n                firstPos < min &&\n                firstPos + tickInterval > min), startLessThanMax = (isNumber(max) &&\n                lastPos > max &&\n                lastPos - tickInterval < max), endMoreThanMax = (isNumber(max) &&\n                max <= lastPos - tickInterval &&\n                max > beforeLastPos);\n            if (gridOptions.enabled === true &&\n                !categoryAxis &&\n                (axis.isXAxis || axis.isLinked)) {\n                if ((endMoreThanMin || startLessThanMin) && !options.startOnTick) {\n                    tickPositions[0] = min;\n                }\n                if ((startLessThanMax || endMoreThanMax) && !options.endOnTick) {\n                    tickPositions[tickPositions.length - 1] = max;\n                }\n            }\n        }\n        /**\n         * Avoid altering tickInterval when reserving space.\n         * @private\n         */\n        function wrapUnsquish(proceed) {\n            const axis = this;\n            const { options: { grid: gridOptions = {} } } = axis;\n            if (gridOptions.enabled === true && axis.categories) {\n                return axis.tickInterval;\n            }\n            return proceed.apply(axis, argsToArray(arguments));\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * Additions for grid axes.\n         * @private\n         * @class\n         */\n        class GridAxisAdditions {\n            /* *\n            *\n            *  Constructors\n            *\n            * */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n            *\n            *  Functions\n            *\n            * */\n            /**\n             * Checks if an axis is the outer axis in its dimension. Since\n             * axes are placed outwards in order, the axis with the highest\n             * index is the outermost axis.\n             *\n             * Example: If there are multiple x-axes at the top of the chart,\n             * this function returns true if the axis supplied is the last\n             * of the x-axes.\n             *\n             * @private\n             *\n             * @return {boolean}\n             * True if the axis is the outermost axis in its dimension; false if\n             * not.\n             */\n            isOuterAxis() {\n                const axis = this.axis;\n                const chart = axis.chart;\n                const columnIndex = axis.grid.columnIndex;\n                const columns = (axis.linkedParent?.grid.columns ||\n                    axis.grid.columns ||\n                    []);\n                const parentAxis = columnIndex ? axis.linkedParent : axis;\n                let thisIndex = -1, lastIndex = 0;\n                // On the left side, when we have columns (not only multiple axes), the\n                // main axis is to the left\n                if (axis.side === 3 && !chart.inverted && columns.length) {\n                    return !axis.linkedParent;\n                }\n                (chart[axis.coll] || []).forEach((otherAxis, index) => {\n                    if (otherAxis.side === axis.side &&\n                        !otherAxis.options.isInternal) {\n                        lastIndex = index;\n                        if (otherAxis === parentAxis) {\n                            // Get the index of the axis in question\n                            thisIndex = index;\n                        }\n                    }\n                });\n                return (lastIndex === thisIndex &&\n                    (isNumber(columnIndex) ?\n                        columns.length === columnIndex :\n                        true));\n            }\n            /**\n             * Add extra border based on the provided path.\n             * @private\n             * @param {SVGPath} path\n             * The path of the border.\n             * @return {Highcharts.SVGElement}\n             * Border\n             */\n            renderBorder(path) {\n                const axis = this.axis, renderer = axis.chart.renderer, options = axis.options, extraBorderLine = renderer.path(path)\n                    .addClass('highcharts-axis-line')\n                    .add(axis.axisGroup);\n                if (!renderer.styledMode) {\n                    extraBorderLine.attr({\n                        stroke: options.lineColor,\n                        'stroke-width': options.lineWidth,\n                        zIndex: 7\n                    });\n                }\n                return extraBorderLine;\n            }\n        }\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        // First letter of the day of the week, e.g. 'M' for 'Monday'.\n        dateFormats.E = function (timestamp) {\n            return this.dateFormat('%a', timestamp, true).charAt(0);\n        };\n        // Adds week date format\n        dateFormats.W = function (timestamp) {\n            const time = this, d = new this.Date(timestamp), unitsToOmit = ['Hours', 'Milliseconds', 'Minutes', 'Seconds'];\n            unitsToOmit.forEach(function (format) {\n                time.set(format, d, 0);\n            });\n            const firstDay = (this.get('Day', d) + 6) % 7;\n            const thursday = new this.Date(d.valueOf());\n            this.set('Date', thursday, this.get('Date', d) - firstDay + 3);\n            const firstThursday = new this.Date(this.get('FullYear', thursday), 0, 1);\n            if (this.get('Day', firstThursday) !== 4) {\n                this.set('Month', d, 0);\n                this.set('Date', d, 1 + (11 - this.get('Day', firstThursday)) % 7);\n            }\n            return (1 +\n                Math.floor((thursday.valueOf() - firstThursday.valueOf()) / 604800000)).toString();\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const GridAxis = {\n            compose\n        };\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * @productdesc {gantt}\n         * For grid axes (like in Gantt charts),\n         * it is possible to declare as a list to provide different\n         * formats depending on available space.\n         *\n         * Defaults to:\n         * ```js\n         * {\n         *     hour: { list: ['%H:%M', '%H'] },\n         *     day: { list: ['%A, %e. %B', '%a, %e. %b', '%E'] },\n         *     week: { list: ['Week %W', 'W%W'] },\n         *     month: { list: ['%B', '%b', '%o'] }\n         * }\n         * ```\n         *\n         * @sample {gantt} gantt/grid-axis/date-time-label-formats\n         *         Gantt chart with custom axis date format.\n         *\n         * @apioption xAxis.dateTimeLabelFormats\n         */\n        /**\n         * Set grid options for the axis labels. Requires Highcharts Gantt.\n         *\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid\n         */\n        /**\n         * Enable grid on the axis labels. Defaults to true for Gantt charts.\n         *\n         * @type      {boolean}\n         * @default   true\n         * @since     6.2.0\n         * @product   gantt\n         * @apioption xAxis.grid.enabled\n         */\n        /**\n         * Set specific options for each column (or row for horizontal axes) in the\n         * grid. Each extra column/row is its own axis, and the axis options can be set\n         * here.\n         *\n         * @sample gantt/demo/left-axis-table\n         *         Left axis as a table\n         * @sample gantt/demo/treegrid-columns\n         *         Collapsible tree grid with columns\n         *\n         * @type      {Array<Highcharts.XAxisOptions>}\n         * @apioption xAxis.grid.columns\n         */\n        /**\n         * Set border color for the label grid lines.\n         *\n         * @type      {Highcharts.ColorString}\n         * @default   #e6e6e6\n         * @apioption xAxis.grid.borderColor\n         */\n        /**\n         * Set border width of the label grid lines.\n         *\n         * @type      {number}\n         * @default   1\n         * @apioption xAxis.grid.borderWidth\n         */\n        /**\n         * Set cell height for grid axis labels. By default this is calculated from font\n         * size. This option only applies to horizontal axes. For vertical axes, check\n         * the [#yAxis.staticScale](yAxis.staticScale) option.\n         *\n         * @sample gantt/grid-axis/cellheight\n         *         Gant chart with custom cell height\n         * @type      {number}\n         * @apioption xAxis.grid.cellHeight\n         */\n        ''; // Keeps doclets above in JS file\n\n        return GridAxis;\n    });\n    _registerModule(_modules, 'Gantt/Tree.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Imports\n         *\n         * */\n        const { extend, isNumber, pick } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Creates an object map from parent id to children's index.\n         *\n         * @private\n         * @function Highcharts.Tree#getListOfParents\n         *\n         * @param {Array<*>} data\n         *        List of points set in options. `Array.parent` is parent id of point.\n         *\n         * @return {Highcharts.Dictionary<Array<*>>}\n         * Map from parent id to children index in data\n         */\n        function getListOfParents(data) {\n            const root = '', ids = [], listOfParents = data.reduce((prev, curr) => {\n                const { parent = '', id } = curr;\n                if (typeof prev[parent] === 'undefined') {\n                    prev[parent] = [];\n                }\n                prev[parent].push(curr);\n                if (id) {\n                    ids.push(id);\n                }\n                return prev;\n            }, {});\n            Object.keys(listOfParents).forEach((node) => {\n                if ((node !== root) && (ids.indexOf(node) === -1)) {\n                    const adoptedByRoot = listOfParents[node].map(function (orphan) {\n                        const { ...parentExcluded } = orphan; // #15196\n                        return parentExcluded;\n                    });\n                    listOfParents[root].push(...adoptedByRoot);\n                    delete listOfParents[node];\n                }\n            });\n            return listOfParents;\n        }\n        /** @private */\n        function getNode(id, parent, level, data, mapOfIdToChildren, options) {\n            const after = options && options.after, before = options && options.before, node = {\n                data,\n                depth: level - 1,\n                id,\n                level,\n                parent: (parent || '')\n            };\n            let descendants = 0, height = 0, start, end;\n            // Allow custom logic before the children has been created.\n            if (typeof before === 'function') {\n                before(node, options);\n            }\n            // Call getNode recursively on the children. Calculate the height of the\n            // node, and the number of descendants.\n            const children = ((mapOfIdToChildren[id] || [])).map((child) => {\n                const node = getNode(child.id, id, (level + 1), child, mapOfIdToChildren, options), childStart = child.start || NaN, childEnd = (child.milestone === true ?\n                    childStart :\n                    child.end ||\n                        NaN);\n                // Start should be the lowest child.start.\n                start = ((!isNumber(start) || childStart < start) ?\n                    childStart :\n                    start);\n                // End should be the largest child.end.\n                // If child is milestone, then use start as end.\n                end = ((!isNumber(end) || childEnd > end) ?\n                    childEnd :\n                    end);\n                descendants = descendants + 1 + node.descendants;\n                height = Math.max(node.height + 1, height);\n                return node;\n            });\n            // Calculate start and end for point if it is not already explicitly set.\n            if (data) {\n                data.start = pick(data.start, start);\n                data.end = pick(data.end, end);\n            }\n            extend(node, {\n                children: children,\n                descendants: descendants,\n                height: height\n            });\n            // Allow custom logic after the children has been created.\n            if (typeof after === 'function') {\n                after(node, options);\n            }\n            return node;\n        }\n        /** @private */\n        function getTree(data, options) {\n            return getNode('', null, 1, null, getListOfParents(data), options);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const Tree = {\n            getNode,\n            getTree\n        };\n\n        return Tree;\n    });\n    _registerModule(_modules, 'Core/Axis/TreeGrid/TreeGridTick.js', [_modules['Core/Utilities.js']], function (U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { addEvent, removeEvent, isObject, isNumber, pick, wrap } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function onTickInit() {\n            const tick = this;\n            if (!tick.treeGrid) {\n                tick.treeGrid = new TreeGridTickAdditions(tick);\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickHover(label) {\n            label.addClass('highcharts-treegrid-node-active');\n            if (!label.renderer.styledMode) {\n                label.css({\n                    textDecoration: 'underline'\n                });\n            }\n        }\n        /**\n         * @private\n         */\n        function onTickHoverExit(label, options) {\n            const css = isObject(options.style) ? options.style : {};\n            label.removeClass('highcharts-treegrid-node-active');\n            if (!label.renderer.styledMode) {\n                label.css({ textDecoration: (css.textDecoration || 'none') });\n            }\n        }\n        /**\n         * @private\n         */\n        function renderLabelIcon(tick, params) {\n            const treeGrid = tick.treeGrid, isNew = !treeGrid.labelIcon, renderer = params.renderer, labelBox = params.xy, options = params.options, width = options.width || 0, height = options.height || 0, padding = options.padding ?? tick.axis.linkedParent ? 0 : 5, iconCenter = {\n                x: labelBox.x - (width / 2) - padding,\n                y: labelBox.y - (height / 2)\n            }, rotation = params.collapsed ? 90 : 180, shouldRender = params.show && isNumber(iconCenter.y);\n            let icon = treeGrid.labelIcon;\n            if (!icon) {\n                treeGrid.labelIcon = icon = renderer\n                    .path(renderer.symbols[options.type](options.x || 0, options.y || 0, width, height))\n                    .addClass('highcharts-label-icon')\n                    .add(params.group);\n            }\n            // Set the new position, and show or hide\n            icon[shouldRender ? 'show' : 'hide'](); // #14904, #1338\n            // Presentational attributes\n            if (!renderer.styledMode) {\n                icon\n                    .attr({\n                    cursor: 'pointer',\n                    'fill': pick(params.color, \"#666666\" /* Palette.neutralColor60 */),\n                    'stroke-width': 1,\n                    stroke: options.lineColor,\n                    strokeWidth: options.lineWidth || 0\n                });\n            }\n            // Update the icon positions\n            icon[isNew ? 'attr' : 'animate']({\n                translateX: iconCenter.x,\n                translateY: iconCenter.y,\n                rotation: rotation\n            });\n        }\n        /**\n         * @private\n         */\n        function wrapGetLabelPosition(proceed, x, y, label, horiz, labelOptions, tickmarkOffset, index, step) {\n            const tick = this, lbOptions = pick(tick.options && tick.options.labels, labelOptions), pos = tick.pos, axis = tick.axis, isTreeGrid = axis.type === 'treegrid', result = proceed.apply(tick, [x, y, label, horiz, lbOptions, tickmarkOffset, index, step]);\n            let mapOfPosToGridNode, node, level;\n            if (isTreeGrid) {\n                const { width = 0, padding = axis.linkedParent ? 0 : 5 } = (lbOptions && isObject(lbOptions.symbol, true) ?\n                    lbOptions.symbol :\n                    {}), indentation = (lbOptions && isNumber(lbOptions.indentation) ?\n                    lbOptions.indentation :\n                    0);\n                mapOfPosToGridNode = axis.treeGrid.mapOfPosToGridNode;\n                node = mapOfPosToGridNode && mapOfPosToGridNode[pos];\n                level = (node && node.depth) || 1;\n                result.x += (\n                // Add space for symbols\n                (width + (padding * 2)) +\n                    // Apply indentation\n                    ((level - 1) * indentation));\n            }\n            return result;\n        }\n        /**\n         * @private\n         */\n        function wrapRenderLabel(proceed) {\n            const tick = this, { pos, axis, label, treeGrid: tickGrid, options: tickOptions } = tick, icon = tickGrid?.labelIcon, labelElement = label?.element, { treeGrid: axisGrid, options: axisOptions, chart, tickPositions } = axis, mapOfPosToGridNode = axisGrid.mapOfPosToGridNode, labelOptions = pick(tickOptions?.labels, axisOptions?.labels), symbolOptions = (labelOptions && isObject(labelOptions.symbol, true) ?\n                labelOptions.symbol :\n                {}), node = mapOfPosToGridNode && mapOfPosToGridNode[pos], { descendants, depth } = node || {}, hasDescendants = node && descendants && descendants > 0, level = depth, isTreeGridElement = (axis.type === 'treegrid') && labelElement, shouldRender = tickPositions.indexOf(pos) > -1, prefixClassName = 'highcharts-treegrid-node-', prefixLevelClass = prefixClassName + 'level-', styledMode = chart.styledMode;\n            let collapsed, addClassName, removeClassName;\n            if (isTreeGridElement && node) {\n                // Add class name for hierarchical styling.\n                label\n                    .removeClass(new RegExp(prefixLevelClass + '.*'))\n                    .addClass(prefixLevelClass + level);\n            }\n            proceed.apply(tick, Array.prototype.slice.call(arguments, 1));\n            if (isTreeGridElement && hasDescendants) {\n                collapsed = axisGrid.isCollapsed(node);\n                renderLabelIcon(tick, {\n                    color: (!styledMode &&\n                        label.styles.color ||\n                        ''),\n                    collapsed: collapsed,\n                    group: label.parentGroup,\n                    options: symbolOptions,\n                    renderer: label.renderer,\n                    show: shouldRender,\n                    xy: label.xy\n                });\n                // Add class name for the node.\n                addClassName = prefixClassName +\n                    (collapsed ? 'collapsed' : 'expanded');\n                removeClassName = prefixClassName +\n                    (collapsed ? 'expanded' : 'collapsed');\n                label\n                    .addClass(addClassName)\n                    .removeClass(removeClassName);\n                if (!styledMode) {\n                    label.css({\n                        cursor: 'pointer'\n                    });\n                }\n                // Add events to both label text and icon\n                [label, icon].forEach((object) => {\n                    if (object && !object.attachedTreeGridEvents) {\n                        // On hover\n                        addEvent(object.element, 'mouseover', function () {\n                            onTickHover(label);\n                        });\n                        // On hover out\n                        addEvent(object.element, 'mouseout', function () {\n                            onTickHoverExit(label, labelOptions);\n                        });\n                        addEvent(object.element, 'click', function () {\n                            tickGrid.toggleCollapse();\n                        });\n                        object.attachedTreeGridEvents = true;\n                    }\n                });\n            }\n            else if (icon) {\n                removeEvent(labelElement);\n                label?.css({ cursor: 'default' });\n                icon.destroy();\n            }\n        }\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class TreeGridTickAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(TickClass) {\n                const tickProto = TickClass.prototype;\n                if (!tickProto.toggleCollapse) {\n                    addEvent(TickClass, 'init', onTickInit);\n                    wrap(tickProto, 'getLabelPosition', wrapGetLabelPosition);\n                    wrap(tickProto, 'renderLabel', wrapRenderLabel);\n                    // Backwards compatibility\n                    tickProto.collapse = function (redraw) {\n                        this.treeGrid.collapse(redraw);\n                    };\n                    tickProto.expand = function (redraw) {\n                        this.treeGrid.expand(redraw);\n                    };\n                    tickProto.toggleCollapse = function (redraw) {\n                        this.treeGrid.toggleCollapse(redraw);\n                    };\n                }\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * @private\n             */\n            constructor(tick) {\n                this.tick = tick;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Collapse the grid cell. Used when axis is of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#collapse\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            collapse(redraw) {\n                const tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    const pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.collapse(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            }\n            /**\n             * Destroy remaining labelIcon if exist.\n             *\n             * @private\n             * @function Highcharts.Tick#destroy\n             */\n            destroy() {\n                if (this.labelIcon) {\n                    this.labelIcon.destroy();\n                }\n            }\n            /**\n             * Expand the grid cell. Used when axis is of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#expand\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            expand(redraw) {\n                const { pos, axis } = this.tick, { treeGrid, brokenAxis } = axis, posMappedNodes = treeGrid.mapOfPosToGridNode;\n                if (brokenAxis && posMappedNodes) {\n                    const node = posMappedNodes[pos], breaks = treeGrid.expand(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            }\n            /**\n             * Toggle the collapse/expand state of the grid cell. Used when axis is\n             * of type treegrid.\n             *\n             * @see gantt/treegrid-axis/collapsed-dynamically/demo.js\n             *\n             * @private\n             * @function Highcharts.Tick#toggleCollapse\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or wait for an explicit call to\n             * {@link Highcharts.Chart#redraw}\n             */\n            toggleCollapse(redraw) {\n                const tick = this.tick, axis = tick.axis, brokenAxis = axis.brokenAxis;\n                if (brokenAxis &&\n                    axis.treeGrid.mapOfPosToGridNode) {\n                    const pos = tick.pos, node = axis.treeGrid.mapOfPosToGridNode[pos], breaks = axis.treeGrid.toggleCollapse(node);\n                    brokenAxis.setBreaks(breaks, pick(redraw, true));\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreeGridTickAdditions;\n    });\n    _registerModule(_modules, 'Series/TreeUtilities.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { extend, isArray, isNumber, isObject, merge, pick, relativeLength } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getColor(node, options) {\n            const index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n            let getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n            /**\n             * @private\n             */\n            const variateColor = (color) => {\n                const colorVariation = level && level.colorVariation;\n                if (colorVariation &&\n                    colorVariation.key === 'brightness' &&\n                    index &&\n                    siblings) {\n                    return Color.parse(color).brighten(colorVariation.to * (index / siblings)).get();\n                }\n                return color;\n            };\n            if (node) {\n                point = points[node.i];\n                level = mapOptionsToLevel[node.level] || {};\n                getColorByPoint = point && level.colorByPoint;\n                if (getColorByPoint) {\n                    colorIndexByPoint = point.index % (colors ?\n                        colors.length :\n                        chartOptionsChart.colorCount);\n                    colorByPoint = colors && colors[colorIndexByPoint];\n                }\n                // Select either point color, level color or inherited color.\n                if (!series.chart.styledMode) {\n                    color = pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n                }\n                colorIndex = pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n            }\n            return {\n                color: color,\n                colorIndex: colorIndex\n            };\n        }\n        /**\n         * Creates a map from level number to its given options.\n         *\n         * @private\n         *\n         * @param {Object} params\n         * Object containing parameters.\n         * - `defaults` Object containing default options. The default options are\n         *   merged with the userOptions to get the final options for a specific\n         *   level.\n         * - `from` The lowest level number.\n         * - `levels` User options from series.levels.\n         * - `to` The highest level number.\n         *\n         * @return {Highcharts.Dictionary<object>|null}\n         * Returns a map from level number to its given options.\n         */\n        function getLevelOptions(params) {\n            const result = {};\n            let defaults, converted, i, from, to, levels;\n            if (isObject(params)) {\n                from = isNumber(params.from) ? params.from : 1;\n                levels = params.levels;\n                converted = {};\n                defaults = isObject(params.defaults) ? params.defaults : {};\n                if (isArray(levels)) {\n                    converted = levels.reduce((obj, item) => {\n                        let level, levelIsConstant, options;\n                        if (isObject(item) && isNumber(item.level)) {\n                            options = merge({}, item);\n                            levelIsConstant = pick(options.levelIsConstant, defaults.levelIsConstant);\n                            // Delete redundant properties.\n                            delete options.levelIsConstant;\n                            delete options.level;\n                            // Calculate which level these options apply to.\n                            level = item.level + (levelIsConstant ? 0 : from - 1);\n                            if (isObject(obj[level])) {\n                                merge(true, obj[level], options); // #16329\n                            }\n                            else {\n                                obj[level] = options;\n                            }\n                        }\n                        return obj;\n                    }, {});\n                }\n                to = isNumber(params.to) ? params.to : 1;\n                for (i = 0; i <= to; i++) {\n                    result[i] = merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         * @todo Combine buildTree and buildNode with setTreeValues\n         * @todo Remove logic from Treemap and make it utilize this mixin.\n         */\n        function setTreeValues(tree, options) {\n            const before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n            let childrenTotal = 0;\n            tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n            tree.name = pick(point && point.name, '');\n            tree.visible = (idRoot === tree.id ||\n                options.visible === true);\n            if (typeof before === 'function') {\n                tree = before(tree, options);\n            }\n            // First give the children some values\n            tree.children.forEach((child, i) => {\n                const newOptions = extend({}, options);\n                extend(newOptions, {\n                    index: i,\n                    siblings: tree.children.length,\n                    visible: tree.visible\n                });\n                child = setTreeValues(child, newOptions);\n                children.push(child);\n                if (child.visible) {\n                    childrenTotal += child.val;\n                }\n            });\n            // Set the values\n            const value = pick(optionsPoint.value, childrenTotal);\n            tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n            tree.children = children;\n            tree.childrenTotal = childrenTotal;\n            tree.isLeaf = tree.visible && !childrenTotal;\n            tree.val = value;\n            return tree;\n        }\n        /**\n         * Update the rootId property on the series. Also makes sure that it is\n         * accessible to exporting.\n         *\n         * @private\n         *\n         * @param {Object} series\n         * The series to operate on.\n         *\n         * @return {string}\n         * Returns the resulting rootId after update.\n         */\n        function updateRootId(series) {\n            let rootId, options;\n            if (isObject(series)) {\n                // Get the series options.\n                options = isObject(series.options) ? series.options : {};\n                // Calculate the rootId.\n                rootId = pick(series.rootNode, options.rootId, '');\n                // Set rootId on series.userOptions to pick it up in exporting.\n                if (isObject(series.userOptions)) {\n                    series.userOptions.rootId = rootId;\n                }\n                // Set rootId on series to pick it up on next update.\n                series.rootNode = rootId;\n            }\n            return rootId;\n        }\n        /**\n         * Get the node width, which relies on the plot width and the nodeDistance\n         * option.\n         *\n         * @private\n         */\n        function getNodeWidth(series, columnCount) {\n            const { chart, options } = series, { nodeDistance = 0, nodeWidth = 0 } = options, { plotSizeX = 1 } = chart;\n            // Node width auto means they are evenly distributed along the width of\n            // the plot area\n            if (nodeWidth === 'auto') {\n                if (typeof nodeDistance === 'string' && /%$/.test(nodeDistance)) {\n                    const fraction = parseFloat(nodeDistance) / 100, total = columnCount + fraction * (columnCount - 1);\n                    return plotSizeX / total;\n                }\n                const nDistance = Number(nodeDistance);\n                return ((plotSizeX + nDistance) /\n                    (columnCount || 1)) - nDistance;\n            }\n            return relativeLength(nodeWidth, plotSizeX);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const TreeUtilities = {\n            getColor,\n            getLevelOptions,\n            getNodeWidth,\n            setTreeValues,\n            updateRootId\n        };\n\n        return TreeUtilities;\n    });\n    _registerModule(_modules, 'Core/Axis/TreeGrid/TreeGridAxis.js', [_modules['Core/Axis/BrokenAxis.js'], _modules['Core/Axis/GridAxis.js'], _modules['Gantt/Tree.js'], _modules['Core/Axis/TreeGrid/TreeGridTick.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js']], function (BrokenAxis, GridAxis, Tree, TreeGridTick, TU, U) {\n        /* *\n         *\n         *  (c) 2016 Highsoft AS\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { getLevelOptions } = TU;\n        const { addEvent, find, fireEvent, isArray, isObject, isString, merge, pick, removeEvent, wrap } = U;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let TickConstructor;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         */\n        function getBreakFromNode(node, max) {\n            const to = node.collapseEnd || 0;\n            let from = node.collapseStart || 0;\n            // In broken-axis, the axis.max is minimized until it is not within a\n            // break. Therefore, if break.to is larger than axis.max, the axis.to\n            // should not add the 0.5 axis.tickMarkOffset, to avoid adding a break\n            // larger than axis.max.\n            // TODO consider simplifying broken-axis and this might solve itself\n            if (to >= max) {\n                from -= 0.5;\n            }\n            return {\n                from: from,\n                to: to,\n                showPoints: false\n            };\n        }\n        /**\n         * Creates a tree structure of the data, and the treegrid. Calculates\n         * categories, and y-values of points based on the tree.\n         *\n         * @private\n         * @function getTreeGridFromData\n         *\n         * @param {Array<Highcharts.GanttPointOptions>} data\n         * All the data points to display in the axis.\n         *\n         * @param {boolean} uniqueNames\n         * Whether or not the data node with the same name should share grid cell. If\n         * true they do share cell. False by default.\n         *\n         * @param {number} numberOfSeries\n         *\n         * @return {Object}\n         * Returns an object containing categories, mapOfIdToNode,\n         * mapOfPosToGridNode, and tree.\n         *\n         * @todo There should be only one point per line.\n         * @todo It should be optional to have one category per point, or merge\n         *       cells\n         * @todo Add unit-tests.\n         */\n        function getTreeGridFromData(data, uniqueNames, numberOfSeries) {\n            const categories = [], collapsedNodes = [], mapOfIdToNode = {}, uniqueNamesEnabled = uniqueNames || false;\n            let mapOfPosToGridNode = {}, posIterator = -1;\n            // Build the tree from the series data.\n            const treeParams = {\n                // After the children has been created.\n                after: function (node) {\n                    const gridNode = mapOfPosToGridNode[node.pos];\n                    let height = 0, descendants = 0;\n                    gridNode.children.forEach(function (child) {\n                        descendants += (child.descendants || 0) + 1;\n                        height = Math.max((child.height || 0) + 1, height);\n                    });\n                    gridNode.descendants = descendants;\n                    gridNode.height = height;\n                    if (gridNode.collapsed) {\n                        collapsedNodes.push(gridNode);\n                    }\n                },\n                // Before the children has been created.\n                before: function (node) {\n                    const data = isObject(node.data, true) ?\n                        node.data :\n                        {}, name = isString(data.name) ? data.name : '', parentNode = mapOfIdToNode[node.parent], parentGridNode = (isObject(parentNode, true) ?\n                        mapOfPosToGridNode[parentNode.pos] :\n                        null), hasSameName = function (x) {\n                        return x.name === name;\n                    };\n                    let gridNode, pos;\n                    // If not unique names, look for sibling node with the same name\n                    if (uniqueNamesEnabled &&\n                        isObject(parentGridNode, true) &&\n                        !!(gridNode = find(parentGridNode.children, hasSameName))) {\n                        // If there is a gridNode with the same name, reuse position\n                        pos = gridNode.pos;\n                        // Add data node to list of nodes in the grid node.\n                        gridNode.nodes.push(node);\n                    }\n                    else {\n                        // If it is a new grid node, increment position.\n                        pos = posIterator++;\n                    }\n                    // Add new grid node to map.\n                    if (!mapOfPosToGridNode[pos]) {\n                        mapOfPosToGridNode[pos] = gridNode = {\n                            depth: parentGridNode ? parentGridNode.depth + 1 : 0,\n                            name: name,\n                            id: data.id,\n                            nodes: [node],\n                            children: [],\n                            pos: pos\n                        };\n                        // If not root, then add name to categories.\n                        if (pos !== -1) {\n                            categories.push(name);\n                        }\n                        // Add name to list of children.\n                        if (isObject(parentGridNode, true)) {\n                            parentGridNode.children.push(gridNode);\n                        }\n                    }\n                    // Add data node to map\n                    if (isString(node.id)) {\n                        mapOfIdToNode[node.id] = node;\n                    }\n                    // If one of the points are collapsed, then start the grid node\n                    // in collapsed state.\n                    if (gridNode &&\n                        data.collapsed === true) {\n                        gridNode.collapsed = true;\n                    }\n                    // Assign pos to data node\n                    node.pos = pos;\n                }\n            };\n            const updateYValuesAndTickPos = function (map, numberOfSeries) {\n                const setValues = function (gridNode, start, result) {\n                    const nodes = gridNode.nodes, padding = 0.5;\n                    let end = start + (start === -1 ? 0 : numberOfSeries - 1);\n                    const diff = (end - start) / 2, pos = start + diff;\n                    nodes.forEach(function (node) {\n                        const data = node.data;\n                        if (isObject(data, true)) {\n                            // Update point\n                            data.y = start + (data.seriesIndex || 0);\n                            // Remove the property once used\n                            delete data.seriesIndex;\n                        }\n                        node.pos = pos;\n                    });\n                    result[pos] = gridNode;\n                    gridNode.pos = pos;\n                    gridNode.tickmarkOffset = diff + padding;\n                    gridNode.collapseStart = end + padding;\n                    gridNode.children.forEach(function (child) {\n                        setValues(child, end + 1, result);\n                        end = (child.collapseEnd || 0) - padding;\n                    });\n                    // Set collapseEnd to the end of the last child node.\n                    gridNode.collapseEnd = end + padding;\n                    return result;\n                };\n                return setValues(map['-1'], -1, {});\n            };\n            // Create tree from data\n            const tree = Tree.getTree(data, treeParams);\n            // Update y values of data, and set calculate tick positions.\n            mapOfPosToGridNode = updateYValuesAndTickPos(mapOfPosToGridNode, numberOfSeries);\n            // Return the resulting data.\n            return {\n                categories: categories,\n                mapOfIdToNode: mapOfIdToNode,\n                mapOfPosToGridNode: mapOfPosToGridNode,\n                collapsedNodes: collapsedNodes,\n                tree: tree\n            };\n        }\n        /**\n         * Builds the tree of categories and calculates its positions.\n         * @private\n         * @param {Object} e Event object\n         * @param {Object} e.target The chart instance which the event was fired on.\n         * @param {object[]} e.target.axes The axes of the chart.\n         */\n        function onBeforeRender(e) {\n            const chart = e.target, axes = chart.axes;\n            axes.filter((axis) => axis.type === 'treegrid').forEach(function (axis) {\n                const options = axis.options || {}, labelOptions = options.labels, uniqueNames = axis.uniqueNames, max = options.max, \n                // Check whether any of series is rendering for the first\n                // time, visibility has changed, or its data is dirty, and\n                // only then update. #10570, #10580. Also check if\n                // mapOfPosToGridNode exists. #10887\n                isDirty = (!axis.treeGrid.mapOfPosToGridNode ||\n                    axis.series.some(function (series) {\n                        return !series.hasRendered ||\n                            series.isDirtyData ||\n                            series.isDirty;\n                    }));\n                let numberOfSeries = 0, data, treeGrid;\n                if (isDirty) {\n                    // Concatenate data from all series assigned to this axis.\n                    data = axis.series.reduce(function (arr, s) {\n                        if (s.visible) {\n                            // Push all data to array\n                            (s.options.data || []).forEach(function (data) {\n                                // For using keys - rebuild the data structure\n                                if (s.options.keys && s.options.keys.length) {\n                                    data = s.pointClass.prototype\n                                        .optionsToObject\n                                        .call({ series: s }, data);\n                                    s.pointClass.setGanttPointAliases(data);\n                                }\n                                if (isObject(data, true)) {\n                                    // Set series index on data. Removed again\n                                    // after use.\n                                    data.seriesIndex = (numberOfSeries);\n                                    arr.push(data);\n                                }\n                            });\n                            // Increment series index\n                            if (uniqueNames === true) {\n                                numberOfSeries++;\n                            }\n                        }\n                        return arr;\n                    }, []);\n                    // If max is higher than set data - add a\n                    // dummy data to render categories #10779\n                    if (max && data.length < max) {\n                        for (let i = data.length; i <= max; i++) {\n                            data.push({\n                                // Use the zero-width character\n                                // to avoid conflict with uniqueNames\n                                name: i + '\\u200B'\n                            });\n                        }\n                    }\n                    // `setScale` is fired after all the series is initialized,\n                    // which is an ideal time to update the axis.categories.\n                    treeGrid = getTreeGridFromData(data, uniqueNames || false, (uniqueNames === true) ? numberOfSeries : 1);\n                    // Assign values to the axis.\n                    axis.categories = treeGrid.categories;\n                    axis.treeGrid.mapOfPosToGridNode = (treeGrid.mapOfPosToGridNode);\n                    axis.hasNames = true;\n                    axis.treeGrid.tree = treeGrid.tree;\n                    // Update yData now that we have calculated the y values\n                    axis.series.forEach(function (series) {\n                        const axisData = (series.options.data || []).map(function (d) {\n                            if (isArray(d) &&\n                                series.options.keys &&\n                                series.options.keys.length) {\n                                // Get the axisData from the data array used to\n                                // build the treeGrid where has been modified\n                                data.forEach(function (point) {\n                                    if (d.indexOf(point.x) >= 0 &&\n                                        d.indexOf(point.x2) >= 0) {\n                                        d = point;\n                                    }\n                                });\n                            }\n                            return isObject(d, true) ? merge(d) : d;\n                        });\n                        // Avoid destroying points when series is not visible\n                        if (series.visible) {\n                            series.setData(axisData, false);\n                        }\n                    });\n                    // Calculate the label options for each level in the tree.\n                    axis.treeGrid.mapOptionsToLevel =\n                        getLevelOptions({\n                            defaults: labelOptions,\n                            from: 1,\n                            levels: labelOptions && labelOptions.levels,\n                            to: axis.treeGrid.tree && axis.treeGrid.tree.height\n                        });\n                    // Setting initial collapsed nodes\n                    if (e.type === 'beforeRender') {\n                        axis.treeGrid.collapsedNodes = treeGrid.collapsedNodes;\n                    }\n                }\n            });\n        }\n        /**\n         * Generates a tick for initial positioning.\n         *\n         * @private\n         * @function Highcharts.GridAxis#generateTick\n         *\n         * @param {Function} proceed\n         * The original generateTick function.\n         *\n         * @param {number} pos\n         * The tick position in axis values.\n         */\n        function wrapGenerateTick(proceed, pos) {\n            const axis = this, mapOptionsToLevel = axis.treeGrid.mapOptionsToLevel || {}, isTreeGrid = axis.type === 'treegrid', ticks = axis.ticks;\n            let tick = ticks[pos], levelOptions, options, gridNode;\n            if (isTreeGrid &&\n                axis.treeGrid.mapOfPosToGridNode) {\n                gridNode = axis.treeGrid.mapOfPosToGridNode[pos];\n                levelOptions = mapOptionsToLevel[gridNode.depth];\n                if (levelOptions) {\n                    options = {\n                        labels: levelOptions\n                    };\n                }\n                if (!tick &&\n                    TickConstructor) {\n                    ticks[pos] = tick =\n                        new TickConstructor(axis, pos, void 0, void 0, {\n                            category: gridNode.name,\n                            tickmarkOffset: gridNode.tickmarkOffset,\n                            options: options\n                        });\n                }\n                else {\n                    // Update labels depending on tick interval\n                    tick.parameters.category = gridNode.name;\n                    tick.options = options;\n                    tick.addLabel();\n                }\n            }\n            else {\n                proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /**\n         * @private\n         */\n        function wrapInit(proceed, chart, userOptions, coll) {\n            const axis = this, isTreeGrid = userOptions.type === 'treegrid';\n            if (!axis.treeGrid) {\n                axis.treeGrid = new TreeGridAxisAdditions(axis);\n            }\n            // Set default and forced options for TreeGrid\n            if (isTreeGrid) {\n                // Add event for updating the categories of a treegrid.\n                // NOTE Preferably these events should be set on the axis.\n                addEvent(chart, 'beforeRender', onBeforeRender);\n                addEvent(chart, 'beforeRedraw', onBeforeRender);\n                // Add new collapsed nodes on addseries\n                addEvent(chart, 'addSeries', function (e) {\n                    if (e.options.data) {\n                        const treeGrid = getTreeGridFromData(e.options.data, userOptions.uniqueNames || false, 1);\n                        axis.treeGrid.collapsedNodes = (axis.treeGrid.collapsedNodes || []).concat(treeGrid.collapsedNodes);\n                    }\n                });\n                // Collapse all nodes in axis.treegrid.collapsednodes\n                // where collapsed equals true.\n                addEvent(axis, 'foundExtremes', function () {\n                    if (axis.treeGrid.collapsedNodes) {\n                        axis.treeGrid.collapsedNodes.forEach(function (node) {\n                            const breaks = axis.treeGrid.collapse(node);\n                            if (axis.brokenAxis) {\n                                axis.brokenAxis.setBreaks(breaks, false);\n                                // Remove the node from the axis collapsedNodes\n                                if (axis.treeGrid.collapsedNodes) {\n                                    axis.treeGrid.collapsedNodes = axis.treeGrid\n                                        .collapsedNodes\n                                        .filter((n) => ((node.collapseStart !==\n                                        n.collapseStart) ||\n                                        node.collapseEnd !== n.collapseEnd));\n                                }\n                            }\n                        });\n                    }\n                });\n                // If staticScale is not defined on the yAxis\n                // and chart height is set, set axis.isDirty\n                // to ensure collapsing works (#12012)\n                addEvent(axis, 'afterBreaks', function () {\n                    if (axis.coll === 'yAxis' &&\n                        !axis.staticScale &&\n                        axis.chart.options.chart.height) {\n                        axis.isDirty = true;\n                    }\n                });\n                userOptions = merge({\n                    // Default options\n                    grid: {\n                        enabled: true\n                    },\n                    // TODO: add support for align in treegrid.\n                    labels: {\n                        align: 'left',\n                        /**\n                        * Set options on specific levels in a tree grid axis. Takes\n                        * precedence over labels options.\n                        *\n                        * @sample {gantt} gantt/treegrid-axis/labels-levels\n                        *         Levels on TreeGrid Labels\n                        *\n                        * @type      {Array<*>}\n                        * @product   gantt\n                        * @apioption yAxis.labels.levels\n                        *\n                        * @private\n                        */\n                        levels: [{\n                                /**\n                                * Specify the level which the options within this object\n                                * applies to.\n                                *\n                                * @type      {number}\n                                * @product   gantt\n                                * @apioption yAxis.labels.levels.level\n                                *\n                                * @private\n                                */\n                                level: void 0\n                            }, {\n                                level: 1,\n                                /**\n                                 * @type      {Highcharts.CSSObject}\n                                 * @product   gantt\n                                 * @apioption yAxis.labels.levels.style\n                                 *\n                                 * @private\n                                 */\n                                style: {\n                                    /** @ignore-option */\n                                    fontWeight: 'bold'\n                                }\n                            }],\n                        /**\n                         * The symbol for the collapse and expand icon in a\n                         * treegrid.\n                         *\n                         * @product      gantt\n                         * @optionparent yAxis.labels.symbol\n                         *\n                         * @private\n                         */\n                        symbol: {\n                            /**\n                             * The symbol type. Points to a definition function in\n                             * the `Highcharts.Renderer.symbols` collection.\n                             *\n                             * @type {Highcharts.SymbolKeyValue}\n                             *\n                             * @private\n                             */\n                            type: 'triangle',\n                            x: -5,\n                            y: -5,\n                            height: 10,\n                            width: 10\n                        }\n                    },\n                    uniqueNames: false\n                }, userOptions, {\n                    // Forced options\n                    reversed: true\n                });\n            }\n            // Now apply the original function with the original arguments, which are\n            // sliced off this function's arguments\n            proceed.apply(axis, [chart, userOptions, coll]);\n            if (isTreeGrid) {\n                axis.hasNames = true;\n                axis.options.showLastLabel = true;\n            }\n        }\n        /**\n         * Set the tick positions, tickInterval, axis min and max.\n         *\n         * @private\n         * @function Highcharts.GridAxis#setTickInterval\n         *\n         * @param {Function} proceed\n         * The original setTickInterval function.\n         */\n        function wrapSetTickInterval(proceed) {\n            const axis = this, options = axis.options, linkedParent = typeof options.linkedTo === 'number' ?\n                this.chart[axis.coll]?.[options.linkedTo] :\n                void 0, isTreeGrid = axis.type === 'treegrid';\n            if (isTreeGrid) {\n                axis.min = pick(axis.userMin, options.min, axis.dataMin);\n                axis.max = pick(axis.userMax, options.max, axis.dataMax);\n                fireEvent(axis, 'foundExtremes');\n                // `setAxisTranslation` modifies the min and max according to axis\n                // breaks.\n                axis.setAxisTranslation();\n                axis.tickInterval = 1;\n                axis.tickmarkOffset = 0.5;\n                axis.tickPositions = axis.treeGrid.mapOfPosToGridNode ?\n                    axis.treeGrid.getTickPositions() :\n                    [];\n                if (linkedParent) {\n                    const linkedParentExtremes = linkedParent.getExtremes();\n                    axis.min = pick(linkedParentExtremes.min, linkedParentExtremes.dataMin);\n                    axis.max = pick(linkedParentExtremes.max, linkedParentExtremes.dataMax);\n                    axis.tickPositions = linkedParent.tickPositions;\n                }\n                axis.linkedParent = linkedParent;\n            }\n            else {\n                proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n        /**\n         * Wrap axis redraw to remove TreeGrid events from ticks\n         *\n         * @private\n         * @function Highcharts.GridAxis#redraw\n         *\n         * @param {Function} proceed\n         * The original setTickInterval function.\n         */\n        function wrapRedraw(proceed) {\n            const axis = this, isTreeGrid = this.type === 'treegrid';\n            if (isTreeGrid && axis.visible) {\n                axis.tickPositions.forEach(function (pos) {\n                    const tick = axis.ticks[pos];\n                    if (tick.label && tick.label.attachedTreeGridEvents) {\n                        removeEvent(tick.label.element);\n                        tick.label.attachedTreeGridEvents = false;\n                    }\n                });\n            }\n            proceed.apply(axis, Array.prototype.slice.call(arguments, 1));\n        }\n        /* *\n         *\n         *  Classes\n         *\n         * */\n        /**\n         * @private\n         * @class\n         */\n        class TreeGridAxisAdditions {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            static compose(AxisClass, ChartClass, SeriesClass, TickClass) {\n                if (!AxisClass.keepProps.includes('treeGrid')) {\n                    const axisProps = AxisClass.prototype;\n                    AxisClass.keepProps.push('treeGrid');\n                    wrap(axisProps, 'generateTick', wrapGenerateTick);\n                    wrap(axisProps, 'init', wrapInit);\n                    wrap(axisProps, 'setTickInterval', wrapSetTickInterval);\n                    wrap(axisProps, 'redraw', wrapRedraw);\n                    // Make utility functions available for testing.\n                    axisProps.utils = {\n                        getNode: Tree.getNode\n                    };\n                    if (!TickConstructor) {\n                        TickConstructor = TickClass;\n                    }\n                }\n                GridAxis.compose(AxisClass, ChartClass, TickClass);\n                BrokenAxis.compose(AxisClass, SeriesClass);\n                TreeGridTick.compose(TickClass);\n                return AxisClass;\n            }\n            /* *\n             *\n             *  Constructors\n             *\n             * */\n            /**\n             * @private\n             */\n            constructor(axis) {\n                this.axis = axis;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Set the collapse status.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to collapse.\n             */\n            setCollapsedStatus(node) {\n                const axis = this.axis, chart = axis.chart;\n                axis.series.forEach(function (series) {\n                    const data = series.options.data;\n                    if (node.id && data) {\n                        const point = chart.get(node.id), dataPoint = data[series.data.indexOf(point)];\n                        if (point && dataPoint) {\n                            point.collapsed = node.collapsed;\n                            dataPoint.collapsed = node.collapsed;\n                        }\n                    }\n                });\n            }\n            /**\n             * Calculates the new axis breaks to collapse a node.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to collapse.\n             *\n             * @param {number} pos\n             * The tick position to collapse.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            collapse(node) {\n                const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                breaks.push(obj);\n                // Change the collapsed flag #13838\n                node.collapsed = true;\n                axis.treeGrid.setCollapsedStatus(node);\n                return breaks;\n            }\n            /**\n             * Calculates the new axis breaks to expand a node.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to expand.\n             *\n             * @param {number} pos\n             * The tick position to expand.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            expand(node) {\n                const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                // Change the collapsed flag #13838\n                node.collapsed = false;\n                axis.treeGrid.setCollapsedStatus(node);\n                // Remove the break from the axis breaks array.\n                return breaks.reduce(function (arr, b) {\n                    if (b.to !== obj.to || b.from !== obj.from) {\n                        arr.push(b);\n                    }\n                    return arr;\n                }, []);\n            }\n            /**\n             * Creates a list of positions for the ticks on the axis. Filters out\n             * positions that are outside min and max, or is inside an axis break.\n             *\n             * @private\n             *\n             * @return {Array<number>}\n             * List of positions.\n             */\n            getTickPositions() {\n                const axis = this.axis, roundedMin = Math.floor(axis.min / axis.tickInterval) * axis.tickInterval, roundedMax = Math.ceil(axis.max / axis.tickInterval) * axis.tickInterval;\n                return Object.keys(axis.treeGrid.mapOfPosToGridNode || {}).reduce(function (arr, key) {\n                    const pos = +key;\n                    if (pos >= roundedMin &&\n                        pos <= roundedMax &&\n                        !(axis.brokenAxis && axis.brokenAxis.isInAnyBreak(pos))) {\n                        arr.push(pos);\n                    }\n                    return arr;\n                }, []);\n            }\n            /**\n             * Check if a node is collapsed.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Object} node\n             * The node to check if is collapsed.\n             *\n             * @param {number} pos\n             * The tick position to collapse.\n             *\n             * @return {boolean}\n             * Returns true if collapsed, false if expanded.\n             */\n            isCollapsed(node) {\n                const axis = this.axis, breaks = (axis.options.breaks || []), obj = getBreakFromNode(node, axis.max);\n                return breaks.some(function (b) {\n                    return b.from === obj.from && b.to === obj.to;\n                });\n            }\n            /**\n             * Calculates the new axis breaks after toggling the collapse/expand\n             * state of a node. If it is collapsed it will be expanded, and if it is\n             * expanded it will be collapsed.\n             *\n             * @private\n             *\n             * @param {Highcharts.Axis} axis\n             * The axis to check against.\n             *\n             * @param {Highcharts.GridNode} node\n             * The node to toggle.\n             *\n             * @return {Array<object>}\n             * Returns an array of the new breaks for the axis.\n             */\n            toggleCollapse(node) {\n                return (this.isCollapsed(node) ?\n                    this.expand(node) :\n                    this.collapse(node));\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreeGridAxisAdditions;\n    });\n    _registerModule(_modules, 'masters/modules/treegrid.src.js', [_modules['Core/Globals.js'], _modules['Core/Axis/TreeGrid/TreeGridAxis.js']], function (Highcharts, TreeGridAxis) {\n\n        const G = Highcharts;\n        TreeGridAxis.compose(G.Axis, G.Chart, G.Series, G.Tick);\n\n        return Highcharts;\n    });\n}));\n"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","win","dispatchEvent","detail","StackItem","U","BrokenAxis","addEvent","find","fireEvent","isArray","isNumber","pick","onAxisAfterInit","brokenAxis","setBreaks","options","breaks","onAxisAfterSetOptions","axis","hasBreaks","ordinal","onAxisAfterSetTickPositions","tickPositions","info","newPositions","i","length","isInAnyBreak","push","onAxisInit","Additions","onSeriesAfterGeneratePoints","isDirty","connectNulls","points","xAxis","yAxis","point","isPointInBreak","y","x","visible","onSeriesAfterRender","drawBreaks","pointArrayMap","seriesDrawBreaks","keys","threshold","series","forEach","key","breakArray","isXAxis","min","breaksOutOfRange","filter","brk","isOut","otherBreak","from","to","toUpperCase","eventName","seriesGappedPath","currentDataGrouping","groupingSize","gapSize","slice","current","next","gapUnit","basePointRange","xRange","splice","isNull","stacking","stack","stacks","stackKey","stackLabels","total","getGraphPath","compose","AxisClass","SeriesClass","keepProps","includes","seriesProto","prototype","gappedPath","isInBreak","val","repeat","Infinity","test","inclusive","lin2Val","nval","len","val2Lin","constructor","findBreakAt","b","testKeep","inbrk","keep","ret","showPoints","redraw","Object","userOptions","forceRedraw","val2lin","lin2val","setExtremes","newMin","newMax","animation","eventArguments","axisBreak","call","setAxisTranslation","unitLength","breakArrayT","pointRangePadding","inBrk","userMin","max","userMax","start","value","move","size","breakSize","sort","a","staticScale","transA","minPixelPadding","minPointOffset","chart","Axis","H","GridAxisSide","dateFormats","defined","erase","merge","timeUnits","wrap","isObject","getMaxLabelDimensions","ticks","dimensions","width","height","pos","tick","labelHeight","labelWidth","label","getBBox","textStr","textPxLength","Math","round","type","treeGrid","mapOfPosToGridNode","treeDepth","labels","indentation","wrapGetOffset","proceed","grid","columnsFirst","side","isColumn","columns","reverse","column","getOffset","onAfterGetTitlePosition","e","gridOptions","enabled","axisTitle","axisHeight","horiz","left","axisLeft","offset","opposite","top","axisTop","axisWidth","tickSize","titleWidth","xOption","title","yOption","titleMargin","margin","titleFontSize","renderer","fontMetrics","f","offAxis","bottom","titlePosition","onAfterInit","applyGridOptions","align","categories","showLastLabel","labelRotation","rotation","minTickInterval","columnIndex","columnOptions","isInternal","linkedTo","scrollbar","axes","coll","onAfterRender","firstTick","styledMode","slotWidth","style","css","maxLabelDimensions","rightWall","destroy","isOuterAxis","axisLine","lineWidth","linePath","getLinePath","startPoint","endPoint","distance","tickLength","marginRight","upperBorderEndPoint","upperBorderPath","lowerBorderEndPoint","chartWidth","toPixels","tickmarkOffset","lowerBorderPath","upperBorder","renderBorder","attr","stroke","lineColor","animate","d","lowerBorder","axisLineExtra","showAxis","render","hasRendered","linkedParent","tickMark","lastTick","hiddenLabels","pop","element","show","hiddenMarks","hide","mark","isLast","onAfterSetAxisTranslation","tickInfo","userLabels","pointRange","dateTimeLabelFormats","unitName","range","count","tickInterval","onAfterSetOptions","gridAxisOptions","className","hour","list","day","week","month","borderWidth","padding","fontSize","text","reserveSpace","textOverflow","units","tickPixelInterval","tickPositioner","parentInfo","unitIdx","unit","counts","unitRange","time","getTimeTicks","startOfWeek","minPadding","maxPadding","tickWidth","onAfterSetOptions2","onAfterSetScale","setScale","onAfterTickSize","labelPadding","cellHeight","onChartAfterSetChartSize","setAxisSize","onDestroy","keepEvents","onInit","borderColor","tickColor","GridAxisAdditions","onTickAfterGetLabelPosition","reversed","labelOpts","tickPos","nextTickPos","index","crispCorr","right","chartHeight","translate","lblMetrics","useHTML","lines","h","onTickLabelFormat","ctx","pointCopy","isFirst","data","p","is","seriesTypes","gantt","pointClass","setGanttPointAliases","onTrimTicks","categoryAxis","firstPos","secondPos","lastPos","beforeLastPos","linkedMin","linkedMax","startLessThanMin","endMoreThanMin","startLessThanMax","endMoreThanMax","isLinked","startOnTick","endOnTick","wrapUnsquish","arguments","Array","parentAxis","thisIndex","lastIndex","inverted","otherAxis","extraBorderLine","addClass","add","axisGroup","zIndex","E","timestamp","dateFormat","charAt","W","Date","unitsToOmit","format","set","firstDay","get","thursday","valueOf","firstThursday","floor","toString","ChartClass","TickClass","extend","getNode","id","parent","level","mapOfIdToChildren","after","before","node","depth","descendants","end","children","map","child","childStart","NaN","childEnd","milestone","getTree","getListOfParents","ids","listOfParents","reduce","prev","curr","indexOf","adoptedByRoot","orphan","parentExcluded","removeEvent","onTickInit","TreeGridTickAdditions","wrapGetLabelPosition","labelOptions","step","lbOptions","isTreeGrid","result","symbol","wrapRenderLabel","collapsed","addClassName","removeClassName","tickGrid","tickOptions","icon","labelIcon","labelElement","axisGrid","axisOptions","symbolOptions","hasDescendants","isTreeGridElement","shouldRender","prefixClassName","prefixLevelClass","removeClass","RegExp","isCollapsed","renderLabelIcon","params","isNew","labelBox","xy","iconCenter","symbols","group","cursor","color","strokeWidth","translateX","translateY","styles","parentGroup","object","attachedTreeGridEvents","textDecoration","onTickHoverExit","toggleCollapse","tickProto","collapse","expand","posMappedNodes","Color","relativeLength","getColor","colorByPoint","colorIndexByPoint","colorIndex","mapOptionsToLevel","parentColor","parentColorIndex","colors","siblings","chartOptionsChart","colorCount","variateColor","colorVariation","parse","brighten","getLevelOptions","defaults","converted","levels","item","levelIsConstant","getNodeWidth","columnCount","nodeDistance","nodeWidth","plotSizeX","fraction","parseFloat","nDistance","Number","setTreeValues","tree","idRoot","nodeRoot","mapIdToNode","optionsPoint","childrenTotal","levelDynamic","name","newOptions","isLeaf","updateRootId","rootId","rootNode","GridAxis","Tree","TreeGridTick","TU","TickConstructor","isString","getBreakFromNode","collapseEnd","collapseStart","getTreeGridFromData","uniqueNames","numberOfSeries","collapsedNodes","mapOfIdToNode","uniqueNamesEnabled","posIterator","gridNode","parentNode","parentGridNode","nodes","updateYValuesAndTickPos","setValues","diff","seriesIndex","onBeforeRender","target","some","isDirtyData","arr","s","optionsToObject","hasNames","axisData","x2","setData","wrapGenerateTick","levelOptions","category","parameters","addLabel","wrapInit","TreeGridAxisAdditions","concat","n","fontWeight","wrapSetTickInterval","dataMin","dataMax","getTickPositions","linkedParentExtremes","getExtremes","wrapRedraw","axisProps","utils","setCollapsedStatus","dataPoint","roundedMin","roundedMax","ceil","TreeGridAxis","G","Chart","Series","Tick"],"mappings":"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"}